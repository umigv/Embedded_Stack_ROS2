options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: estop
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 20.0]
    rotation: 0
    state: enabled

blocks:
- name: cov_time
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: tab@2
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: int
    start: '0'
    step: '1'
    stop: '100'
    value: '50'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [744, 4.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 0.1e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [264, 24.0]
    rotation: 0
    state: enabled
- name: blocks_char_to_float_0
  id: blocks_char_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: '1'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1240, 192.0]
    rotation: 0
    state: true
- name: blocks_complex_to_float_0
  id: blocks_complex_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [936, 160.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_0
  id: blocks_complex_to_mag
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [600, 520.0]
    rotation: 0
    state: true
- name: blocks_peak_detector_xb_0
  id: blocks_peak_detector_xb
  parameters:
    affinity: ''
    alias: ''
    alpha: '0.001'
    comment: ''
    look_ahead: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    threshold_factor_fall: '0.03'
    threshold_factor_rise: '0.03'
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1072, 284.0]
    rotation: 0
    state: true
- name: dc_blocker_xx_1
  id: dc_blocker_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    length: '32'
    long_form: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: cc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 496.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nimport pmt\n\nclass\
      \ blk(gr.sync_block):  \n    \"\"\"Custom block to trigger estop with zero delay\
      \ and spike rejection\"\"\"\n\n    def __init__(self, threshold_high=300, threshold_low=280,\
      \ cooldown=0.1):\n        gr.sync_block.__init__(\n            self,\n     \
      \       name='Estop Trigger',  \n            in_sig=[np.complex64],  \n    \
      \        out_sig=[]              \n        )\n        self.threshold_high =\
      \ threshold_high  # Upper threshold for trigger\n        self.threshold_low\
      \ = threshold_low  # Lower threshold for reset (hysteresis)\n        self.cooldown\
      \ = cooldown  # Cooldown period (seconds)\n        self.estop_state = 1  # 1\
      \ = released, 0 = triggered\n        self.last_toggle_time = -self.cooldown\
      \  # Used to track the last trigger time\n        self.previous_sample = 0 \
      \ # Tracks the last sample to detect edges\n\n        # Force small input chunks\
      \ to reduce delay\n        self.set_min_noutput_items(1)  # Force processing\
      \ for small batches\n\n        # Register an output message port for GNU Radio\
      \ message passing\n        self.message_port_register_out(pmt.intern('estop_state'))\n\
      \n    def work(self, input_items, output_items):\n        current_time = gr.high_res_timer_now()\
      \ / 1e9  # Get current time in seconds\n        real_part = np.real(input_items[0])\
      \  # Extract real part of the input\n        \n        # **1. Edge Detection**\n\
      \        # Detect where the signal crosses from below threshold_high to above\
      \ threshold_high\n        crossing_edge_indices = np.where((real_part[:-1] <\
      \ self.threshold_high) & (real_part[1:] > self.threshold_high))[0]\n\n     \
      \   if len(crossing_edge_indices) > 0:  # If we detect a crossing edge\n   \
      \         if current_time - self.last_toggle_time >= self.cooldown:  # Check\
      \ cooldown logic\n                # **2. Trigger Estop**\n                self.estop_state\
      \ = 1 - self.estop_state  # Toggle between 0 (triggered) and 1 (released)\n\
      \                self.last_toggle_time = current_time  # Update last toggle\
      \ time\n\n                # **3. Send Estop State Message**\n              \
      \  self.message_port_pub(pmt.intern('estop_state'), pmt.from_bool(self.estop_state))\n\
      \n                if self.estop_state == 0:\n                    print(\"Estop\
      \ Triggered\")\n                else:\n                    print(\"Estop Released\"\
      )\n\n        # **4. Update Previous Sample**\n        self.previous_sample =\
      \ real_part[-1]  # Update the last sample\n\n        return len(input_items[0])\n\
      \n"
    affinity: ''
    alias: ''
    comment: ''
    cooldown: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    threshold_high: '500'
    threshold_low: '499'
  states:
    _io_cache: ('Estop Trigger', 'blk', [('threshold_high', '300'), ('threshold_low',
      '280'), ('cooldown', '0.1')], [('0', 'complex', 1)], [('estop_state', 'message',
      1)], 'Custom block to trigger estop with zero delay and spike rejection', ['cooldown',
      'threshold_high', 'threshold_low'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 644.0]
    rotation: 0
    state: disabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nimport time\nfrom gnuradio import gr\n\nclass\
      \ blk(gr.sync_block):  \n    \"\"\"Embedded Python Block to toggle a variable\
      \ on input value 1.0 with cooldown\"\"\"\n\n    def __init__(self):\n      \
      \  gr.sync_block.__init__(\n            self,\n            name='Toggle Variable\
      \ Block',  # Block name\n            in_sig=[np.float32],  # Correct input signal\
      \ type\n            out_sig=None          # No output signal\n        )\n  \
      \      self.toggled_variable = False  # Variable to toggle\n        self.last_toggle_time\
      \ = 0      # Last time the variable was toggled\n        self.cooldown = 2 \
      \             # Cooldown period in seconds\n\n    def work(self, input_items,\
      \ output_items):\n        current_time = time.time()  # Get the current time\n\
      \        for value in input_items[0]:  # Iterate through input float values\n\
      \            if value == 1.0 and (current_time - self.last_toggle_time) >= self.cooldown:\n\
      \                # Toggle the variable\n                self.toggled_variable\
      \ = not self.toggled_variable\n                self.last_toggle_time = current_time\
      \  # Update the last toggle time\n                \n                # Print\
      \ the toggled value\n                print(f\"Toggled Variable: {self.toggled_variable}\"\
      )\n        \n        return len(input_items[0])\n\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Toggle Variable Block', 'blk', [], [('0', 'float', 1)], [], 'Embedded
      Python Block to toggle a variable on input value 1.0 with cooldown', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1288, 608.0]
    rotation: 0
    state: disabled
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nimport time\nimport os\nfrom gnuradio import\
      \ gr\n\nclass blk(gr.sync_block):  \n    \"\"\"Embedded Python Block to toggle\
      \ an integer variable on input value 1.0 with cooldown and write to a shared\
      \ file\"\"\"\n\n    def __init__(self):\n        gr.sync_block.__init__(\n \
      \           self,\n            name='Toggle Integer to Shared File Block', \
      \ # Block name\n            in_sig=[np.float32],  # Accept float input signal\n\
      \            out_sig=None          # No output signal\n        )\n        self.toggled_value\
      \ = 1  # Initialize variable to 1\n        self.last_toggle_time = 0  # Track\
      \ the last toggle time\n        self.cooldown = 2  # Cooldown period in seconds\n\
      \        self.file_path = \"/tmp/estop_value.txt\"  # Shared file location\n\
      \n        # Write the initial value to the file\n        try:\n            with\
      \ open(self.file_path, 'w') as f:\n                f.write(f\"{self.toggled_value}\\\
      n\")\n            print(f\"Initial value written to file: {self.toggled_value}\"\
      )\n        except IOError as e:\n            print(f\"Error writing initial\
      \ value to file: {e}\")\n\n    def work(self, input_items, output_items):\n\
      \        current_time = time.time()  # Get the current time\n\n        for value\
      \ in input_items[0]:  # Iterate through input float values\n            if value\
      \ == 1.0 and (current_time - self.last_toggle_time) >= self.cooldown:\n    \
      \            # Toggle the integer value between 0 and 1\n                self.toggled_value\
      \ = 1 if self.toggled_value == 0 else 0\n                self.last_toggle_time\
      \ = current_time  # Update the last toggle time\n\n                # Write the\
      \ toggled integer value to the shared file\n                try:\n         \
      \           with open(self.file_path, 'w') as f:\n                        f.write(f\"\
      {self.toggled_value}\\n\")\n                    print(f\"Toggled value written\
      \ to file: {self.toggled_value}\")\n                except IOError as e:\n \
      \                   print(f\"Error writing to file: {e}\")\n\n        return\
      \ len(input_items[0])\n\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Toggle Integer to Shared File Block', 'blk', [], [('0', 'float',
      1)], [], 'Embedded Python Block to toggle an integer variable on input value
      1.0 with cooldown and write to a shared file', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1312, 464.0]
    rotation: 0
    state: enabled
- name: freq_xlating_fir_filter_xxx_0
  id: freq_xlating_fir_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    center_freq: '0'
    comment: ''
    decim: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    taps: np.arange(cov_time)
    type: fcf
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [744, 364.0]
    rotation: 0
    state: true
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import numpy as np
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [424, 24.0]
    rotation: 0
    state: true
- name: low_pass_filter_0
  id: low_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    cutoff_freq: 50e3
    decim: '1'
    gain: '1'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: fir_filter_ccf
    width: 50e3
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 296.0]
    rotation: 0
    state: true
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: tab@2
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '1024'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1328, 20.0]
    rotation: 0
    state: disabled
- name: qtgui_time_sink_x_1
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'True'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'True'
    entags: 'True'
    grid: 'False'
    gui_hint: tab@1
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '0'
    marker10: '-1'
    marker2: '1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '1024'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '500'
    ymin: '100'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1040, 636.0]
    rotation: 0
    state: disabled
- name: qtgui_time_sink_x_2
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'True'
    entags: 'True'
    grid: 'False'
    gui_hint: tab@0
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '0'
    marker10: '-1'
    marker2: '3'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '1024'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [768, 564.0]
    rotation: 0
    state: true
- name: rtlsdr_source_0
  id: rtlsdr_source
  parameters:
    affinity: ''
    alias: ''
    ant0: ''
    ant1: ''
    ant10: ''
    ant11: ''
    ant12: ''
    ant13: ''
    ant14: ''
    ant15: ''
    ant16: ''
    ant17: ''
    ant18: ''
    ant19: ''
    ant2: ''
    ant20: ''
    ant21: ''
    ant22: ''
    ant23: ''
    ant24: ''
    ant25: ''
    ant26: ''
    ant27: ''
    ant28: ''
    ant29: ''
    ant3: ''
    ant30: ''
    ant31: ''
    ant4: ''
    ant5: ''
    ant6: ''
    ant7: ''
    ant8: ''
    ant9: ''
    args: '""'
    bb_gain0: '30'
    bb_gain1: '20'
    bb_gain10: '20'
    bb_gain11: '20'
    bb_gain12: '20'
    bb_gain13: '20'
    bb_gain14: '20'
    bb_gain15: '20'
    bb_gain16: '20'
    bb_gain17: '20'
    bb_gain18: '20'
    bb_gain19: '20'
    bb_gain2: '20'
    bb_gain20: '20'
    bb_gain21: '20'
    bb_gain22: '20'
    bb_gain23: '20'
    bb_gain24: '20'
    bb_gain25: '20'
    bb_gain26: '20'
    bb_gain27: '20'
    bb_gain28: '20'
    bb_gain29: '20'
    bb_gain3: '20'
    bb_gain30: '20'
    bb_gain31: '20'
    bb_gain4: '20'
    bb_gain5: '20'
    bb_gain6: '20'
    bb_gain7: '20'
    bb_gain8: '20'
    bb_gain9: '20'
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    corr0: '46'
    corr1: '0'
    corr10: '0'
    corr11: '0'
    corr12: '0'
    corr13: '0'
    corr14: '0'
    corr15: '0'
    corr16: '0'
    corr17: '0'
    corr18: '0'
    corr19: '0'
    corr2: '0'
    corr20: '0'
    corr21: '0'
    corr22: '0'
    corr23: '0'
    corr24: '0'
    corr25: '0'
    corr26: '0'
    corr27: '0'
    corr28: '0'
    corr29: '0'
    corr3: '0'
    corr30: '0'
    corr31: '0'
    corr4: '0'
    corr5: '0'
    corr6: '0'
    corr7: '0'
    corr8: '0'
    corr9: '0'
    dc_offset_mode0: '0'
    dc_offset_mode1: '0'
    dc_offset_mode10: '0'
    dc_offset_mode11: '0'
    dc_offset_mode12: '0'
    dc_offset_mode13: '0'
    dc_offset_mode14: '0'
    dc_offset_mode15: '0'
    dc_offset_mode16: '0'
    dc_offset_mode17: '0'
    dc_offset_mode18: '0'
    dc_offset_mode19: '0'
    dc_offset_mode2: '0'
    dc_offset_mode20: '0'
    dc_offset_mode21: '0'
    dc_offset_mode22: '0'
    dc_offset_mode23: '0'
    dc_offset_mode24: '0'
    dc_offset_mode25: '0'
    dc_offset_mode26: '0'
    dc_offset_mode27: '0'
    dc_offset_mode28: '0'
    dc_offset_mode29: '0'
    dc_offset_mode3: '0'
    dc_offset_mode30: '0'
    dc_offset_mode31: '0'
    dc_offset_mode4: '0'
    dc_offset_mode5: '0'
    dc_offset_mode6: '0'
    dc_offset_mode7: '0'
    dc_offset_mode8: '0'
    dc_offset_mode9: '0'
    freq0: 433.96e6
    freq1: 100e6
    freq10: 100e6
    freq11: 100e6
    freq12: 100e6
    freq13: 100e6
    freq14: 100e6
    freq15: 100e6
    freq16: 100e6
    freq17: 100e6
    freq18: 100e6
    freq19: 100e6
    freq2: 100e6
    freq20: 100e6
    freq21: 100e6
    freq22: 100e6
    freq23: 100e6
    freq24: 100e6
    freq25: 100e6
    freq26: 100e6
    freq27: 100e6
    freq28: 100e6
    freq29: 100e6
    freq3: 100e6
    freq30: 100e6
    freq31: 100e6
    freq4: 100e6
    freq5: 100e6
    freq6: 100e6
    freq7: 100e6
    freq8: 100e6
    freq9: 100e6
    gain0: '20'
    gain1: '10'
    gain10: '10'
    gain11: '10'
    gain12: '10'
    gain13: '10'
    gain14: '10'
    gain15: '10'
    gain16: '10'
    gain17: '10'
    gain18: '10'
    gain19: '10'
    gain2: '10'
    gain20: '10'
    gain21: '10'
    gain22: '10'
    gain23: '10'
    gain24: '10'
    gain25: '10'
    gain26: '10'
    gain27: '10'
    gain28: '10'
    gain29: '10'
    gain3: '10'
    gain30: '10'
    gain31: '10'
    gain4: '10'
    gain5: '10'
    gain6: '10'
    gain7: '10'
    gain8: '10'
    gain9: '10'
    gain_mode0: 'True'
    gain_mode1: 'False'
    gain_mode10: 'False'
    gain_mode11: 'False'
    gain_mode12: 'False'
    gain_mode13: 'False'
    gain_mode14: 'False'
    gain_mode15: 'False'
    gain_mode16: 'False'
    gain_mode17: 'False'
    gain_mode18: 'False'
    gain_mode19: 'False'
    gain_mode2: 'False'
    gain_mode20: 'False'
    gain_mode21: 'False'
    gain_mode22: 'False'
    gain_mode23: 'False'
    gain_mode24: 'False'
    gain_mode25: 'False'
    gain_mode26: 'False'
    gain_mode27: 'False'
    gain_mode28: 'False'
    gain_mode29: 'False'
    gain_mode3: 'False'
    gain_mode30: 'False'
    gain_mode31: 'False'
    gain_mode4: 'False'
    gain_mode5: 'False'
    gain_mode6: 'False'
    gain_mode7: 'False'
    gain_mode8: 'False'
    gain_mode9: 'False'
    if_gain0: '30'
    if_gain1: '20'
    if_gain10: '20'
    if_gain11: '20'
    if_gain12: '20'
    if_gain13: '20'
    if_gain14: '20'
    if_gain15: '20'
    if_gain16: '20'
    if_gain17: '20'
    if_gain18: '20'
    if_gain19: '20'
    if_gain2: '20'
    if_gain20: '20'
    if_gain21: '20'
    if_gain22: '20'
    if_gain23: '20'
    if_gain24: '20'
    if_gain25: '20'
    if_gain26: '20'
    if_gain27: '20'
    if_gain28: '20'
    if_gain29: '20'
    if_gain3: '20'
    if_gain30: '20'
    if_gain31: '20'
    if_gain4: '20'
    if_gain5: '20'
    if_gain6: '20'
    if_gain7: '20'
    if_gain8: '20'
    if_gain9: '20'
    iq_balance_mode0: '0'
    iq_balance_mode1: '0'
    iq_balance_mode10: '0'
    iq_balance_mode11: '0'
    iq_balance_mode12: '0'
    iq_balance_mode13: '0'
    iq_balance_mode14: '0'
    iq_balance_mode15: '0'
    iq_balance_mode16: '0'
    iq_balance_mode17: '0'
    iq_balance_mode18: '0'
    iq_balance_mode19: '0'
    iq_balance_mode2: '0'
    iq_balance_mode20: '0'
    iq_balance_mode21: '0'
    iq_balance_mode22: '0'
    iq_balance_mode23: '0'
    iq_balance_mode24: '0'
    iq_balance_mode25: '0'
    iq_balance_mode26: '0'
    iq_balance_mode27: '0'
    iq_balance_mode28: '0'
    iq_balance_mode29: '0'
    iq_balance_mode3: '0'
    iq_balance_mode30: '0'
    iq_balance_mode31: '0'
    iq_balance_mode4: '0'
    iq_balance_mode5: '0'
    iq_balance_mode6: '0'
    iq_balance_mode7: '0'
    iq_balance_mode8: '0'
    iq_balance_mode9: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    sample_rate: samp_rate
    sync: pc_clock
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [88, 164.0]
    rotation: 0
    state: true
- name: tab
  id: qtgui_tab_widget
  parameters:
    alias: ''
    comment: ''
    gui_hint: ''
    label0: Tab 0
    label1: Tab 1
    label10: Tab 10
    label11: Tab 11
    label12: Tab 12
    label13: Tab 13
    label14: Tab 14
    label15: Tab 15
    label16: Tab 16
    label17: Tab 17
    label18: Tab 18
    label19: Tab 19
    label2: Tab 2
    label3: Tab 3
    label4: Tab 4
    label5: Tab 5
    label6: Tab 6
    label7: Tab 7
    label8: Tab 8
    label9: Tab 9
    num_tabs: '3'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [544, 20.0]
    rotation: 0
    state: true

connections:
- [blocks_char_to_float_0, '0', epy_block_2, '0']
- [blocks_char_to_float_0, '0', qtgui_time_sink_x_0, '0']
- [blocks_complex_to_float_0, '0', blocks_peak_detector_xb_0, '0']
- [blocks_complex_to_mag_0, '0', freq_xlating_fir_filter_xxx_0, '0']
- [blocks_complex_to_mag_0, '0', qtgui_time_sink_x_2, '0']
- [blocks_peak_detector_xb_0, '0', blocks_char_to_float_0, '0']
- [dc_blocker_xx_1, '0', low_pass_filter_0, '0']
- [freq_xlating_fir_filter_xxx_0, '0', blocks_complex_to_float_0, '0']
- [freq_xlating_fir_filter_xxx_0, '0', qtgui_time_sink_x_1, '0']
- [low_pass_filter_0, '0', blocks_complex_to_mag_0, '0']
- [rtlsdr_source_0, '0', dc_blocker_xx_1, '0']

metadata:
  file_format: 1
