
uros_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012af8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd4  08012cc8  08012cc8  00022cc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801389c  0801389c  00030110  2**0
                  CONTENTS
  4 .ARM          00000008  0801389c  0801389c  0002389c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080138a4  080138a4  00030110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080138a4  080138a4  000238a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080138ac  080138ac  000238ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  080138b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e0c4  20000110  080139c0  00030110  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000e1d4  080139c0  0003e1d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ff0e  00000000  00000000  000301b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004785  00000000  00000000  000500c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019d0  00000000  00000000  00054850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013ee  00000000  00000000  00056220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000282d9  00000000  00000000  0005760e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f284  00000000  00000000  0007f8e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e87d2  00000000  00000000  0009eb6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007ab8  00000000  00000000  00187340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0018edf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000110 	.word	0x20000110
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012cb0 	.word	0x08012cb0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000114 	.word	0x20000114
 800020c:	08012cb0 	.word	0x08012cb0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_ldivmod>:
 80002e0:	b97b      	cbnz	r3, 8000302 <__aeabi_ldivmod+0x22>
 80002e2:	b972      	cbnz	r2, 8000302 <__aeabi_ldivmod+0x22>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bfbe      	ittt	lt
 80002e8:	2000      	movlt	r0, #0
 80002ea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ee:	e006      	blt.n	80002fe <__aeabi_ldivmod+0x1e>
 80002f0:	bf08      	it	eq
 80002f2:	2800      	cmpeq	r0, #0
 80002f4:	bf1c      	itt	ne
 80002f6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002fa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002fe:	f000 b9bb 	b.w	8000678 <__aeabi_idiv0>
 8000302:	f1ad 0c08 	sub.w	ip, sp, #8
 8000306:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030a:	2900      	cmp	r1, #0
 800030c:	db09      	blt.n	8000322 <__aeabi_ldivmod+0x42>
 800030e:	2b00      	cmp	r3, #0
 8000310:	db1a      	blt.n	8000348 <__aeabi_ldivmod+0x68>
 8000312:	f000 f84d 	bl	80003b0 <__udivmoddi4>
 8000316:	f8dd e004 	ldr.w	lr, [sp, #4]
 800031a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031e:	b004      	add	sp, #16
 8000320:	4770      	bx	lr
 8000322:	4240      	negs	r0, r0
 8000324:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000328:	2b00      	cmp	r3, #0
 800032a:	db1b      	blt.n	8000364 <__aeabi_ldivmod+0x84>
 800032c:	f000 f840 	bl	80003b0 <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	4252      	negs	r2, r2
 8000342:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000346:	4770      	bx	lr
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	f000 f82f 	bl	80003b0 <__udivmoddi4>
 8000352:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035a:	b004      	add	sp, #16
 800035c:	4240      	negs	r0, r0
 800035e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000362:	4770      	bx	lr
 8000364:	4252      	negs	r2, r2
 8000366:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036a:	f000 f821 	bl	80003b0 <__udivmoddi4>
 800036e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000376:	b004      	add	sp, #16
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000688:	f006 fc92 	bl	8006fb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800068c:	4b58      	ldr	r3, [pc, #352]	; (80007f0 <pvPortMallocMicroROS+0x174>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d101      	bne.n	8000698 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000694:	f000 f980 	bl	8000998 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000698:	4b56      	ldr	r3, [pc, #344]	; (80007f4 <pvPortMallocMicroROS+0x178>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4013      	ands	r3, r2
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	f040 808e 	bne.w	80007c2 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d01d      	beq.n	80006e8 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80006ac:	2208      	movs	r2, #8
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d014      	beq.n	80006e8 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f023 0307 	bic.w	r3, r3, #7
 80006c4:	3308      	adds	r3, #8
 80006c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d00a      	beq.n	80006e8 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006d6:	f383 8811 	msr	BASEPRI, r3
 80006da:	f3bf 8f6f 	isb	sy
 80006de:	f3bf 8f4f 	dsb	sy
 80006e2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006e4:	bf00      	nop
 80006e6:	e7fe      	b.n	80006e6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d069      	beq.n	80007c2 <pvPortMallocMicroROS+0x146>
 80006ee:	4b42      	ldr	r3, [pc, #264]	; (80007f8 <pvPortMallocMicroROS+0x17c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d864      	bhi.n	80007c2 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80006f8:	4b40      	ldr	r3, [pc, #256]	; (80007fc <pvPortMallocMicroROS+0x180>)
 80006fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80006fc:	4b3f      	ldr	r3, [pc, #252]	; (80007fc <pvPortMallocMicroROS+0x180>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000702:	e004      	b.n	800070e <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8000704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000706:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800070e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	429a      	cmp	r2, r3
 8000716:	d903      	bls.n	8000720 <pvPortMallocMicroROS+0xa4>
 8000718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d1f1      	bne.n	8000704 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000720:	4b33      	ldr	r3, [pc, #204]	; (80007f0 <pvPortMallocMicroROS+0x174>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000726:	429a      	cmp	r2, r3
 8000728:	d04b      	beq.n	80007c2 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800072a:	6a3b      	ldr	r3, [r7, #32]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2208      	movs	r2, #8
 8000730:	4413      	add	r3, r2
 8000732:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	6a3b      	ldr	r3, [r7, #32]
 800073a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800073c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073e:	685a      	ldr	r2, [r3, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	1ad2      	subs	r2, r2, r3
 8000744:	2308      	movs	r3, #8
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	429a      	cmp	r2, r3
 800074a:	d91f      	bls.n	800078c <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800074c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4413      	add	r3, r2
 8000752:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	f003 0307 	and.w	r3, r3, #7
 800075a:	2b00      	cmp	r3, #0
 800075c:	d00a      	beq.n	8000774 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 800075e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000762:	f383 8811 	msr	BASEPRI, r3
 8000766:	f3bf 8f6f 	isb	sy
 800076a:	f3bf 8f4f 	dsb	sy
 800076e:	613b      	str	r3, [r7, #16]
}
 8000770:	bf00      	nop
 8000772:	e7fe      	b.n	8000772 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000776:	685a      	ldr	r2, [r3, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	1ad2      	subs	r2, r2, r3
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000786:	69b8      	ldr	r0, [r7, #24]
 8000788:	f000 f968 	bl	8000a5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800078c:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <pvPortMallocMicroROS+0x17c>)
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	4a18      	ldr	r2, [pc, #96]	; (80007f8 <pvPortMallocMicroROS+0x17c>)
 8000798:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <pvPortMallocMicroROS+0x17c>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <pvPortMallocMicroROS+0x184>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d203      	bcs.n	80007ae <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <pvPortMallocMicroROS+0x17c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a15      	ldr	r2, [pc, #84]	; (8000800 <pvPortMallocMicroROS+0x184>)
 80007ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80007ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b0:	685a      	ldr	r2, [r3, #4]
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <pvPortMallocMicroROS+0x178>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	431a      	orrs	r2, r3
 80007b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80007bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007c2:	f006 fc03 	bl	8006fcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	f003 0307 	and.w	r3, r3, #7
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d00a      	beq.n	80007e6 <pvPortMallocMicroROS+0x16a>
	__asm volatile
 80007d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007d4:	f383 8811 	msr	BASEPRI, r3
 80007d8:	f3bf 8f6f 	isb	sy
 80007dc:	f3bf 8f4f 	dsb	sy
 80007e0:	60fb      	str	r3, [r7, #12]
}
 80007e2:	bf00      	nop
 80007e4:	e7fe      	b.n	80007e4 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 80007e6:	69fb      	ldr	r3, [r7, #28]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3728      	adds	r7, #40	; 0x28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20003d34 	.word	0x20003d34
 80007f4:	20003d40 	.word	0x20003d40
 80007f8:	20003d38 	.word	0x20003d38
 80007fc:	20003d2c 	.word	0x20003d2c
 8000800:	20003d3c 	.word	0x20003d3c

08000804 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d048      	beq.n	80008a8 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000816:	2308      	movs	r3, #8
 8000818:	425b      	negs	r3, r3
 800081a:	697a      	ldr	r2, [r7, #20]
 800081c:	4413      	add	r3, r2
 800081e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000824:	693b      	ldr	r3, [r7, #16]
 8000826:	685a      	ldr	r2, [r3, #4]
 8000828:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <vPortFreeMicroROS+0xac>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4013      	ands	r3, r2
 800082e:	2b00      	cmp	r3, #0
 8000830:	d10a      	bne.n	8000848 <vPortFreeMicroROS+0x44>
	__asm volatile
 8000832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000836:	f383 8811 	msr	BASEPRI, r3
 800083a:	f3bf 8f6f 	isb	sy
 800083e:	f3bf 8f4f 	dsb	sy
 8000842:	60fb      	str	r3, [r7, #12]
}
 8000844:	bf00      	nop
 8000846:	e7fe      	b.n	8000846 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d00a      	beq.n	8000866 <vPortFreeMicroROS+0x62>
	__asm volatile
 8000850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000854:	f383 8811 	msr	BASEPRI, r3
 8000858:	f3bf 8f6f 	isb	sy
 800085c:	f3bf 8f4f 	dsb	sy
 8000860:	60bb      	str	r3, [r7, #8]
}
 8000862:	bf00      	nop
 8000864:	e7fe      	b.n	8000864 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	685a      	ldr	r2, [r3, #4]
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <vPortFreeMicroROS+0xac>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4013      	ands	r3, r2
 8000870:	2b00      	cmp	r3, #0
 8000872:	d019      	beq.n	80008a8 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000874:	693b      	ldr	r3, [r7, #16]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d115      	bne.n	80008a8 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	685a      	ldr	r2, [r3, #4]
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <vPortFreeMicroROS+0xac>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	43db      	mvns	r3, r3
 8000886:	401a      	ands	r2, r3
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800088c:	f006 fb90 	bl	8006fb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	685a      	ldr	r2, [r3, #4]
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <vPortFreeMicroROS+0xb0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4413      	add	r3, r2
 800089a:	4a06      	ldr	r2, [pc, #24]	; (80008b4 <vPortFreeMicroROS+0xb0>)
 800089c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800089e:	6938      	ldr	r0, [r7, #16]
 80008a0:	f000 f8dc 	bl	8000a5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80008a4:	f006 fb92 	bl	8006fcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80008a8:	bf00      	nop
 80008aa:	3718      	adds	r7, #24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20003d40 	.word	0x20003d40
 80008b4:	20003d38 	.word	0x20003d38

080008b8 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80008b8:	b480      	push	{r7}
 80008ba:	b087      	sub	sp, #28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80008c4:	2308      	movs	r3, #8
 80008c6:	425b      	negs	r3, r3
 80008c8:	697a      	ldr	r2, [r7, #20]
 80008ca:	4413      	add	r3, r2
 80008cc:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	685a      	ldr	r2, [r3, #4]
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <getBlockSize+0x38>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	43db      	mvns	r3, r3
 80008dc:	4013      	ands	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]

	return count;
 80008e0:	68fb      	ldr	r3, [r7, #12]
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	371c      	adds	r7, #28
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	20003d40 	.word	0x20003d40

080008f4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80008fe:	f006 fb57 	bl	8006fb0 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000902:	6838      	ldr	r0, [r7, #0]
 8000904:	f7ff feba 	bl	800067c <pvPortMallocMicroROS>
 8000908:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d017      	beq.n	8000940 <pvPortReallocMicroROS+0x4c>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d014      	beq.n	8000940 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff ffce 	bl	80008b8 <getBlockSize>
 800091c:	4603      	mov	r3, r0
 800091e:	2208      	movs	r2, #8
 8000920:	1a9b      	subs	r3, r3, r2
 8000922:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000924:	683a      	ldr	r2, [r7, #0]
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	429a      	cmp	r2, r3
 800092a:	d201      	bcs.n	8000930 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	6879      	ldr	r1, [r7, #4]
 8000934:	68b8      	ldr	r0, [r7, #8]
 8000936:	f011 fac2 	bl	8011ebe <memcpy>

		vPortFreeMicroROS(pv);
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff ff62 	bl	8000804 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000940:	f006 fb44 	bl	8006fcc <xTaskResumeAll>

	return newmem;
 8000944:	68bb      	ldr	r3, [r7, #8]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b086      	sub	sp, #24
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000958:	f006 fb2a 	bl	8006fb0 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000966:	6978      	ldr	r0, [r7, #20]
 8000968:	f7ff fe88 	bl	800067c <pvPortMallocMicroROS>
 800096c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000972:	e004      	b.n	800097e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	1c5a      	adds	r2, r3, #1
 8000978:	613a      	str	r2, [r7, #16]
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	1e5a      	subs	r2, r3, #1
 8000982:	617a      	str	r2, [r7, #20]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d1f5      	bne.n	8000974 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000988:	f006 fb20 	bl	8006fcc <xTaskResumeAll>
  	return mem;
 800098c:	68fb      	ldr	r3, [r7, #12]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800099e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80009a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009a4:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <prvHeapInit+0xac>)
 80009a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d00c      	beq.n	80009cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	3307      	adds	r3, #7
 80009b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f023 0307 	bic.w	r3, r3, #7
 80009be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80009c0:	68ba      	ldr	r2, [r7, #8]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	4a1f      	ldr	r2, [pc, #124]	; (8000a44 <prvHeapInit+0xac>)
 80009c8:	4413      	add	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009d0:	4a1d      	ldr	r2, [pc, #116]	; (8000a48 <prvHeapInit+0xb0>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009d6:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <prvHeapInit+0xb0>)
 80009d8:	2200      	movs	r2, #0
 80009da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	4413      	add	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009e4:	2208      	movs	r2, #8
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	1a9b      	subs	r3, r3, r2
 80009ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f023 0307 	bic.w	r3, r3, #7
 80009f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	4a15      	ldr	r2, [pc, #84]	; (8000a4c <prvHeapInit+0xb4>)
 80009f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <prvHeapInit+0xb4>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2200      	movs	r2, #0
 8000a00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <prvHeapInit+0xb4>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	68fa      	ldr	r2, [r7, #12]
 8000a12:	1ad2      	subs	r2, r2, r3
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <prvHeapInit+0xb4>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <prvHeapInit+0xb8>)
 8000a26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	4a09      	ldr	r2, [pc, #36]	; (8000a54 <prvHeapInit+0xbc>)
 8000a2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <prvHeapInit+0xc0>)
 8000a32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a36:	601a      	str	r2, [r3, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	2000012c 	.word	0x2000012c
 8000a48:	20003d2c 	.word	0x20003d2c
 8000a4c:	20003d34 	.word	0x20003d34
 8000a50:	20003d3c 	.word	0x20003d3c
 8000a54:	20003d38 	.word	0x20003d38
 8000a58:	20003d40 	.word	0x20003d40

08000a5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a64:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <prvInsertBlockIntoFreeList+0xac>)
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	e002      	b.n	8000a70 <prvInsertBlockIntoFreeList+0x14>
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d8f7      	bhi.n	8000a6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	68ba      	ldr	r2, [r7, #8]
 8000a84:	4413      	add	r3, r2
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d108      	bne.n	8000a9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	685a      	ldr	r2, [r3, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	441a      	add	r2, r3
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	441a      	add	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d118      	bne.n	8000ae4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <prvInsertBlockIntoFreeList+0xb0>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d00d      	beq.n	8000ada <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	685a      	ldr	r2, [r3, #4]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	441a      	add	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	e008      	b.n	8000aec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <prvInsertBlockIntoFreeList+0xb0>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	e003      	b.n	8000aec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d002      	beq.n	8000afa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000afa:	bf00      	nop
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20003d2c 	.word	0x20003d2c
 8000b0c:	20003d34 	.word	0x20003d34

08000b10 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000b1e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b24:	4904      	ldr	r1, [pc, #16]	; (8000b38 <cubemx_transport_open+0x28>)
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	f003 fc3a 	bl	80043a0 <HAL_UART_Receive_DMA>
    return true;
 8000b2c:	2301      	movs	r3, #1
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20003d44 	.word	0x20003d44

08000b3c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000b4a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000b4c:	68f8      	ldr	r0, [r7, #12]
 8000b4e:	f003 fc4c 	bl	80043ea <HAL_UART_DMAStop>
    return true;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000b70:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b20      	cmp	r3, #32
 8000b7c:	d11c      	bne.n	8000bb8 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	461a      	mov	r2, r3
 8000b84:	68b9      	ldr	r1, [r7, #8]
 8000b86:	6978      	ldr	r0, [r7, #20]
 8000b88:	f003 fb9a 	bl	80042c0 <HAL_UART_Transmit_DMA>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000b90:	e002      	b.n	8000b98 <cubemx_transport_write+0x3c>
            osDelay(1);
 8000b92:	2001      	movs	r0, #1
 8000b94:	f005 f9c0 	bl	8005f18 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000b98:	7cfb      	ldrb	r3, [r7, #19]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d105      	bne.n	8000baa <cubemx_transport_write+0x4e>
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	2b20      	cmp	r3, #32
 8000ba8:	d1f3      	bne.n	8000b92 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8000baa:	7cfb      	ldrb	r3, [r7, #19]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d101      	bne.n	8000bb4 <cubemx_transport_write+0x58>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	e002      	b.n	8000bba <cubemx_transport_write+0x5e>
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	e000      	b.n	8000bba <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8000bb8:	2300      	movs	r3, #0
    }
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
 8000bd0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000bd8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bde:	b672      	cpsid	i
}
 8000be0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000bee:	4a1c      	ldr	r2, [pc, #112]	; (8000c60 <cubemx_transport_read+0x9c>)
 8000bf0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000bf2:	b662      	cpsie	i
}
 8000bf4:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f005 f98b 	bl	8005f18 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <cubemx_transport_read+0xa0>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <cubemx_transport_read+0x9c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d103      	bne.n	8000c16 <cubemx_transport_read+0x52>
 8000c0e:	69fa      	ldr	r2, [r7, #28]
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	dbe3      	blt.n	8000bde <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000c1a:	e011      	b.n	8000c40 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <cubemx_transport_read+0xa0>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	68b9      	ldr	r1, [r7, #8]
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	440b      	add	r3, r1
 8000c26:	4910      	ldr	r1, [pc, #64]	; (8000c68 <cubemx_transport_read+0xa4>)
 8000c28:	5c8a      	ldrb	r2, [r1, r2]
 8000c2a:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <cubemx_transport_read+0xa0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	3301      	adds	r3, #1
 8000c32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c36:	4a0b      	ldr	r2, [pc, #44]	; (8000c64 <cubemx_transport_read+0xa0>)
 8000c38:	6013      	str	r3, [r2, #0]
        wrote++;
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <cubemx_transport_read+0xa0>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <cubemx_transport_read+0x9c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d003      	beq.n	8000c54 <cubemx_transport_read+0x90>
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d3e3      	bcc.n	8000c1c <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8000c54:	69bb      	ldr	r3, [r7, #24]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3720      	adds	r7, #32
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20004548 	.word	0x20004548
 8000c64:	20004544 	.word	0x20004544
 8000c68:	20003d44 	.word	0x20003d44

08000c6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c70:	f000 febe 	bl	80019f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c74:	f000 f81c 	bl	8000cb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c78:	f000 f906 	bl	8000e88 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c7c:	f000 f8dc 	bl	8000e38 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000c80:	f000 f882 	bl	8000d88 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c84:	f000 f8aa 	bl	8000ddc <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c88:	f005 f86a 	bl	8005d60 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c8c:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <main+0x38>)
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <main+0x3c>)
 8000c92:	f005 f8af 	bl	8005df4 <osThreadNew>
 8000c96:	4603      	mov	r3, r0
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <main+0x40>)
 8000c9a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c9c:	f005 f884 	bl	8005da8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <main+0x34>
 8000ca2:	bf00      	nop
 8000ca4:	08012d44 	.word	0x08012d44
 8000ca8:	08000fe5 	.word	0x08000fe5
 8000cac:	20004b38 	.word	0x20004b38

08000cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b094      	sub	sp, #80	; 0x50
 8000cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	2234      	movs	r2, #52	; 0x34
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f010 ffde 	bl	8011c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc4:	f107 0308 	add.w	r3, r7, #8
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	4b29      	ldr	r3, [pc, #164]	; (8000d80 <SystemClock_Config+0xd0>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cdc:	4a28      	ldr	r2, [pc, #160]	; (8000d80 <SystemClock_Config+0xd0>)
 8000cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce4:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <SystemClock_Config+0xd0>)
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <SystemClock_Config+0xd4>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a22      	ldr	r2, [pc, #136]	; (8000d84 <SystemClock_Config+0xd4>)
 8000cfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <SystemClock_Config+0xd4>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d08:	603b      	str	r3, [r7, #0]
 8000d0a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d10:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d14:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d16:	2302      	movs	r3, #2
 8000d18:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d20:	2304      	movs	r3, #4
 8000d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d24:	23a8      	movs	r3, #168	; 0xa8
 8000d26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d2c:	2307      	movs	r3, #7
 8000d2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d30:	2302      	movs	r3, #2
 8000d32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f002 fd31 	bl	80037a0 <HAL_RCC_OscConfig>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d44:	f000 f9e0 	bl	8001108 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d48:	230f      	movs	r3, #15
 8000d4a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d5e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d60:	f107 0308 	add.w	r3, r7, #8
 8000d64:	2105      	movs	r1, #5
 8000d66:	4618      	mov	r0, r3
 8000d68:	f001 fe74 	bl	8002a54 <HAL_RCC_ClockConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000d72:	f000 f9c9 	bl	8001108 <Error_Handler>
  }
}
 8000d76:	bf00      	nop
 8000d78:	3750      	adds	r7, #80	; 0x50
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40007000 	.word	0x40007000

08000d88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <MX_USART3_UART_Init+0x4c>)
 8000d8e:	4a12      	ldr	r2, [pc, #72]	; (8000dd8 <MX_USART3_UART_Init+0x50>)
 8000d90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <MX_USART3_UART_Init+0x4c>)
 8000d94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <MX_USART3_UART_Init+0x4c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MX_USART3_UART_Init+0x4c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000da6:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <MX_USART3_UART_Init+0x4c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dac:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <MX_USART3_UART_Init+0x4c>)
 8000dae:	220c      	movs	r2, #12
 8000db0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <MX_USART3_UART_Init+0x4c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <MX_USART3_UART_Init+0x4c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <MX_USART3_UART_Init+0x4c>)
 8000dc0:	f003 fa2e 	bl	8004220 <HAL_UART_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000dca:	f000 f99d 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	2000454c 	.word	0x2000454c
 8000dd8:	40004800 	.word	0x40004800

08000ddc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000de2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000de6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dea:	2206      	movs	r2, #6
 8000dec:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000df0:	2202      	movs	r2, #2
 8000df2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e0c:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e12:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e20:	f001 fcdd 	bl	80027de <HAL_PCD_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e2a:	f000 f96d 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20004654 	.word	0x20004654

08000e38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <MX_DMA_Init+0x4c>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a0f      	ldr	r2, [pc, #60]	; (8000e84 <MX_DMA_Init+0x4c>)
 8000e48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <MX_DMA_Init+0x4c>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2105      	movs	r1, #5
 8000e5e:	200c      	movs	r0, #12
 8000e60:	f000 fee4 	bl	8001c2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e64:	200c      	movs	r0, #12
 8000e66:	f000 fefd 	bl	8001c64 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2105      	movs	r1, #5
 8000e6e:	200e      	movs	r0, #14
 8000e70:	f000 fedc 	bl	8001c2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e74:	200e      	movs	r0, #14
 8000e76:	f000 fef5 	bl	8001c64 <HAL_NVIC_EnableIRQ>

}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40023800 	.word	0x40023800

08000e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08c      	sub	sp, #48	; 0x30
 8000e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	f107 031c 	add.w	r3, r7, #28
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
 8000ea2:	4b4c      	ldr	r3, [pc, #304]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a4b      	ldr	r2, [pc, #300]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b49      	ldr	r3, [pc, #292]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	61bb      	str	r3, [r7, #24]
 8000eb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
 8000ebe:	4b45      	ldr	r3, [pc, #276]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a44      	ldr	r2, [pc, #272]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b42      	ldr	r3, [pc, #264]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	4b3e      	ldr	r3, [pc, #248]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a3d      	ldr	r2, [pc, #244]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b3b      	ldr	r3, [pc, #236]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b37      	ldr	r3, [pc, #220]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a36      	ldr	r2, [pc, #216]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000efc:	f043 0308 	orr.w	r3, r3, #8
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b34      	ldr	r3, [pc, #208]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	4b30      	ldr	r3, [pc, #192]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a2f      	ldr	r2, [pc, #188]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b2d      	ldr	r3, [pc, #180]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	4b29      	ldr	r3, [pc, #164]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a28      	ldr	r2, [pc, #160]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f244 0181 	movw	r1, #16513	; 0x4081
 8000f4c:	4822      	ldr	r0, [pc, #136]	; (8000fd8 <MX_GPIO_Init+0x150>)
 8000f4e:	f001 fc2d 	bl	80027ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2140      	movs	r1, #64	; 0x40
 8000f56:	4821      	ldr	r0, [pc, #132]	; (8000fdc <MX_GPIO_Init+0x154>)
 8000f58:	f001 fc28 	bl	80027ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	481b      	ldr	r0, [pc, #108]	; (8000fe0 <MX_GPIO_Init+0x158>)
 8000f74:	f001 fa86 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000f78:	f244 0381 	movw	r3, #16513	; 0x4081
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4811      	ldr	r0, [pc, #68]	; (8000fd8 <MX_GPIO_Init+0x150>)
 8000f92:	f001 fa77 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f96:	2340      	movs	r3, #64	; 0x40
 8000f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	480b      	ldr	r0, [pc, #44]	; (8000fdc <MX_GPIO_Init+0x154>)
 8000fae:	f001 fa69 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000fb2:	2380      	movs	r3, #128	; 0x80
 8000fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_GPIO_Init+0x154>)
 8000fc6:	f001 fa5d 	bl	8002484 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fca:	bf00      	nop
 8000fcc:	3730      	adds	r7, #48	; 0x30
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	40021800 	.word	0x40021800
 8000fe0:	40020800 	.word	0x40020800

08000fe4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000fe4:	b5b0      	push	{r4, r5, r7, lr}
 8000fe6:	b0a6      	sub	sp, #152	; 0x98
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */
	// micro-ROS configuration

	  rmw_uros_set_custom_transport(
 8000fec:	4b30      	ldr	r3, [pc, #192]	; (80010b0 <StartDefaultTask+0xcc>)
 8000fee:	9301      	str	r3, [sp, #4]
 8000ff0:	4b30      	ldr	r3, [pc, #192]	; (80010b4 <StartDefaultTask+0xd0>)
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	4b30      	ldr	r3, [pc, #192]	; (80010b8 <StartDefaultTask+0xd4>)
 8000ff6:	4a31      	ldr	r2, [pc, #196]	; (80010bc <StartDefaultTask+0xd8>)
 8000ff8:	4931      	ldr	r1, [pc, #196]	; (80010c0 <StartDefaultTask+0xdc>)
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f007 fe7c 	bl	8008cf8 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001000:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001004:	4618      	mov	r0, r3
 8001006:	f007 fdf9 	bl	8008bfc <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 800100a:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <StartDefaultTask+0xe0>)
 800100c:	67bb      	str	r3, [r7, #120]	; 0x78
	  freeRTOS_allocator.deallocate = microros_deallocate;
 800100e:	4b2e      	ldr	r3, [pc, #184]	; (80010c8 <StartDefaultTask+0xe4>)
 8001010:	67fb      	str	r3, [r7, #124]	; 0x7c
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001012:	4b2e      	ldr	r3, [pc, #184]	; (80010cc <StartDefaultTask+0xe8>)
 8001014:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001018:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <StartDefaultTask+0xec>)
 800101a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 800101e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001022:	4618      	mov	r0, r3
 8001024:	f007 fdf8 	bl	8008c18 <rcutils_set_default_allocator>
 8001028:	4603      	mov	r3, r0
 800102a:	f083 0301 	eor.w	r3, r3, #1
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b00      	cmp	r3, #0
 8001032:	d004      	beq.n	800103e <StartDefaultTask+0x5a>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8001034:	f240 118b 	movw	r1, #395	; 0x18b
 8001038:	4826      	ldr	r0, [pc, #152]	; (80010d4 <StartDefaultTask+0xf0>)
 800103a:	f010 fd5f 	bl	8011afc <iprintf>
	  std_msgs__msg__Int32 msg;
	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;

	  allocator = rcl_get_default_allocator();
 800103e:	463b      	mov	r3, r7
 8001040:	4618      	mov	r0, r3
 8001042:	f007 fe07 	bl	8008c54 <rcutils_get_default_allocator>
 8001046:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800104a:	463d      	mov	r5, r7
 800104c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001050:	682b      	ldr	r3, [r5, #0]
 8001052:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 8001054:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001058:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800105c:	2200      	movs	r2, #0
 800105e:	2100      	movs	r1, #0
 8001060:	f007 fd0a 	bl	8008a78 <rclc_support_init>

	  // create node
	  rclc_node_init_default(&node, "cubemx_node", "", &support);
 8001064:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001068:	f107 0020 	add.w	r0, r7, #32
 800106c:	4a1a      	ldr	r2, [pc, #104]	; (80010d8 <StartDefaultTask+0xf4>)
 800106e:	491b      	ldr	r1, [pc, #108]	; (80010dc <StartDefaultTask+0xf8>)
 8001070:	f007 fd4c 	bl	8008b0c <rclc_node_init_default>

	  // create publisher
	  rclc_publisher_init_default(
 8001074:	f008 fac6 	bl	8009604 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001078:	4602      	mov	r2, r0
 800107a:	f107 0120 	add.w	r1, r7, #32
 800107e:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <StartDefaultTask+0xfc>)
 8001084:	f007 fd7e 	bl	8008b84 <rclc_publisher_init_default>
	    &publisher,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	    "cubemx_publisher");

	  msg.data = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	673b      	str	r3, [r7, #112]	; 0x70

	  for(;;)
	  {
	    rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 800108c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001090:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001094:	2200      	movs	r2, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f007 fcca 	bl	8008a30 <rcl_publish>
 800109c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	    if (ret != RCL_RET_OK)
	    {
	      printf("Error publishing (line %d)\n", __LINE__);
	    }
		*/
	    msg.data++;
 80010a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010a2:	3301      	adds	r3, #1
 80010a4:	673b      	str	r3, [r7, #112]	; 0x70
	    osDelay(10);
 80010a6:	200a      	movs	r0, #10
 80010a8:	f004 ff36 	bl	8005f18 <osDelay>
	  {
 80010ac:	e7ee      	b.n	800108c <StartDefaultTask+0xa8>
 80010ae:	bf00      	nop
 80010b0:	08000bc5 	.word	0x08000bc5
 80010b4:	08000b5d 	.word	0x08000b5d
 80010b8:	08000b3d 	.word	0x08000b3d
 80010bc:	08000b11 	.word	0x08000b11
 80010c0:	2000454c 	.word	0x2000454c
 80010c4:	08001115 	.word	0x08001115
 80010c8:	08001159 	.word	0x08001159
 80010cc:	08001191 	.word	0x08001191
 80010d0:	080011fd 	.word	0x080011fd
 80010d4:	08012cd4 	.word	0x08012cd4
 80010d8:	08012cfc 	.word	0x08012cfc
 80010dc:	08012d00 	.word	0x08012d00
 80010e0:	08012d0c 	.word	0x08012d0c

080010e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d101      	bne.n	80010fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010f6:	f000 fc9d 	bl	8001a34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40010000 	.word	0x40010000

08001108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800110c:	b672      	cpsid	i
}
 800110e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001110:	e7fe      	b.n	8001110 <Error_Handler+0x8>
	...

08001114 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <microros_allocate+0x3c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4413      	add	r3, r2
 8001128:	461a      	mov	r2, r3
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <microros_allocate+0x3c>)
 800112c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <microros_allocate+0x40>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4413      	add	r3, r2
 8001138:	461a      	mov	r2, r3
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <microros_allocate+0x40>)
 800113c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff fa9c 	bl	800067c <pvPortMallocMicroROS>
 8001144:	4603      	mov	r3, r0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20004b3c 	.word	0x20004b3c
 8001154:	20004b40 	.word	0x20004b40

08001158 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d00c      	beq.n	8001182 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff fba5 	bl	80008b8 <getBlockSize>
 800116e:	4603      	mov	r3, r0
 8001170:	4a06      	ldr	r2, [pc, #24]	; (800118c <microros_deallocate+0x34>)
 8001172:	6812      	ldr	r2, [r2, #0]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	461a      	mov	r2, r3
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <microros_deallocate+0x34>)
 800117a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff fb41 	bl	8000804 <vPortFreeMicroROS>
  }
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20004b40 	.word	0x20004b40

08001190 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <microros_reallocate+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	4413      	add	r3, r2
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <microros_reallocate+0x64>)
 80011aa:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <microros_reallocate+0x68>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	4413      	add	r3, r2
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <microros_reallocate+0x68>)
 80011ba:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d104      	bne.n	80011cc <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80011c2:	68b8      	ldr	r0, [r7, #8]
 80011c4:	f7ff fa5a 	bl	800067c <pvPortMallocMicroROS>
 80011c8:	4603      	mov	r3, r0
 80011ca:	e00e      	b.n	80011ea <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	f7ff fb73 	bl	80008b8 <getBlockSize>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4a08      	ldr	r2, [pc, #32]	; (80011f8 <microros_reallocate+0x68>)
 80011d6:	6812      	ldr	r2, [r2, #0]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	461a      	mov	r2, r3
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <microros_reallocate+0x68>)
 80011de:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	f7ff fb86 	bl	80008f4 <pvPortReallocMicroROS>
 80011e8:	4603      	mov	r3, r0
  }
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20004b3c 	.word	0x20004b3c
 80011f8:	20004b40 	.word	0x20004b40

080011fc <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	fb02 f303 	mul.w	r3, r2, r3
 8001210:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <microros_zero_allocate+0x48>)
 8001212:	6812      	ldr	r2, [r2, #0]
 8001214:	4413      	add	r3, r2
 8001216:	461a      	mov	r2, r3
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <microros_zero_allocate+0x48>)
 800121a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	fb02 f303 	mul.w	r3, r2, r3
 8001224:	4a08      	ldr	r2, [pc, #32]	; (8001248 <microros_zero_allocate+0x4c>)
 8001226:	6812      	ldr	r2, [r2, #0]
 8001228:	4413      	add	r3, r2
 800122a:	461a      	mov	r2, r3
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <microros_zero_allocate+0x4c>)
 800122e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001230:	68b9      	ldr	r1, [r7, #8]
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f7ff fb8b 	bl	800094e <pvPortCallocMicroROS>
 8001238:	4603      	mov	r3, r0
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20004b3c 	.word	0x20004b3c
 8001248:	20004b40 	.word	0x20004b40
 800124c:	00000000 	.word	0x00000000

08001250 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001250:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001262:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001266:	a320      	add	r3, pc, #128	; (adr r3, 80012e8 <UTILS_NanosecondsToTimespec+0x98>)
 8001268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126c:	f7ff f838 	bl	80002e0 <__aeabi_ldivmod>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800127a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800127e:	a31a      	add	r3, pc, #104	; (adr r3, 80012e8 <UTILS_NanosecondsToTimespec+0x98>)
 8001280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001284:	f7ff f82c 	bl	80002e0 <__aeabi_ldivmod>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	2b00      	cmp	r3, #0
 8001292:	da20      	bge.n	80012d6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	4a11      	ldr	r2, [pc, #68]	; (80012e0 <UTILS_NanosecondsToTimespec+0x90>)
 800129a:	fb82 1203 	smull	r1, r2, r2, r3
 800129e:	1712      	asrs	r2, r2, #28
 80012a0:	17db      	asrs	r3, r3, #31
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	3301      	adds	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ae:	6979      	ldr	r1, [r7, #20]
 80012b0:	17c8      	asrs	r0, r1, #31
 80012b2:	460c      	mov	r4, r1
 80012b4:	4605      	mov	r5, r0
 80012b6:	ebb2 0804 	subs.w	r8, r2, r4
 80012ba:	eb63 0905 	sbc.w	r9, r3, r5
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	4906      	ldr	r1, [pc, #24]	; (80012e4 <UTILS_NanosecondsToTimespec+0x94>)
 80012cc:	fb01 f303 	mul.w	r3, r1, r3
 80012d0:	441a      	add	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	609a      	str	r2, [r3, #8]
    }
}
 80012d6:	bf00      	nop
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012e0:	44b82fa1 	.word	0x44b82fa1
 80012e4:	3b9aca00 	.word	0x3b9aca00
 80012e8:	3b9aca00 	.word	0x3b9aca00
 80012ec:	00000000 	.word	0x00000000

080012f0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80012f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012f4:	b08e      	sub	sp, #56	; 0x38
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6278      	str	r0, [r7, #36]	; 0x24
 80012fa:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80012fc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001300:	2300      	movs	r3, #0
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	f04f 0300 	mov.w	r3, #0
 800130e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001312:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001316:	4618      	mov	r0, r3
 8001318:	f006 f8d8 	bl	80074cc <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800131c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800131e:	17da      	asrs	r2, r3, #31
 8001320:	61bb      	str	r3, [r7, #24]
 8001322:	61fa      	str	r2, [r7, #28]
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	f04f 0300 	mov.w	r3, #0
 800132c:	69b9      	ldr	r1, [r7, #24]
 800132e:	000b      	movs	r3, r1
 8001330:	2200      	movs	r2, #0
 8001332:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001338:	2200      	movs	r2, #0
 800133a:	461c      	mov	r4, r3
 800133c:	4615      	mov	r5, r2
 800133e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001342:	1911      	adds	r1, r2, r4
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	416b      	adcs	r3, r5
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800134e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001352:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	f04f 0400 	mov.w	r4, #0
 800135e:	f04f 0500 	mov.w	r5, #0
 8001362:	015d      	lsls	r5, r3, #5
 8001364:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001368:	0154      	lsls	r4, r2, #5
 800136a:	4622      	mov	r2, r4
 800136c:	462b      	mov	r3, r5
 800136e:	ebb2 0800 	subs.w	r8, r2, r0
 8001372:	eb63 0901 	sbc.w	r9, r3, r1
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	f04f 0300 	mov.w	r3, #0
 800137e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001382:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001386:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800138a:	4690      	mov	r8, r2
 800138c:	4699      	mov	r9, r3
 800138e:	eb18 0a00 	adds.w	sl, r8, r0
 8001392:	eb49 0b01 	adc.w	fp, r9, r1
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	f04f 0300 	mov.w	r3, #0
 800139e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80013a2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80013a6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80013aa:	ebb2 040a 	subs.w	r4, r2, sl
 80013ae:	603c      	str	r4, [r7, #0]
 80013b0:	eb63 030b 	sbc.w	r3, r3, fp
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80013ba:	4623      	mov	r3, r4
 80013bc:	181b      	adds	r3, r3, r0
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	462b      	mov	r3, r5
 80013c2:	eb41 0303 	adc.w	r3, r1, r3
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	6a3a      	ldr	r2, [r7, #32]
 80013ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013ce:	f7ff ff3f 	bl	8001250 <UTILS_NanosecondsToTimespec>

    return 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	4618      	mov	r0, r3
 80013d6:	3738      	adds	r7, #56	; 0x38
 80013d8:	46bd      	mov	sp, r7
 80013da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080013e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_MspInit+0x54>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	4a11      	ldr	r2, [pc, #68]	; (8001434 <HAL_MspInit+0x54>)
 80013f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f4:	6453      	str	r3, [r2, #68]	; 0x44
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <HAL_MspInit+0x54>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_MspInit+0x54>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <HAL_MspInit+0x54>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <HAL_MspInit+0x54>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	210f      	movs	r1, #15
 8001422:	f06f 0001 	mvn.w	r0, #1
 8001426:	f000 fc01 	bl	8001c2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800

08001438 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a4d      	ldr	r2, [pc, #308]	; (800158c <HAL_UART_MspInit+0x154>)
 8001456:	4293      	cmp	r3, r2
 8001458:	f040 8094 	bne.w	8001584 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800145c:	2300      	movs	r3, #0
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	4b4b      	ldr	r3, [pc, #300]	; (8001590 <HAL_UART_MspInit+0x158>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	4a4a      	ldr	r2, [pc, #296]	; (8001590 <HAL_UART_MspInit+0x158>)
 8001466:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800146a:	6413      	str	r3, [r2, #64]	; 0x40
 800146c:	4b48      	ldr	r3, [pc, #288]	; (8001590 <HAL_UART_MspInit+0x158>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	4b44      	ldr	r3, [pc, #272]	; (8001590 <HAL_UART_MspInit+0x158>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	4a43      	ldr	r2, [pc, #268]	; (8001590 <HAL_UART_MspInit+0x158>)
 8001482:	f043 0308 	orr.w	r3, r3, #8
 8001486:	6313      	str	r3, [r2, #48]	; 0x30
 8001488:	4b41      	ldr	r3, [pc, #260]	; (8001590 <HAL_UART_MspInit+0x158>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	f003 0308 	and.w	r3, r3, #8
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001494:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a2:	2303      	movs	r3, #3
 80014a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014a6:	2307      	movs	r3, #7
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	4838      	ldr	r0, [pc, #224]	; (8001594 <HAL_UART_MspInit+0x15c>)
 80014b2:	f000 ffe7 	bl	8002484 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80014b6:	4b38      	ldr	r3, [pc, #224]	; (8001598 <HAL_UART_MspInit+0x160>)
 80014b8:	4a38      	ldr	r2, [pc, #224]	; (800159c <HAL_UART_MspInit+0x164>)
 80014ba:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80014bc:	4b36      	ldr	r3, [pc, #216]	; (8001598 <HAL_UART_MspInit+0x160>)
 80014be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014c2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014c4:	4b34      	ldr	r3, [pc, #208]	; (8001598 <HAL_UART_MspInit+0x160>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ca:	4b33      	ldr	r3, [pc, #204]	; (8001598 <HAL_UART_MspInit+0x160>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014d0:	4b31      	ldr	r3, [pc, #196]	; (8001598 <HAL_UART_MspInit+0x160>)
 80014d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014d6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014d8:	4b2f      	ldr	r3, [pc, #188]	; (8001598 <HAL_UART_MspInit+0x160>)
 80014da:	2200      	movs	r2, #0
 80014dc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014de:	4b2e      	ldr	r3, [pc, #184]	; (8001598 <HAL_UART_MspInit+0x160>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80014e4:	4b2c      	ldr	r3, [pc, #176]	; (8001598 <HAL_UART_MspInit+0x160>)
 80014e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ea:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014ec:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <HAL_UART_MspInit+0x160>)
 80014ee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014f2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014f4:	4b28      	ldr	r3, [pc, #160]	; (8001598 <HAL_UART_MspInit+0x160>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80014fa:	4827      	ldr	r0, [pc, #156]	; (8001598 <HAL_UART_MspInit+0x160>)
 80014fc:	f000 fbc0 	bl	8001c80 <HAL_DMA_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8001506:	f7ff fdff 	bl	8001108 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a22      	ldr	r2, [pc, #136]	; (8001598 <HAL_UART_MspInit+0x160>)
 800150e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001510:	4a21      	ldr	r2, [pc, #132]	; (8001598 <HAL_UART_MspInit+0x160>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001516:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <HAL_UART_MspInit+0x168>)
 8001518:	4a22      	ldr	r2, [pc, #136]	; (80015a4 <HAL_UART_MspInit+0x16c>)
 800151a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800151c:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <HAL_UART_MspInit+0x168>)
 800151e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001522:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001524:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <HAL_UART_MspInit+0x168>)
 8001526:	2240      	movs	r2, #64	; 0x40
 8001528:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800152a:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <HAL_UART_MspInit+0x168>)
 800152c:	2200      	movs	r2, #0
 800152e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <HAL_UART_MspInit+0x168>)
 8001532:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001536:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_UART_MspInit+0x168>)
 800153a:	2200      	movs	r2, #0
 800153c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <HAL_UART_MspInit+0x168>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001544:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <HAL_UART_MspInit+0x168>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_UART_MspInit+0x168>)
 800154c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001550:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <HAL_UART_MspInit+0x168>)
 8001554:	2200      	movs	r2, #0
 8001556:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001558:	4811      	ldr	r0, [pc, #68]	; (80015a0 <HAL_UART_MspInit+0x168>)
 800155a:	f000 fb91 	bl	8001c80 <HAL_DMA_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8001564:	f7ff fdd0 	bl	8001108 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a0d      	ldr	r2, [pc, #52]	; (80015a0 <HAL_UART_MspInit+0x168>)
 800156c:	639a      	str	r2, [r3, #56]	; 0x38
 800156e:	4a0c      	ldr	r2, [pc, #48]	; (80015a0 <HAL_UART_MspInit+0x168>)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001574:	2200      	movs	r2, #0
 8001576:	2105      	movs	r1, #5
 8001578:	2027      	movs	r0, #39	; 0x27
 800157a:	f000 fb57 	bl	8001c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800157e:	2027      	movs	r0, #39	; 0x27
 8001580:	f000 fb70 	bl	8001c64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001584:	bf00      	nop
 8001586:	3728      	adds	r7, #40	; 0x28
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40004800 	.word	0x40004800
 8001590:	40023800 	.word	0x40023800
 8001594:	40020c00 	.word	0x40020c00
 8001598:	20004594 	.word	0x20004594
 800159c:	40026028 	.word	0x40026028
 80015a0:	200045f4 	.word	0x200045f4
 80015a4:	40026058 	.word	0x40026058

080015a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b0a0      	sub	sp, #128	; 0x80
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c0:	f107 0310 	add.w	r3, r7, #16
 80015c4:	225c      	movs	r2, #92	; 0x5c
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f010 fb59 	bl	8011c80 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015d6:	d14e      	bne.n	8001676 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80015d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015dc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80015de:	2300      	movs	r3, #0
 80015e0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e2:	f107 0310 	add.w	r3, r7, #16
 80015e6:	4618      	mov	r0, r3
 80015e8:	f001 fb80 	bl	8002cec <HAL_RCCEx_PeriphCLKConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80015f2:	f7ff fd89 	bl	8001108 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	4b21      	ldr	r3, [pc, #132]	; (8001680 <HAL_PCD_MspInit+0xd8>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a20      	ldr	r2, [pc, #128]	; (8001680 <HAL_PCD_MspInit+0xd8>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <HAL_PCD_MspInit+0xd8>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001612:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001616:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001624:	230a      	movs	r3, #10
 8001626:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001628:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800162c:	4619      	mov	r1, r3
 800162e:	4815      	ldr	r0, [pc, #84]	; (8001684 <HAL_PCD_MspInit+0xdc>)
 8001630:	f000 ff28 	bl	8002484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001638:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163a:	2300      	movs	r3, #0
 800163c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001642:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001646:	4619      	mov	r1, r3
 8001648:	480e      	ldr	r0, [pc, #56]	; (8001684 <HAL_PCD_MspInit+0xdc>)
 800164a:	f000 ff1b 	bl	8002484 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800164e:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <HAL_PCD_MspInit+0xd8>)
 8001650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001652:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <HAL_PCD_MspInit+0xd8>)
 8001654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001658:	6353      	str	r3, [r2, #52]	; 0x34
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <HAL_PCD_MspInit+0xd8>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	4a07      	ldr	r2, [pc, #28]	; (8001680 <HAL_PCD_MspInit+0xd8>)
 8001664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001668:	6453      	str	r3, [r2, #68]	; 0x44
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <HAL_PCD_MspInit+0xd8>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001676:	bf00      	nop
 8001678:	3780      	adds	r7, #128	; 0x80
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800
 8001684:	40020000 	.word	0x40020000

08001688 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08c      	sub	sp, #48	; 0x30
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001690:	2300      	movs	r3, #0
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001698:	2300      	movs	r3, #0
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	4b2f      	ldr	r3, [pc, #188]	; (800175c <HAL_InitTick+0xd4>)
 800169e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a0:	4a2e      	ldr	r2, [pc, #184]	; (800175c <HAL_InitTick+0xd4>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6453      	str	r3, [r2, #68]	; 0x44
 80016a8:	4b2c      	ldr	r3, [pc, #176]	; (800175c <HAL_InitTick+0xd4>)
 80016aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016b4:	f107 020c 	add.w	r2, r7, #12
 80016b8:	f107 0310 	add.w	r3, r7, #16
 80016bc:	4611      	mov	r1, r2
 80016be:	4618      	mov	r0, r3
 80016c0:	f001 fae2 	bl	8002c88 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80016c4:	f001 facc 	bl	8002c60 <HAL_RCC_GetPCLK2Freq>
 80016c8:	4603      	mov	r3, r0
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d0:	4a23      	ldr	r2, [pc, #140]	; (8001760 <HAL_InitTick+0xd8>)
 80016d2:	fba2 2303 	umull	r2, r3, r2, r3
 80016d6:	0c9b      	lsrs	r3, r3, #18
 80016d8:	3b01      	subs	r3, #1
 80016da:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80016dc:	4b21      	ldr	r3, [pc, #132]	; (8001764 <HAL_InitTick+0xdc>)
 80016de:	4a22      	ldr	r2, [pc, #136]	; (8001768 <HAL_InitTick+0xe0>)
 80016e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80016e2:	4b20      	ldr	r3, [pc, #128]	; (8001764 <HAL_InitTick+0xdc>)
 80016e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016e8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80016ea:	4a1e      	ldr	r2, [pc, #120]	; (8001764 <HAL_InitTick+0xdc>)
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80016f0:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <HAL_InitTick+0xdc>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f6:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <HAL_InitTick+0xdc>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fc:	4b19      	ldr	r3, [pc, #100]	; (8001764 <HAL_InitTick+0xdc>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001702:	4818      	ldr	r0, [pc, #96]	; (8001764 <HAL_InitTick+0xdc>)
 8001704:	f002 faea 	bl	8003cdc <HAL_TIM_Base_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800170e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001712:	2b00      	cmp	r3, #0
 8001714:	d11b      	bne.n	800174e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001716:	4813      	ldr	r0, [pc, #76]	; (8001764 <HAL_InitTick+0xdc>)
 8001718:	f002 fb3a 	bl	8003d90 <HAL_TIM_Base_Start_IT>
 800171c:	4603      	mov	r3, r0
 800171e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001722:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001726:	2b00      	cmp	r3, #0
 8001728:	d111      	bne.n	800174e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800172a:	2019      	movs	r0, #25
 800172c:	f000 fa9a 	bl	8001c64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b0f      	cmp	r3, #15
 8001734:	d808      	bhi.n	8001748 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001736:	2200      	movs	r2, #0
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	2019      	movs	r0, #25
 800173c:	f000 fa76 	bl	8001c2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001740:	4a0a      	ldr	r2, [pc, #40]	; (800176c <HAL_InitTick+0xe4>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	e002      	b.n	800174e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800174e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001752:	4618      	mov	r0, r3
 8001754:	3730      	adds	r7, #48	; 0x30
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800
 8001760:	431bde83 	.word	0x431bde83
 8001764:	20004b44 	.word	0x20004b44
 8001768:	40010000 	.word	0x40010000
 800176c:	20000008 	.word	0x20000008

08001770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001774:	e7fe      	b.n	8001774 <NMI_Handler+0x4>

08001776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <HardFault_Handler+0x4>

0800177c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <MemManage_Handler+0x4>

08001782 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <BusFault_Handler+0x4>

08001788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <UsageFault_Handler+0x4>

0800178e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <DMA1_Stream1_IRQHandler+0x10>)
 80017a2:	f000 fc05 	bl	8001fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20004594 	.word	0x20004594

080017b0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <DMA1_Stream3_IRQHandler+0x10>)
 80017b6:	f000 fbfb 	bl	8001fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200045f4 	.word	0x200045f4

080017c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017ca:	f002 fb51 	bl	8003e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20004b44 	.word	0x20004b44

080017d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <USART3_IRQHandler+0x10>)
 80017de:	f002 fe83 	bl	80044e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	2000454c 	.word	0x2000454c

080017ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return 1;
 80017f0:	2301      	movs	r3, #1
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <_kill>:

int _kill(int pid, int sig)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001806:	f010 fb25 	bl	8011e54 <__errno>
 800180a:	4603      	mov	r3, r0
 800180c:	2216      	movs	r2, #22
 800180e:	601a      	str	r2, [r3, #0]
  return -1;
 8001810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001814:	4618      	mov	r0, r3
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <_exit>:

void _exit (int status)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001824:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff ffe7 	bl	80017fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800182e:	e7fe      	b.n	800182e <_exit+0x12>

08001830 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	e00a      	b.n	8001858 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001842:	f3af 8000 	nop.w
 8001846:	4601      	mov	r1, r0
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	60ba      	str	r2, [r7, #8]
 800184e:	b2ca      	uxtb	r2, r1
 8001850:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	3301      	adds	r3, #1
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbf0      	blt.n	8001842 <_read+0x12>
  }

  return len;
 8001860:	687b      	ldr	r3, [r7, #4]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b086      	sub	sp, #24
 800186e:	af00      	add	r7, sp, #0
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	e009      	b.n	8001890 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	60ba      	str	r2, [r7, #8]
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	3301      	adds	r3, #1
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	429a      	cmp	r2, r3
 8001896:	dbf1      	blt.n	800187c <_write+0x12>
  }
  return len;
 8001898:	687b      	ldr	r3, [r7, #4]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <_close>:

int _close(int file)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ca:	605a      	str	r2, [r3, #4]
  return 0;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <_isatty>:

int _isatty(int file)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018e2:	2301      	movs	r3, #1
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001914:	4a14      	ldr	r2, [pc, #80]	; (8001968 <_sbrk+0x5c>)
 8001916:	4b15      	ldr	r3, [pc, #84]	; (800196c <_sbrk+0x60>)
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001920:	4b13      	ldr	r3, [pc, #76]	; (8001970 <_sbrk+0x64>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d102      	bne.n	800192e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001928:	4b11      	ldr	r3, [pc, #68]	; (8001970 <_sbrk+0x64>)
 800192a:	4a12      	ldr	r2, [pc, #72]	; (8001974 <_sbrk+0x68>)
 800192c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800192e:	4b10      	ldr	r3, [pc, #64]	; (8001970 <_sbrk+0x64>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	429a      	cmp	r2, r3
 800193a:	d207      	bcs.n	800194c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800193c:	f010 fa8a 	bl	8011e54 <__errno>
 8001940:	4603      	mov	r3, r0
 8001942:	220c      	movs	r2, #12
 8001944:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800194a:	e009      	b.n	8001960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <_sbrk+0x64>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001952:	4b07      	ldr	r3, [pc, #28]	; (8001970 <_sbrk+0x64>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	4a05      	ldr	r2, [pc, #20]	; (8001970 <_sbrk+0x64>)
 800195c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800195e:	68fb      	ldr	r3, [r7, #12]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20020000 	.word	0x20020000
 800196c:	00000400 	.word	0x00000400
 8001970:	20004b90 	.word	0x20004b90
 8001974:	2000e1d8 	.word	0x2000e1d8

08001978 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <SystemInit+0x20>)
 800197e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001982:	4a05      	ldr	r2, [pc, #20]	; (8001998 <SystemInit+0x20>)
 8001984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800199c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019a0:	f7ff ffea 	bl	8001978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019a4:	480c      	ldr	r0, [pc, #48]	; (80019d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019a6:	490d      	ldr	r1, [pc, #52]	; (80019dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019a8:	4a0d      	ldr	r2, [pc, #52]	; (80019e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019ac:	e002      	b.n	80019b4 <LoopCopyDataInit>

080019ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b2:	3304      	adds	r3, #4

080019b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b8:	d3f9      	bcc.n	80019ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ba:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019bc:	4c0a      	ldr	r4, [pc, #40]	; (80019e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c0:	e001      	b.n	80019c6 <LoopFillZerobss>

080019c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c4:	3204      	adds	r2, #4

080019c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c8:	d3fb      	bcc.n	80019c2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80019ca:	f010 fa49 	bl	8011e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ce:	f7ff f94d 	bl	8000c6c <main>
  bx  lr    
 80019d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019dc:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 80019e0:	080138b0 	.word	0x080138b0
  ldr r2, =_sbss
 80019e4:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80019e8:	2000e1d4 	.word	0x2000e1d4

080019ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019ec:	e7fe      	b.n	80019ec <ADC_IRQHandler>
	...

080019f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019f4:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <HAL_Init+0x40>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0d      	ldr	r2, [pc, #52]	; (8001a30 <HAL_Init+0x40>)
 80019fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <HAL_Init+0x40>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <HAL_Init+0x40>)
 8001a06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <HAL_Init+0x40>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a07      	ldr	r2, [pc, #28]	; (8001a30 <HAL_Init+0x40>)
 8001a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a18:	2003      	movs	r0, #3
 8001a1a:	f000 f8fc 	bl	8001c16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a1e:	200f      	movs	r0, #15
 8001a20:	f7ff fe32 	bl	8001688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a24:	f7ff fcdc 	bl	80013e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023c00 	.word	0x40023c00

08001a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_IncTick+0x20>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_IncTick+0x24>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <HAL_IncTick+0x24>)
 8001a46:	6013      	str	r3, [r2, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	2000000c 	.word	0x2000000c
 8001a58:	20004b94 	.word	0x20004b94

08001a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <HAL_GetTick+0x14>)
 8001a62:	681b      	ldr	r3, [r3, #0]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20004b94 	.word	0x20004b94

08001a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a7c:	f7ff ffee 	bl	8001a5c <HAL_GetTick>
 8001a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a8c:	d005      	beq.n	8001a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <HAL_Delay+0x44>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	461a      	mov	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4413      	add	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a9a:	bf00      	nop
 8001a9c:	f7ff ffde 	bl	8001a5c <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d8f7      	bhi.n	8001a9c <HAL_Delay+0x28>
  {
  }
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	2000000c 	.word	0x2000000c

08001abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aee:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	60d3      	str	r3, [r2, #12]
}
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b08:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <__NVIC_GetPriorityGrouping+0x18>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	f003 0307 	and.w	r3, r3, #7
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	db0b      	blt.n	8001b4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	f003 021f 	and.w	r2, r3, #31
 8001b38:	4907      	ldr	r1, [pc, #28]	; (8001b58 <__NVIC_EnableIRQ+0x38>)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	095b      	lsrs	r3, r3, #5
 8001b40:	2001      	movs	r0, #1
 8001b42:	fa00 f202 	lsl.w	r2, r0, r2
 8001b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000e100 	.word	0xe000e100

08001b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	6039      	str	r1, [r7, #0]
 8001b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	db0a      	blt.n	8001b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	490c      	ldr	r1, [pc, #48]	; (8001ba8 <__NVIC_SetPriority+0x4c>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	0112      	lsls	r2, r2, #4
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	440b      	add	r3, r1
 8001b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b84:	e00a      	b.n	8001b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4908      	ldr	r1, [pc, #32]	; (8001bac <__NVIC_SetPriority+0x50>)
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	3b04      	subs	r3, #4
 8001b94:	0112      	lsls	r2, r2, #4
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	440b      	add	r3, r1
 8001b9a:	761a      	strb	r2, [r3, #24]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000e100 	.word	0xe000e100
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b089      	sub	sp, #36	; 0x24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f1c3 0307 	rsb	r3, r3, #7
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	bf28      	it	cs
 8001bce:	2304      	movcs	r3, #4
 8001bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d902      	bls.n	8001be0 <NVIC_EncodePriority+0x30>
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3b03      	subs	r3, #3
 8001bde:	e000      	b.n	8001be2 <NVIC_EncodePriority+0x32>
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43da      	mvns	r2, r3
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001c02:	43d9      	mvns	r1, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	4313      	orrs	r3, r2
         );
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3724      	adds	r7, #36	; 0x24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff ff4c 	bl	8001abc <__NVIC_SetPriorityGrouping>
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
 8001c38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c3e:	f7ff ff61 	bl	8001b04 <__NVIC_GetPriorityGrouping>
 8001c42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	68b9      	ldr	r1, [r7, #8]
 8001c48:	6978      	ldr	r0, [r7, #20]
 8001c4a:	f7ff ffb1 	bl	8001bb0 <NVIC_EncodePriority>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c54:	4611      	mov	r1, r2
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff ff80 	bl	8001b5c <__NVIC_SetPriority>
}
 8001c5c:	bf00      	nop
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ff54 	bl	8001b20 <__NVIC_EnableIRQ>
}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c8c:	f7ff fee6 	bl	8001a5c <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e099      	b.n	8001dd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0201 	bic.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cbc:	e00f      	b.n	8001cde <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cbe:	f7ff fecd 	bl	8001a5c <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b05      	cmp	r3, #5
 8001cca:	d908      	bls.n	8001cde <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e078      	b.n	8001dd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1e8      	bne.n	8001cbe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <HAL_DMA_Init+0x158>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d107      	bne.n	8001d48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	4313      	orrs	r3, r2
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f023 0307 	bic.w	r3, r3, #7
 8001d5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d117      	bne.n	8001da2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00e      	beq.n	8001da2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 fb01 	bl	800238c <DMA_CheckFifoParam>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d008      	beq.n	8001da2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2240      	movs	r2, #64	; 0x40
 8001d94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e016      	b.n	8001dd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 fab8 	bl	8002320 <DMA_CalcBaseAndBitshift>
 8001db0:	4603      	mov	r3, r0
 8001db2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db8:	223f      	movs	r2, #63	; 0x3f
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	f010803f 	.word	0xf010803f

08001ddc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_DMA_Start_IT+0x26>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e040      	b.n	8001e84 <HAL_DMA_Start_IT+0xa8>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d12f      	bne.n	8001e76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2202      	movs	r2, #2
 8001e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f000 fa4a 	bl	80022c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e34:	223f      	movs	r2, #63	; 0x3f
 8001e36:	409a      	lsls	r2, r3
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0216 	orr.w	r2, r2, #22
 8001e4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d007      	beq.n	8001e64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0208 	orr.w	r2, r2, #8
 8001e62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0201 	orr.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	e005      	b.n	8001e82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e9a:	f7ff fddf 	bl	8001a5c <HAL_GetTick>
 8001e9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d008      	beq.n	8001ebe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2280      	movs	r2, #128	; 0x80
 8001eb0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e052      	b.n	8001f64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0216 	bic.w	r2, r2, #22
 8001ecc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	695a      	ldr	r2, [r3, #20]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001edc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d103      	bne.n	8001eee <HAL_DMA_Abort+0x62>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d007      	beq.n	8001efe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0208 	bic.w	r2, r2, #8
 8001efc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0201 	bic.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f0e:	e013      	b.n	8001f38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f10:	f7ff fda4 	bl	8001a5c <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b05      	cmp	r3, #5
 8001f1c:	d90c      	bls.n	8001f38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2220      	movs	r2, #32
 8001f22:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2203      	movs	r2, #3
 8001f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e015      	b.n	8001f64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1e4      	bne.n	8001f10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4a:	223f      	movs	r2, #63	; 0x3f
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d004      	beq.n	8001f8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2280      	movs	r2, #128	; 0x80
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00c      	b.n	8001fa4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2205      	movs	r2, #5
 8001f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0201 	bic.w	r2, r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fbc:	4b8e      	ldr	r3, [pc, #568]	; (80021f8 <HAL_DMA_IRQHandler+0x248>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a8e      	ldr	r2, [pc, #568]	; (80021fc <HAL_DMA_IRQHandler+0x24c>)
 8001fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc6:	0a9b      	lsrs	r3, r3, #10
 8001fc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fda:	2208      	movs	r2, #8
 8001fdc:	409a      	lsls	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d01a      	beq.n	800201c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d013      	beq.n	800201c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0204 	bic.w	r2, r2, #4
 8002002:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002008:	2208      	movs	r2, #8
 800200a:	409a      	lsls	r2, r3
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002014:	f043 0201 	orr.w	r2, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002020:	2201      	movs	r2, #1
 8002022:	409a      	lsls	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4013      	ands	r3, r2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d012      	beq.n	8002052 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00b      	beq.n	8002052 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203e:	2201      	movs	r2, #1
 8002040:	409a      	lsls	r2, r3
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204a:	f043 0202 	orr.w	r2, r3, #2
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002056:	2204      	movs	r2, #4
 8002058:	409a      	lsls	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4013      	ands	r3, r2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d012      	beq.n	8002088 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00b      	beq.n	8002088 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002074:	2204      	movs	r2, #4
 8002076:	409a      	lsls	r2, r3
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002080:	f043 0204 	orr.w	r2, r3, #4
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208c:	2210      	movs	r2, #16
 800208e:	409a      	lsls	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4013      	ands	r3, r2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d043      	beq.n	8002120 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d03c      	beq.n	8002120 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020aa:	2210      	movs	r2, #16
 80020ac:	409a      	lsls	r2, r3
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d018      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d108      	bne.n	80020e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d024      	beq.n	8002120 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	4798      	blx	r3
 80020de:	e01f      	b.n	8002120 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01b      	beq.n	8002120 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	4798      	blx	r3
 80020f0:	e016      	b.n	8002120 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d107      	bne.n	8002110 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0208 	bic.w	r2, r2, #8
 800210e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002124:	2220      	movs	r2, #32
 8002126:	409a      	lsls	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 808f 	beq.w	8002250 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0310 	and.w	r3, r3, #16
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 8087 	beq.w	8002250 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002146:	2220      	movs	r2, #32
 8002148:	409a      	lsls	r2, r3
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b05      	cmp	r3, #5
 8002158:	d136      	bne.n	80021c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0216 	bic.w	r2, r2, #22
 8002168:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002178:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	2b00      	cmp	r3, #0
 8002180:	d103      	bne.n	800218a <HAL_DMA_IRQHandler+0x1da>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002186:	2b00      	cmp	r3, #0
 8002188:	d007      	beq.n	800219a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0208 	bic.w	r2, r2, #8
 8002198:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219e:	223f      	movs	r2, #63	; 0x3f
 80021a0:	409a      	lsls	r2, r3
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d07e      	beq.n	80022bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	4798      	blx	r3
        }
        return;
 80021c6:	e079      	b.n	80022bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d01d      	beq.n	8002212 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d10d      	bne.n	8002200 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d031      	beq.n	8002250 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	4798      	blx	r3
 80021f4:	e02c      	b.n	8002250 <HAL_DMA_IRQHandler+0x2a0>
 80021f6:	bf00      	nop
 80021f8:	20000004 	.word	0x20000004
 80021fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002204:	2b00      	cmp	r3, #0
 8002206:	d023      	beq.n	8002250 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	4798      	blx	r3
 8002210:	e01e      	b.n	8002250 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10f      	bne.n	8002240 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0210 	bic.w	r2, r2, #16
 800222e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002254:	2b00      	cmp	r3, #0
 8002256:	d032      	beq.n	80022be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d022      	beq.n	80022aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2205      	movs	r2, #5
 8002268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0201 	bic.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	3301      	adds	r3, #1
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	429a      	cmp	r2, r3
 8002286:	d307      	bcc.n	8002298 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f2      	bne.n	800227c <HAL_DMA_IRQHandler+0x2cc>
 8002296:	e000      	b.n	800229a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002298:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d005      	beq.n	80022be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	4798      	blx	r3
 80022ba:	e000      	b.n	80022be <HAL_DMA_IRQHandler+0x30e>
        return;
 80022bc:	bf00      	nop
    }
  }
}
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
 80022d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b40      	cmp	r3, #64	; 0x40
 80022f0:	d108      	bne.n	8002304 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002302:	e007      	b.n	8002314 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	60da      	str	r2, [r3, #12]
}
 8002314:	bf00      	nop
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	3b10      	subs	r3, #16
 8002330:	4a14      	ldr	r2, [pc, #80]	; (8002384 <DMA_CalcBaseAndBitshift+0x64>)
 8002332:	fba2 2303 	umull	r2, r3, r2, r3
 8002336:	091b      	lsrs	r3, r3, #4
 8002338:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800233a:	4a13      	ldr	r2, [pc, #76]	; (8002388 <DMA_CalcBaseAndBitshift+0x68>)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4413      	add	r3, r2
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2b03      	cmp	r3, #3
 800234c:	d909      	bls.n	8002362 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002356:	f023 0303 	bic.w	r3, r3, #3
 800235a:	1d1a      	adds	r2, r3, #4
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	659a      	str	r2, [r3, #88]	; 0x58
 8002360:	e007      	b.n	8002372 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800236a:	f023 0303 	bic.w	r3, r3, #3
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002376:	4618      	mov	r0, r3
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	aaaaaaab 	.word	0xaaaaaaab
 8002388:	08012d80 	.word	0x08012d80

0800238c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002394:	2300      	movs	r3, #0
 8002396:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d11f      	bne.n	80023e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d856      	bhi.n	800245a <DMA_CheckFifoParam+0xce>
 80023ac:	a201      	add	r2, pc, #4	; (adr r2, 80023b4 <DMA_CheckFifoParam+0x28>)
 80023ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b2:	bf00      	nop
 80023b4:	080023c5 	.word	0x080023c5
 80023b8:	080023d7 	.word	0x080023d7
 80023bc:	080023c5 	.word	0x080023c5
 80023c0:	0800245b 	.word	0x0800245b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d046      	beq.n	800245e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023d4:	e043      	b.n	800245e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023de:	d140      	bne.n	8002462 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e4:	e03d      	b.n	8002462 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ee:	d121      	bne.n	8002434 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d837      	bhi.n	8002466 <DMA_CheckFifoParam+0xda>
 80023f6:	a201      	add	r2, pc, #4	; (adr r2, 80023fc <DMA_CheckFifoParam+0x70>)
 80023f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023fc:	0800240d 	.word	0x0800240d
 8002400:	08002413 	.word	0x08002413
 8002404:	0800240d 	.word	0x0800240d
 8002408:	08002425 	.word	0x08002425
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	73fb      	strb	r3, [r7, #15]
      break;
 8002410:	e030      	b.n	8002474 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002416:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d025      	beq.n	800246a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002422:	e022      	b.n	800246a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002428:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800242c:	d11f      	bne.n	800246e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002432:	e01c      	b.n	800246e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d903      	bls.n	8002442 <DMA_CheckFifoParam+0xb6>
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b03      	cmp	r3, #3
 800243e:	d003      	beq.n	8002448 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002440:	e018      	b.n	8002474 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	73fb      	strb	r3, [r7, #15]
      break;
 8002446:	e015      	b.n	8002474 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00e      	beq.n	8002472 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	73fb      	strb	r3, [r7, #15]
      break;
 8002458:	e00b      	b.n	8002472 <DMA_CheckFifoParam+0xe6>
      break;
 800245a:	bf00      	nop
 800245c:	e00a      	b.n	8002474 <DMA_CheckFifoParam+0xe8>
      break;
 800245e:	bf00      	nop
 8002460:	e008      	b.n	8002474 <DMA_CheckFifoParam+0xe8>
      break;
 8002462:	bf00      	nop
 8002464:	e006      	b.n	8002474 <DMA_CheckFifoParam+0xe8>
      break;
 8002466:	bf00      	nop
 8002468:	e004      	b.n	8002474 <DMA_CheckFifoParam+0xe8>
      break;
 800246a:	bf00      	nop
 800246c:	e002      	b.n	8002474 <DMA_CheckFifoParam+0xe8>
      break;   
 800246e:	bf00      	nop
 8002470:	e000      	b.n	8002474 <DMA_CheckFifoParam+0xe8>
      break;
 8002472:	bf00      	nop
    }
  } 
  
  return status; 
 8002474:	7bfb      	ldrb	r3, [r7, #15]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop

08002484 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002484:	b480      	push	{r7}
 8002486:	b089      	sub	sp, #36	; 0x24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800248e:	2300      	movs	r3, #0
 8002490:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002496:	2300      	movs	r3, #0
 8002498:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	e165      	b.n	800276c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024a0:	2201      	movs	r2, #1
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	4013      	ands	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	f040 8154 	bne.w	8002766 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d005      	beq.n	80024d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d130      	bne.n	8002538 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	2203      	movs	r2, #3
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4013      	ands	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800250c:	2201      	movs	r2, #1
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	f003 0201 	and.w	r2, r3, #1
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	2b03      	cmp	r3, #3
 8002542:	d017      	beq.n	8002574 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	2203      	movs	r2, #3
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d123      	bne.n	80025c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	08da      	lsrs	r2, r3, #3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3208      	adds	r2, #8
 8002588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800258c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	220f      	movs	r2, #15
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	08da      	lsrs	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3208      	adds	r2, #8
 80025c2:	69b9      	ldr	r1, [r7, #24]
 80025c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	2203      	movs	r2, #3
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0203 	and.w	r2, r3, #3
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 80ae 	beq.w	8002766 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	4b5d      	ldr	r3, [pc, #372]	; (8002784 <HAL_GPIO_Init+0x300>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	4a5c      	ldr	r2, [pc, #368]	; (8002784 <HAL_GPIO_Init+0x300>)
 8002614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002618:	6453      	str	r3, [r2, #68]	; 0x44
 800261a:	4b5a      	ldr	r3, [pc, #360]	; (8002784 <HAL_GPIO_Init+0x300>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002626:	4a58      	ldr	r2, [pc, #352]	; (8002788 <HAL_GPIO_Init+0x304>)
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	089b      	lsrs	r3, r3, #2
 800262c:	3302      	adds	r3, #2
 800262e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	220f      	movs	r2, #15
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a4f      	ldr	r2, [pc, #316]	; (800278c <HAL_GPIO_Init+0x308>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d025      	beq.n	800269e <HAL_GPIO_Init+0x21a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4e      	ldr	r2, [pc, #312]	; (8002790 <HAL_GPIO_Init+0x30c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d01f      	beq.n	800269a <HAL_GPIO_Init+0x216>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4d      	ldr	r2, [pc, #308]	; (8002794 <HAL_GPIO_Init+0x310>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d019      	beq.n	8002696 <HAL_GPIO_Init+0x212>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4c      	ldr	r2, [pc, #304]	; (8002798 <HAL_GPIO_Init+0x314>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d013      	beq.n	8002692 <HAL_GPIO_Init+0x20e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a4b      	ldr	r2, [pc, #300]	; (800279c <HAL_GPIO_Init+0x318>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00d      	beq.n	800268e <HAL_GPIO_Init+0x20a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a4a      	ldr	r2, [pc, #296]	; (80027a0 <HAL_GPIO_Init+0x31c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d007      	beq.n	800268a <HAL_GPIO_Init+0x206>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a49      	ldr	r2, [pc, #292]	; (80027a4 <HAL_GPIO_Init+0x320>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d101      	bne.n	8002686 <HAL_GPIO_Init+0x202>
 8002682:	2306      	movs	r3, #6
 8002684:	e00c      	b.n	80026a0 <HAL_GPIO_Init+0x21c>
 8002686:	2307      	movs	r3, #7
 8002688:	e00a      	b.n	80026a0 <HAL_GPIO_Init+0x21c>
 800268a:	2305      	movs	r3, #5
 800268c:	e008      	b.n	80026a0 <HAL_GPIO_Init+0x21c>
 800268e:	2304      	movs	r3, #4
 8002690:	e006      	b.n	80026a0 <HAL_GPIO_Init+0x21c>
 8002692:	2303      	movs	r3, #3
 8002694:	e004      	b.n	80026a0 <HAL_GPIO_Init+0x21c>
 8002696:	2302      	movs	r3, #2
 8002698:	e002      	b.n	80026a0 <HAL_GPIO_Init+0x21c>
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <HAL_GPIO_Init+0x21c>
 800269e:	2300      	movs	r3, #0
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	f002 0203 	and.w	r2, r2, #3
 80026a6:	0092      	lsls	r2, r2, #2
 80026a8:	4093      	lsls	r3, r2
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026b0:	4935      	ldr	r1, [pc, #212]	; (8002788 <HAL_GPIO_Init+0x304>)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	089b      	lsrs	r3, r3, #2
 80026b6:	3302      	adds	r3, #2
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026be:	4b3a      	ldr	r3, [pc, #232]	; (80027a8 <HAL_GPIO_Init+0x324>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026e2:	4a31      	ldr	r2, [pc, #196]	; (80027a8 <HAL_GPIO_Init+0x324>)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026e8:	4b2f      	ldr	r3, [pc, #188]	; (80027a8 <HAL_GPIO_Init+0x324>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800270c:	4a26      	ldr	r2, [pc, #152]	; (80027a8 <HAL_GPIO_Init+0x324>)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002712:	4b25      	ldr	r3, [pc, #148]	; (80027a8 <HAL_GPIO_Init+0x324>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002736:	4a1c      	ldr	r2, [pc, #112]	; (80027a8 <HAL_GPIO_Init+0x324>)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800273c:	4b1a      	ldr	r3, [pc, #104]	; (80027a8 <HAL_GPIO_Init+0x324>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002760:	4a11      	ldr	r2, [pc, #68]	; (80027a8 <HAL_GPIO_Init+0x324>)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	3301      	adds	r3, #1
 800276a:	61fb      	str	r3, [r7, #28]
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	2b0f      	cmp	r3, #15
 8002770:	f67f ae96 	bls.w	80024a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002774:	bf00      	nop
 8002776:	bf00      	nop
 8002778:	3724      	adds	r7, #36	; 0x24
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40023800 	.word	0x40023800
 8002788:	40013800 	.word	0x40013800
 800278c:	40020000 	.word	0x40020000
 8002790:	40020400 	.word	0x40020400
 8002794:	40020800 	.word	0x40020800
 8002798:	40020c00 	.word	0x40020c00
 800279c:	40021000 	.word	0x40021000
 80027a0:	40021400 	.word	0x40021400
 80027a4:	40021800 	.word	0x40021800
 80027a8:	40013c00 	.word	0x40013c00

080027ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	807b      	strh	r3, [r7, #2]
 80027b8:	4613      	mov	r3, r2
 80027ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027bc:	787b      	ldrb	r3, [r7, #1]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027c2:	887a      	ldrh	r2, [r7, #2]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027c8:	e003      	b.n	80027d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ca:	887b      	ldrh	r3, [r7, #2]
 80027cc:	041a      	lsls	r2, r3, #16
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	619a      	str	r2, [r3, #24]
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b086      	sub	sp, #24
 80027e2:	af02      	add	r7, sp, #8
 80027e4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e108      	b.n	8002a02 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d106      	bne.n	8002810 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7fe fecc 	bl	80015a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2203      	movs	r2, #3
 8002814:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800281e:	d102      	bne.n	8002826 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f002 ffbe 	bl	80057ac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	7c1a      	ldrb	r2, [r3, #16]
 8002838:	f88d 2000 	strb.w	r2, [sp]
 800283c:	3304      	adds	r3, #4
 800283e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002840:	f002 ff50 	bl	80056e4 <USB_CoreInit>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2202      	movs	r2, #2
 800284e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e0d5      	b.n	8002a02 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2100      	movs	r1, #0
 800285c:	4618      	mov	r0, r3
 800285e:	f002 ffb6 	bl	80057ce <USB_SetCurrentMode>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e0c6      	b.n	8002a02 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002874:	2300      	movs	r3, #0
 8002876:	73fb      	strb	r3, [r7, #15]
 8002878:	e04a      	b.n	8002910 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800287a:	7bfa      	ldrb	r2, [r7, #15]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4413      	add	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	3315      	adds	r3, #21
 800288a:	2201      	movs	r2, #1
 800288c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800288e:	7bfa      	ldrb	r2, [r7, #15]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	4413      	add	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	3314      	adds	r3, #20
 800289e:	7bfa      	ldrb	r2, [r7, #15]
 80028a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028a2:	7bfa      	ldrb	r2, [r7, #15]
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	b298      	uxth	r0, r3
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4413      	add	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	332e      	adds	r3, #46	; 0x2e
 80028b6:	4602      	mov	r2, r0
 80028b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028ba:	7bfa      	ldrb	r2, [r7, #15]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4413      	add	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	3318      	adds	r3, #24
 80028ca:	2200      	movs	r2, #0
 80028cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028ce:	7bfa      	ldrb	r2, [r7, #15]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4413      	add	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	331c      	adds	r3, #28
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028e2:	7bfa      	ldrb	r2, [r7, #15]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4413      	add	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	3320      	adds	r3, #32
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028f6:	7bfa      	ldrb	r2, [r7, #15]
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4413      	add	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	3324      	adds	r3, #36	; 0x24
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	3301      	adds	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	791b      	ldrb	r3, [r3, #4]
 8002914:	7bfa      	ldrb	r2, [r7, #15]
 8002916:	429a      	cmp	r2, r3
 8002918:	d3af      	bcc.n	800287a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800291a:	2300      	movs	r3, #0
 800291c:	73fb      	strb	r3, [r7, #15]
 800291e:	e044      	b.n	80029aa <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002920:	7bfa      	ldrb	r2, [r7, #15]
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4413      	add	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002932:	2200      	movs	r2, #0
 8002934:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002936:	7bfa      	ldrb	r2, [r7, #15]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4413      	add	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002948:	7bfa      	ldrb	r2, [r7, #15]
 800294a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800294c:	7bfa      	ldrb	r2, [r7, #15]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800295e:	2200      	movs	r2, #0
 8002960:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002962:	7bfa      	ldrb	r2, [r7, #15]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4413      	add	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002978:	7bfa      	ldrb	r2, [r7, #15]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800298e:	7bfa      	ldrb	r2, [r7, #15]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	4413      	add	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	3301      	adds	r3, #1
 80029a8:	73fb      	strb	r3, [r7, #15]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	791b      	ldrb	r3, [r3, #4]
 80029ae:	7bfa      	ldrb	r2, [r7, #15]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d3b5      	bcc.n	8002920 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6818      	ldr	r0, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	7c1a      	ldrb	r2, [r3, #16]
 80029bc:	f88d 2000 	strb.w	r2, [sp]
 80029c0:	3304      	adds	r3, #4
 80029c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029c4:	f002 ff50 	bl	8005868 <USB_DevInit>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2202      	movs	r2, #2
 80029d2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e013      	b.n	8002a02 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	7b1b      	ldrb	r3, [r3, #12]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d102      	bne.n	80029f6 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f80a 	bl	8002a0a <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f003 f90b 	bl	8005c16 <USB_DevDisconnect>

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b085      	sub	sp, #20
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	f043 0303 	orr.w	r3, r3, #3
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
	...

08002a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0cc      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a68:	4b68      	ldr	r3, [pc, #416]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 030f 	and.w	r3, r3, #15
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d90c      	bls.n	8002a90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a76:	4b65      	ldr	r3, [pc, #404]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7e:	4b63      	ldr	r3, [pc, #396]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0b8      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d020      	beq.n	8002ade <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa8:	4b59      	ldr	r3, [pc, #356]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	4a58      	ldr	r2, [pc, #352]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ab2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ac0:	4b53      	ldr	r3, [pc, #332]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	4a52      	ldr	r2, [pc, #328]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002aca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002acc:	4b50      	ldr	r3, [pc, #320]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	494d      	ldr	r1, [pc, #308]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d044      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d107      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af2:	4b47      	ldr	r3, [pc, #284]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d119      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e07f      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d003      	beq.n	8002b12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d107      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b12:	4b3f      	ldr	r3, [pc, #252]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e06f      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b22:	4b3b      	ldr	r3, [pc, #236]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e067      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b32:	4b37      	ldr	r3, [pc, #220]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f023 0203 	bic.w	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4934      	ldr	r1, [pc, #208]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b44:	f7fe ff8a 	bl	8001a5c <HAL_GetTick>
 8002b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4a:	e00a      	b.n	8002b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b4c:	f7fe ff86 	bl	8001a5c <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e04f      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b62:	4b2b      	ldr	r3, [pc, #172]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 020c 	and.w	r2, r3, #12
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d1eb      	bne.n	8002b4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b74:	4b25      	ldr	r3, [pc, #148]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d20c      	bcs.n	8002b9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b82:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8a:	4b20      	ldr	r3, [pc, #128]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e032      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba8:	4b19      	ldr	r3, [pc, #100]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	4916      	ldr	r1, [pc, #88]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d009      	beq.n	8002bda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bc6:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	490e      	ldr	r1, [pc, #56]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bda:	f000 fbb1 	bl	8003340 <HAL_RCC_GetSysClockFreq>
 8002bde:	4602      	mov	r2, r0
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	490a      	ldr	r1, [pc, #40]	; (8002c14 <HAL_RCC_ClockConfig+0x1c0>)
 8002bec:	5ccb      	ldrb	r3, [r1, r3]
 8002bee:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf2:	4a09      	ldr	r2, [pc, #36]	; (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bf6:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <HAL_RCC_ClockConfig+0x1c8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fe fd44 	bl	8001688 <HAL_InitTick>

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40023c00 	.word	0x40023c00
 8002c10:	40023800 	.word	0x40023800
 8002c14:	08012d68 	.word	0x08012d68
 8002c18:	20000004 	.word	0x20000004
 8002c1c:	20000008 	.word	0x20000008

08002c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c24:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	20000004 	.word	0x20000004

08002c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c3c:	f7ff fff0 	bl	8002c20 <HAL_RCC_GetHCLKFreq>
 8002c40:	4602      	mov	r2, r0
 8002c42:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	0a9b      	lsrs	r3, r3, #10
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	4903      	ldr	r1, [pc, #12]	; (8002c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c4e:	5ccb      	ldrb	r3, [r1, r3]
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	08012d78 	.word	0x08012d78

08002c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c64:	f7ff ffdc 	bl	8002c20 <HAL_RCC_GetHCLKFreq>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	0b5b      	lsrs	r3, r3, #13
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	4903      	ldr	r1, [pc, #12]	; (8002c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c76:	5ccb      	ldrb	r3, [r1, r3]
 8002c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40023800 	.word	0x40023800
 8002c84:	08012d78 	.word	0x08012d78

08002c88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	220f      	movs	r2, #15
 8002c96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c98:	4b12      	ldr	r3, [pc, #72]	; (8002ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0203 	and.w	r2, r3, #3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ca4:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002cbc:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	08db      	lsrs	r3, r3, #3
 8002cc2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002cca:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <HAL_RCC_GetClockConfig+0x60>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 020f 	and.w	r2, r3, #15
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	601a      	str	r2, [r3, #0]
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	40023c00 	.word	0x40023c00

08002cec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08c      	sub	sp, #48	; 0x30
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d010      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002d24:	4b6f      	ldr	r3, [pc, #444]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d2a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d32:	496c      	ldr	r1, [pc, #432]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002d42:	2301      	movs	r3, #1
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d010      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002d52:	4b64      	ldr	r3, [pc, #400]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d58:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d60:	4960      	ldr	r1, [pc, #384]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002d70:	2301      	movs	r3, #1
 8002d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d017      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d80:	4b58      	ldr	r3, [pc, #352]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	4955      	ldr	r1, [pc, #340]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d9e:	d101      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002da0:	2301      	movs	r3, #1
 8002da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002dac:	2301      	movs	r3, #1
 8002dae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d017      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002dbc:	4b49      	ldr	r3, [pc, #292]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dca:	4946      	ldr	r1, [pc, #280]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dda:	d101      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002de8:	2301      	movs	r3, #1
 8002dea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0320 	and.w	r3, r3, #32
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 808a 	beq.w	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	4b39      	ldr	r3, [pc, #228]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	4a38      	ldr	r2, [pc, #224]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e08:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0a:	4b36      	ldr	r3, [pc, #216]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e12:	60bb      	str	r3, [r7, #8]
 8002e14:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e16:	4b34      	ldr	r3, [pc, #208]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a33      	ldr	r2, [pc, #204]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e20:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e22:	f7fe fe1b 	bl	8001a5c <HAL_GetTick>
 8002e26:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e2a:	f7fe fe17 	bl	8001a5c <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e278      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e3c:	4b2a      	ldr	r3, [pc, #168]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e48:	4b26      	ldr	r3, [pc, #152]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e50:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d02f      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e60:	6a3a      	ldr	r2, [r7, #32]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d028      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e66:	4b1f      	ldr	r3, [pc, #124]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e6e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e70:	4b1e      	ldr	r3, [pc, #120]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e76:	4b1d      	ldr	r3, [pc, #116]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002e7c:	4a19      	ldr	r2, [pc, #100]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e82:	4b18      	ldr	r3, [pc, #96]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d114      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002e8e:	f7fe fde5 	bl	8001a5c <HAL_GetTick>
 8002e92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e94:	e00a      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e96:	f7fe fde1 	bl	8001a5c <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e240      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eac:	4b0d      	ldr	r3, [pc, #52]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0ee      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ec4:	d114      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002ec6:	4b07      	ldr	r3, [pc, #28]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eda:	4902      	ldr	r1, [pc, #8]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	608b      	str	r3, [r1, #8]
 8002ee0:	e00c      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40007000 	.word	0x40007000
 8002eec:	42470e40 	.word	0x42470e40
 8002ef0:	4b4a      	ldr	r3, [pc, #296]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	4a49      	ldr	r2, [pc, #292]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ef6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002efa:	6093      	str	r3, [r2, #8]
 8002efc:	4b47      	ldr	r3, [pc, #284]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002efe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f08:	4944      	ldr	r1, [pc, #272]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0310 	and.w	r3, r3, #16
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d004      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002f20:	4b3f      	ldr	r3, [pc, #252]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002f22:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00a      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002f30:	4b3a      	ldr	r3, [pc, #232]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3e:	4937      	ldr	r1, [pc, #220]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00a      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f52:	4b32      	ldr	r3, [pc, #200]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f58:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f60:	492e      	ldr	r1, [pc, #184]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d011      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f74:	4b29      	ldr	r3, [pc, #164]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f7a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f82:	4926      	ldr	r1, [pc, #152]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f92:	d101      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002f94:	2301      	movs	r3, #1
 8002f96:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00a      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002fa4:	4b1d      	ldr	r3, [pc, #116]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002faa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb2:	491a      	ldr	r1, [pc, #104]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d011      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002fc6:	4b15      	ldr	r3, [pc, #84]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fcc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd4:	4911      	ldr	r1, [pc, #68]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fe4:	d101      	bne.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d005      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff8:	f040 80ff 	bne.w	80031fa <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ffc:	4b09      	ldr	r3, [pc, #36]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003002:	f7fe fd2b 	bl	8001a5c <HAL_GetTick>
 8003006:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003008:	e00e      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800300a:	f7fe fd27 	bl	8001a5c <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d907      	bls.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e188      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800301c:	40023800 	.word	0x40023800
 8003020:	424711e0 	.word	0x424711e0
 8003024:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003028:	4b7e      	ldr	r3, [pc, #504]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1ea      	bne.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003044:	2b00      	cmp	r3, #0
 8003046:	d009      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003050:	2b00      	cmp	r3, #0
 8003052:	d028      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003058:	2b00      	cmp	r3, #0
 800305a:	d124      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800305c:	4b71      	ldr	r3, [pc, #452]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800305e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003062:	0c1b      	lsrs	r3, r3, #16
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	3301      	adds	r3, #1
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800306e:	4b6d      	ldr	r3, [pc, #436]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003074:	0e1b      	lsrs	r3, r3, #24
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	019b      	lsls	r3, r3, #6
 8003086:	431a      	orrs	r2, r3
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	085b      	lsrs	r3, r3, #1
 800308c:	3b01      	subs	r3, #1
 800308e:	041b      	lsls	r3, r3, #16
 8003090:	431a      	orrs	r2, r3
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	061b      	lsls	r3, r3, #24
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	071b      	lsls	r3, r3, #28
 800309e:	4961      	ldr	r1, [pc, #388]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d004      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ba:	d00a      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d035      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030d0:	d130      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80030d2:	4b54      	ldr	r3, [pc, #336]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030d8:	0c1b      	lsrs	r3, r3, #16
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	3301      	adds	r3, #1
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030e4:	4b4f      	ldr	r3, [pc, #316]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ea:	0f1b      	lsrs	r3, r3, #28
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	019b      	lsls	r3, r3, #6
 80030fc:	431a      	orrs	r2, r3
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	085b      	lsrs	r3, r3, #1
 8003102:	3b01      	subs	r3, #1
 8003104:	041b      	lsls	r3, r3, #16
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	061b      	lsls	r3, r3, #24
 800310e:	431a      	orrs	r2, r3
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	071b      	lsls	r3, r3, #28
 8003114:	4943      	ldr	r1, [pc, #268]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003116:	4313      	orrs	r3, r2
 8003118:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800311c:	4b41      	ldr	r3, [pc, #260]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800311e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003122:	f023 021f 	bic.w	r2, r3, #31
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312a:	3b01      	subs	r3, #1
 800312c:	493d      	ldr	r1, [pc, #244]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313c:	2b00      	cmp	r3, #0
 800313e:	d029      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003148:	d124      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800314a:	4b36      	ldr	r3, [pc, #216]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800314c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003150:	0c1b      	lsrs	r3, r3, #16
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	3301      	adds	r3, #1
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800315c:	4b31      	ldr	r3, [pc, #196]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800315e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003162:	0f1b      	lsrs	r3, r3, #28
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	019b      	lsls	r3, r3, #6
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	085b      	lsrs	r3, r3, #1
 800317c:	3b01      	subs	r3, #1
 800317e:	041b      	lsls	r3, r3, #16
 8003180:	431a      	orrs	r2, r3
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	061b      	lsls	r3, r3, #24
 8003186:	431a      	orrs	r2, r3
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	071b      	lsls	r3, r3, #28
 800318c:	4925      	ldr	r1, [pc, #148]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800319c:	2b00      	cmp	r3, #0
 800319e:	d016      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	019b      	lsls	r3, r3, #6
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	085b      	lsrs	r3, r3, #1
 80031b2:	3b01      	subs	r3, #1
 80031b4:	041b      	lsls	r3, r3, #16
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	061b      	lsls	r3, r3, #24
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	071b      	lsls	r3, r3, #28
 80031c6:	4917      	ldr	r1, [pc, #92]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031ce:	4b16      	ldr	r3, [pc, #88]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031d4:	f7fe fc42 	bl	8001a5c <HAL_GetTick>
 80031d8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80031dc:	f7fe fc3e 	bl	8001a5c <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e09f      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031ee:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80031fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	f040 8095 	bne.w	800332c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003202:	4b0a      	ldr	r3, [pc, #40]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003208:	f7fe fc28 	bl	8001a5c <HAL_GetTick>
 800320c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800320e:	e00f      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003210:	f7fe fc24 	bl	8001a5c <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d908      	bls.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e085      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003222:	bf00      	nop
 8003224:	40023800 	.word	0x40023800
 8003228:	42470068 	.word	0x42470068
 800322c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003230:	4b41      	ldr	r3, [pc, #260]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800323c:	d0e8      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	2b00      	cmp	r3, #0
 8003250:	d009      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800325a:	2b00      	cmp	r3, #0
 800325c:	d02b      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003262:	2b00      	cmp	r3, #0
 8003264:	d127      	bne.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003266:	4b34      	ldr	r3, [pc, #208]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326c:	0c1b      	lsrs	r3, r3, #16
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	3301      	adds	r3, #1
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699a      	ldr	r2, [r3, #24]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	019b      	lsls	r3, r3, #6
 8003282:	431a      	orrs	r2, r3
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	085b      	lsrs	r3, r3, #1
 8003288:	3b01      	subs	r3, #1
 800328a:	041b      	lsls	r3, r3, #16
 800328c:	431a      	orrs	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	061b      	lsls	r3, r3, #24
 8003294:	4928      	ldr	r1, [pc, #160]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800329c:	4b26      	ldr	r3, [pc, #152]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800329e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032a2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	3b01      	subs	r3, #1
 80032ac:	021b      	lsls	r3, r3, #8
 80032ae:	4922      	ldr	r1, [pc, #136]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d01d      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x612>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032ca:	d118      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032cc:	4b1a      	ldr	r3, [pc, #104]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d2:	0e1b      	lsrs	r3, r3, #24
 80032d4:	f003 030f 	and.w	r3, r3, #15
 80032d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	019b      	lsls	r3, r3, #6
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	085b      	lsrs	r3, r3, #1
 80032ec:	3b01      	subs	r3, #1
 80032ee:	041b      	lsls	r3, r3, #16
 80032f0:	431a      	orrs	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	061b      	lsls	r3, r3, #24
 80032f6:	4910      	ldr	r1, [pc, #64]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032fe:	4b0f      	ldr	r3, [pc, #60]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003300:	2201      	movs	r2, #1
 8003302:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003304:	f7fe fbaa 	bl	8001a5c <HAL_GetTick>
 8003308:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800330a:	e008      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800330c:	f7fe fba6 	bl	8001a5c <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e007      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800331e:	4b06      	ldr	r3, [pc, #24]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003326:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800332a:	d1ef      	bne.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3730      	adds	r7, #48	; 0x30
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40023800 	.word	0x40023800
 800333c:	42470070 	.word	0x42470070

08003340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003344:	b0ae      	sub	sp, #184	; 0xb8
 8003346:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003366:	4bcb      	ldr	r3, [pc, #812]	; (8003694 <HAL_RCC_GetSysClockFreq+0x354>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b0c      	cmp	r3, #12
 8003370:	f200 8206 	bhi.w	8003780 <HAL_RCC_GetSysClockFreq+0x440>
 8003374:	a201      	add	r2, pc, #4	; (adr r2, 800337c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337a:	bf00      	nop
 800337c:	080033b1 	.word	0x080033b1
 8003380:	08003781 	.word	0x08003781
 8003384:	08003781 	.word	0x08003781
 8003388:	08003781 	.word	0x08003781
 800338c:	080033b9 	.word	0x080033b9
 8003390:	08003781 	.word	0x08003781
 8003394:	08003781 	.word	0x08003781
 8003398:	08003781 	.word	0x08003781
 800339c:	080033c1 	.word	0x080033c1
 80033a0:	08003781 	.word	0x08003781
 80033a4:	08003781 	.word	0x08003781
 80033a8:	08003781 	.word	0x08003781
 80033ac:	080035b1 	.word	0x080035b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033b0:	4bb9      	ldr	r3, [pc, #740]	; (8003698 <HAL_RCC_GetSysClockFreq+0x358>)
 80033b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80033b6:	e1e7      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033b8:	4bb8      	ldr	r3, [pc, #736]	; (800369c <HAL_RCC_GetSysClockFreq+0x35c>)
 80033ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80033be:	e1e3      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033c0:	4bb4      	ldr	r3, [pc, #720]	; (8003694 <HAL_RCC_GetSysClockFreq+0x354>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033cc:	4bb1      	ldr	r3, [pc, #708]	; (8003694 <HAL_RCC_GetSysClockFreq+0x354>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d071      	beq.n	80034bc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033d8:	4bae      	ldr	r3, [pc, #696]	; (8003694 <HAL_RCC_GetSysClockFreq+0x354>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	099b      	lsrs	r3, r3, #6
 80033de:	2200      	movs	r2, #0
 80033e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033e4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80033e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80033f4:	2300      	movs	r3, #0
 80033f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80033fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80033fe:	4622      	mov	r2, r4
 8003400:	462b      	mov	r3, r5
 8003402:	f04f 0000 	mov.w	r0, #0
 8003406:	f04f 0100 	mov.w	r1, #0
 800340a:	0159      	lsls	r1, r3, #5
 800340c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003410:	0150      	lsls	r0, r2, #5
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	4621      	mov	r1, r4
 8003418:	1a51      	subs	r1, r2, r1
 800341a:	6439      	str	r1, [r7, #64]	; 0x40
 800341c:	4629      	mov	r1, r5
 800341e:	eb63 0301 	sbc.w	r3, r3, r1
 8003422:	647b      	str	r3, [r7, #68]	; 0x44
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003430:	4649      	mov	r1, r9
 8003432:	018b      	lsls	r3, r1, #6
 8003434:	4641      	mov	r1, r8
 8003436:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800343a:	4641      	mov	r1, r8
 800343c:	018a      	lsls	r2, r1, #6
 800343e:	4641      	mov	r1, r8
 8003440:	1a51      	subs	r1, r2, r1
 8003442:	63b9      	str	r1, [r7, #56]	; 0x38
 8003444:	4649      	mov	r1, r9
 8003446:	eb63 0301 	sbc.w	r3, r3, r1
 800344a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800344c:	f04f 0200 	mov.w	r2, #0
 8003450:	f04f 0300 	mov.w	r3, #0
 8003454:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003458:	4649      	mov	r1, r9
 800345a:	00cb      	lsls	r3, r1, #3
 800345c:	4641      	mov	r1, r8
 800345e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003462:	4641      	mov	r1, r8
 8003464:	00ca      	lsls	r2, r1, #3
 8003466:	4610      	mov	r0, r2
 8003468:	4619      	mov	r1, r3
 800346a:	4603      	mov	r3, r0
 800346c:	4622      	mov	r2, r4
 800346e:	189b      	adds	r3, r3, r2
 8003470:	633b      	str	r3, [r7, #48]	; 0x30
 8003472:	462b      	mov	r3, r5
 8003474:	460a      	mov	r2, r1
 8003476:	eb42 0303 	adc.w	r3, r2, r3
 800347a:	637b      	str	r3, [r7, #52]	; 0x34
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003488:	4629      	mov	r1, r5
 800348a:	024b      	lsls	r3, r1, #9
 800348c:	4621      	mov	r1, r4
 800348e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003492:	4621      	mov	r1, r4
 8003494:	024a      	lsls	r2, r1, #9
 8003496:	4610      	mov	r0, r2
 8003498:	4619      	mov	r1, r3
 800349a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800349e:	2200      	movs	r2, #0
 80034a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80034ac:	f7fc ff68 	bl	8000380 <__aeabi_uldivmod>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4613      	mov	r3, r2
 80034b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034ba:	e067      	b.n	800358c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034bc:	4b75      	ldr	r3, [pc, #468]	; (8003694 <HAL_RCC_GetSysClockFreq+0x354>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	099b      	lsrs	r3, r3, #6
 80034c2:	2200      	movs	r2, #0
 80034c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034c8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80034cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80034d6:	2300      	movs	r3, #0
 80034d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80034da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80034de:	4622      	mov	r2, r4
 80034e0:	462b      	mov	r3, r5
 80034e2:	f04f 0000 	mov.w	r0, #0
 80034e6:	f04f 0100 	mov.w	r1, #0
 80034ea:	0159      	lsls	r1, r3, #5
 80034ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f0:	0150      	lsls	r0, r2, #5
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4621      	mov	r1, r4
 80034f8:	1a51      	subs	r1, r2, r1
 80034fa:	62b9      	str	r1, [r7, #40]	; 0x28
 80034fc:	4629      	mov	r1, r5
 80034fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003510:	4649      	mov	r1, r9
 8003512:	018b      	lsls	r3, r1, #6
 8003514:	4641      	mov	r1, r8
 8003516:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800351a:	4641      	mov	r1, r8
 800351c:	018a      	lsls	r2, r1, #6
 800351e:	4641      	mov	r1, r8
 8003520:	ebb2 0a01 	subs.w	sl, r2, r1
 8003524:	4649      	mov	r1, r9
 8003526:	eb63 0b01 	sbc.w	fp, r3, r1
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003536:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800353a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800353e:	4692      	mov	sl, r2
 8003540:	469b      	mov	fp, r3
 8003542:	4623      	mov	r3, r4
 8003544:	eb1a 0303 	adds.w	r3, sl, r3
 8003548:	623b      	str	r3, [r7, #32]
 800354a:	462b      	mov	r3, r5
 800354c:	eb4b 0303 	adc.w	r3, fp, r3
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800355e:	4629      	mov	r1, r5
 8003560:	028b      	lsls	r3, r1, #10
 8003562:	4621      	mov	r1, r4
 8003564:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003568:	4621      	mov	r1, r4
 800356a:	028a      	lsls	r2, r1, #10
 800356c:	4610      	mov	r0, r2
 800356e:	4619      	mov	r1, r3
 8003570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003574:	2200      	movs	r2, #0
 8003576:	673b      	str	r3, [r7, #112]	; 0x70
 8003578:	677a      	str	r2, [r7, #116]	; 0x74
 800357a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800357e:	f7fc feff 	bl	8000380 <__aeabi_uldivmod>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4613      	mov	r3, r2
 8003588:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800358c:	4b41      	ldr	r3, [pc, #260]	; (8003694 <HAL_RCC_GetSysClockFreq+0x354>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	0c1b      	lsrs	r3, r3, #16
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	3301      	adds	r3, #1
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800359e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80035ae:	e0eb      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035b0:	4b38      	ldr	r3, [pc, #224]	; (8003694 <HAL_RCC_GetSysClockFreq+0x354>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035bc:	4b35      	ldr	r3, [pc, #212]	; (8003694 <HAL_RCC_GetSysClockFreq+0x354>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d06b      	beq.n	80036a0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035c8:	4b32      	ldr	r3, [pc, #200]	; (8003694 <HAL_RCC_GetSysClockFreq+0x354>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	099b      	lsrs	r3, r3, #6
 80035ce:	2200      	movs	r2, #0
 80035d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80035d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80035d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035da:	663b      	str	r3, [r7, #96]	; 0x60
 80035dc:	2300      	movs	r3, #0
 80035de:	667b      	str	r3, [r7, #100]	; 0x64
 80035e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80035e4:	4622      	mov	r2, r4
 80035e6:	462b      	mov	r3, r5
 80035e8:	f04f 0000 	mov.w	r0, #0
 80035ec:	f04f 0100 	mov.w	r1, #0
 80035f0:	0159      	lsls	r1, r3, #5
 80035f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035f6:	0150      	lsls	r0, r2, #5
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4621      	mov	r1, r4
 80035fe:	1a51      	subs	r1, r2, r1
 8003600:	61b9      	str	r1, [r7, #24]
 8003602:	4629      	mov	r1, r5
 8003604:	eb63 0301 	sbc.w	r3, r3, r1
 8003608:	61fb      	str	r3, [r7, #28]
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003616:	4659      	mov	r1, fp
 8003618:	018b      	lsls	r3, r1, #6
 800361a:	4651      	mov	r1, sl
 800361c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003620:	4651      	mov	r1, sl
 8003622:	018a      	lsls	r2, r1, #6
 8003624:	4651      	mov	r1, sl
 8003626:	ebb2 0801 	subs.w	r8, r2, r1
 800362a:	4659      	mov	r1, fp
 800362c:	eb63 0901 	sbc.w	r9, r3, r1
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	f04f 0300 	mov.w	r3, #0
 8003638:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800363c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003640:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003644:	4690      	mov	r8, r2
 8003646:	4699      	mov	r9, r3
 8003648:	4623      	mov	r3, r4
 800364a:	eb18 0303 	adds.w	r3, r8, r3
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	462b      	mov	r3, r5
 8003652:	eb49 0303 	adc.w	r3, r9, r3
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003664:	4629      	mov	r1, r5
 8003666:	024b      	lsls	r3, r1, #9
 8003668:	4621      	mov	r1, r4
 800366a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800366e:	4621      	mov	r1, r4
 8003670:	024a      	lsls	r2, r1, #9
 8003672:	4610      	mov	r0, r2
 8003674:	4619      	mov	r1, r3
 8003676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800367a:	2200      	movs	r2, #0
 800367c:	65bb      	str	r3, [r7, #88]	; 0x58
 800367e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003680:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003684:	f7fc fe7c 	bl	8000380 <__aeabi_uldivmod>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4613      	mov	r3, r2
 800368e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003692:	e065      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0x420>
 8003694:	40023800 	.word	0x40023800
 8003698:	00f42400 	.word	0x00f42400
 800369c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a0:	4b3d      	ldr	r3, [pc, #244]	; (8003798 <HAL_RCC_GetSysClockFreq+0x458>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	099b      	lsrs	r3, r3, #6
 80036a6:	2200      	movs	r2, #0
 80036a8:	4618      	mov	r0, r3
 80036aa:	4611      	mov	r1, r2
 80036ac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036b0:	653b      	str	r3, [r7, #80]	; 0x50
 80036b2:	2300      	movs	r3, #0
 80036b4:	657b      	str	r3, [r7, #84]	; 0x54
 80036b6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80036ba:	4642      	mov	r2, r8
 80036bc:	464b      	mov	r3, r9
 80036be:	f04f 0000 	mov.w	r0, #0
 80036c2:	f04f 0100 	mov.w	r1, #0
 80036c6:	0159      	lsls	r1, r3, #5
 80036c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036cc:	0150      	lsls	r0, r2, #5
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4641      	mov	r1, r8
 80036d4:	1a51      	subs	r1, r2, r1
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	4649      	mov	r1, r9
 80036da:	eb63 0301 	sbc.w	r3, r3, r1
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80036ec:	4659      	mov	r1, fp
 80036ee:	018b      	lsls	r3, r1, #6
 80036f0:	4651      	mov	r1, sl
 80036f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036f6:	4651      	mov	r1, sl
 80036f8:	018a      	lsls	r2, r1, #6
 80036fa:	4651      	mov	r1, sl
 80036fc:	1a54      	subs	r4, r2, r1
 80036fe:	4659      	mov	r1, fp
 8003700:	eb63 0501 	sbc.w	r5, r3, r1
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	00eb      	lsls	r3, r5, #3
 800370e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003712:	00e2      	lsls	r2, r4, #3
 8003714:	4614      	mov	r4, r2
 8003716:	461d      	mov	r5, r3
 8003718:	4643      	mov	r3, r8
 800371a:	18e3      	adds	r3, r4, r3
 800371c:	603b      	str	r3, [r7, #0]
 800371e:	464b      	mov	r3, r9
 8003720:	eb45 0303 	adc.w	r3, r5, r3
 8003724:	607b      	str	r3, [r7, #4]
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003732:	4629      	mov	r1, r5
 8003734:	028b      	lsls	r3, r1, #10
 8003736:	4621      	mov	r1, r4
 8003738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800373c:	4621      	mov	r1, r4
 800373e:	028a      	lsls	r2, r1, #10
 8003740:	4610      	mov	r0, r2
 8003742:	4619      	mov	r1, r3
 8003744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003748:	2200      	movs	r2, #0
 800374a:	64bb      	str	r3, [r7, #72]	; 0x48
 800374c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800374e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003752:	f7fc fe15 	bl	8000380 <__aeabi_uldivmod>
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	4613      	mov	r3, r2
 800375c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003760:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <HAL_RCC_GetSysClockFreq+0x458>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	0f1b      	lsrs	r3, r3, #28
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800376e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003772:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003776:	fbb2 f3f3 	udiv	r3, r2, r3
 800377a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800377e:	e003      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003780:	4b06      	ldr	r3, [pc, #24]	; (800379c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003782:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003786:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003788:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800378c:	4618      	mov	r0, r3
 800378e:	37b8      	adds	r7, #184	; 0xb8
 8003790:	46bd      	mov	sp, r7
 8003792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003796:	bf00      	nop
 8003798:	40023800 	.word	0x40023800
 800379c:	00f42400 	.word	0x00f42400

080037a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e28d      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 8083 	beq.w	80038c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80037c0:	4b94      	ldr	r3, [pc, #592]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 030c 	and.w	r3, r3, #12
 80037c8:	2b04      	cmp	r3, #4
 80037ca:	d019      	beq.n	8003800 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80037cc:	4b91      	ldr	r3, [pc, #580]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d106      	bne.n	80037e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80037d8:	4b8e      	ldr	r3, [pc, #568]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037e4:	d00c      	beq.n	8003800 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037e6:	4b8b      	ldr	r3, [pc, #556]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80037ee:	2b0c      	cmp	r3, #12
 80037f0:	d112      	bne.n	8003818 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037f2:	4b88      	ldr	r3, [pc, #544]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037fe:	d10b      	bne.n	8003818 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003800:	4b84      	ldr	r3, [pc, #528]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d05b      	beq.n	80038c4 <HAL_RCC_OscConfig+0x124>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d157      	bne.n	80038c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e25a      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003820:	d106      	bne.n	8003830 <HAL_RCC_OscConfig+0x90>
 8003822:	4b7c      	ldr	r3, [pc, #496]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a7b      	ldr	r2, [pc, #492]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	e01d      	b.n	800386c <HAL_RCC_OscConfig+0xcc>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003838:	d10c      	bne.n	8003854 <HAL_RCC_OscConfig+0xb4>
 800383a:	4b76      	ldr	r3, [pc, #472]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a75      	ldr	r2, [pc, #468]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	4b73      	ldr	r3, [pc, #460]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a72      	ldr	r2, [pc, #456]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 800384c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	e00b      	b.n	800386c <HAL_RCC_OscConfig+0xcc>
 8003854:	4b6f      	ldr	r3, [pc, #444]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a6e      	ldr	r2, [pc, #440]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 800385a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800385e:	6013      	str	r3, [r2, #0]
 8003860:	4b6c      	ldr	r3, [pc, #432]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a6b      	ldr	r2, [pc, #428]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800386a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d013      	beq.n	800389c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7fe f8f2 	bl	8001a5c <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800387c:	f7fe f8ee 	bl	8001a5c <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b64      	cmp	r3, #100	; 0x64
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e21f      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388e:	4b61      	ldr	r3, [pc, #388]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0xdc>
 800389a:	e014      	b.n	80038c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389c:	f7fe f8de 	bl	8001a5c <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038a4:	f7fe f8da 	bl	8001a5c <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b64      	cmp	r3, #100	; 0x64
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e20b      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038b6:	4b57      	ldr	r3, [pc, #348]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_OscConfig+0x104>
 80038c2:	e000      	b.n	80038c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d06f      	beq.n	80039b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80038d2:	4b50      	ldr	r3, [pc, #320]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 030c 	and.w	r3, r3, #12
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d017      	beq.n	800390e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80038de:	4b4d      	ldr	r3, [pc, #308]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d105      	bne.n	80038f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80038ea:	4b4a      	ldr	r3, [pc, #296]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00b      	beq.n	800390e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038f6:	4b47      	ldr	r3, [pc, #284]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80038fe:	2b0c      	cmp	r3, #12
 8003900:	d11c      	bne.n	800393c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003902:	4b44      	ldr	r3, [pc, #272]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d116      	bne.n	800393c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800390e:	4b41      	ldr	r3, [pc, #260]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <HAL_RCC_OscConfig+0x186>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d001      	beq.n	8003926 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e1d3      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003926:	4b3b      	ldr	r3, [pc, #236]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	4937      	ldr	r1, [pc, #220]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003936:	4313      	orrs	r3, r2
 8003938:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800393a:	e03a      	b.n	80039b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d020      	beq.n	8003986 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003944:	4b34      	ldr	r3, [pc, #208]	; (8003a18 <HAL_RCC_OscConfig+0x278>)
 8003946:	2201      	movs	r2, #1
 8003948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394a:	f7fe f887 	bl	8001a5c <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003952:	f7fe f883 	bl	8001a5c <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e1b4      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003964:	4b2b      	ldr	r3, [pc, #172]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0f0      	beq.n	8003952 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003970:	4b28      	ldr	r3, [pc, #160]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	4925      	ldr	r1, [pc, #148]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003980:	4313      	orrs	r3, r2
 8003982:	600b      	str	r3, [r1, #0]
 8003984:	e015      	b.n	80039b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003986:	4b24      	ldr	r3, [pc, #144]	; (8003a18 <HAL_RCC_OscConfig+0x278>)
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398c:	f7fe f866 	bl	8001a5c <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003994:	f7fe f862 	bl	8001a5c <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e193      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a6:	4b1b      	ldr	r3, [pc, #108]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d036      	beq.n	8003a2c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d016      	beq.n	80039f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039c6:	4b15      	ldr	r3, [pc, #84]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 80039c8:	2201      	movs	r2, #1
 80039ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039cc:	f7fe f846 	bl	8001a5c <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039d4:	f7fe f842 	bl	8001a5c <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e173      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039e6:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 80039e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0f0      	beq.n	80039d4 <HAL_RCC_OscConfig+0x234>
 80039f2:	e01b      	b.n	8003a2c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039f4:	4b09      	ldr	r3, [pc, #36]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039fa:	f7fe f82f 	bl	8001a5c <HAL_GetTick>
 80039fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a00:	e00e      	b.n	8003a20 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a02:	f7fe f82b 	bl	8001a5c <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d907      	bls.n	8003a20 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e15c      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
 8003a14:	40023800 	.word	0x40023800
 8003a18:	42470000 	.word	0x42470000
 8003a1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a20:	4b8a      	ldr	r3, [pc, #552]	; (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1ea      	bne.n	8003a02 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 8097 	beq.w	8003b68 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a3e:	4b83      	ldr	r3, [pc, #524]	; (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10f      	bne.n	8003a6a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	4b7f      	ldr	r3, [pc, #508]	; (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	4a7e      	ldr	r2, [pc, #504]	; (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a58:	6413      	str	r3, [r2, #64]	; 0x40
 8003a5a:	4b7c      	ldr	r3, [pc, #496]	; (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a62:	60bb      	str	r3, [r7, #8]
 8003a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a66:	2301      	movs	r3, #1
 8003a68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6a:	4b79      	ldr	r3, [pc, #484]	; (8003c50 <HAL_RCC_OscConfig+0x4b0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d118      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a76:	4b76      	ldr	r3, [pc, #472]	; (8003c50 <HAL_RCC_OscConfig+0x4b0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a75      	ldr	r2, [pc, #468]	; (8003c50 <HAL_RCC_OscConfig+0x4b0>)
 8003a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a82:	f7fd ffeb 	bl	8001a5c <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a8a:	f7fd ffe7 	bl	8001a5c <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e118      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9c:	4b6c      	ldr	r3, [pc, #432]	; (8003c50 <HAL_RCC_OscConfig+0x4b0>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0f0      	beq.n	8003a8a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d106      	bne.n	8003abe <HAL_RCC_OscConfig+0x31e>
 8003ab0:	4b66      	ldr	r3, [pc, #408]	; (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab4:	4a65      	ldr	r2, [pc, #404]	; (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	6713      	str	r3, [r2, #112]	; 0x70
 8003abc:	e01c      	b.n	8003af8 <HAL_RCC_OscConfig+0x358>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b05      	cmp	r3, #5
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x340>
 8003ac6:	4b61      	ldr	r3, [pc, #388]	; (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aca:	4a60      	ldr	r2, [pc, #384]	; (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003acc:	f043 0304 	orr.w	r3, r3, #4
 8003ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad2:	4b5e      	ldr	r3, [pc, #376]	; (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad6:	4a5d      	ldr	r2, [pc, #372]	; (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003ad8:	f043 0301 	orr.w	r3, r3, #1
 8003adc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ade:	e00b      	b.n	8003af8 <HAL_RCC_OscConfig+0x358>
 8003ae0:	4b5a      	ldr	r3, [pc, #360]	; (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae4:	4a59      	ldr	r2, [pc, #356]	; (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003ae6:	f023 0301 	bic.w	r3, r3, #1
 8003aea:	6713      	str	r3, [r2, #112]	; 0x70
 8003aec:	4b57      	ldr	r3, [pc, #348]	; (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af0:	4a56      	ldr	r2, [pc, #344]	; (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003af2:	f023 0304 	bic.w	r3, r3, #4
 8003af6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d015      	beq.n	8003b2c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b00:	f7fd ffac 	bl	8001a5c <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b06:	e00a      	b.n	8003b1e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b08:	f7fd ffa8 	bl	8001a5c <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e0d7      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1e:	4b4b      	ldr	r3, [pc, #300]	; (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0ee      	beq.n	8003b08 <HAL_RCC_OscConfig+0x368>
 8003b2a:	e014      	b.n	8003b56 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2c:	f7fd ff96 	bl	8001a5c <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b32:	e00a      	b.n	8003b4a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b34:	f7fd ff92 	bl	8001a5c <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e0c1      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b4a:	4b40      	ldr	r3, [pc, #256]	; (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1ee      	bne.n	8003b34 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b56:	7dfb      	ldrb	r3, [r7, #23]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d105      	bne.n	8003b68 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b5c:	4b3b      	ldr	r3, [pc, #236]	; (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	4a3a      	ldr	r2, [pc, #232]	; (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80ad 	beq.w	8003ccc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b72:	4b36      	ldr	r3, [pc, #216]	; (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 030c 	and.w	r3, r3, #12
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d060      	beq.n	8003c40 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d145      	bne.n	8003c12 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b86:	4b33      	ldr	r3, [pc, #204]	; (8003c54 <HAL_RCC_OscConfig+0x4b4>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8c:	f7fd ff66 	bl	8001a5c <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b94:	f7fd ff62 	bl	8001a5c <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e093      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba6:	4b29      	ldr	r3, [pc, #164]	; (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f0      	bne.n	8003b94 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69da      	ldr	r2, [r3, #28]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	019b      	lsls	r3, r3, #6
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc8:	085b      	lsrs	r3, r3, #1
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	041b      	lsls	r3, r3, #16
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd4:	061b      	lsls	r3, r3, #24
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bdc:	071b      	lsls	r3, r3, #28
 8003bde:	491b      	ldr	r1, [pc, #108]	; (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003be4:	4b1b      	ldr	r3, [pc, #108]	; (8003c54 <HAL_RCC_OscConfig+0x4b4>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bea:	f7fd ff37 	bl	8001a5c <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bf2:	f7fd ff33 	bl	8001a5c <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e064      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c04:	4b11      	ldr	r3, [pc, #68]	; (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0f0      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x452>
 8003c10:	e05c      	b.n	8003ccc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c12:	4b10      	ldr	r3, [pc, #64]	; (8003c54 <HAL_RCC_OscConfig+0x4b4>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c18:	f7fd ff20 	bl	8001a5c <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c20:	f7fd ff1c 	bl	8001a5c <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e04d      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c32:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f0      	bne.n	8003c20 <HAL_RCC_OscConfig+0x480>
 8003c3e:	e045      	b.n	8003ccc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d107      	bne.n	8003c58 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e040      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	40007000 	.word	0x40007000
 8003c54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c58:	4b1f      	ldr	r3, [pc, #124]	; (8003cd8 <HAL_RCC_OscConfig+0x538>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d030      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d129      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d122      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c88:	4013      	ands	r3, r2
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d119      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9e:	085b      	lsrs	r3, r3, #1
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d10f      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d107      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d001      	beq.n	8003ccc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e000      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3718      	adds	r7, #24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40023800 	.word	0x40023800

08003cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e041      	b.n	8003d72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f839 	bl	8003d7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3304      	adds	r3, #4
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	f000 f9c0 	bl	80040a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
	...

08003d90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d001      	beq.n	8003da8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e04e      	b.n	8003e46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0201 	orr.w	r2, r2, #1
 8003dbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a23      	ldr	r2, [pc, #140]	; (8003e54 <HAL_TIM_Base_Start_IT+0xc4>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d022      	beq.n	8003e10 <HAL_TIM_Base_Start_IT+0x80>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd2:	d01d      	beq.n	8003e10 <HAL_TIM_Base_Start_IT+0x80>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a1f      	ldr	r2, [pc, #124]	; (8003e58 <HAL_TIM_Base_Start_IT+0xc8>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d018      	beq.n	8003e10 <HAL_TIM_Base_Start_IT+0x80>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a1e      	ldr	r2, [pc, #120]	; (8003e5c <HAL_TIM_Base_Start_IT+0xcc>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d013      	beq.n	8003e10 <HAL_TIM_Base_Start_IT+0x80>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a1c      	ldr	r2, [pc, #112]	; (8003e60 <HAL_TIM_Base_Start_IT+0xd0>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d00e      	beq.n	8003e10 <HAL_TIM_Base_Start_IT+0x80>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a1b      	ldr	r2, [pc, #108]	; (8003e64 <HAL_TIM_Base_Start_IT+0xd4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d009      	beq.n	8003e10 <HAL_TIM_Base_Start_IT+0x80>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a19      	ldr	r2, [pc, #100]	; (8003e68 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d004      	beq.n	8003e10 <HAL_TIM_Base_Start_IT+0x80>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a18      	ldr	r2, [pc, #96]	; (8003e6c <HAL_TIM_Base_Start_IT+0xdc>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d111      	bne.n	8003e34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b06      	cmp	r3, #6
 8003e20:	d010      	beq.n	8003e44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f042 0201 	orr.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e32:	e007      	b.n	8003e44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0201 	orr.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40010000 	.word	0x40010000
 8003e58:	40000400 	.word	0x40000400
 8003e5c:	40000800 	.word	0x40000800
 8003e60:	40000c00 	.word	0x40000c00
 8003e64:	40010400 	.word	0x40010400
 8003e68:	40014000 	.word	0x40014000
 8003e6c:	40001800 	.word	0x40001800

08003e70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d020      	beq.n	8003ed4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d01b      	beq.n	8003ed4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f06f 0202 	mvn.w	r2, #2
 8003ea4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f8d2 	bl	8004064 <HAL_TIM_IC_CaptureCallback>
 8003ec0:	e005      	b.n	8003ece <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f8c4 	bl	8004050 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f8d5 	bl	8004078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f003 0304 	and.w	r3, r3, #4
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d020      	beq.n	8003f20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01b      	beq.n	8003f20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0204 	mvn.w	r2, #4
 8003ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f8ac 	bl	8004064 <HAL_TIM_IC_CaptureCallback>
 8003f0c:	e005      	b.n	8003f1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f89e 	bl	8004050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f8af 	bl	8004078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d020      	beq.n	8003f6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d01b      	beq.n	8003f6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f06f 0208 	mvn.w	r2, #8
 8003f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2204      	movs	r2, #4
 8003f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f886 	bl	8004064 <HAL_TIM_IC_CaptureCallback>
 8003f58:	e005      	b.n	8003f66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f878 	bl	8004050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f889 	bl	8004078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f003 0310 	and.w	r3, r3, #16
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d020      	beq.n	8003fb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f003 0310 	and.w	r3, r3, #16
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d01b      	beq.n	8003fb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f06f 0210 	mvn.w	r2, #16
 8003f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2208      	movs	r2, #8
 8003f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f860 	bl	8004064 <HAL_TIM_IC_CaptureCallback>
 8003fa4:	e005      	b.n	8003fb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f852 	bl	8004050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f863 	bl	8004078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00c      	beq.n	8003fdc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d007      	beq.n	8003fdc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f06f 0201 	mvn.w	r2, #1
 8003fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7fd f884 	bl	80010e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00c      	beq.n	8004000 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d007      	beq.n	8004000 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f906 	bl	800420c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00c      	beq.n	8004024 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004010:	2b00      	cmp	r3, #0
 8004012:	d007      	beq.n	8004024 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800401c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f834 	bl	800408c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00c      	beq.n	8004048 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b00      	cmp	r3, #0
 8004036:	d007      	beq.n	8004048 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f06f 0220 	mvn.w	r2, #32
 8004040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f8d8 	bl	80041f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004048:	bf00      	nop
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a46      	ldr	r2, [pc, #280]	; (80041cc <TIM_Base_SetConfig+0x12c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d013      	beq.n	80040e0 <TIM_Base_SetConfig+0x40>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040be:	d00f      	beq.n	80040e0 <TIM_Base_SetConfig+0x40>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a43      	ldr	r2, [pc, #268]	; (80041d0 <TIM_Base_SetConfig+0x130>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d00b      	beq.n	80040e0 <TIM_Base_SetConfig+0x40>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a42      	ldr	r2, [pc, #264]	; (80041d4 <TIM_Base_SetConfig+0x134>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d007      	beq.n	80040e0 <TIM_Base_SetConfig+0x40>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a41      	ldr	r2, [pc, #260]	; (80041d8 <TIM_Base_SetConfig+0x138>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d003      	beq.n	80040e0 <TIM_Base_SetConfig+0x40>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a40      	ldr	r2, [pc, #256]	; (80041dc <TIM_Base_SetConfig+0x13c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d108      	bne.n	80040f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a35      	ldr	r2, [pc, #212]	; (80041cc <TIM_Base_SetConfig+0x12c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d02b      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004100:	d027      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a32      	ldr	r2, [pc, #200]	; (80041d0 <TIM_Base_SetConfig+0x130>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d023      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a31      	ldr	r2, [pc, #196]	; (80041d4 <TIM_Base_SetConfig+0x134>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d01f      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a30      	ldr	r2, [pc, #192]	; (80041d8 <TIM_Base_SetConfig+0x138>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d01b      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a2f      	ldr	r2, [pc, #188]	; (80041dc <TIM_Base_SetConfig+0x13c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d017      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a2e      	ldr	r2, [pc, #184]	; (80041e0 <TIM_Base_SetConfig+0x140>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d013      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a2d      	ldr	r2, [pc, #180]	; (80041e4 <TIM_Base_SetConfig+0x144>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d00f      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a2c      	ldr	r2, [pc, #176]	; (80041e8 <TIM_Base_SetConfig+0x148>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d00b      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a2b      	ldr	r2, [pc, #172]	; (80041ec <TIM_Base_SetConfig+0x14c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d007      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a2a      	ldr	r2, [pc, #168]	; (80041f0 <TIM_Base_SetConfig+0x150>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d003      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a29      	ldr	r2, [pc, #164]	; (80041f4 <TIM_Base_SetConfig+0x154>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d108      	bne.n	8004164 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4313      	orrs	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a10      	ldr	r2, [pc, #64]	; (80041cc <TIM_Base_SetConfig+0x12c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d003      	beq.n	8004198 <TIM_Base_SetConfig+0xf8>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a12      	ldr	r2, [pc, #72]	; (80041dc <TIM_Base_SetConfig+0x13c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d103      	bne.n	80041a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	691a      	ldr	r2, [r3, #16]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d105      	bne.n	80041be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f023 0201 	bic.w	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	611a      	str	r2, [r3, #16]
  }
}
 80041be:	bf00      	nop
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40010000 	.word	0x40010000
 80041d0:	40000400 	.word	0x40000400
 80041d4:	40000800 	.word	0x40000800
 80041d8:	40000c00 	.word	0x40000c00
 80041dc:	40010400 	.word	0x40010400
 80041e0:	40014000 	.word	0x40014000
 80041e4:	40014400 	.word	0x40014400
 80041e8:	40014800 	.word	0x40014800
 80041ec:	40001800 	.word	0x40001800
 80041f0:	40001c00 	.word	0x40001c00
 80041f4:	40002000 	.word	0x40002000

080041f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e042      	b.n	80042b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d106      	bne.n	800424c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7fd f8f6 	bl	8001438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2224      	movs	r2, #36	; 0x24
 8004250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004262:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 ffc9 	bl	80051fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	691a      	ldr	r2, [r3, #16]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004278:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695a      	ldr	r2, [r3, #20]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004288:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004298:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b08c      	sub	sp, #48	; 0x30
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	4613      	mov	r3, r2
 80042cc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b20      	cmp	r3, #32
 80042d8:	d156      	bne.n	8004388 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <HAL_UART_Transmit_DMA+0x26>
 80042e0:	88fb      	ldrh	r3, [r7, #6]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e04f      	b.n	800438a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	88fa      	ldrh	r2, [r7, #6]
 80042f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	88fa      	ldrh	r2, [r7, #6]
 80042fa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2221      	movs	r2, #33	; 0x21
 8004306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430e:	4a21      	ldr	r2, [pc, #132]	; (8004394 <HAL_UART_Transmit_DMA+0xd4>)
 8004310:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004316:	4a20      	ldr	r2, [pc, #128]	; (8004398 <HAL_UART_Transmit_DMA+0xd8>)
 8004318:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431e:	4a1f      	ldr	r2, [pc, #124]	; (800439c <HAL_UART_Transmit_DMA+0xdc>)
 8004320:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004326:	2200      	movs	r2, #0
 8004328:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800432a:	f107 0308 	add.w	r3, r7, #8
 800432e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004336:	6819      	ldr	r1, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3304      	adds	r3, #4
 800433e:	461a      	mov	r2, r3
 8004340:	88fb      	ldrh	r3, [r7, #6]
 8004342:	f7fd fd4b 	bl	8001ddc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800434e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3314      	adds	r3, #20
 8004356:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	e853 3f00 	ldrex	r3, [r3]
 800435e:	617b      	str	r3, [r7, #20]
   return(result);
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004366:	62bb      	str	r3, [r7, #40]	; 0x28
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3314      	adds	r3, #20
 800436e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004370:	627a      	str	r2, [r7, #36]	; 0x24
 8004372:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004374:	6a39      	ldr	r1, [r7, #32]
 8004376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004378:	e841 2300 	strex	r3, r2, [r1]
 800437c:	61fb      	str	r3, [r7, #28]
   return(result);
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1e5      	bne.n	8004350 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004384:	2300      	movs	r3, #0
 8004386:	e000      	b.n	800438a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004388:	2302      	movs	r3, #2
  }
}
 800438a:	4618      	mov	r0, r3
 800438c:	3730      	adds	r7, #48	; 0x30
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	08004a89 	.word	0x08004a89
 8004398:	08004b23 	.word	0x08004b23
 800439c:	08004ca7 	.word	0x08004ca7

080043a0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	4613      	mov	r3, r2
 80043ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b20      	cmp	r3, #32
 80043b8:	d112      	bne.n	80043e0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <HAL_UART_Receive_DMA+0x26>
 80043c0:	88fb      	ldrh	r3, [r7, #6]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e00b      	b.n	80043e2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80043d0:	88fb      	ldrh	r3, [r7, #6]
 80043d2:	461a      	mov	r2, r3
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 fcb0 	bl	8004d3c <UART_Start_Receive_DMA>
 80043dc:	4603      	mov	r3, r0
 80043de:	e000      	b.n	80043e2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80043e0:	2302      	movs	r3, #2
  }
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b090      	sub	sp, #64	; 0x40
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004400:	2b80      	cmp	r3, #128	; 0x80
 8004402:	bf0c      	ite	eq
 8004404:	2301      	moveq	r3, #1
 8004406:	2300      	movne	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b21      	cmp	r3, #33	; 0x21
 8004416:	d128      	bne.n	800446a <HAL_UART_DMAStop+0x80>
 8004418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d025      	beq.n	800446a <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3314      	adds	r3, #20
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	e853 3f00 	ldrex	r3, [r3]
 800442c:	623b      	str	r3, [r7, #32]
   return(result);
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004434:	63bb      	str	r3, [r7, #56]	; 0x38
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3314      	adds	r3, #20
 800443c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800443e:	633a      	str	r2, [r7, #48]	; 0x30
 8004440:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004442:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004446:	e841 2300 	strex	r3, r2, [r1]
 800444a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800444c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1e5      	bne.n	800441e <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004456:	2b00      	cmp	r3, #0
 8004458:	d004      	beq.n	8004464 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445e:	4618      	mov	r0, r3
 8004460:	f7fd fd14 	bl	8001e8c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 fd03 	bl	8004e70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004474:	2b40      	cmp	r3, #64	; 0x40
 8004476:	bf0c      	ite	eq
 8004478:	2301      	moveq	r3, #1
 800447a:	2300      	movne	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b22      	cmp	r3, #34	; 0x22
 800448a:	d128      	bne.n	80044de <HAL_UART_DMAStop+0xf4>
 800448c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800448e:	2b00      	cmp	r3, #0
 8004490:	d025      	beq.n	80044de <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3314      	adds	r3, #20
 8004498:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	e853 3f00 	ldrex	r3, [r3]
 80044a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044a8:	637b      	str	r3, [r7, #52]	; 0x34
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3314      	adds	r3, #20
 80044b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044b2:	61fa      	str	r2, [r7, #28]
 80044b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b6:	69b9      	ldr	r1, [r7, #24]
 80044b8:	69fa      	ldr	r2, [r7, #28]
 80044ba:	e841 2300 	strex	r3, r2, [r1]
 80044be:	617b      	str	r3, [r7, #20]
   return(result);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1e5      	bne.n	8004492 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d004      	beq.n	80044d8 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fd fcda 	bl	8001e8c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 fcf1 	bl	8004ec0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3740      	adds	r7, #64	; 0x40
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b0ba      	sub	sp, #232	; 0xe8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800450e:	2300      	movs	r3, #0
 8004510:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004514:	2300      	movs	r3, #0
 8004516:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800451a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004526:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10f      	bne.n	800454e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800452e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b00      	cmp	r3, #0
 8004538:	d009      	beq.n	800454e <HAL_UART_IRQHandler+0x66>
 800453a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800453e:	f003 0320 	and.w	r3, r3, #32
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fd99 	bl	800507e <UART_Receive_IT>
      return;
 800454c:	e25b      	b.n	8004a06 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800454e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 80de 	beq.w	8004714 <HAL_UART_IRQHandler+0x22c>
 8004558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b00      	cmp	r3, #0
 8004562:	d106      	bne.n	8004572 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004568:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 80d1 	beq.w	8004714 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00b      	beq.n	8004596 <HAL_UART_IRQHandler+0xae>
 800457e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004586:	2b00      	cmp	r3, #0
 8004588:	d005      	beq.n	8004596 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458e:	f043 0201 	orr.w	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800459a:	f003 0304 	and.w	r3, r3, #4
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00b      	beq.n	80045ba <HAL_UART_IRQHandler+0xd2>
 80045a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d005      	beq.n	80045ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b2:	f043 0202 	orr.w	r2, r3, #2
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00b      	beq.n	80045de <HAL_UART_IRQHandler+0xf6>
 80045c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d6:	f043 0204 	orr.w	r2, r3, #4
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d011      	beq.n	800460e <HAL_UART_IRQHandler+0x126>
 80045ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d105      	bne.n	8004602 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80045f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d005      	beq.n	800460e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004606:	f043 0208 	orr.w	r2, r3, #8
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 81f2 	beq.w	80049fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b00      	cmp	r3, #0
 8004622:	d008      	beq.n	8004636 <HAL_UART_IRQHandler+0x14e>
 8004624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 fd24 	bl	800507e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004640:	2b40      	cmp	r3, #64	; 0x40
 8004642:	bf0c      	ite	eq
 8004644:	2301      	moveq	r3, #1
 8004646:	2300      	movne	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d103      	bne.n	8004662 <HAL_UART_IRQHandler+0x17a>
 800465a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800465e:	2b00      	cmp	r3, #0
 8004660:	d04f      	beq.n	8004702 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fc2c 	bl	8004ec0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004672:	2b40      	cmp	r3, #64	; 0x40
 8004674:	d141      	bne.n	80046fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3314      	adds	r3, #20
 800467c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004684:	e853 3f00 	ldrex	r3, [r3]
 8004688:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800468c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004690:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004694:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3314      	adds	r3, #20
 800469e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046b2:	e841 2300 	strex	r3, r2, [r1]
 80046b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80046ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1d9      	bne.n	8004676 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d013      	beq.n	80046f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ce:	4a7e      	ldr	r2, [pc, #504]	; (80048c8 <HAL_UART_IRQHandler+0x3e0>)
 80046d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fd fc48 	bl	8001f6c <HAL_DMA_Abort_IT>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d016      	beq.n	8004710 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046ec:	4610      	mov	r0, r2
 80046ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f0:	e00e      	b.n	8004710 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f9b2 	bl	8004a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f8:	e00a      	b.n	8004710 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f9ae 	bl	8004a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004700:	e006      	b.n	8004710 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f9aa 	bl	8004a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800470e:	e175      	b.n	80049fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004710:	bf00      	nop
    return;
 8004712:	e173      	b.n	80049fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004718:	2b01      	cmp	r3, #1
 800471a:	f040 814f 	bne.w	80049bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800471e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004722:	f003 0310 	and.w	r3, r3, #16
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 8148 	beq.w	80049bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800472c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004730:	f003 0310 	and.w	r3, r3, #16
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 8141 	beq.w	80049bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800473a:	2300      	movs	r3, #0
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475a:	2b40      	cmp	r3, #64	; 0x40
 800475c:	f040 80b6 	bne.w	80048cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800476c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 8145 	beq.w	8004a00 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800477a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800477e:	429a      	cmp	r2, r3
 8004780:	f080 813e 	bcs.w	8004a00 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800478a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004796:	f000 8088 	beq.w	80048aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	330c      	adds	r3, #12
 80047a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047a8:	e853 3f00 	ldrex	r3, [r3]
 80047ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	330c      	adds	r3, #12
 80047c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80047c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80047d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80047d6:	e841 2300 	strex	r3, r2, [r1]
 80047da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80047de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1d9      	bne.n	800479a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3314      	adds	r3, #20
 80047ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047f0:	e853 3f00 	ldrex	r3, [r3]
 80047f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80047f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047f8:	f023 0301 	bic.w	r3, r3, #1
 80047fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3314      	adds	r3, #20
 8004806:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800480a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800480e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004810:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004812:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004816:	e841 2300 	strex	r3, r2, [r1]
 800481a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800481c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1e1      	bne.n	80047e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3314      	adds	r3, #20
 8004828:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800482c:	e853 3f00 	ldrex	r3, [r3]
 8004830:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004838:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	3314      	adds	r3, #20
 8004842:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004846:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004848:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800484c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800484e:	e841 2300 	strex	r3, r2, [r1]
 8004852:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004854:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1e3      	bne.n	8004822 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2220      	movs	r2, #32
 800485e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	330c      	adds	r3, #12
 800486e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004872:	e853 3f00 	ldrex	r3, [r3]
 8004876:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800487a:	f023 0310 	bic.w	r3, r3, #16
 800487e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	330c      	adds	r3, #12
 8004888:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800488c:	65ba      	str	r2, [r7, #88]	; 0x58
 800488e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004890:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004892:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004894:	e841 2300 	strex	r3, r2, [r1]
 8004898:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800489a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1e3      	bne.n	8004868 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fd faf1 	bl	8001e8c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2202      	movs	r2, #2
 80048ae:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	b29b      	uxth	r3, r3
 80048be:	4619      	mov	r1, r3
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 f8d5 	bl	8004a70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048c6:	e09b      	b.n	8004a00 <HAL_UART_IRQHandler+0x518>
 80048c8:	08004f87 	.word	0x08004f87
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 808e 	beq.w	8004a04 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80048e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 8089 	beq.w	8004a04 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	330c      	adds	r3, #12
 80048f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fc:	e853 3f00 	ldrex	r3, [r3]
 8004900:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004904:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004908:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	330c      	adds	r3, #12
 8004912:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004916:	647a      	str	r2, [r7, #68]	; 0x44
 8004918:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800491c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800491e:	e841 2300 	strex	r3, r2, [r1]
 8004922:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1e3      	bne.n	80048f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3314      	adds	r3, #20
 8004930:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	e853 3f00 	ldrex	r3, [r3]
 8004938:	623b      	str	r3, [r7, #32]
   return(result);
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	f023 0301 	bic.w	r3, r3, #1
 8004940:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3314      	adds	r3, #20
 800494a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800494e:	633a      	str	r2, [r7, #48]	; 0x30
 8004950:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004952:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004956:	e841 2300 	strex	r3, r2, [r1]
 800495a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800495c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1e3      	bne.n	800492a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2220      	movs	r2, #32
 8004966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	330c      	adds	r3, #12
 8004976:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	e853 3f00 	ldrex	r3, [r3]
 800497e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 0310 	bic.w	r3, r3, #16
 8004986:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	330c      	adds	r3, #12
 8004990:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004994:	61fa      	str	r2, [r7, #28]
 8004996:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004998:	69b9      	ldr	r1, [r7, #24]
 800499a:	69fa      	ldr	r2, [r7, #28]
 800499c:	e841 2300 	strex	r3, r2, [r1]
 80049a0:	617b      	str	r3, [r7, #20]
   return(result);
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1e3      	bne.n	8004970 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2202      	movs	r2, #2
 80049ac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049b2:	4619      	mov	r1, r3
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f85b 	bl	8004a70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049ba:	e023      	b.n	8004a04 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d009      	beq.n	80049dc <HAL_UART_IRQHandler+0x4f4>
 80049c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 faea 	bl	8004fae <UART_Transmit_IT>
    return;
 80049da:	e014      	b.n	8004a06 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00e      	beq.n	8004a06 <HAL_UART_IRQHandler+0x51e>
 80049e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d008      	beq.n	8004a06 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fb2a 	bl	800504e <UART_EndTransmit_IT>
    return;
 80049fa:	e004      	b.n	8004a06 <HAL_UART_IRQHandler+0x51e>
    return;
 80049fc:	bf00      	nop
 80049fe:	e002      	b.n	8004a06 <HAL_UART_IRQHandler+0x51e>
      return;
 8004a00:	bf00      	nop
 8004a02:	e000      	b.n	8004a06 <HAL_UART_IRQHandler+0x51e>
      return;
 8004a04:	bf00      	nop
  }
}
 8004a06:	37e8      	adds	r7, #232	; 0xe8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b090      	sub	sp, #64	; 0x40
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a94:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d137      	bne.n	8004b14 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	3314      	adds	r3, #20
 8004ab0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	e853 3f00 	ldrex	r3, [r3]
 8004ab8:	623b      	str	r3, [r7, #32]
   return(result);
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ac0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3314      	adds	r3, #20
 8004ac8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004aca:	633a      	str	r2, [r7, #48]	; 0x30
 8004acc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ace:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad2:	e841 2300 	strex	r3, r2, [r1]
 8004ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1e5      	bne.n	8004aaa <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	330c      	adds	r3, #12
 8004ae4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	e853 3f00 	ldrex	r3, [r3]
 8004aec:	60fb      	str	r3, [r7, #12]
   return(result);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004af4:	637b      	str	r3, [r7, #52]	; 0x34
 8004af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	330c      	adds	r3, #12
 8004afc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004afe:	61fa      	str	r2, [r7, #28]
 8004b00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b02:	69b9      	ldr	r1, [r7, #24]
 8004b04:	69fa      	ldr	r2, [r7, #28]
 8004b06:	e841 2300 	strex	r3, r2, [r1]
 8004b0a:	617b      	str	r3, [r7, #20]
   return(result);
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1e5      	bne.n	8004ade <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b12:	e002      	b.n	8004b1a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004b14:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004b16:	f7ff ff79 	bl	8004a0c <HAL_UART_TxCpltCallback>
}
 8004b1a:	bf00      	nop
 8004b1c:	3740      	adds	r7, #64	; 0x40
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b084      	sub	sp, #16
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f7ff ff75 	bl	8004a20 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b36:	bf00      	nop
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b09c      	sub	sp, #112	; 0x70
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d172      	bne.n	8004c40 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	330c      	adds	r3, #12
 8004b66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b6a:	e853 3f00 	ldrex	r3, [r3]
 8004b6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b76:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	330c      	adds	r3, #12
 8004b7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b80:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b82:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b88:	e841 2300 	strex	r3, r2, [r1]
 8004b8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1e5      	bne.n	8004b60 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3314      	adds	r3, #20
 8004b9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9e:	e853 3f00 	ldrex	r3, [r3]
 8004ba2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba6:	f023 0301 	bic.w	r3, r3, #1
 8004baa:	667b      	str	r3, [r7, #100]	; 0x64
 8004bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3314      	adds	r3, #20
 8004bb2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004bb4:	647a      	str	r2, [r7, #68]	; 0x44
 8004bb6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bbc:	e841 2300 	strex	r3, r2, [r1]
 8004bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1e5      	bne.n	8004b94 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3314      	adds	r3, #20
 8004bce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	e853 3f00 	ldrex	r3, [r3]
 8004bd6:	623b      	str	r3, [r7, #32]
   return(result);
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bde:	663b      	str	r3, [r7, #96]	; 0x60
 8004be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	3314      	adds	r3, #20
 8004be6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004be8:	633a      	str	r2, [r7, #48]	; 0x30
 8004bea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bf0:	e841 2300 	strex	r3, r2, [r1]
 8004bf4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1e5      	bne.n	8004bc8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d119      	bne.n	8004c40 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	330c      	adds	r3, #12
 8004c12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	e853 3f00 	ldrex	r3, [r3]
 8004c1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f023 0310 	bic.w	r3, r3, #16
 8004c22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	330c      	adds	r3, #12
 8004c2a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c2c:	61fa      	str	r2, [r7, #28]
 8004c2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c30:	69b9      	ldr	r1, [r7, #24]
 8004c32:	69fa      	ldr	r2, [r7, #28]
 8004c34:	e841 2300 	strex	r3, r2, [r1]
 8004c38:	617b      	str	r3, [r7, #20]
   return(result);
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1e5      	bne.n	8004c0c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c42:	2200      	movs	r2, #0
 8004c44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d106      	bne.n	8004c5c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c52:	4619      	mov	r1, r3
 8004c54:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004c56:	f7ff ff0b 	bl	8004a70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c5a:	e002      	b.n	8004c62 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004c5c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004c5e:	f7ff fee9 	bl	8004a34 <HAL_UART_RxCpltCallback>
}
 8004c62:	bf00      	nop
 8004c64:	3770      	adds	r7, #112	; 0x70
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d108      	bne.n	8004c98 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c8a:	085b      	lsrs	r3, r3, #1
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	4619      	mov	r1, r3
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f7ff feed 	bl	8004a70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c96:	e002      	b.n	8004c9e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f7ff fed5 	bl	8004a48 <HAL_UART_RxHalfCpltCallback>
}
 8004c9e:	bf00      	nop
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b084      	sub	sp, #16
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc2:	2b80      	cmp	r3, #128	; 0x80
 8004cc4:	bf0c      	ite	eq
 8004cc6:	2301      	moveq	r3, #1
 8004cc8:	2300      	movne	r3, #0
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b21      	cmp	r3, #33	; 0x21
 8004cd8:	d108      	bne.n	8004cec <UART_DMAError+0x46>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004ce6:	68b8      	ldr	r0, [r7, #8]
 8004ce8:	f000 f8c2 	bl	8004e70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf6:	2b40      	cmp	r3, #64	; 0x40
 8004cf8:	bf0c      	ite	eq
 8004cfa:	2301      	moveq	r3, #1
 8004cfc:	2300      	movne	r3, #0
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b22      	cmp	r3, #34	; 0x22
 8004d0c:	d108      	bne.n	8004d20 <UART_DMAError+0x7a>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2200      	movs	r2, #0
 8004d18:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004d1a:	68b8      	ldr	r0, [r7, #8]
 8004d1c:	f000 f8d0 	bl	8004ec0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d24:	f043 0210 	orr.w	r2, r3, #16
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d2c:	68b8      	ldr	r0, [r7, #8]
 8004d2e:	f7ff fe95 	bl	8004a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d32:	bf00      	nop
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b098      	sub	sp, #96	; 0x60
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	4613      	mov	r3, r2
 8004d48:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	88fa      	ldrh	r2, [r7, #6]
 8004d54:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2222      	movs	r2, #34	; 0x22
 8004d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d68:	4a3e      	ldr	r2, [pc, #248]	; (8004e64 <UART_Start_Receive_DMA+0x128>)
 8004d6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d70:	4a3d      	ldr	r2, [pc, #244]	; (8004e68 <UART_Start_Receive_DMA+0x12c>)
 8004d72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d78:	4a3c      	ldr	r2, [pc, #240]	; (8004e6c <UART_Start_Receive_DMA+0x130>)
 8004d7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d80:	2200      	movs	r2, #0
 8004d82:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004d84:	f107 0308 	add.w	r3, r7, #8
 8004d88:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	3304      	adds	r3, #4
 8004d94:	4619      	mov	r1, r3
 8004d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	88fb      	ldrh	r3, [r7, #6]
 8004d9c:	f7fd f81e 	bl	8001ddc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004da0:	2300      	movs	r3, #0
 8004da2:	613b      	str	r3, [r7, #16]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	613b      	str	r3, [r7, #16]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	613b      	str	r3, [r7, #16]
 8004db4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d019      	beq.n	8004df2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	330c      	adds	r3, #12
 8004dc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dc8:	e853 3f00 	ldrex	r3, [r3]
 8004dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	330c      	adds	r3, #12
 8004ddc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dde:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004de0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004de4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004de6:	e841 2300 	strex	r3, r2, [r1]
 8004dea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1e5      	bne.n	8004dbe <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3314      	adds	r3, #20
 8004df8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfc:	e853 3f00 	ldrex	r3, [r3]
 8004e00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e04:	f043 0301 	orr.w	r3, r3, #1
 8004e08:	657b      	str	r3, [r7, #84]	; 0x54
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3314      	adds	r3, #20
 8004e10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e12:	63ba      	str	r2, [r7, #56]	; 0x38
 8004e14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1e5      	bne.n	8004df2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3314      	adds	r3, #20
 8004e2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	e853 3f00 	ldrex	r3, [r3]
 8004e34:	617b      	str	r3, [r7, #20]
   return(result);
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e3c:	653b      	str	r3, [r7, #80]	; 0x50
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	3314      	adds	r3, #20
 8004e44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e46:	627a      	str	r2, [r7, #36]	; 0x24
 8004e48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4a:	6a39      	ldr	r1, [r7, #32]
 8004e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e4e:	e841 2300 	strex	r3, r2, [r1]
 8004e52:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1e5      	bne.n	8004e26 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3760      	adds	r7, #96	; 0x60
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	08004b3f 	.word	0x08004b3f
 8004e68:	08004c6b 	.word	0x08004c6b
 8004e6c:	08004ca7 	.word	0x08004ca7

08004e70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b089      	sub	sp, #36	; 0x24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	330c      	adds	r3, #12
 8004e7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	e853 3f00 	ldrex	r3, [r3]
 8004e86:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004e8e:	61fb      	str	r3, [r7, #28]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	330c      	adds	r3, #12
 8004e96:	69fa      	ldr	r2, [r7, #28]
 8004e98:	61ba      	str	r2, [r7, #24]
 8004e9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9c:	6979      	ldr	r1, [r7, #20]
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	e841 2300 	strex	r3, r2, [r1]
 8004ea4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1e5      	bne.n	8004e78 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004eb4:	bf00      	nop
 8004eb6:	3724      	adds	r7, #36	; 0x24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b095      	sub	sp, #84	; 0x54
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	330c      	adds	r3, #12
 8004ece:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed2:	e853 3f00 	ldrex	r3, [r3]
 8004ed6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	330c      	adds	r3, #12
 8004ee6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ee8:	643a      	str	r2, [r7, #64]	; 0x40
 8004eea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004eee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ef0:	e841 2300 	strex	r3, r2, [r1]
 8004ef4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1e5      	bne.n	8004ec8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3314      	adds	r3, #20
 8004f02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	e853 3f00 	ldrex	r3, [r3]
 8004f0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	f023 0301 	bic.w	r3, r3, #1
 8004f12:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	3314      	adds	r3, #20
 8004f1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f24:	e841 2300 	strex	r3, r2, [r1]
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1e5      	bne.n	8004efc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d119      	bne.n	8004f6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	330c      	adds	r3, #12
 8004f3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	e853 3f00 	ldrex	r3, [r3]
 8004f46:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f023 0310 	bic.w	r3, r3, #16
 8004f4e:	647b      	str	r3, [r7, #68]	; 0x44
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	330c      	adds	r3, #12
 8004f56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f58:	61ba      	str	r2, [r7, #24]
 8004f5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5c:	6979      	ldr	r1, [r7, #20]
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	e841 2300 	strex	r3, r2, [r1]
 8004f64:	613b      	str	r3, [r7, #16]
   return(result);
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1e5      	bne.n	8004f38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004f7a:	bf00      	nop
 8004f7c:	3754      	adds	r7, #84	; 0x54
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f7ff fd5b 	bl	8004a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fa6:	bf00      	nop
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b085      	sub	sp, #20
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b21      	cmp	r3, #33	; 0x21
 8004fc0:	d13e      	bne.n	8005040 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fca:	d114      	bne.n	8004ff6 <UART_Transmit_IT+0x48>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d110      	bne.n	8004ff6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fe8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	1c9a      	adds	r2, r3, #2
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	621a      	str	r2, [r3, #32]
 8004ff4:	e008      	b.n	8005008 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	1c59      	adds	r1, r3, #1
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6211      	str	r1, [r2, #32]
 8005000:	781a      	ldrb	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800500c:	b29b      	uxth	r3, r3
 800500e:	3b01      	subs	r3, #1
 8005010:	b29b      	uxth	r3, r3
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	4619      	mov	r1, r3
 8005016:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10f      	bne.n	800503c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800502a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800503a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	e000      	b.n	8005042 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005040:	2302      	movs	r3, #2
  }
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b082      	sub	sp, #8
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68da      	ldr	r2, [r3, #12]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005064:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2220      	movs	r2, #32
 800506a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7ff fccc 	bl	8004a0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b08c      	sub	sp, #48	; 0x30
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b22      	cmp	r3, #34	; 0x22
 8005090:	f040 80ae 	bne.w	80051f0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800509c:	d117      	bne.n	80050ce <UART_Receive_IT+0x50>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d113      	bne.n	80050ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050bc:	b29a      	uxth	r2, r3
 80050be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c6:	1c9a      	adds	r2, r3, #2
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	629a      	str	r2, [r3, #40]	; 0x28
 80050cc:	e026      	b.n	800511c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80050d4:	2300      	movs	r3, #0
 80050d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e0:	d007      	beq.n	80050f2 <UART_Receive_IT+0x74>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10a      	bne.n	8005100 <UART_Receive_IT+0x82>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d106      	bne.n	8005100 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fc:	701a      	strb	r2, [r3, #0]
 80050fe:	e008      	b.n	8005112 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	b2db      	uxtb	r3, r3
 8005108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800510c:	b2da      	uxtb	r2, r3
 800510e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005110:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005120:	b29b      	uxth	r3, r3
 8005122:	3b01      	subs	r3, #1
 8005124:	b29b      	uxth	r3, r3
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	4619      	mov	r1, r3
 800512a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800512c:	2b00      	cmp	r3, #0
 800512e:	d15d      	bne.n	80051ec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0220 	bic.w	r2, r2, #32
 800513e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800514e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695a      	ldr	r2, [r3, #20]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0201 	bic.w	r2, r2, #1
 800515e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005172:	2b01      	cmp	r3, #1
 8005174:	d135      	bne.n	80051e2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	330c      	adds	r3, #12
 8005182:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	e853 3f00 	ldrex	r3, [r3]
 800518a:	613b      	str	r3, [r7, #16]
   return(result);
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	f023 0310 	bic.w	r3, r3, #16
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	330c      	adds	r3, #12
 800519a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519c:	623a      	str	r2, [r7, #32]
 800519e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a0:	69f9      	ldr	r1, [r7, #28]
 80051a2:	6a3a      	ldr	r2, [r7, #32]
 80051a4:	e841 2300 	strex	r3, r2, [r1]
 80051a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1e5      	bne.n	800517c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0310 	and.w	r3, r3, #16
 80051ba:	2b10      	cmp	r3, #16
 80051bc:	d10a      	bne.n	80051d4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051be:	2300      	movs	r3, #0
 80051c0:	60fb      	str	r3, [r7, #12]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	60fb      	str	r3, [r7, #12]
 80051d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051d8:	4619      	mov	r1, r3
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7ff fc48 	bl	8004a70 <HAL_UARTEx_RxEventCallback>
 80051e0:	e002      	b.n	80051e8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7ff fc26 	bl	8004a34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051e8:	2300      	movs	r3, #0
 80051ea:	e002      	b.n	80051f2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80051ec:	2300      	movs	r3, #0
 80051ee:	e000      	b.n	80051f2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80051f0:	2302      	movs	r3, #2
  }
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3730      	adds	r7, #48	; 0x30
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005200:	b0c0      	sub	sp, #256	; 0x100
 8005202:	af00      	add	r7, sp, #0
 8005204:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005218:	68d9      	ldr	r1, [r3, #12]
 800521a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	ea40 0301 	orr.w	r3, r0, r1
 8005224:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	431a      	orrs	r2, r3
 8005234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	431a      	orrs	r2, r3
 800523c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005254:	f021 010c 	bic.w	r1, r1, #12
 8005258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005262:	430b      	orrs	r3, r1
 8005264:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005276:	6999      	ldr	r1, [r3, #24]
 8005278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	ea40 0301 	orr.w	r3, r0, r1
 8005282:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	4b8f      	ldr	r3, [pc, #572]	; (80054c8 <UART_SetConfig+0x2cc>)
 800528c:	429a      	cmp	r2, r3
 800528e:	d005      	beq.n	800529c <UART_SetConfig+0xa0>
 8005290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	4b8d      	ldr	r3, [pc, #564]	; (80054cc <UART_SetConfig+0x2d0>)
 8005298:	429a      	cmp	r2, r3
 800529a:	d104      	bne.n	80052a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800529c:	f7fd fce0 	bl	8002c60 <HAL_RCC_GetPCLK2Freq>
 80052a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80052a4:	e003      	b.n	80052ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052a6:	f7fd fcc7 	bl	8002c38 <HAL_RCC_GetPCLK1Freq>
 80052aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b8:	f040 810c 	bne.w	80054d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052c0:	2200      	movs	r2, #0
 80052c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80052ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80052ce:	4622      	mov	r2, r4
 80052d0:	462b      	mov	r3, r5
 80052d2:	1891      	adds	r1, r2, r2
 80052d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80052d6:	415b      	adcs	r3, r3
 80052d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80052de:	4621      	mov	r1, r4
 80052e0:	eb12 0801 	adds.w	r8, r2, r1
 80052e4:	4629      	mov	r1, r5
 80052e6:	eb43 0901 	adc.w	r9, r3, r1
 80052ea:	f04f 0200 	mov.w	r2, #0
 80052ee:	f04f 0300 	mov.w	r3, #0
 80052f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052fe:	4690      	mov	r8, r2
 8005300:	4699      	mov	r9, r3
 8005302:	4623      	mov	r3, r4
 8005304:	eb18 0303 	adds.w	r3, r8, r3
 8005308:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800530c:	462b      	mov	r3, r5
 800530e:	eb49 0303 	adc.w	r3, r9, r3
 8005312:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005322:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005326:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800532a:	460b      	mov	r3, r1
 800532c:	18db      	adds	r3, r3, r3
 800532e:	653b      	str	r3, [r7, #80]	; 0x50
 8005330:	4613      	mov	r3, r2
 8005332:	eb42 0303 	adc.w	r3, r2, r3
 8005336:	657b      	str	r3, [r7, #84]	; 0x54
 8005338:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800533c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005340:	f7fb f81e 	bl	8000380 <__aeabi_uldivmod>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	4b61      	ldr	r3, [pc, #388]	; (80054d0 <UART_SetConfig+0x2d4>)
 800534a:	fba3 2302 	umull	r2, r3, r3, r2
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	011c      	lsls	r4, r3, #4
 8005352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005356:	2200      	movs	r2, #0
 8005358:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800535c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005360:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005364:	4642      	mov	r2, r8
 8005366:	464b      	mov	r3, r9
 8005368:	1891      	adds	r1, r2, r2
 800536a:	64b9      	str	r1, [r7, #72]	; 0x48
 800536c:	415b      	adcs	r3, r3
 800536e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005370:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005374:	4641      	mov	r1, r8
 8005376:	eb12 0a01 	adds.w	sl, r2, r1
 800537a:	4649      	mov	r1, r9
 800537c:	eb43 0b01 	adc.w	fp, r3, r1
 8005380:	f04f 0200 	mov.w	r2, #0
 8005384:	f04f 0300 	mov.w	r3, #0
 8005388:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800538c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005390:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005394:	4692      	mov	sl, r2
 8005396:	469b      	mov	fp, r3
 8005398:	4643      	mov	r3, r8
 800539a:	eb1a 0303 	adds.w	r3, sl, r3
 800539e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053a2:	464b      	mov	r3, r9
 80053a4:	eb4b 0303 	adc.w	r3, fp, r3
 80053a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80053bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053c0:	460b      	mov	r3, r1
 80053c2:	18db      	adds	r3, r3, r3
 80053c4:	643b      	str	r3, [r7, #64]	; 0x40
 80053c6:	4613      	mov	r3, r2
 80053c8:	eb42 0303 	adc.w	r3, r2, r3
 80053cc:	647b      	str	r3, [r7, #68]	; 0x44
 80053ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80053d6:	f7fa ffd3 	bl	8000380 <__aeabi_uldivmod>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	4611      	mov	r1, r2
 80053e0:	4b3b      	ldr	r3, [pc, #236]	; (80054d0 <UART_SetConfig+0x2d4>)
 80053e2:	fba3 2301 	umull	r2, r3, r3, r1
 80053e6:	095b      	lsrs	r3, r3, #5
 80053e8:	2264      	movs	r2, #100	; 0x64
 80053ea:	fb02 f303 	mul.w	r3, r2, r3
 80053ee:	1acb      	subs	r3, r1, r3
 80053f0:	00db      	lsls	r3, r3, #3
 80053f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80053f6:	4b36      	ldr	r3, [pc, #216]	; (80054d0 <UART_SetConfig+0x2d4>)
 80053f8:	fba3 2302 	umull	r2, r3, r3, r2
 80053fc:	095b      	lsrs	r3, r3, #5
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005404:	441c      	add	r4, r3
 8005406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800540a:	2200      	movs	r2, #0
 800540c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005410:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005414:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005418:	4642      	mov	r2, r8
 800541a:	464b      	mov	r3, r9
 800541c:	1891      	adds	r1, r2, r2
 800541e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005420:	415b      	adcs	r3, r3
 8005422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005424:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005428:	4641      	mov	r1, r8
 800542a:	1851      	adds	r1, r2, r1
 800542c:	6339      	str	r1, [r7, #48]	; 0x30
 800542e:	4649      	mov	r1, r9
 8005430:	414b      	adcs	r3, r1
 8005432:	637b      	str	r3, [r7, #52]	; 0x34
 8005434:	f04f 0200 	mov.w	r2, #0
 8005438:	f04f 0300 	mov.w	r3, #0
 800543c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005440:	4659      	mov	r1, fp
 8005442:	00cb      	lsls	r3, r1, #3
 8005444:	4651      	mov	r1, sl
 8005446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800544a:	4651      	mov	r1, sl
 800544c:	00ca      	lsls	r2, r1, #3
 800544e:	4610      	mov	r0, r2
 8005450:	4619      	mov	r1, r3
 8005452:	4603      	mov	r3, r0
 8005454:	4642      	mov	r2, r8
 8005456:	189b      	adds	r3, r3, r2
 8005458:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800545c:	464b      	mov	r3, r9
 800545e:	460a      	mov	r2, r1
 8005460:	eb42 0303 	adc.w	r3, r2, r3
 8005464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005474:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005478:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800547c:	460b      	mov	r3, r1
 800547e:	18db      	adds	r3, r3, r3
 8005480:	62bb      	str	r3, [r7, #40]	; 0x28
 8005482:	4613      	mov	r3, r2
 8005484:	eb42 0303 	adc.w	r3, r2, r3
 8005488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800548a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800548e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005492:	f7fa ff75 	bl	8000380 <__aeabi_uldivmod>
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	4b0d      	ldr	r3, [pc, #52]	; (80054d0 <UART_SetConfig+0x2d4>)
 800549c:	fba3 1302 	umull	r1, r3, r3, r2
 80054a0:	095b      	lsrs	r3, r3, #5
 80054a2:	2164      	movs	r1, #100	; 0x64
 80054a4:	fb01 f303 	mul.w	r3, r1, r3
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	3332      	adds	r3, #50	; 0x32
 80054ae:	4a08      	ldr	r2, [pc, #32]	; (80054d0 <UART_SetConfig+0x2d4>)
 80054b0:	fba2 2303 	umull	r2, r3, r2, r3
 80054b4:	095b      	lsrs	r3, r3, #5
 80054b6:	f003 0207 	and.w	r2, r3, #7
 80054ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4422      	add	r2, r4
 80054c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054c4:	e106      	b.n	80056d4 <UART_SetConfig+0x4d8>
 80054c6:	bf00      	nop
 80054c8:	40011000 	.word	0x40011000
 80054cc:	40011400 	.word	0x40011400
 80054d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054d8:	2200      	movs	r2, #0
 80054da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80054e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80054e6:	4642      	mov	r2, r8
 80054e8:	464b      	mov	r3, r9
 80054ea:	1891      	adds	r1, r2, r2
 80054ec:	6239      	str	r1, [r7, #32]
 80054ee:	415b      	adcs	r3, r3
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
 80054f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054f6:	4641      	mov	r1, r8
 80054f8:	1854      	adds	r4, r2, r1
 80054fa:	4649      	mov	r1, r9
 80054fc:	eb43 0501 	adc.w	r5, r3, r1
 8005500:	f04f 0200 	mov.w	r2, #0
 8005504:	f04f 0300 	mov.w	r3, #0
 8005508:	00eb      	lsls	r3, r5, #3
 800550a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800550e:	00e2      	lsls	r2, r4, #3
 8005510:	4614      	mov	r4, r2
 8005512:	461d      	mov	r5, r3
 8005514:	4643      	mov	r3, r8
 8005516:	18e3      	adds	r3, r4, r3
 8005518:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800551c:	464b      	mov	r3, r9
 800551e:	eb45 0303 	adc.w	r3, r5, r3
 8005522:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005532:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005536:	f04f 0200 	mov.w	r2, #0
 800553a:	f04f 0300 	mov.w	r3, #0
 800553e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005542:	4629      	mov	r1, r5
 8005544:	008b      	lsls	r3, r1, #2
 8005546:	4621      	mov	r1, r4
 8005548:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800554c:	4621      	mov	r1, r4
 800554e:	008a      	lsls	r2, r1, #2
 8005550:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005554:	f7fa ff14 	bl	8000380 <__aeabi_uldivmod>
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	4b60      	ldr	r3, [pc, #384]	; (80056e0 <UART_SetConfig+0x4e4>)
 800555e:	fba3 2302 	umull	r2, r3, r3, r2
 8005562:	095b      	lsrs	r3, r3, #5
 8005564:	011c      	lsls	r4, r3, #4
 8005566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800556a:	2200      	movs	r2, #0
 800556c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005570:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005574:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005578:	4642      	mov	r2, r8
 800557a:	464b      	mov	r3, r9
 800557c:	1891      	adds	r1, r2, r2
 800557e:	61b9      	str	r1, [r7, #24]
 8005580:	415b      	adcs	r3, r3
 8005582:	61fb      	str	r3, [r7, #28]
 8005584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005588:	4641      	mov	r1, r8
 800558a:	1851      	adds	r1, r2, r1
 800558c:	6139      	str	r1, [r7, #16]
 800558e:	4649      	mov	r1, r9
 8005590:	414b      	adcs	r3, r1
 8005592:	617b      	str	r3, [r7, #20]
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	f04f 0300 	mov.w	r3, #0
 800559c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055a0:	4659      	mov	r1, fp
 80055a2:	00cb      	lsls	r3, r1, #3
 80055a4:	4651      	mov	r1, sl
 80055a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055aa:	4651      	mov	r1, sl
 80055ac:	00ca      	lsls	r2, r1, #3
 80055ae:	4610      	mov	r0, r2
 80055b0:	4619      	mov	r1, r3
 80055b2:	4603      	mov	r3, r0
 80055b4:	4642      	mov	r2, r8
 80055b6:	189b      	adds	r3, r3, r2
 80055b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055bc:	464b      	mov	r3, r9
 80055be:	460a      	mov	r2, r1
 80055c0:	eb42 0303 	adc.w	r3, r2, r3
 80055c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80055d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80055d4:	f04f 0200 	mov.w	r2, #0
 80055d8:	f04f 0300 	mov.w	r3, #0
 80055dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80055e0:	4649      	mov	r1, r9
 80055e2:	008b      	lsls	r3, r1, #2
 80055e4:	4641      	mov	r1, r8
 80055e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055ea:	4641      	mov	r1, r8
 80055ec:	008a      	lsls	r2, r1, #2
 80055ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80055f2:	f7fa fec5 	bl	8000380 <__aeabi_uldivmod>
 80055f6:	4602      	mov	r2, r0
 80055f8:	460b      	mov	r3, r1
 80055fa:	4611      	mov	r1, r2
 80055fc:	4b38      	ldr	r3, [pc, #224]	; (80056e0 <UART_SetConfig+0x4e4>)
 80055fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005602:	095b      	lsrs	r3, r3, #5
 8005604:	2264      	movs	r2, #100	; 0x64
 8005606:	fb02 f303 	mul.w	r3, r2, r3
 800560a:	1acb      	subs	r3, r1, r3
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	3332      	adds	r3, #50	; 0x32
 8005610:	4a33      	ldr	r2, [pc, #204]	; (80056e0 <UART_SetConfig+0x4e4>)
 8005612:	fba2 2303 	umull	r2, r3, r2, r3
 8005616:	095b      	lsrs	r3, r3, #5
 8005618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800561c:	441c      	add	r4, r3
 800561e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005622:	2200      	movs	r2, #0
 8005624:	673b      	str	r3, [r7, #112]	; 0x70
 8005626:	677a      	str	r2, [r7, #116]	; 0x74
 8005628:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800562c:	4642      	mov	r2, r8
 800562e:	464b      	mov	r3, r9
 8005630:	1891      	adds	r1, r2, r2
 8005632:	60b9      	str	r1, [r7, #8]
 8005634:	415b      	adcs	r3, r3
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800563c:	4641      	mov	r1, r8
 800563e:	1851      	adds	r1, r2, r1
 8005640:	6039      	str	r1, [r7, #0]
 8005642:	4649      	mov	r1, r9
 8005644:	414b      	adcs	r3, r1
 8005646:	607b      	str	r3, [r7, #4]
 8005648:	f04f 0200 	mov.w	r2, #0
 800564c:	f04f 0300 	mov.w	r3, #0
 8005650:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005654:	4659      	mov	r1, fp
 8005656:	00cb      	lsls	r3, r1, #3
 8005658:	4651      	mov	r1, sl
 800565a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800565e:	4651      	mov	r1, sl
 8005660:	00ca      	lsls	r2, r1, #3
 8005662:	4610      	mov	r0, r2
 8005664:	4619      	mov	r1, r3
 8005666:	4603      	mov	r3, r0
 8005668:	4642      	mov	r2, r8
 800566a:	189b      	adds	r3, r3, r2
 800566c:	66bb      	str	r3, [r7, #104]	; 0x68
 800566e:	464b      	mov	r3, r9
 8005670:	460a      	mov	r2, r1
 8005672:	eb42 0303 	adc.w	r3, r2, r3
 8005676:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	663b      	str	r3, [r7, #96]	; 0x60
 8005682:	667a      	str	r2, [r7, #100]	; 0x64
 8005684:	f04f 0200 	mov.w	r2, #0
 8005688:	f04f 0300 	mov.w	r3, #0
 800568c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005690:	4649      	mov	r1, r9
 8005692:	008b      	lsls	r3, r1, #2
 8005694:	4641      	mov	r1, r8
 8005696:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800569a:	4641      	mov	r1, r8
 800569c:	008a      	lsls	r2, r1, #2
 800569e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80056a2:	f7fa fe6d 	bl	8000380 <__aeabi_uldivmod>
 80056a6:	4602      	mov	r2, r0
 80056a8:	460b      	mov	r3, r1
 80056aa:	4b0d      	ldr	r3, [pc, #52]	; (80056e0 <UART_SetConfig+0x4e4>)
 80056ac:	fba3 1302 	umull	r1, r3, r3, r2
 80056b0:	095b      	lsrs	r3, r3, #5
 80056b2:	2164      	movs	r1, #100	; 0x64
 80056b4:	fb01 f303 	mul.w	r3, r1, r3
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	3332      	adds	r3, #50	; 0x32
 80056be:	4a08      	ldr	r2, [pc, #32]	; (80056e0 <UART_SetConfig+0x4e4>)
 80056c0:	fba2 2303 	umull	r2, r3, r2, r3
 80056c4:	095b      	lsrs	r3, r3, #5
 80056c6:	f003 020f 	and.w	r2, r3, #15
 80056ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4422      	add	r2, r4
 80056d2:	609a      	str	r2, [r3, #8]
}
 80056d4:	bf00      	nop
 80056d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80056da:	46bd      	mov	sp, r7
 80056dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056e0:	51eb851f 	.word	0x51eb851f

080056e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056e4:	b084      	sub	sp, #16
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b084      	sub	sp, #16
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	f107 001c 	add.w	r0, r7, #28
 80056f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056f6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d123      	bne.n	8005746 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005702:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005726:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800572a:	2b01      	cmp	r3, #1
 800572c:	d105      	bne.n	800573a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 fa9a 	bl	8005c74 <USB_CoreReset>
 8005740:	4603      	mov	r3, r0
 8005742:	73fb      	strb	r3, [r7, #15]
 8005744:	e01b      	b.n	800577e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fa8e 	bl	8005c74 <USB_CoreReset>
 8005758:	4603      	mov	r3, r0
 800575a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800575c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005760:	2b00      	cmp	r3, #0
 8005762:	d106      	bne.n	8005772 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005768:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	639a      	str	r2, [r3, #56]	; 0x38
 8005770:	e005      	b.n	800577e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005776:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800577e:	7fbb      	ldrb	r3, [r7, #30]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d10b      	bne.n	800579c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f043 0206 	orr.w	r2, r3, #6
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f043 0220 	orr.w	r2, r3, #32
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800579c:	7bfb      	ldrb	r3, [r7, #15]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057a8:	b004      	add	sp, #16
 80057aa:	4770      	bx	lr

080057ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f023 0201 	bic.w	r2, r3, #1
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b084      	sub	sp, #16
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
 80057d6:	460b      	mov	r3, r1
 80057d8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057ea:	78fb      	ldrb	r3, [r7, #3]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d115      	bne.n	800581c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80057fc:	200a      	movs	r0, #10
 80057fe:	f7fc f939 	bl	8001a74 <HAL_Delay>
      ms += 10U;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	330a      	adds	r3, #10
 8005806:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fa25 	bl	8005c58 <USB_GetMode>
 800580e:	4603      	mov	r3, r0
 8005810:	2b01      	cmp	r3, #1
 8005812:	d01e      	beq.n	8005852 <USB_SetCurrentMode+0x84>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2bc7      	cmp	r3, #199	; 0xc7
 8005818:	d9f0      	bls.n	80057fc <USB_SetCurrentMode+0x2e>
 800581a:	e01a      	b.n	8005852 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800581c:	78fb      	ldrb	r3, [r7, #3]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d115      	bne.n	800584e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800582e:	200a      	movs	r0, #10
 8005830:	f7fc f920 	bl	8001a74 <HAL_Delay>
      ms += 10U;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	330a      	adds	r3, #10
 8005838:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 fa0c 	bl	8005c58 <USB_GetMode>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d005      	beq.n	8005852 <USB_SetCurrentMode+0x84>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2bc7      	cmp	r3, #199	; 0xc7
 800584a:	d9f0      	bls.n	800582e <USB_SetCurrentMode+0x60>
 800584c:	e001      	b.n	8005852 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e005      	b.n	800585e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2bc8      	cmp	r3, #200	; 0xc8
 8005856:	d101      	bne.n	800585c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e000      	b.n	800585e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
	...

08005868 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005868:	b084      	sub	sp, #16
 800586a:	b580      	push	{r7, lr}
 800586c:	b086      	sub	sp, #24
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
 8005872:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005876:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800587a:	2300      	movs	r3, #0
 800587c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005882:	2300      	movs	r3, #0
 8005884:	613b      	str	r3, [r7, #16]
 8005886:	e009      	b.n	800589c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	3340      	adds	r3, #64	; 0x40
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	2200      	movs	r2, #0
 8005894:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	3301      	adds	r3, #1
 800589a:	613b      	str	r3, [r7, #16]
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	2b0e      	cmp	r3, #14
 80058a0:	d9f2      	bls.n	8005888 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80058a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d11c      	bne.n	80058e4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058b8:	f043 0302 	orr.w	r3, r3, #2
 80058bc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	e005      	b.n	80058f0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058f6:	461a      	mov	r2, r3
 80058f8:	2300      	movs	r3, #0
 80058fa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058fc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005900:	2b01      	cmp	r3, #1
 8005902:	d10d      	bne.n	8005920 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005908:	2b00      	cmp	r3, #0
 800590a:	d104      	bne.n	8005916 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800590c:	2100      	movs	r1, #0
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f968 	bl	8005be4 <USB_SetDevSpeed>
 8005914:	e008      	b.n	8005928 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005916:	2101      	movs	r1, #1
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f963 	bl	8005be4 <USB_SetDevSpeed>
 800591e:	e003      	b.n	8005928 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005920:	2103      	movs	r1, #3
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f95e 	bl	8005be4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005928:	2110      	movs	r1, #16
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f8fa 	bl	8005b24 <USB_FlushTxFifo>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f924 	bl	8005b88 <USB_FlushRxFifo>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005950:	461a      	mov	r2, r3
 8005952:	2300      	movs	r3, #0
 8005954:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800595c:	461a      	mov	r2, r3
 800595e:	2300      	movs	r3, #0
 8005960:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005968:	461a      	mov	r2, r3
 800596a:	2300      	movs	r3, #0
 800596c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800596e:	2300      	movs	r3, #0
 8005970:	613b      	str	r3, [r7, #16]
 8005972:	e043      	b.n	80059fc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4413      	add	r3, r2
 800597c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005986:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800598a:	d118      	bne.n	80059be <USB_DevInit+0x156>
    {
      if (i == 0U)
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10a      	bne.n	80059a8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	4413      	add	r3, r2
 800599a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599e:	461a      	mov	r2, r3
 80059a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	e013      	b.n	80059d0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b4:	461a      	mov	r2, r3
 80059b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	e008      	b.n	80059d0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ca:	461a      	mov	r2, r3
 80059cc:	2300      	movs	r3, #0
 80059ce:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059dc:	461a      	mov	r2, r3
 80059de:	2300      	movs	r3, #0
 80059e0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ee:	461a      	mov	r2, r3
 80059f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	3301      	adds	r3, #1
 80059fa:	613b      	str	r3, [r7, #16]
 80059fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005a00:	461a      	mov	r2, r3
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d3b5      	bcc.n	8005974 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a08:	2300      	movs	r3, #0
 8005a0a:	613b      	str	r3, [r7, #16]
 8005a0c:	e043      	b.n	8005a96 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a24:	d118      	bne.n	8005a58 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10a      	bne.n	8005a42 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a38:	461a      	mov	r2, r3
 8005a3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a3e:	6013      	str	r3, [r2, #0]
 8005a40:	e013      	b.n	8005a6a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4e:	461a      	mov	r2, r3
 8005a50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a54:	6013      	str	r3, [r2, #0]
 8005a56:	e008      	b.n	8005a6a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a64:	461a      	mov	r2, r3
 8005a66:	2300      	movs	r3, #0
 8005a68:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a76:	461a      	mov	r2, r3
 8005a78:	2300      	movs	r3, #0
 8005a7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a88:	461a      	mov	r2, r3
 8005a8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	3301      	adds	r3, #1
 8005a94:	613b      	str	r3, [r7, #16]
 8005a96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d3b5      	bcc.n	8005a0e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ab4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ac2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ac4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d105      	bne.n	8005ad8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	f043 0210 	orr.w	r2, r3, #16
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	699a      	ldr	r2, [r3, #24]
 8005adc:	4b10      	ldr	r3, [pc, #64]	; (8005b20 <USB_DevInit+0x2b8>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ae4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d005      	beq.n	8005af8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	f043 0208 	orr.w	r2, r3, #8
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005af8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d107      	bne.n	8005b10 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b08:	f043 0304 	orr.w	r3, r3, #4
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3718      	adds	r7, #24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b1c:	b004      	add	sp, #16
 8005b1e:	4770      	bx	lr
 8005b20:	803c3800 	.word	0x803c3800

08005b24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	3301      	adds	r3, #1
 8005b36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005b3e:	d901      	bls.n	8005b44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e01b      	b.n	8005b7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	daf2      	bge.n	8005b32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	019b      	lsls	r3, r3, #6
 8005b54:	f043 0220 	orr.w	r2, r3, #32
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005b68:	d901      	bls.n	8005b6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e006      	b.n	8005b7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	f003 0320 	and.w	r3, r3, #32
 8005b76:	2b20      	cmp	r3, #32
 8005b78:	d0f0      	beq.n	8005b5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	3301      	adds	r3, #1
 8005b98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005ba0:	d901      	bls.n	8005ba6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e018      	b.n	8005bd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	daf2      	bge.n	8005b94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2210      	movs	r2, #16
 8005bb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005bc4:	d901      	bls.n	8005bca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e006      	b.n	8005bd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	f003 0310 	and.w	r3, r3, #16
 8005bd2:	2b10      	cmp	r3, #16
 8005bd4:	d0f0      	beq.n	8005bb8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	460b      	mov	r3, r1
 8005bee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	78fb      	ldrb	r3, [r7, #3]
 8005bfe:	68f9      	ldr	r1, [r7, #12]
 8005c00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c04:	4313      	orrs	r3, r2
 8005c06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr

08005c16 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b085      	sub	sp, #20
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c30:	f023 0303 	bic.w	r3, r3, #3
 8005c34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c44:	f043 0302 	orr.w	r3, r3, #2
 8005c48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	f003 0301 	and.w	r3, r3, #1
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	3301      	adds	r3, #1
 8005c84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005c8c:	d901      	bls.n	8005c92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e01b      	b.n	8005cca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	daf2      	bge.n	8005c80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f043 0201 	orr.w	r2, r3, #1
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	3301      	adds	r3, #1
 8005cae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005cb6:	d901      	bls.n	8005cbc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e006      	b.n	8005cca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d0f0      	beq.n	8005caa <USB_CoreReset+0x36>

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
	...

08005cd8 <__NVIC_SetPriority>:
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	4603      	mov	r3, r0
 8005ce0:	6039      	str	r1, [r7, #0]
 8005ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	db0a      	blt.n	8005d02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	490c      	ldr	r1, [pc, #48]	; (8005d24 <__NVIC_SetPriority+0x4c>)
 8005cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cf6:	0112      	lsls	r2, r2, #4
 8005cf8:	b2d2      	uxtb	r2, r2
 8005cfa:	440b      	add	r3, r1
 8005cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005d00:	e00a      	b.n	8005d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	4908      	ldr	r1, [pc, #32]	; (8005d28 <__NVIC_SetPriority+0x50>)
 8005d08:	79fb      	ldrb	r3, [r7, #7]
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	3b04      	subs	r3, #4
 8005d10:	0112      	lsls	r2, r2, #4
 8005d12:	b2d2      	uxtb	r2, r2
 8005d14:	440b      	add	r3, r1
 8005d16:	761a      	strb	r2, [r3, #24]
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	e000e100 	.word	0xe000e100
 8005d28:	e000ed00 	.word	0xe000ed00

08005d2c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005d30:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <SysTick_Handler+0x1c>)
 8005d32:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005d34:	f001 fd4e 	bl	80077d4 <xTaskGetSchedulerState>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d001      	beq.n	8005d42 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005d3e:	f002 fb33 	bl	80083a8 <xPortSysTickHandler>
  }
}
 8005d42:	bf00      	nop
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	e000e010 	.word	0xe000e010

08005d4c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005d50:	2100      	movs	r1, #0
 8005d52:	f06f 0004 	mvn.w	r0, #4
 8005d56:	f7ff ffbf 	bl	8005cd8 <__NVIC_SetPriority>
#endif
}
 8005d5a:	bf00      	nop
 8005d5c:	bd80      	pop	{r7, pc}
	...

08005d60 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d66:	f3ef 8305 	mrs	r3, IPSR
 8005d6a:	603b      	str	r3, [r7, #0]
  return(result);
 8005d6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005d72:	f06f 0305 	mvn.w	r3, #5
 8005d76:	607b      	str	r3, [r7, #4]
 8005d78:	e00c      	b.n	8005d94 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005d7a:	4b0a      	ldr	r3, [pc, #40]	; (8005da4 <osKernelInitialize+0x44>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d105      	bne.n	8005d8e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005d82:	4b08      	ldr	r3, [pc, #32]	; (8005da4 <osKernelInitialize+0x44>)
 8005d84:	2201      	movs	r2, #1
 8005d86:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	607b      	str	r3, [r7, #4]
 8005d8c:	e002      	b.n	8005d94 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005d8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005d94:	687b      	ldr	r3, [r7, #4]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	20004b98 	.word	0x20004b98

08005da8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dae:	f3ef 8305 	mrs	r3, IPSR
 8005db2:	603b      	str	r3, [r7, #0]
  return(result);
 8005db4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005dba:	f06f 0305 	mvn.w	r3, #5
 8005dbe:	607b      	str	r3, [r7, #4]
 8005dc0:	e010      	b.n	8005de4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005dc2:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <osKernelStart+0x48>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d109      	bne.n	8005dde <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005dca:	f7ff ffbf 	bl	8005d4c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005dce:	4b08      	ldr	r3, [pc, #32]	; (8005df0 <osKernelStart+0x48>)
 8005dd0:	2202      	movs	r2, #2
 8005dd2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005dd4:	f001 f87c 	bl	8006ed0 <vTaskStartScheduler>
      stat = osOK;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	607b      	str	r3, [r7, #4]
 8005ddc:	e002      	b.n	8005de4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005de2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005de4:	687b      	ldr	r3, [r7, #4]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	20004b98 	.word	0x20004b98

08005df4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b08e      	sub	sp, #56	; 0x38
 8005df8:	af04      	add	r7, sp, #16
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e00:	2300      	movs	r3, #0
 8005e02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e04:	f3ef 8305 	mrs	r3, IPSR
 8005e08:	617b      	str	r3, [r7, #20]
  return(result);
 8005e0a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d17e      	bne.n	8005f0e <osThreadNew+0x11a>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d07b      	beq.n	8005f0e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005e16:	2380      	movs	r3, #128	; 0x80
 8005e18:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005e1a:	2318      	movs	r3, #24
 8005e1c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005e22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e26:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d045      	beq.n	8005eba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <osThreadNew+0x48>
        name = attr->name;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d008      	beq.n	8005e62 <osThreadNew+0x6e>
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	2b38      	cmp	r3, #56	; 0x38
 8005e54:	d805      	bhi.n	8005e62 <osThreadNew+0x6e>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <osThreadNew+0x72>
        return (NULL);
 8005e62:	2300      	movs	r3, #0
 8005e64:	e054      	b.n	8005f10 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	089b      	lsrs	r3, r3, #2
 8005e74:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00e      	beq.n	8005e9c <osThreadNew+0xa8>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	2ba7      	cmp	r3, #167	; 0xa7
 8005e84:	d90a      	bls.n	8005e9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d006      	beq.n	8005e9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <osThreadNew+0xa8>
        mem = 1;
 8005e96:	2301      	movs	r3, #1
 8005e98:	61bb      	str	r3, [r7, #24]
 8005e9a:	e010      	b.n	8005ebe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10c      	bne.n	8005ebe <osThreadNew+0xca>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d108      	bne.n	8005ebe <osThreadNew+0xca>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d104      	bne.n	8005ebe <osThreadNew+0xca>
          mem = 0;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	61bb      	str	r3, [r7, #24]
 8005eb8:	e001      	b.n	8005ebe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d110      	bne.n	8005ee6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ecc:	9202      	str	r2, [sp, #8]
 8005ece:	9301      	str	r3, [sp, #4]
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	6a3a      	ldr	r2, [r7, #32]
 8005ed8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 fe0c 	bl	8006af8 <xTaskCreateStatic>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	613b      	str	r3, [r7, #16]
 8005ee4:	e013      	b.n	8005f0e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d110      	bne.n	8005f0e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	f107 0310 	add.w	r3, r7, #16
 8005ef4:	9301      	str	r3, [sp, #4]
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 fe57 	bl	8006bb2 <xTaskCreate>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d001      	beq.n	8005f0e <osThreadNew+0x11a>
            hTask = NULL;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f0e:	693b      	ldr	r3, [r7, #16]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3728      	adds	r7, #40	; 0x28
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f20:	f3ef 8305 	mrs	r3, IPSR
 8005f24:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f26:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <osDelay+0x1c>
    stat = osErrorISR;
 8005f2c:	f06f 0305 	mvn.w	r3, #5
 8005f30:	60fb      	str	r3, [r7, #12]
 8005f32:	e007      	b.n	8005f44 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005f34:	2300      	movs	r3, #0
 8005f36:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d002      	beq.n	8005f44 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 ff92 	bl	8006e68 <vTaskDelay>
    }
  }

  return (stat);
 8005f44:	68fb      	ldr	r3, [r7, #12]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
	...

08005f50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4a07      	ldr	r2, [pc, #28]	; (8005f7c <vApplicationGetIdleTaskMemory+0x2c>)
 8005f60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	4a06      	ldr	r2, [pc, #24]	; (8005f80 <vApplicationGetIdleTaskMemory+0x30>)
 8005f66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2280      	movs	r2, #128	; 0x80
 8005f6c:	601a      	str	r2, [r3, #0]
}
 8005f6e:	bf00      	nop
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	20004b9c 	.word	0x20004b9c
 8005f80:	20004c44 	.word	0x20004c44

08005f84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4a07      	ldr	r2, [pc, #28]	; (8005fb0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005f94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	4a06      	ldr	r2, [pc, #24]	; (8005fb4 <vApplicationGetTimerTaskMemory+0x30>)
 8005f9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fa2:	601a      	str	r2, [r3, #0]
}
 8005fa4:	bf00      	nop
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	20004e44 	.word	0x20004e44
 8005fb4:	20004eec 	.word	0x20004eec

08005fb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f103 0208 	add.w	r2, r3, #8
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f103 0208 	add.w	r2, r3, #8
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f103 0208 	add.w	r2, r3, #8
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006012:	b480      	push	{r7}
 8006014:	b085      	sub	sp, #20
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
 800601a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	683a      	ldr	r2, [r7, #0]
 8006036:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	601a      	str	r2, [r3, #0]
}
 800604e:	bf00      	nop
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800605a:	b480      	push	{r7}
 800605c:	b085      	sub	sp, #20
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
 8006062:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006070:	d103      	bne.n	800607a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	60fb      	str	r3, [r7, #12]
 8006078:	e00c      	b.n	8006094 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	3308      	adds	r3, #8
 800607e:	60fb      	str	r3, [r7, #12]
 8006080:	e002      	b.n	8006088 <vListInsert+0x2e>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	60fb      	str	r3, [r7, #12]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	429a      	cmp	r2, r3
 8006092:	d2f6      	bcs.n	8006082 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	601a      	str	r2, [r3, #0]
}
 80060c0:	bf00      	nop
 80060c2:	3714      	adds	r7, #20
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	6892      	ldr	r2, [r2, #8]
 80060e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	6852      	ldr	r2, [r2, #4]
 80060ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d103      	bne.n	8006100 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	689a      	ldr	r2, [r3, #8]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	1e5a      	subs	r2, r3, #1
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10a      	bne.n	800614a <xQueueGenericReset+0x2a>
	__asm volatile
 8006134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	60bb      	str	r3, [r7, #8]
}
 8006146:	bf00      	nop
 8006148:	e7fe      	b.n	8006148 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800614a:	f002 f89b 	bl	8008284 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006156:	68f9      	ldr	r1, [r7, #12]
 8006158:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800615a:	fb01 f303 	mul.w	r3, r1, r3
 800615e:	441a      	add	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617a:	3b01      	subs	r3, #1
 800617c:	68f9      	ldr	r1, [r7, #12]
 800617e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006180:	fb01 f303 	mul.w	r3, r1, r3
 8006184:	441a      	add	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	22ff      	movs	r2, #255	; 0xff
 800618e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	22ff      	movs	r2, #255	; 0xff
 8006196:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d114      	bne.n	80061ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d01a      	beq.n	80061de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3310      	adds	r3, #16
 80061ac:	4618      	mov	r0, r3
 80061ae:	f001 f929 	bl	8007404 <xTaskRemoveFromEventList>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d012      	beq.n	80061de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80061b8:	4b0c      	ldr	r3, [pc, #48]	; (80061ec <xQueueGenericReset+0xcc>)
 80061ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	e009      	b.n	80061de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	3310      	adds	r3, #16
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7ff fef2 	bl	8005fb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	3324      	adds	r3, #36	; 0x24
 80061d8:	4618      	mov	r0, r3
 80061da:	f7ff feed 	bl	8005fb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80061de:	f002 f881 	bl	80082e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80061e2:	2301      	movs	r3, #1
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	e000ed04 	.word	0xe000ed04

080061f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08e      	sub	sp, #56	; 0x38
 80061f4:	af02      	add	r7, sp, #8
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10a      	bne.n	800621a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006216:	bf00      	nop
 8006218:	e7fe      	b.n	8006218 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10a      	bne.n	8006236 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006232:	bf00      	nop
 8006234:	e7fe      	b.n	8006234 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <xQueueGenericCreateStatic+0x52>
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <xQueueGenericCreateStatic+0x56>
 8006242:	2301      	movs	r3, #1
 8006244:	e000      	b.n	8006248 <xQueueGenericCreateStatic+0x58>
 8006246:	2300      	movs	r3, #0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10a      	bne.n	8006262 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800624c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	623b      	str	r3, [r7, #32]
}
 800625e:	bf00      	nop
 8006260:	e7fe      	b.n	8006260 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d102      	bne.n	800626e <xQueueGenericCreateStatic+0x7e>
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <xQueueGenericCreateStatic+0x82>
 800626e:	2301      	movs	r3, #1
 8006270:	e000      	b.n	8006274 <xQueueGenericCreateStatic+0x84>
 8006272:	2300      	movs	r3, #0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10a      	bne.n	800628e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	61fb      	str	r3, [r7, #28]
}
 800628a:	bf00      	nop
 800628c:	e7fe      	b.n	800628c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800628e:	2350      	movs	r3, #80	; 0x50
 8006290:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2b50      	cmp	r3, #80	; 0x50
 8006296:	d00a      	beq.n	80062ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	61bb      	str	r3, [r7, #24]
}
 80062aa:	bf00      	nop
 80062ac:	e7fe      	b.n	80062ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80062ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80062b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00d      	beq.n	80062d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80062ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80062c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80062c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	4613      	mov	r3, r2
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	68b9      	ldr	r1, [r7, #8]
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f000 f805 	bl	80062e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80062d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80062d8:	4618      	mov	r0, r3
 80062da:	3730      	adds	r7, #48	; 0x30
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d103      	bne.n	80062fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	601a      	str	r2, [r3, #0]
 80062fa:	e002      	b.n	8006302 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800630e:	2101      	movs	r1, #1
 8006310:	69b8      	ldr	r0, [r7, #24]
 8006312:	f7ff ff05 	bl	8006120 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	78fa      	ldrb	r2, [r7, #3]
 800631a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800631e:	bf00      	nop
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
	...

08006328 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b08e      	sub	sp, #56	; 0x38
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
 8006334:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006336:	2300      	movs	r3, #0
 8006338:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800633e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10a      	bne.n	800635a <xQueueGenericSend+0x32>
	__asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006356:	bf00      	nop
 8006358:	e7fe      	b.n	8006358 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d103      	bne.n	8006368 <xQueueGenericSend+0x40>
 8006360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <xQueueGenericSend+0x44>
 8006368:	2301      	movs	r3, #1
 800636a:	e000      	b.n	800636e <xQueueGenericSend+0x46>
 800636c:	2300      	movs	r3, #0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10a      	bne.n	8006388 <xQueueGenericSend+0x60>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006384:	bf00      	nop
 8006386:	e7fe      	b.n	8006386 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2b02      	cmp	r3, #2
 800638c:	d103      	bne.n	8006396 <xQueueGenericSend+0x6e>
 800638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006392:	2b01      	cmp	r3, #1
 8006394:	d101      	bne.n	800639a <xQueueGenericSend+0x72>
 8006396:	2301      	movs	r3, #1
 8006398:	e000      	b.n	800639c <xQueueGenericSend+0x74>
 800639a:	2300      	movs	r3, #0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10a      	bne.n	80063b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80063a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	623b      	str	r3, [r7, #32]
}
 80063b2:	bf00      	nop
 80063b4:	e7fe      	b.n	80063b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063b6:	f001 fa0d 	bl	80077d4 <xTaskGetSchedulerState>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d102      	bne.n	80063c6 <xQueueGenericSend+0x9e>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <xQueueGenericSend+0xa2>
 80063c6:	2301      	movs	r3, #1
 80063c8:	e000      	b.n	80063cc <xQueueGenericSend+0xa4>
 80063ca:	2300      	movs	r3, #0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10a      	bne.n	80063e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	61fb      	str	r3, [r7, #28]
}
 80063e2:	bf00      	nop
 80063e4:	e7fe      	b.n	80063e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063e6:	f001 ff4d 	bl	8008284 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d302      	bcc.n	80063fc <xQueueGenericSend+0xd4>
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d129      	bne.n	8006450 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	68b9      	ldr	r1, [r7, #8]
 8006400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006402:	f000 fa0b 	bl	800681c <prvCopyDataToQueue>
 8006406:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	2b00      	cmp	r3, #0
 800640e:	d010      	beq.n	8006432 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006412:	3324      	adds	r3, #36	; 0x24
 8006414:	4618      	mov	r0, r3
 8006416:	f000 fff5 	bl	8007404 <xTaskRemoveFromEventList>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d013      	beq.n	8006448 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006420:	4b3f      	ldr	r3, [pc, #252]	; (8006520 <xQueueGenericSend+0x1f8>)
 8006422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006426:	601a      	str	r2, [r3, #0]
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	e00a      	b.n	8006448 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006434:	2b00      	cmp	r3, #0
 8006436:	d007      	beq.n	8006448 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006438:	4b39      	ldr	r3, [pc, #228]	; (8006520 <xQueueGenericSend+0x1f8>)
 800643a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006448:	f001 ff4c 	bl	80082e4 <vPortExitCritical>
				return pdPASS;
 800644c:	2301      	movs	r3, #1
 800644e:	e063      	b.n	8006518 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d103      	bne.n	800645e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006456:	f001 ff45 	bl	80082e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800645a:	2300      	movs	r3, #0
 800645c:	e05c      	b.n	8006518 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800645e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006460:	2b00      	cmp	r3, #0
 8006462:	d106      	bne.n	8006472 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006464:	f107 0314 	add.w	r3, r7, #20
 8006468:	4618      	mov	r0, r3
 800646a:	f001 f855 	bl	8007518 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800646e:	2301      	movs	r3, #1
 8006470:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006472:	f001 ff37 	bl	80082e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006476:	f000 fd9b 	bl	8006fb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800647a:	f001 ff03 	bl	8008284 <vPortEnterCritical>
 800647e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006480:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006484:	b25b      	sxtb	r3, r3
 8006486:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800648a:	d103      	bne.n	8006494 <xQueueGenericSend+0x16c>
 800648c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006496:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800649a:	b25b      	sxtb	r3, r3
 800649c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064a0:	d103      	bne.n	80064aa <xQueueGenericSend+0x182>
 80064a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064aa:	f001 ff1b 	bl	80082e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064ae:	1d3a      	adds	r2, r7, #4
 80064b0:	f107 0314 	add.w	r3, r7, #20
 80064b4:	4611      	mov	r1, r2
 80064b6:	4618      	mov	r0, r3
 80064b8:	f001 f844 	bl	8007544 <xTaskCheckForTimeOut>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d124      	bne.n	800650c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80064c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064c4:	f000 faa2 	bl	8006a0c <prvIsQueueFull>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d018      	beq.n	8006500 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80064ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d0:	3310      	adds	r3, #16
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	4611      	mov	r1, r2
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 ff44 	bl	8007364 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80064dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064de:	f000 fa2d 	bl	800693c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80064e2:	f000 fd73 	bl	8006fcc <xTaskResumeAll>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f47f af7c 	bne.w	80063e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80064ee:	4b0c      	ldr	r3, [pc, #48]	; (8006520 <xQueueGenericSend+0x1f8>)
 80064f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064f4:	601a      	str	r2, [r3, #0]
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	e772      	b.n	80063e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006502:	f000 fa1b 	bl	800693c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006506:	f000 fd61 	bl	8006fcc <xTaskResumeAll>
 800650a:	e76c      	b.n	80063e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800650c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800650e:	f000 fa15 	bl	800693c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006512:	f000 fd5b 	bl	8006fcc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006516:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006518:	4618      	mov	r0, r3
 800651a:	3738      	adds	r7, #56	; 0x38
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	e000ed04 	.word	0xe000ed04

08006524 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b090      	sub	sp, #64	; 0x40
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
 8006530:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10a      	bne.n	8006552 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800653c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006540:	f383 8811 	msr	BASEPRI, r3
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800654e:	bf00      	nop
 8006550:	e7fe      	b.n	8006550 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d103      	bne.n	8006560 <xQueueGenericSendFromISR+0x3c>
 8006558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655c:	2b00      	cmp	r3, #0
 800655e:	d101      	bne.n	8006564 <xQueueGenericSendFromISR+0x40>
 8006560:	2301      	movs	r3, #1
 8006562:	e000      	b.n	8006566 <xQueueGenericSendFromISR+0x42>
 8006564:	2300      	movs	r3, #0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10a      	bne.n	8006580 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800656a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800657c:	bf00      	nop
 800657e:	e7fe      	b.n	800657e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	2b02      	cmp	r3, #2
 8006584:	d103      	bne.n	800658e <xQueueGenericSendFromISR+0x6a>
 8006586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800658a:	2b01      	cmp	r3, #1
 800658c:	d101      	bne.n	8006592 <xQueueGenericSendFromISR+0x6e>
 800658e:	2301      	movs	r3, #1
 8006590:	e000      	b.n	8006594 <xQueueGenericSendFromISR+0x70>
 8006592:	2300      	movs	r3, #0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10a      	bne.n	80065ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659c:	f383 8811 	msr	BASEPRI, r3
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	623b      	str	r3, [r7, #32]
}
 80065aa:	bf00      	nop
 80065ac:	e7fe      	b.n	80065ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065ae:	f001 ff4b 	bl	8008448 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80065b2:	f3ef 8211 	mrs	r2, BASEPRI
 80065b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	61fa      	str	r2, [r7, #28]
 80065c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80065ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d302      	bcc.n	80065e0 <xQueueGenericSendFromISR+0xbc>
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d12f      	bne.n	8006640 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80065e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	68b9      	ldr	r1, [r7, #8]
 80065f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80065f6:	f000 f911 	bl	800681c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80065fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80065fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006602:	d112      	bne.n	800662a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006608:	2b00      	cmp	r3, #0
 800660a:	d016      	beq.n	800663a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800660c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660e:	3324      	adds	r3, #36	; 0x24
 8006610:	4618      	mov	r0, r3
 8006612:	f000 fef7 	bl	8007404 <xTaskRemoveFromEventList>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00e      	beq.n	800663a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00b      	beq.n	800663a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	601a      	str	r2, [r3, #0]
 8006628:	e007      	b.n	800663a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800662a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800662e:	3301      	adds	r3, #1
 8006630:	b2db      	uxtb	r3, r3
 8006632:	b25a      	sxtb	r2, r3
 8006634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800663a:	2301      	movs	r3, #1
 800663c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800663e:	e001      	b.n	8006644 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006640:	2300      	movs	r3, #0
 8006642:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006646:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800664e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006652:	4618      	mov	r0, r3
 8006654:	3740      	adds	r7, #64	; 0x40
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
	...

0800665c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b08c      	sub	sp, #48	; 0x30
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006668:	2300      	movs	r3, #0
 800666a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10a      	bne.n	800668c <xQueueReceive+0x30>
	__asm volatile
 8006676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667a:	f383 8811 	msr	BASEPRI, r3
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	623b      	str	r3, [r7, #32]
}
 8006688:	bf00      	nop
 800668a:	e7fe      	b.n	800668a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d103      	bne.n	800669a <xQueueReceive+0x3e>
 8006692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <xQueueReceive+0x42>
 800669a:	2301      	movs	r3, #1
 800669c:	e000      	b.n	80066a0 <xQueueReceive+0x44>
 800669e:	2300      	movs	r3, #0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10a      	bne.n	80066ba <xQueueReceive+0x5e>
	__asm volatile
 80066a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a8:	f383 8811 	msr	BASEPRI, r3
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	61fb      	str	r3, [r7, #28]
}
 80066b6:	bf00      	nop
 80066b8:	e7fe      	b.n	80066b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066ba:	f001 f88b 	bl	80077d4 <xTaskGetSchedulerState>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d102      	bne.n	80066ca <xQueueReceive+0x6e>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <xQueueReceive+0x72>
 80066ca:	2301      	movs	r3, #1
 80066cc:	e000      	b.n	80066d0 <xQueueReceive+0x74>
 80066ce:	2300      	movs	r3, #0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10a      	bne.n	80066ea <xQueueReceive+0x8e>
	__asm volatile
 80066d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d8:	f383 8811 	msr	BASEPRI, r3
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	61bb      	str	r3, [r7, #24]
}
 80066e6:	bf00      	nop
 80066e8:	e7fe      	b.n	80066e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066ea:	f001 fdcb 	bl	8008284 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d01f      	beq.n	800673a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066fa:	68b9      	ldr	r1, [r7, #8]
 80066fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066fe:	f000 f8f7 	bl	80068f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006704:	1e5a      	subs	r2, r3, #1
 8006706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006708:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800670a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00f      	beq.n	8006732 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006714:	3310      	adds	r3, #16
 8006716:	4618      	mov	r0, r3
 8006718:	f000 fe74 	bl	8007404 <xTaskRemoveFromEventList>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d007      	beq.n	8006732 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006722:	4b3d      	ldr	r3, [pc, #244]	; (8006818 <xQueueReceive+0x1bc>)
 8006724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006732:	f001 fdd7 	bl	80082e4 <vPortExitCritical>
				return pdPASS;
 8006736:	2301      	movs	r3, #1
 8006738:	e069      	b.n	800680e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d103      	bne.n	8006748 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006740:	f001 fdd0 	bl	80082e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006744:	2300      	movs	r3, #0
 8006746:	e062      	b.n	800680e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674a:	2b00      	cmp	r3, #0
 800674c:	d106      	bne.n	800675c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800674e:	f107 0310 	add.w	r3, r7, #16
 8006752:	4618      	mov	r0, r3
 8006754:	f000 fee0 	bl	8007518 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006758:	2301      	movs	r3, #1
 800675a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800675c:	f001 fdc2 	bl	80082e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006760:	f000 fc26 	bl	8006fb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006764:	f001 fd8e 	bl	8008284 <vPortEnterCritical>
 8006768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800676e:	b25b      	sxtb	r3, r3
 8006770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006774:	d103      	bne.n	800677e <xQueueReceive+0x122>
 8006776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800677e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006780:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006784:	b25b      	sxtb	r3, r3
 8006786:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800678a:	d103      	bne.n	8006794 <xQueueReceive+0x138>
 800678c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006794:	f001 fda6 	bl	80082e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006798:	1d3a      	adds	r2, r7, #4
 800679a:	f107 0310 	add.w	r3, r7, #16
 800679e:	4611      	mov	r1, r2
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 fecf 	bl	8007544 <xTaskCheckForTimeOut>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d123      	bne.n	80067f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ae:	f000 f917 	bl	80069e0 <prvIsQueueEmpty>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d017      	beq.n	80067e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ba:	3324      	adds	r3, #36	; 0x24
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	4611      	mov	r1, r2
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 fdcf 	bl	8007364 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067c8:	f000 f8b8 	bl	800693c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80067cc:	f000 fbfe 	bl	8006fcc <xTaskResumeAll>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d189      	bne.n	80066ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80067d6:	4b10      	ldr	r3, [pc, #64]	; (8006818 <xQueueReceive+0x1bc>)
 80067d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	e780      	b.n	80066ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80067e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ea:	f000 f8a7 	bl	800693c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067ee:	f000 fbed 	bl	8006fcc <xTaskResumeAll>
 80067f2:	e77a      	b.n	80066ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80067f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067f6:	f000 f8a1 	bl	800693c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067fa:	f000 fbe7 	bl	8006fcc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006800:	f000 f8ee 	bl	80069e0 <prvIsQueueEmpty>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	f43f af6f 	beq.w	80066ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800680c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800680e:	4618      	mov	r0, r3
 8006810:	3730      	adds	r7, #48	; 0x30
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	e000ed04 	.word	0xe000ed04

0800681c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006828:	2300      	movs	r3, #0
 800682a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006830:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10d      	bne.n	8006856 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d14d      	bne.n	80068de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	4618      	mov	r0, r3
 8006848:	f000 ffe2 	bl	8007810 <xTaskPriorityDisinherit>
 800684c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	609a      	str	r2, [r3, #8]
 8006854:	e043      	b.n	80068de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d119      	bne.n	8006890 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6858      	ldr	r0, [r3, #4]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006864:	461a      	mov	r2, r3
 8006866:	68b9      	ldr	r1, [r7, #8]
 8006868:	f00b fb29 	bl	8011ebe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006874:	441a      	add	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	429a      	cmp	r2, r3
 8006884:	d32b      	bcc.n	80068de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	605a      	str	r2, [r3, #4]
 800688e:	e026      	b.n	80068de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	68d8      	ldr	r0, [r3, #12]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006898:	461a      	mov	r2, r3
 800689a:	68b9      	ldr	r1, [r7, #8]
 800689c:	f00b fb0f 	bl	8011ebe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	68da      	ldr	r2, [r3, #12]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a8:	425b      	negs	r3, r3
 80068aa:	441a      	add	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	68da      	ldr	r2, [r3, #12]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d207      	bcs.n	80068cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	689a      	ldr	r2, [r3, #8]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c4:	425b      	negs	r3, r3
 80068c6:	441a      	add	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d105      	bne.n	80068de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d002      	beq.n	80068de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	3b01      	subs	r3, #1
 80068dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	1c5a      	adds	r2, r3, #1
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80068e6:	697b      	ldr	r3, [r7, #20]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d018      	beq.n	8006934 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68da      	ldr	r2, [r3, #12]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	441a      	add	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68da      	ldr	r2, [r3, #12]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	429a      	cmp	r2, r3
 800691a:	d303      	bcc.n	8006924 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	68d9      	ldr	r1, [r3, #12]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692c:	461a      	mov	r2, r3
 800692e:	6838      	ldr	r0, [r7, #0]
 8006930:	f00b fac5 	bl	8011ebe <memcpy>
	}
}
 8006934:	bf00      	nop
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006944:	f001 fc9e 	bl	8008284 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800694e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006950:	e011      	b.n	8006976 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006956:	2b00      	cmp	r3, #0
 8006958:	d012      	beq.n	8006980 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	3324      	adds	r3, #36	; 0x24
 800695e:	4618      	mov	r0, r3
 8006960:	f000 fd50 	bl	8007404 <xTaskRemoveFromEventList>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800696a:	f000 fe4d 	bl	8007608 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800696e:	7bfb      	ldrb	r3, [r7, #15]
 8006970:	3b01      	subs	r3, #1
 8006972:	b2db      	uxtb	r3, r3
 8006974:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800697a:	2b00      	cmp	r3, #0
 800697c:	dce9      	bgt.n	8006952 <prvUnlockQueue+0x16>
 800697e:	e000      	b.n	8006982 <prvUnlockQueue+0x46>
					break;
 8006980:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	22ff      	movs	r2, #255	; 0xff
 8006986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800698a:	f001 fcab 	bl	80082e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800698e:	f001 fc79 	bl	8008284 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006998:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800699a:	e011      	b.n	80069c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d012      	beq.n	80069ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	3310      	adds	r3, #16
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 fd2b 	bl	8007404 <xTaskRemoveFromEventList>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80069b4:	f000 fe28 	bl	8007608 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80069b8:	7bbb      	ldrb	r3, [r7, #14]
 80069ba:	3b01      	subs	r3, #1
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	dce9      	bgt.n	800699c <prvUnlockQueue+0x60>
 80069c8:	e000      	b.n	80069cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80069ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	22ff      	movs	r2, #255	; 0xff
 80069d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80069d4:	f001 fc86 	bl	80082e4 <vPortExitCritical>
}
 80069d8:	bf00      	nop
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069e8:	f001 fc4c 	bl	8008284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d102      	bne.n	80069fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80069f4:	2301      	movs	r3, #1
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	e001      	b.n	80069fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80069fa:	2300      	movs	r3, #0
 80069fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80069fe:	f001 fc71 	bl	80082e4 <vPortExitCritical>

	return xReturn;
 8006a02:	68fb      	ldr	r3, [r7, #12]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a14:	f001 fc36 	bl	8008284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d102      	bne.n	8006a2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a24:	2301      	movs	r3, #1
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	e001      	b.n	8006a2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a2e:	f001 fc59 	bl	80082e4 <vPortExitCritical>

	return xReturn;
 8006a32:	68fb      	ldr	r3, [r7, #12]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a46:	2300      	movs	r3, #0
 8006a48:	60fb      	str	r3, [r7, #12]
 8006a4a:	e014      	b.n	8006a76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a4c:	4a0f      	ldr	r2, [pc, #60]	; (8006a8c <vQueueAddToRegistry+0x50>)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10b      	bne.n	8006a70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006a58:	490c      	ldr	r1, [pc, #48]	; (8006a8c <vQueueAddToRegistry+0x50>)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006a62:	4a0a      	ldr	r2, [pc, #40]	; (8006a8c <vQueueAddToRegistry+0x50>)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	00db      	lsls	r3, r3, #3
 8006a68:	4413      	add	r3, r2
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006a6e:	e006      	b.n	8006a7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	3301      	adds	r3, #1
 8006a74:	60fb      	str	r3, [r7, #12]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2b07      	cmp	r3, #7
 8006a7a:	d9e7      	bls.n	8006a4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006a7c:	bf00      	nop
 8006a7e:	bf00      	nop
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	200052ec 	.word	0x200052ec

08006a90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006aa0:	f001 fbf0 	bl	8008284 <vPortEnterCritical>
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006aaa:	b25b      	sxtb	r3, r3
 8006aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ab0:	d103      	bne.n	8006aba <vQueueWaitForMessageRestricted+0x2a>
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ac0:	b25b      	sxtb	r3, r3
 8006ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ac6:	d103      	bne.n	8006ad0 <vQueueWaitForMessageRestricted+0x40>
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ad0:	f001 fc08 	bl	80082e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d106      	bne.n	8006aea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	3324      	adds	r3, #36	; 0x24
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	68b9      	ldr	r1, [r7, #8]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f000 fc61 	bl	80073ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006aea:	6978      	ldr	r0, [r7, #20]
 8006aec:	f7ff ff26 	bl	800693c <prvUnlockQueue>
	}
 8006af0:	bf00      	nop
 8006af2:	3718      	adds	r7, #24
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08e      	sub	sp, #56	; 0x38
 8006afc:	af04      	add	r7, sp, #16
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
 8006b04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10a      	bne.n	8006b22 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	623b      	str	r3, [r7, #32]
}
 8006b1e:	bf00      	nop
 8006b20:	e7fe      	b.n	8006b20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10a      	bne.n	8006b3e <xTaskCreateStatic+0x46>
	__asm volatile
 8006b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	61fb      	str	r3, [r7, #28]
}
 8006b3a:	bf00      	nop
 8006b3c:	e7fe      	b.n	8006b3c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b3e:	23a8      	movs	r3, #168	; 0xa8
 8006b40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	2ba8      	cmp	r3, #168	; 0xa8
 8006b46:	d00a      	beq.n	8006b5e <xTaskCreateStatic+0x66>
	__asm volatile
 8006b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4c:	f383 8811 	msr	BASEPRI, r3
 8006b50:	f3bf 8f6f 	isb	sy
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	61bb      	str	r3, [r7, #24]
}
 8006b5a:	bf00      	nop
 8006b5c:	e7fe      	b.n	8006b5c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b5e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d01e      	beq.n	8006ba4 <xTaskCreateStatic+0xac>
 8006b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d01b      	beq.n	8006ba4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b74:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	2202      	movs	r2, #2
 8006b7a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b7e:	2300      	movs	r3, #0
 8006b80:	9303      	str	r3, [sp, #12]
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	9302      	str	r3, [sp, #8]
 8006b86:	f107 0314 	add.w	r3, r7, #20
 8006b8a:	9301      	str	r3, [sp, #4]
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	68b9      	ldr	r1, [r7, #8]
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f000 f850 	bl	8006c3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b9e:	f000 f8f3 	bl	8006d88 <prvAddNewTaskToReadyList>
 8006ba2:	e001      	b.n	8006ba8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ba8:	697b      	ldr	r3, [r7, #20]
	}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3728      	adds	r7, #40	; 0x28
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b08c      	sub	sp, #48	; 0x30
 8006bb6:	af04      	add	r7, sp, #16
 8006bb8:	60f8      	str	r0, [r7, #12]
 8006bba:	60b9      	str	r1, [r7, #8]
 8006bbc:	603b      	str	r3, [r7, #0]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006bc2:	88fb      	ldrh	r3, [r7, #6]
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f001 fc7e 	bl	80084c8 <pvPortMalloc>
 8006bcc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00e      	beq.n	8006bf2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006bd4:	20a8      	movs	r0, #168	; 0xa8
 8006bd6:	f001 fc77 	bl	80084c8 <pvPortMalloc>
 8006bda:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d003      	beq.n	8006bea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	631a      	str	r2, [r3, #48]	; 0x30
 8006be8:	e005      	b.n	8006bf6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006bea:	6978      	ldr	r0, [r7, #20]
 8006bec:	f001 fd38 	bl	8008660 <vPortFree>
 8006bf0:	e001      	b.n	8006bf6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d017      	beq.n	8006c2c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c04:	88fa      	ldrh	r2, [r7, #6]
 8006c06:	2300      	movs	r3, #0
 8006c08:	9303      	str	r3, [sp, #12]
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	9302      	str	r3, [sp, #8]
 8006c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c10:	9301      	str	r3, [sp, #4]
 8006c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c14:	9300      	str	r3, [sp, #0]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	68b9      	ldr	r1, [r7, #8]
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f000 f80e 	bl	8006c3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c20:	69f8      	ldr	r0, [r7, #28]
 8006c22:	f000 f8b1 	bl	8006d88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c26:	2301      	movs	r3, #1
 8006c28:	61bb      	str	r3, [r7, #24]
 8006c2a:	e002      	b.n	8006c32 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c32:	69bb      	ldr	r3, [r7, #24]
	}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3720      	adds	r7, #32
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b088      	sub	sp, #32
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
 8006c48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	461a      	mov	r2, r3
 8006c54:	21a5      	movs	r1, #165	; 0xa5
 8006c56:	f00b f813 	bl	8011c80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c64:	3b01      	subs	r3, #1
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	f023 0307 	bic.w	r3, r3, #7
 8006c72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	f003 0307 	and.w	r3, r3, #7
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00a      	beq.n	8006c94 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	617b      	str	r3, [r7, #20]
}
 8006c90:	bf00      	nop
 8006c92:	e7fe      	b.n	8006c92 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d01f      	beq.n	8006cda <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	61fb      	str	r3, [r7, #28]
 8006c9e:	e012      	b.n	8006cc6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	7819      	ldrb	r1, [r3, #0]
 8006ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	4413      	add	r3, r2
 8006cae:	3334      	adds	r3, #52	; 0x34
 8006cb0:	460a      	mov	r2, r1
 8006cb2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	4413      	add	r3, r2
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d006      	beq.n	8006cce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	61fb      	str	r3, [r7, #28]
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	2b0f      	cmp	r3, #15
 8006cca:	d9e9      	bls.n	8006ca0 <prvInitialiseNewTask+0x64>
 8006ccc:	e000      	b.n	8006cd0 <prvInitialiseNewTask+0x94>
			{
				break;
 8006cce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cd8:	e003      	b.n	8006ce2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce4:	2b37      	cmp	r3, #55	; 0x37
 8006ce6:	d901      	bls.n	8006cec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ce8:	2337      	movs	r3, #55	; 0x37
 8006cea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cf0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cf6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d00:	3304      	adds	r3, #4
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7ff f978 	bl	8005ff8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0a:	3318      	adds	r3, #24
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7ff f973 	bl	8005ff8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d26:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3a:	3354      	adds	r3, #84	; 0x54
 8006d3c:	224c      	movs	r2, #76	; 0x4c
 8006d3e:	2100      	movs	r1, #0
 8006d40:	4618      	mov	r0, r3
 8006d42:	f00a ff9d 	bl	8011c80 <memset>
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	4a0c      	ldr	r2, [pc, #48]	; (8006d7c <prvInitialiseNewTask+0x140>)
 8006d4a:	659a      	str	r2, [r3, #88]	; 0x58
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4e:	4a0c      	ldr	r2, [pc, #48]	; (8006d80 <prvInitialiseNewTask+0x144>)
 8006d50:	65da      	str	r2, [r3, #92]	; 0x5c
 8006d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d54:	4a0b      	ldr	r2, [pc, #44]	; (8006d84 <prvInitialiseNewTask+0x148>)
 8006d56:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	68f9      	ldr	r1, [r7, #12]
 8006d5c:	69b8      	ldr	r0, [r7, #24]
 8006d5e:	f001 f967 	bl	8008030 <pxPortInitialiseStack>
 8006d62:	4602      	mov	r2, r0
 8006d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d66:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d002      	beq.n	8006d74 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d72:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d74:	bf00      	nop
 8006d76:	3720      	adds	r7, #32
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	2000e090 	.word	0x2000e090
 8006d80:	2000e0f8 	.word	0x2000e0f8
 8006d84:	2000e160 	.word	0x2000e160

08006d88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d90:	f001 fa78 	bl	8008284 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d94:	4b2d      	ldr	r3, [pc, #180]	; (8006e4c <prvAddNewTaskToReadyList+0xc4>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	4a2c      	ldr	r2, [pc, #176]	; (8006e4c <prvAddNewTaskToReadyList+0xc4>)
 8006d9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d9e:	4b2c      	ldr	r3, [pc, #176]	; (8006e50 <prvAddNewTaskToReadyList+0xc8>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d109      	bne.n	8006dba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006da6:	4a2a      	ldr	r2, [pc, #168]	; (8006e50 <prvAddNewTaskToReadyList+0xc8>)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006dac:	4b27      	ldr	r3, [pc, #156]	; (8006e4c <prvAddNewTaskToReadyList+0xc4>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d110      	bne.n	8006dd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006db4:	f000 fc4c 	bl	8007650 <prvInitialiseTaskLists>
 8006db8:	e00d      	b.n	8006dd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006dba:	4b26      	ldr	r3, [pc, #152]	; (8006e54 <prvAddNewTaskToReadyList+0xcc>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d109      	bne.n	8006dd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006dc2:	4b23      	ldr	r3, [pc, #140]	; (8006e50 <prvAddNewTaskToReadyList+0xc8>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d802      	bhi.n	8006dd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006dd0:	4a1f      	ldr	r2, [pc, #124]	; (8006e50 <prvAddNewTaskToReadyList+0xc8>)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006dd6:	4b20      	ldr	r3, [pc, #128]	; (8006e58 <prvAddNewTaskToReadyList+0xd0>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	4a1e      	ldr	r2, [pc, #120]	; (8006e58 <prvAddNewTaskToReadyList+0xd0>)
 8006dde:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006de0:	4b1d      	ldr	r3, [pc, #116]	; (8006e58 <prvAddNewTaskToReadyList+0xd0>)
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dec:	4b1b      	ldr	r3, [pc, #108]	; (8006e5c <prvAddNewTaskToReadyList+0xd4>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d903      	bls.n	8006dfc <prvAddNewTaskToReadyList+0x74>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df8:	4a18      	ldr	r2, [pc, #96]	; (8006e5c <prvAddNewTaskToReadyList+0xd4>)
 8006dfa:	6013      	str	r3, [r2, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e00:	4613      	mov	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4a15      	ldr	r2, [pc, #84]	; (8006e60 <prvAddNewTaskToReadyList+0xd8>)
 8006e0a:	441a      	add	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	3304      	adds	r3, #4
 8006e10:	4619      	mov	r1, r3
 8006e12:	4610      	mov	r0, r2
 8006e14:	f7ff f8fd 	bl	8006012 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e18:	f001 fa64 	bl	80082e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e1c:	4b0d      	ldr	r3, [pc, #52]	; (8006e54 <prvAddNewTaskToReadyList+0xcc>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00e      	beq.n	8006e42 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e24:	4b0a      	ldr	r3, [pc, #40]	; (8006e50 <prvAddNewTaskToReadyList+0xc8>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d207      	bcs.n	8006e42 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e32:	4b0c      	ldr	r3, [pc, #48]	; (8006e64 <prvAddNewTaskToReadyList+0xdc>)
 8006e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e38:	601a      	str	r2, [r3, #0]
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e42:	bf00      	nop
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	20005800 	.word	0x20005800
 8006e50:	2000532c 	.word	0x2000532c
 8006e54:	2000580c 	.word	0x2000580c
 8006e58:	2000581c 	.word	0x2000581c
 8006e5c:	20005808 	.word	0x20005808
 8006e60:	20005330 	.word	0x20005330
 8006e64:	e000ed04 	.word	0xe000ed04

08006e68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e70:	2300      	movs	r3, #0
 8006e72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d017      	beq.n	8006eaa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e7a:	4b13      	ldr	r3, [pc, #76]	; (8006ec8 <vTaskDelay+0x60>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00a      	beq.n	8006e98 <vTaskDelay+0x30>
	__asm volatile
 8006e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e86:	f383 8811 	msr	BASEPRI, r3
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	60bb      	str	r3, [r7, #8]
}
 8006e94:	bf00      	nop
 8006e96:	e7fe      	b.n	8006e96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e98:	f000 f88a 	bl	8006fb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fd24 	bl	80078ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ea4:	f000 f892 	bl	8006fcc <xTaskResumeAll>
 8006ea8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d107      	bne.n	8006ec0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006eb0:	4b06      	ldr	r3, [pc, #24]	; (8006ecc <vTaskDelay+0x64>)
 8006eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eb6:	601a      	str	r2, [r3, #0]
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ec0:	bf00      	nop
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	20005828 	.word	0x20005828
 8006ecc:	e000ed04 	.word	0xe000ed04

08006ed0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b08a      	sub	sp, #40	; 0x28
 8006ed4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006eda:	2300      	movs	r3, #0
 8006edc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ede:	463a      	mov	r2, r7
 8006ee0:	1d39      	adds	r1, r7, #4
 8006ee2:	f107 0308 	add.w	r3, r7, #8
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7ff f832 	bl	8005f50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006eec:	6839      	ldr	r1, [r7, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	9202      	str	r2, [sp, #8]
 8006ef4:	9301      	str	r3, [sp, #4]
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	2300      	movs	r3, #0
 8006efc:	460a      	mov	r2, r1
 8006efe:	4924      	ldr	r1, [pc, #144]	; (8006f90 <vTaskStartScheduler+0xc0>)
 8006f00:	4824      	ldr	r0, [pc, #144]	; (8006f94 <vTaskStartScheduler+0xc4>)
 8006f02:	f7ff fdf9 	bl	8006af8 <xTaskCreateStatic>
 8006f06:	4603      	mov	r3, r0
 8006f08:	4a23      	ldr	r2, [pc, #140]	; (8006f98 <vTaskStartScheduler+0xc8>)
 8006f0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f0c:	4b22      	ldr	r3, [pc, #136]	; (8006f98 <vTaskStartScheduler+0xc8>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f14:	2301      	movs	r3, #1
 8006f16:	617b      	str	r3, [r7, #20]
 8006f18:	e001      	b.n	8006f1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d102      	bne.n	8006f2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f24:	f000 fd36 	bl	8007994 <xTimerCreateTimerTask>
 8006f28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d11b      	bne.n	8006f68 <vTaskStartScheduler+0x98>
	__asm volatile
 8006f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	613b      	str	r3, [r7, #16]
}
 8006f42:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f44:	4b15      	ldr	r3, [pc, #84]	; (8006f9c <vTaskStartScheduler+0xcc>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	3354      	adds	r3, #84	; 0x54
 8006f4a:	4a15      	ldr	r2, [pc, #84]	; (8006fa0 <vTaskStartScheduler+0xd0>)
 8006f4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f4e:	4b15      	ldr	r3, [pc, #84]	; (8006fa4 <vTaskStartScheduler+0xd4>)
 8006f50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f56:	4b14      	ldr	r3, [pc, #80]	; (8006fa8 <vTaskStartScheduler+0xd8>)
 8006f58:	2201      	movs	r2, #1
 8006f5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f5c:	4b13      	ldr	r3, [pc, #76]	; (8006fac <vTaskStartScheduler+0xdc>)
 8006f5e:	2200      	movs	r2, #0
 8006f60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f62:	f001 f8ed 	bl	8008140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f66:	e00e      	b.n	8006f86 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f6e:	d10a      	bne.n	8006f86 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f74:	f383 8811 	msr	BASEPRI, r3
 8006f78:	f3bf 8f6f 	isb	sy
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	60fb      	str	r3, [r7, #12]
}
 8006f82:	bf00      	nop
 8006f84:	e7fe      	b.n	8006f84 <vTaskStartScheduler+0xb4>
}
 8006f86:	bf00      	nop
 8006f88:	3718      	adds	r7, #24
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	08012d20 	.word	0x08012d20
 8006f94:	08007621 	.word	0x08007621
 8006f98:	20005824 	.word	0x20005824
 8006f9c:	2000532c 	.word	0x2000532c
 8006fa0:	2000010c 	.word	0x2000010c
 8006fa4:	20005820 	.word	0x20005820
 8006fa8:	2000580c 	.word	0x2000580c
 8006fac:	20005804 	.word	0x20005804

08006fb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006fb4:	4b04      	ldr	r3, [pc, #16]	; (8006fc8 <vTaskSuspendAll+0x18>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	4a03      	ldr	r2, [pc, #12]	; (8006fc8 <vTaskSuspendAll+0x18>)
 8006fbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006fbe:	bf00      	nop
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	20005828 	.word	0x20005828

08006fcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006fda:	4b42      	ldr	r3, [pc, #264]	; (80070e4 <xTaskResumeAll+0x118>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10a      	bne.n	8006ff8 <xTaskResumeAll+0x2c>
	__asm volatile
 8006fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	603b      	str	r3, [r7, #0]
}
 8006ff4:	bf00      	nop
 8006ff6:	e7fe      	b.n	8006ff6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ff8:	f001 f944 	bl	8008284 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ffc:	4b39      	ldr	r3, [pc, #228]	; (80070e4 <xTaskResumeAll+0x118>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3b01      	subs	r3, #1
 8007002:	4a38      	ldr	r2, [pc, #224]	; (80070e4 <xTaskResumeAll+0x118>)
 8007004:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007006:	4b37      	ldr	r3, [pc, #220]	; (80070e4 <xTaskResumeAll+0x118>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d162      	bne.n	80070d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800700e:	4b36      	ldr	r3, [pc, #216]	; (80070e8 <xTaskResumeAll+0x11c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d05e      	beq.n	80070d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007016:	e02f      	b.n	8007078 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007018:	4b34      	ldr	r3, [pc, #208]	; (80070ec <xTaskResumeAll+0x120>)
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3318      	adds	r3, #24
 8007024:	4618      	mov	r0, r3
 8007026:	f7ff f851 	bl	80060cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	3304      	adds	r3, #4
 800702e:	4618      	mov	r0, r3
 8007030:	f7ff f84c 	bl	80060cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007038:	4b2d      	ldr	r3, [pc, #180]	; (80070f0 <xTaskResumeAll+0x124>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	429a      	cmp	r2, r3
 800703e:	d903      	bls.n	8007048 <xTaskResumeAll+0x7c>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007044:	4a2a      	ldr	r2, [pc, #168]	; (80070f0 <xTaskResumeAll+0x124>)
 8007046:	6013      	str	r3, [r2, #0]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800704c:	4613      	mov	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4a27      	ldr	r2, [pc, #156]	; (80070f4 <xTaskResumeAll+0x128>)
 8007056:	441a      	add	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	3304      	adds	r3, #4
 800705c:	4619      	mov	r1, r3
 800705e:	4610      	mov	r0, r2
 8007060:	f7fe ffd7 	bl	8006012 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007068:	4b23      	ldr	r3, [pc, #140]	; (80070f8 <xTaskResumeAll+0x12c>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706e:	429a      	cmp	r2, r3
 8007070:	d302      	bcc.n	8007078 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007072:	4b22      	ldr	r3, [pc, #136]	; (80070fc <xTaskResumeAll+0x130>)
 8007074:	2201      	movs	r2, #1
 8007076:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007078:	4b1c      	ldr	r3, [pc, #112]	; (80070ec <xTaskResumeAll+0x120>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1cb      	bne.n	8007018 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007086:	f000 fb85 	bl	8007794 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800708a:	4b1d      	ldr	r3, [pc, #116]	; (8007100 <xTaskResumeAll+0x134>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d010      	beq.n	80070b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007096:	f000 f847 	bl	8007128 <xTaskIncrementTick>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d002      	beq.n	80070a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80070a0:	4b16      	ldr	r3, [pc, #88]	; (80070fc <xTaskResumeAll+0x130>)
 80070a2:	2201      	movs	r2, #1
 80070a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	3b01      	subs	r3, #1
 80070aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1f1      	bne.n	8007096 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80070b2:	4b13      	ldr	r3, [pc, #76]	; (8007100 <xTaskResumeAll+0x134>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80070b8:	4b10      	ldr	r3, [pc, #64]	; (80070fc <xTaskResumeAll+0x130>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d009      	beq.n	80070d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070c0:	2301      	movs	r3, #1
 80070c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070c4:	4b0f      	ldr	r3, [pc, #60]	; (8007104 <xTaskResumeAll+0x138>)
 80070c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070d4:	f001 f906 	bl	80082e4 <vPortExitCritical>

	return xAlreadyYielded;
 80070d8:	68bb      	ldr	r3, [r7, #8]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	20005828 	.word	0x20005828
 80070e8:	20005800 	.word	0x20005800
 80070ec:	200057c0 	.word	0x200057c0
 80070f0:	20005808 	.word	0x20005808
 80070f4:	20005330 	.word	0x20005330
 80070f8:	2000532c 	.word	0x2000532c
 80070fc:	20005814 	.word	0x20005814
 8007100:	20005810 	.word	0x20005810
 8007104:	e000ed04 	.word	0xe000ed04

08007108 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800710e:	4b05      	ldr	r3, [pc, #20]	; (8007124 <xTaskGetTickCount+0x1c>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007114:	687b      	ldr	r3, [r7, #4]
}
 8007116:	4618      	mov	r0, r3
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	20005804 	.word	0x20005804

08007128 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800712e:	2300      	movs	r3, #0
 8007130:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007132:	4b4f      	ldr	r3, [pc, #316]	; (8007270 <xTaskIncrementTick+0x148>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	f040 808f 	bne.w	800725a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800713c:	4b4d      	ldr	r3, [pc, #308]	; (8007274 <xTaskIncrementTick+0x14c>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	3301      	adds	r3, #1
 8007142:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007144:	4a4b      	ldr	r2, [pc, #300]	; (8007274 <xTaskIncrementTick+0x14c>)
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d120      	bne.n	8007192 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007150:	4b49      	ldr	r3, [pc, #292]	; (8007278 <xTaskIncrementTick+0x150>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00a      	beq.n	8007170 <xTaskIncrementTick+0x48>
	__asm volatile
 800715a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715e:	f383 8811 	msr	BASEPRI, r3
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	603b      	str	r3, [r7, #0]
}
 800716c:	bf00      	nop
 800716e:	e7fe      	b.n	800716e <xTaskIncrementTick+0x46>
 8007170:	4b41      	ldr	r3, [pc, #260]	; (8007278 <xTaskIncrementTick+0x150>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	60fb      	str	r3, [r7, #12]
 8007176:	4b41      	ldr	r3, [pc, #260]	; (800727c <xTaskIncrementTick+0x154>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a3f      	ldr	r2, [pc, #252]	; (8007278 <xTaskIncrementTick+0x150>)
 800717c:	6013      	str	r3, [r2, #0]
 800717e:	4a3f      	ldr	r2, [pc, #252]	; (800727c <xTaskIncrementTick+0x154>)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6013      	str	r3, [r2, #0]
 8007184:	4b3e      	ldr	r3, [pc, #248]	; (8007280 <xTaskIncrementTick+0x158>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3301      	adds	r3, #1
 800718a:	4a3d      	ldr	r2, [pc, #244]	; (8007280 <xTaskIncrementTick+0x158>)
 800718c:	6013      	str	r3, [r2, #0]
 800718e:	f000 fb01 	bl	8007794 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007192:	4b3c      	ldr	r3, [pc, #240]	; (8007284 <xTaskIncrementTick+0x15c>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	693a      	ldr	r2, [r7, #16]
 8007198:	429a      	cmp	r2, r3
 800719a:	d349      	bcc.n	8007230 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800719c:	4b36      	ldr	r3, [pc, #216]	; (8007278 <xTaskIncrementTick+0x150>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d104      	bne.n	80071b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071a6:	4b37      	ldr	r3, [pc, #220]	; (8007284 <xTaskIncrementTick+0x15c>)
 80071a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071ac:	601a      	str	r2, [r3, #0]
					break;
 80071ae:	e03f      	b.n	8007230 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071b0:	4b31      	ldr	r3, [pc, #196]	; (8007278 <xTaskIncrementTick+0x150>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d203      	bcs.n	80071d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071c8:	4a2e      	ldr	r2, [pc, #184]	; (8007284 <xTaskIncrementTick+0x15c>)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071ce:	e02f      	b.n	8007230 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	3304      	adds	r3, #4
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fe ff79 	bl	80060cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d004      	beq.n	80071ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	3318      	adds	r3, #24
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7fe ff70 	bl	80060cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f0:	4b25      	ldr	r3, [pc, #148]	; (8007288 <xTaskIncrementTick+0x160>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d903      	bls.n	8007200 <xTaskIncrementTick+0xd8>
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fc:	4a22      	ldr	r2, [pc, #136]	; (8007288 <xTaskIncrementTick+0x160>)
 80071fe:	6013      	str	r3, [r2, #0]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007204:	4613      	mov	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	4a1f      	ldr	r2, [pc, #124]	; (800728c <xTaskIncrementTick+0x164>)
 800720e:	441a      	add	r2, r3
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	3304      	adds	r3, #4
 8007214:	4619      	mov	r1, r3
 8007216:	4610      	mov	r0, r2
 8007218:	f7fe fefb 	bl	8006012 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007220:	4b1b      	ldr	r3, [pc, #108]	; (8007290 <xTaskIncrementTick+0x168>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007226:	429a      	cmp	r2, r3
 8007228:	d3b8      	bcc.n	800719c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800722a:	2301      	movs	r3, #1
 800722c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800722e:	e7b5      	b.n	800719c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007230:	4b17      	ldr	r3, [pc, #92]	; (8007290 <xTaskIncrementTick+0x168>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007236:	4915      	ldr	r1, [pc, #84]	; (800728c <xTaskIncrementTick+0x164>)
 8007238:	4613      	mov	r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4413      	add	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	440b      	add	r3, r1
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d901      	bls.n	800724c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007248:	2301      	movs	r3, #1
 800724a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800724c:	4b11      	ldr	r3, [pc, #68]	; (8007294 <xTaskIncrementTick+0x16c>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d007      	beq.n	8007264 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007254:	2301      	movs	r3, #1
 8007256:	617b      	str	r3, [r7, #20]
 8007258:	e004      	b.n	8007264 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800725a:	4b0f      	ldr	r3, [pc, #60]	; (8007298 <xTaskIncrementTick+0x170>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3301      	adds	r3, #1
 8007260:	4a0d      	ldr	r2, [pc, #52]	; (8007298 <xTaskIncrementTick+0x170>)
 8007262:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007264:	697b      	ldr	r3, [r7, #20]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3718      	adds	r7, #24
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	20005828 	.word	0x20005828
 8007274:	20005804 	.word	0x20005804
 8007278:	200057b8 	.word	0x200057b8
 800727c:	200057bc 	.word	0x200057bc
 8007280:	20005818 	.word	0x20005818
 8007284:	20005820 	.word	0x20005820
 8007288:	20005808 	.word	0x20005808
 800728c:	20005330 	.word	0x20005330
 8007290:	2000532c 	.word	0x2000532c
 8007294:	20005814 	.word	0x20005814
 8007298:	20005810 	.word	0x20005810

0800729c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80072a2:	4b2a      	ldr	r3, [pc, #168]	; (800734c <vTaskSwitchContext+0xb0>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d003      	beq.n	80072b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80072aa:	4b29      	ldr	r3, [pc, #164]	; (8007350 <vTaskSwitchContext+0xb4>)
 80072ac:	2201      	movs	r2, #1
 80072ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80072b0:	e046      	b.n	8007340 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80072b2:	4b27      	ldr	r3, [pc, #156]	; (8007350 <vTaskSwitchContext+0xb4>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072b8:	4b26      	ldr	r3, [pc, #152]	; (8007354 <vTaskSwitchContext+0xb8>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	60fb      	str	r3, [r7, #12]
 80072be:	e010      	b.n	80072e2 <vTaskSwitchContext+0x46>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10a      	bne.n	80072dc <vTaskSwitchContext+0x40>
	__asm volatile
 80072c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ca:	f383 8811 	msr	BASEPRI, r3
 80072ce:	f3bf 8f6f 	isb	sy
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	607b      	str	r3, [r7, #4]
}
 80072d8:	bf00      	nop
 80072da:	e7fe      	b.n	80072da <vTaskSwitchContext+0x3e>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	3b01      	subs	r3, #1
 80072e0:	60fb      	str	r3, [r7, #12]
 80072e2:	491d      	ldr	r1, [pc, #116]	; (8007358 <vTaskSwitchContext+0xbc>)
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	4613      	mov	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	440b      	add	r3, r1
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d0e4      	beq.n	80072c0 <vTaskSwitchContext+0x24>
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	4613      	mov	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4413      	add	r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4a15      	ldr	r2, [pc, #84]	; (8007358 <vTaskSwitchContext+0xbc>)
 8007302:	4413      	add	r3, r2
 8007304:	60bb      	str	r3, [r7, #8]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	605a      	str	r2, [r3, #4]
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	685a      	ldr	r2, [r3, #4]
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	3308      	adds	r3, #8
 8007318:	429a      	cmp	r2, r3
 800731a:	d104      	bne.n	8007326 <vTaskSwitchContext+0x8a>
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	685a      	ldr	r2, [r3, #4]
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	605a      	str	r2, [r3, #4]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	4a0b      	ldr	r2, [pc, #44]	; (800735c <vTaskSwitchContext+0xc0>)
 800732e:	6013      	str	r3, [r2, #0]
 8007330:	4a08      	ldr	r2, [pc, #32]	; (8007354 <vTaskSwitchContext+0xb8>)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007336:	4b09      	ldr	r3, [pc, #36]	; (800735c <vTaskSwitchContext+0xc0>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	3354      	adds	r3, #84	; 0x54
 800733c:	4a08      	ldr	r2, [pc, #32]	; (8007360 <vTaskSwitchContext+0xc4>)
 800733e:	6013      	str	r3, [r2, #0]
}
 8007340:	bf00      	nop
 8007342:	3714      	adds	r7, #20
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	20005828 	.word	0x20005828
 8007350:	20005814 	.word	0x20005814
 8007354:	20005808 	.word	0x20005808
 8007358:	20005330 	.word	0x20005330
 800735c:	2000532c 	.word	0x2000532c
 8007360:	2000010c 	.word	0x2000010c

08007364 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10a      	bne.n	800738a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007378:	f383 8811 	msr	BASEPRI, r3
 800737c:	f3bf 8f6f 	isb	sy
 8007380:	f3bf 8f4f 	dsb	sy
 8007384:	60fb      	str	r3, [r7, #12]
}
 8007386:	bf00      	nop
 8007388:	e7fe      	b.n	8007388 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800738a:	4b07      	ldr	r3, [pc, #28]	; (80073a8 <vTaskPlaceOnEventList+0x44>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	3318      	adds	r3, #24
 8007390:	4619      	mov	r1, r3
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7fe fe61 	bl	800605a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007398:	2101      	movs	r1, #1
 800739a:	6838      	ldr	r0, [r7, #0]
 800739c:	f000 faa6 	bl	80078ec <prvAddCurrentTaskToDelayedList>
}
 80073a0:	bf00      	nop
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	2000532c 	.word	0x2000532c

080073ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10a      	bne.n	80073d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80073be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c2:	f383 8811 	msr	BASEPRI, r3
 80073c6:	f3bf 8f6f 	isb	sy
 80073ca:	f3bf 8f4f 	dsb	sy
 80073ce:	617b      	str	r3, [r7, #20]
}
 80073d0:	bf00      	nop
 80073d2:	e7fe      	b.n	80073d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073d4:	4b0a      	ldr	r3, [pc, #40]	; (8007400 <vTaskPlaceOnEventListRestricted+0x54>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	3318      	adds	r3, #24
 80073da:	4619      	mov	r1, r3
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f7fe fe18 	bl	8006012 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d002      	beq.n	80073ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80073e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80073ee:	6879      	ldr	r1, [r7, #4]
 80073f0:	68b8      	ldr	r0, [r7, #8]
 80073f2:	f000 fa7b 	bl	80078ec <prvAddCurrentTaskToDelayedList>
	}
 80073f6:	bf00      	nop
 80073f8:	3718      	adds	r7, #24
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	2000532c 	.word	0x2000532c

08007404 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b086      	sub	sp, #24
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10a      	bne.n	8007430 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800741a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	60fb      	str	r3, [r7, #12]
}
 800742c:	bf00      	nop
 800742e:	e7fe      	b.n	800742e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	3318      	adds	r3, #24
 8007434:	4618      	mov	r0, r3
 8007436:	f7fe fe49 	bl	80060cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800743a:	4b1e      	ldr	r3, [pc, #120]	; (80074b4 <xTaskRemoveFromEventList+0xb0>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d11d      	bne.n	800747e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	3304      	adds	r3, #4
 8007446:	4618      	mov	r0, r3
 8007448:	f7fe fe40 	bl	80060cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007450:	4b19      	ldr	r3, [pc, #100]	; (80074b8 <xTaskRemoveFromEventList+0xb4>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	429a      	cmp	r2, r3
 8007456:	d903      	bls.n	8007460 <xTaskRemoveFromEventList+0x5c>
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745c:	4a16      	ldr	r2, [pc, #88]	; (80074b8 <xTaskRemoveFromEventList+0xb4>)
 800745e:	6013      	str	r3, [r2, #0]
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007464:	4613      	mov	r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	4413      	add	r3, r2
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	4a13      	ldr	r2, [pc, #76]	; (80074bc <xTaskRemoveFromEventList+0xb8>)
 800746e:	441a      	add	r2, r3
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	3304      	adds	r3, #4
 8007474:	4619      	mov	r1, r3
 8007476:	4610      	mov	r0, r2
 8007478:	f7fe fdcb 	bl	8006012 <vListInsertEnd>
 800747c:	e005      	b.n	800748a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	3318      	adds	r3, #24
 8007482:	4619      	mov	r1, r3
 8007484:	480e      	ldr	r0, [pc, #56]	; (80074c0 <xTaskRemoveFromEventList+0xbc>)
 8007486:	f7fe fdc4 	bl	8006012 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800748e:	4b0d      	ldr	r3, [pc, #52]	; (80074c4 <xTaskRemoveFromEventList+0xc0>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007494:	429a      	cmp	r2, r3
 8007496:	d905      	bls.n	80074a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007498:	2301      	movs	r3, #1
 800749a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800749c:	4b0a      	ldr	r3, [pc, #40]	; (80074c8 <xTaskRemoveFromEventList+0xc4>)
 800749e:	2201      	movs	r2, #1
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	e001      	b.n	80074a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80074a4:	2300      	movs	r3, #0
 80074a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80074a8:	697b      	ldr	r3, [r7, #20]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3718      	adds	r7, #24
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	20005828 	.word	0x20005828
 80074b8:	20005808 	.word	0x20005808
 80074bc:	20005330 	.word	0x20005330
 80074c0:	200057c0 	.word	0x200057c0
 80074c4:	2000532c 	.word	0x2000532c
 80074c8:	20005814 	.word	0x20005814

080074cc <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10a      	bne.n	80074f0 <vTaskSetTimeOutState+0x24>
	__asm volatile
 80074da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074de:	f383 8811 	msr	BASEPRI, r3
 80074e2:	f3bf 8f6f 	isb	sy
 80074e6:	f3bf 8f4f 	dsb	sy
 80074ea:	60fb      	str	r3, [r7, #12]
}
 80074ec:	bf00      	nop
 80074ee:	e7fe      	b.n	80074ee <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80074f0:	f000 fec8 	bl	8008284 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074f4:	4b06      	ldr	r3, [pc, #24]	; (8007510 <vTaskSetTimeOutState+0x44>)
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80074fc:	4b05      	ldr	r3, [pc, #20]	; (8007514 <vTaskSetTimeOutState+0x48>)
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007504:	f000 feee 	bl	80082e4 <vPortExitCritical>
}
 8007508:	bf00      	nop
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	20005818 	.word	0x20005818
 8007514:	20005804 	.word	0x20005804

08007518 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007520:	4b06      	ldr	r3, [pc, #24]	; (800753c <vTaskInternalSetTimeOutState+0x24>)
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007528:	4b05      	ldr	r3, [pc, #20]	; (8007540 <vTaskInternalSetTimeOutState+0x28>)
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	605a      	str	r2, [r3, #4]
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	20005818 	.word	0x20005818
 8007540:	20005804 	.word	0x20005804

08007544 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b088      	sub	sp, #32
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10a      	bne.n	800756a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	613b      	str	r3, [r7, #16]
}
 8007566:	bf00      	nop
 8007568:	e7fe      	b.n	8007568 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10a      	bne.n	8007586 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	60fb      	str	r3, [r7, #12]
}
 8007582:	bf00      	nop
 8007584:	e7fe      	b.n	8007584 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007586:	f000 fe7d 	bl	8008284 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800758a:	4b1d      	ldr	r3, [pc, #116]	; (8007600 <xTaskCheckForTimeOut+0xbc>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	69ba      	ldr	r2, [r7, #24]
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075a2:	d102      	bne.n	80075aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80075a4:	2300      	movs	r3, #0
 80075a6:	61fb      	str	r3, [r7, #28]
 80075a8:	e023      	b.n	80075f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	4b15      	ldr	r3, [pc, #84]	; (8007604 <xTaskCheckForTimeOut+0xc0>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d007      	beq.n	80075c6 <xTaskCheckForTimeOut+0x82>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	69ba      	ldr	r2, [r7, #24]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d302      	bcc.n	80075c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80075c0:	2301      	movs	r3, #1
 80075c2:	61fb      	str	r3, [r7, #28]
 80075c4:	e015      	b.n	80075f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d20b      	bcs.n	80075e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	1ad2      	subs	r2, r2, r3
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7ff ff9b 	bl	8007518 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80075e2:	2300      	movs	r3, #0
 80075e4:	61fb      	str	r3, [r7, #28]
 80075e6:	e004      	b.n	80075f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	2200      	movs	r2, #0
 80075ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80075ee:	2301      	movs	r3, #1
 80075f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80075f2:	f000 fe77 	bl	80082e4 <vPortExitCritical>

	return xReturn;
 80075f6:	69fb      	ldr	r3, [r7, #28]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3720      	adds	r7, #32
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	20005804 	.word	0x20005804
 8007604:	20005818 	.word	0x20005818

08007608 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007608:	b480      	push	{r7}
 800760a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800760c:	4b03      	ldr	r3, [pc, #12]	; (800761c <vTaskMissedYield+0x14>)
 800760e:	2201      	movs	r2, #1
 8007610:	601a      	str	r2, [r3, #0]
}
 8007612:	bf00      	nop
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	20005814 	.word	0x20005814

08007620 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007628:	f000 f852 	bl	80076d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800762c:	4b06      	ldr	r3, [pc, #24]	; (8007648 <prvIdleTask+0x28>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d9f9      	bls.n	8007628 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007634:	4b05      	ldr	r3, [pc, #20]	; (800764c <prvIdleTask+0x2c>)
 8007636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800763a:	601a      	str	r2, [r3, #0]
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007644:	e7f0      	b.n	8007628 <prvIdleTask+0x8>
 8007646:	bf00      	nop
 8007648:	20005330 	.word	0x20005330
 800764c:	e000ed04 	.word	0xe000ed04

08007650 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007656:	2300      	movs	r3, #0
 8007658:	607b      	str	r3, [r7, #4]
 800765a:	e00c      	b.n	8007676 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	4613      	mov	r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	4a12      	ldr	r2, [pc, #72]	; (80076b0 <prvInitialiseTaskLists+0x60>)
 8007668:	4413      	add	r3, r2
 800766a:	4618      	mov	r0, r3
 800766c:	f7fe fca4 	bl	8005fb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	3301      	adds	r3, #1
 8007674:	607b      	str	r3, [r7, #4]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b37      	cmp	r3, #55	; 0x37
 800767a:	d9ef      	bls.n	800765c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800767c:	480d      	ldr	r0, [pc, #52]	; (80076b4 <prvInitialiseTaskLists+0x64>)
 800767e:	f7fe fc9b 	bl	8005fb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007682:	480d      	ldr	r0, [pc, #52]	; (80076b8 <prvInitialiseTaskLists+0x68>)
 8007684:	f7fe fc98 	bl	8005fb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007688:	480c      	ldr	r0, [pc, #48]	; (80076bc <prvInitialiseTaskLists+0x6c>)
 800768a:	f7fe fc95 	bl	8005fb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800768e:	480c      	ldr	r0, [pc, #48]	; (80076c0 <prvInitialiseTaskLists+0x70>)
 8007690:	f7fe fc92 	bl	8005fb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007694:	480b      	ldr	r0, [pc, #44]	; (80076c4 <prvInitialiseTaskLists+0x74>)
 8007696:	f7fe fc8f 	bl	8005fb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800769a:	4b0b      	ldr	r3, [pc, #44]	; (80076c8 <prvInitialiseTaskLists+0x78>)
 800769c:	4a05      	ldr	r2, [pc, #20]	; (80076b4 <prvInitialiseTaskLists+0x64>)
 800769e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80076a0:	4b0a      	ldr	r3, [pc, #40]	; (80076cc <prvInitialiseTaskLists+0x7c>)
 80076a2:	4a05      	ldr	r2, [pc, #20]	; (80076b8 <prvInitialiseTaskLists+0x68>)
 80076a4:	601a      	str	r2, [r3, #0]
}
 80076a6:	bf00      	nop
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	20005330 	.word	0x20005330
 80076b4:	20005790 	.word	0x20005790
 80076b8:	200057a4 	.word	0x200057a4
 80076bc:	200057c0 	.word	0x200057c0
 80076c0:	200057d4 	.word	0x200057d4
 80076c4:	200057ec 	.word	0x200057ec
 80076c8:	200057b8 	.word	0x200057b8
 80076cc:	200057bc 	.word	0x200057bc

080076d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076d6:	e019      	b.n	800770c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80076d8:	f000 fdd4 	bl	8008284 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076dc:	4b10      	ldr	r3, [pc, #64]	; (8007720 <prvCheckTasksWaitingTermination+0x50>)
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	3304      	adds	r3, #4
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7fe fcef 	bl	80060cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80076ee:	4b0d      	ldr	r3, [pc, #52]	; (8007724 <prvCheckTasksWaitingTermination+0x54>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3b01      	subs	r3, #1
 80076f4:	4a0b      	ldr	r2, [pc, #44]	; (8007724 <prvCheckTasksWaitingTermination+0x54>)
 80076f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80076f8:	4b0b      	ldr	r3, [pc, #44]	; (8007728 <prvCheckTasksWaitingTermination+0x58>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3b01      	subs	r3, #1
 80076fe:	4a0a      	ldr	r2, [pc, #40]	; (8007728 <prvCheckTasksWaitingTermination+0x58>)
 8007700:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007702:	f000 fdef 	bl	80082e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f810 	bl	800772c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800770c:	4b06      	ldr	r3, [pc, #24]	; (8007728 <prvCheckTasksWaitingTermination+0x58>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1e1      	bne.n	80076d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007714:	bf00      	nop
 8007716:	bf00      	nop
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	200057d4 	.word	0x200057d4
 8007724:	20005800 	.word	0x20005800
 8007728:	200057e8 	.word	0x200057e8

0800772c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	3354      	adds	r3, #84	; 0x54
 8007738:	4618      	mov	r0, r3
 800773a:	f00a faef 	bl	8011d1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007744:	2b00      	cmp	r3, #0
 8007746:	d108      	bne.n	800775a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774c:	4618      	mov	r0, r3
 800774e:	f000 ff87 	bl	8008660 <vPortFree>
				vPortFree( pxTCB );
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 ff84 	bl	8008660 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007758:	e018      	b.n	800778c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007760:	2b01      	cmp	r3, #1
 8007762:	d103      	bne.n	800776c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 ff7b 	bl	8008660 <vPortFree>
	}
 800776a:	e00f      	b.n	800778c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007772:	2b02      	cmp	r3, #2
 8007774:	d00a      	beq.n	800778c <prvDeleteTCB+0x60>
	__asm volatile
 8007776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	60fb      	str	r3, [r7, #12]
}
 8007788:	bf00      	nop
 800778a:	e7fe      	b.n	800778a <prvDeleteTCB+0x5e>
	}
 800778c:	bf00      	nop
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800779a:	4b0c      	ldr	r3, [pc, #48]	; (80077cc <prvResetNextTaskUnblockTime+0x38>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d104      	bne.n	80077ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80077a4:	4b0a      	ldr	r3, [pc, #40]	; (80077d0 <prvResetNextTaskUnblockTime+0x3c>)
 80077a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80077ac:	e008      	b.n	80077c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077ae:	4b07      	ldr	r3, [pc, #28]	; (80077cc <prvResetNextTaskUnblockTime+0x38>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	4a04      	ldr	r2, [pc, #16]	; (80077d0 <prvResetNextTaskUnblockTime+0x3c>)
 80077be:	6013      	str	r3, [r2, #0]
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr
 80077cc:	200057b8 	.word	0x200057b8
 80077d0:	20005820 	.word	0x20005820

080077d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80077da:	4b0b      	ldr	r3, [pc, #44]	; (8007808 <xTaskGetSchedulerState+0x34>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d102      	bne.n	80077e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80077e2:	2301      	movs	r3, #1
 80077e4:	607b      	str	r3, [r7, #4]
 80077e6:	e008      	b.n	80077fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077e8:	4b08      	ldr	r3, [pc, #32]	; (800780c <xTaskGetSchedulerState+0x38>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d102      	bne.n	80077f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80077f0:	2302      	movs	r3, #2
 80077f2:	607b      	str	r3, [r7, #4]
 80077f4:	e001      	b.n	80077fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80077f6:	2300      	movs	r3, #0
 80077f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80077fa:	687b      	ldr	r3, [r7, #4]
	}
 80077fc:	4618      	mov	r0, r3
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr
 8007808:	2000580c 	.word	0x2000580c
 800780c:	20005828 	.word	0x20005828

08007810 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007810:	b580      	push	{r7, lr}
 8007812:	b086      	sub	sp, #24
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800781c:	2300      	movs	r3, #0
 800781e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d056      	beq.n	80078d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007826:	4b2e      	ldr	r3, [pc, #184]	; (80078e0 <xTaskPriorityDisinherit+0xd0>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	693a      	ldr	r2, [r7, #16]
 800782c:	429a      	cmp	r2, r3
 800782e:	d00a      	beq.n	8007846 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	60fb      	str	r3, [r7, #12]
}
 8007842:	bf00      	nop
 8007844:	e7fe      	b.n	8007844 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10a      	bne.n	8007864 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800784e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	60bb      	str	r3, [r7, #8]
}
 8007860:	bf00      	nop
 8007862:	e7fe      	b.n	8007862 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007868:	1e5a      	subs	r2, r3, #1
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007876:	429a      	cmp	r2, r3
 8007878:	d02c      	beq.n	80078d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800787e:	2b00      	cmp	r3, #0
 8007880:	d128      	bne.n	80078d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	3304      	adds	r3, #4
 8007886:	4618      	mov	r0, r3
 8007888:	f7fe fc20 	bl	80060cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007898:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a4:	4b0f      	ldr	r3, [pc, #60]	; (80078e4 <xTaskPriorityDisinherit+0xd4>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d903      	bls.n	80078b4 <xTaskPriorityDisinherit+0xa4>
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b0:	4a0c      	ldr	r2, [pc, #48]	; (80078e4 <xTaskPriorityDisinherit+0xd4>)
 80078b2:	6013      	str	r3, [r2, #0]
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b8:	4613      	mov	r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	4413      	add	r3, r2
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	4a09      	ldr	r2, [pc, #36]	; (80078e8 <xTaskPriorityDisinherit+0xd8>)
 80078c2:	441a      	add	r2, r3
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	3304      	adds	r3, #4
 80078c8:	4619      	mov	r1, r3
 80078ca:	4610      	mov	r0, r2
 80078cc:	f7fe fba1 	bl	8006012 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80078d0:	2301      	movs	r3, #1
 80078d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80078d4:	697b      	ldr	r3, [r7, #20]
	}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3718      	adds	r7, #24
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	2000532c 	.word	0x2000532c
 80078e4:	20005808 	.word	0x20005808
 80078e8:	20005330 	.word	0x20005330

080078ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80078f6:	4b21      	ldr	r3, [pc, #132]	; (800797c <prvAddCurrentTaskToDelayedList+0x90>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078fc:	4b20      	ldr	r3, [pc, #128]	; (8007980 <prvAddCurrentTaskToDelayedList+0x94>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	3304      	adds	r3, #4
 8007902:	4618      	mov	r0, r3
 8007904:	f7fe fbe2 	bl	80060cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800790e:	d10a      	bne.n	8007926 <prvAddCurrentTaskToDelayedList+0x3a>
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d007      	beq.n	8007926 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007916:	4b1a      	ldr	r3, [pc, #104]	; (8007980 <prvAddCurrentTaskToDelayedList+0x94>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	3304      	adds	r3, #4
 800791c:	4619      	mov	r1, r3
 800791e:	4819      	ldr	r0, [pc, #100]	; (8007984 <prvAddCurrentTaskToDelayedList+0x98>)
 8007920:	f7fe fb77 	bl	8006012 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007924:	e026      	b.n	8007974 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4413      	add	r3, r2
 800792c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800792e:	4b14      	ldr	r3, [pc, #80]	; (8007980 <prvAddCurrentTaskToDelayedList+0x94>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	429a      	cmp	r2, r3
 800793c:	d209      	bcs.n	8007952 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800793e:	4b12      	ldr	r3, [pc, #72]	; (8007988 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	4b0f      	ldr	r3, [pc, #60]	; (8007980 <prvAddCurrentTaskToDelayedList+0x94>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	3304      	adds	r3, #4
 8007948:	4619      	mov	r1, r3
 800794a:	4610      	mov	r0, r2
 800794c:	f7fe fb85 	bl	800605a <vListInsert>
}
 8007950:	e010      	b.n	8007974 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007952:	4b0e      	ldr	r3, [pc, #56]	; (800798c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	4b0a      	ldr	r3, [pc, #40]	; (8007980 <prvAddCurrentTaskToDelayedList+0x94>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	3304      	adds	r3, #4
 800795c:	4619      	mov	r1, r3
 800795e:	4610      	mov	r0, r2
 8007960:	f7fe fb7b 	bl	800605a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007964:	4b0a      	ldr	r3, [pc, #40]	; (8007990 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68ba      	ldr	r2, [r7, #8]
 800796a:	429a      	cmp	r2, r3
 800796c:	d202      	bcs.n	8007974 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800796e:	4a08      	ldr	r2, [pc, #32]	; (8007990 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	6013      	str	r3, [r2, #0]
}
 8007974:	bf00      	nop
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	20005804 	.word	0x20005804
 8007980:	2000532c 	.word	0x2000532c
 8007984:	200057ec 	.word	0x200057ec
 8007988:	200057bc 	.word	0x200057bc
 800798c:	200057b8 	.word	0x200057b8
 8007990:	20005820 	.word	0x20005820

08007994 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b08a      	sub	sp, #40	; 0x28
 8007998:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800799a:	2300      	movs	r3, #0
 800799c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800799e:	f000 fb07 	bl	8007fb0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80079a2:	4b1c      	ldr	r3, [pc, #112]	; (8007a14 <xTimerCreateTimerTask+0x80>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d021      	beq.n	80079ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80079aa:	2300      	movs	r3, #0
 80079ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80079ae:	2300      	movs	r3, #0
 80079b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80079b2:	1d3a      	adds	r2, r7, #4
 80079b4:	f107 0108 	add.w	r1, r7, #8
 80079b8:	f107 030c 	add.w	r3, r7, #12
 80079bc:	4618      	mov	r0, r3
 80079be:	f7fe fae1 	bl	8005f84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80079c2:	6879      	ldr	r1, [r7, #4]
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	9202      	str	r2, [sp, #8]
 80079ca:	9301      	str	r3, [sp, #4]
 80079cc:	2302      	movs	r3, #2
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	2300      	movs	r3, #0
 80079d2:	460a      	mov	r2, r1
 80079d4:	4910      	ldr	r1, [pc, #64]	; (8007a18 <xTimerCreateTimerTask+0x84>)
 80079d6:	4811      	ldr	r0, [pc, #68]	; (8007a1c <xTimerCreateTimerTask+0x88>)
 80079d8:	f7ff f88e 	bl	8006af8 <xTaskCreateStatic>
 80079dc:	4603      	mov	r3, r0
 80079de:	4a10      	ldr	r2, [pc, #64]	; (8007a20 <xTimerCreateTimerTask+0x8c>)
 80079e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80079e2:	4b0f      	ldr	r3, [pc, #60]	; (8007a20 <xTimerCreateTimerTask+0x8c>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80079ea:	2301      	movs	r3, #1
 80079ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10a      	bne.n	8007a0a <xTimerCreateTimerTask+0x76>
	__asm volatile
 80079f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f8:	f383 8811 	msr	BASEPRI, r3
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	613b      	str	r3, [r7, #16]
}
 8007a06:	bf00      	nop
 8007a08:	e7fe      	b.n	8007a08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007a0a:	697b      	ldr	r3, [r7, #20]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3718      	adds	r7, #24
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	2000585c 	.word	0x2000585c
 8007a18:	08012d28 	.word	0x08012d28
 8007a1c:	08007b59 	.word	0x08007b59
 8007a20:	20005860 	.word	0x20005860

08007a24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b08a      	sub	sp, #40	; 0x28
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
 8007a30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007a32:	2300      	movs	r3, #0
 8007a34:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10a      	bne.n	8007a52 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a40:	f383 8811 	msr	BASEPRI, r3
 8007a44:	f3bf 8f6f 	isb	sy
 8007a48:	f3bf 8f4f 	dsb	sy
 8007a4c:	623b      	str	r3, [r7, #32]
}
 8007a4e:	bf00      	nop
 8007a50:	e7fe      	b.n	8007a50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007a52:	4b1a      	ldr	r3, [pc, #104]	; (8007abc <xTimerGenericCommand+0x98>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d02a      	beq.n	8007ab0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	2b05      	cmp	r3, #5
 8007a6a:	dc18      	bgt.n	8007a9e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007a6c:	f7ff feb2 	bl	80077d4 <xTaskGetSchedulerState>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d109      	bne.n	8007a8a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007a76:	4b11      	ldr	r3, [pc, #68]	; (8007abc <xTimerGenericCommand+0x98>)
 8007a78:	6818      	ldr	r0, [r3, #0]
 8007a7a:	f107 0110 	add.w	r1, r7, #16
 8007a7e:	2300      	movs	r3, #0
 8007a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a82:	f7fe fc51 	bl	8006328 <xQueueGenericSend>
 8007a86:	6278      	str	r0, [r7, #36]	; 0x24
 8007a88:	e012      	b.n	8007ab0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a8a:	4b0c      	ldr	r3, [pc, #48]	; (8007abc <xTimerGenericCommand+0x98>)
 8007a8c:	6818      	ldr	r0, [r3, #0]
 8007a8e:	f107 0110 	add.w	r1, r7, #16
 8007a92:	2300      	movs	r3, #0
 8007a94:	2200      	movs	r2, #0
 8007a96:	f7fe fc47 	bl	8006328 <xQueueGenericSend>
 8007a9a:	6278      	str	r0, [r7, #36]	; 0x24
 8007a9c:	e008      	b.n	8007ab0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a9e:	4b07      	ldr	r3, [pc, #28]	; (8007abc <xTimerGenericCommand+0x98>)
 8007aa0:	6818      	ldr	r0, [r3, #0]
 8007aa2:	f107 0110 	add.w	r1, r7, #16
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	683a      	ldr	r2, [r7, #0]
 8007aaa:	f7fe fd3b 	bl	8006524 <xQueueGenericSendFromISR>
 8007aae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3728      	adds	r7, #40	; 0x28
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	2000585c 	.word	0x2000585c

08007ac0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b088      	sub	sp, #32
 8007ac4:	af02      	add	r7, sp, #8
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007aca:	4b22      	ldr	r3, [pc, #136]	; (8007b54 <prvProcessExpiredTimer+0x94>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	3304      	adds	r3, #4
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7fe faf7 	bl	80060cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ae4:	f003 0304 	and.w	r3, r3, #4
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d022      	beq.n	8007b32 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	699a      	ldr	r2, [r3, #24]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	18d1      	adds	r1, r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	6978      	ldr	r0, [r7, #20]
 8007afa:	f000 f8d1 	bl	8007ca0 <prvInsertTimerInActiveList>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d01f      	beq.n	8007b44 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b04:	2300      	movs	r3, #0
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	2300      	movs	r3, #0
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	6978      	ldr	r0, [r7, #20]
 8007b10:	f7ff ff88 	bl	8007a24 <xTimerGenericCommand>
 8007b14:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d113      	bne.n	8007b44 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b20:	f383 8811 	msr	BASEPRI, r3
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	f3bf 8f4f 	dsb	sy
 8007b2c:	60fb      	str	r3, [r7, #12]
}
 8007b2e:	bf00      	nop
 8007b30:	e7fe      	b.n	8007b30 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b38:	f023 0301 	bic.w	r3, r3, #1
 8007b3c:	b2da      	uxtb	r2, r3
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	6a1b      	ldr	r3, [r3, #32]
 8007b48:	6978      	ldr	r0, [r7, #20]
 8007b4a:	4798      	blx	r3
}
 8007b4c:	bf00      	nop
 8007b4e:	3718      	adds	r7, #24
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	20005854 	.word	0x20005854

08007b58 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b60:	f107 0308 	add.w	r3, r7, #8
 8007b64:	4618      	mov	r0, r3
 8007b66:	f000 f857 	bl	8007c18 <prvGetNextExpireTime>
 8007b6a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	4619      	mov	r1, r3
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f000 f803 	bl	8007b7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007b76:	f000 f8d5 	bl	8007d24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b7a:	e7f1      	b.n	8007b60 <prvTimerTask+0x8>

08007b7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007b86:	f7ff fa13 	bl	8006fb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b8a:	f107 0308 	add.w	r3, r7, #8
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f000 f866 	bl	8007c60 <prvSampleTimeNow>
 8007b94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d130      	bne.n	8007bfe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10a      	bne.n	8007bb8 <prvProcessTimerOrBlockTask+0x3c>
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d806      	bhi.n	8007bb8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007baa:	f7ff fa0f 	bl	8006fcc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007bae:	68f9      	ldr	r1, [r7, #12]
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f7ff ff85 	bl	8007ac0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007bb6:	e024      	b.n	8007c02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d008      	beq.n	8007bd0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007bbe:	4b13      	ldr	r3, [pc, #76]	; (8007c0c <prvProcessTimerOrBlockTask+0x90>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d101      	bne.n	8007bcc <prvProcessTimerOrBlockTask+0x50>
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e000      	b.n	8007bce <prvProcessTimerOrBlockTask+0x52>
 8007bcc:	2300      	movs	r3, #0
 8007bce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007bd0:	4b0f      	ldr	r3, [pc, #60]	; (8007c10 <prvProcessTimerOrBlockTask+0x94>)
 8007bd2:	6818      	ldr	r0, [r3, #0]
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	683a      	ldr	r2, [r7, #0]
 8007bdc:	4619      	mov	r1, r3
 8007bde:	f7fe ff57 	bl	8006a90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007be2:	f7ff f9f3 	bl	8006fcc <xTaskResumeAll>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d10a      	bne.n	8007c02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007bec:	4b09      	ldr	r3, [pc, #36]	; (8007c14 <prvProcessTimerOrBlockTask+0x98>)
 8007bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bf2:	601a      	str	r2, [r3, #0]
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	f3bf 8f6f 	isb	sy
}
 8007bfc:	e001      	b.n	8007c02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007bfe:	f7ff f9e5 	bl	8006fcc <xTaskResumeAll>
}
 8007c02:	bf00      	nop
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	20005858 	.word	0x20005858
 8007c10:	2000585c 	.word	0x2000585c
 8007c14:	e000ed04 	.word	0xe000ed04

08007c18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007c20:	4b0e      	ldr	r3, [pc, #56]	; (8007c5c <prvGetNextExpireTime+0x44>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <prvGetNextExpireTime+0x16>
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	e000      	b.n	8007c30 <prvGetNextExpireTime+0x18>
 8007c2e:	2200      	movs	r2, #0
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d105      	bne.n	8007c48 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c3c:	4b07      	ldr	r3, [pc, #28]	; (8007c5c <prvGetNextExpireTime+0x44>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	60fb      	str	r3, [r7, #12]
 8007c46:	e001      	b.n	8007c4c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3714      	adds	r7, #20
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	20005854 	.word	0x20005854

08007c60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007c68:	f7ff fa4e 	bl	8007108 <xTaskGetTickCount>
 8007c6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007c6e:	4b0b      	ldr	r3, [pc, #44]	; (8007c9c <prvSampleTimeNow+0x3c>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d205      	bcs.n	8007c84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007c78:	f000 f936 	bl	8007ee8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	e002      	b.n	8007c8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007c8a:	4a04      	ldr	r2, [pc, #16]	; (8007c9c <prvSampleTimeNow+0x3c>)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007c90:	68fb      	ldr	r3, [r7, #12]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	20005864 	.word	0x20005864

08007ca0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	607a      	str	r2, [r7, #4]
 8007cac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007cbe:	68ba      	ldr	r2, [r7, #8]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d812      	bhi.n	8007cec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	1ad2      	subs	r2, r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d302      	bcc.n	8007cda <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	617b      	str	r3, [r7, #20]
 8007cd8:	e01b      	b.n	8007d12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007cda:	4b10      	ldr	r3, [pc, #64]	; (8007d1c <prvInsertTimerInActiveList+0x7c>)
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	f7fe f9b8 	bl	800605a <vListInsert>
 8007cea:	e012      	b.n	8007d12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d206      	bcs.n	8007d02 <prvInsertTimerInActiveList+0x62>
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d302      	bcc.n	8007d02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	617b      	str	r3, [r7, #20]
 8007d00:	e007      	b.n	8007d12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d02:	4b07      	ldr	r3, [pc, #28]	; (8007d20 <prvInsertTimerInActiveList+0x80>)
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	3304      	adds	r3, #4
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	f7fe f9a4 	bl	800605a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007d12:	697b      	ldr	r3, [r7, #20]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3718      	adds	r7, #24
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	20005858 	.word	0x20005858
 8007d20:	20005854 	.word	0x20005854

08007d24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b08e      	sub	sp, #56	; 0x38
 8007d28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d2a:	e0ca      	b.n	8007ec2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	da18      	bge.n	8007d64 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007d32:	1d3b      	adds	r3, r7, #4
 8007d34:	3304      	adds	r3, #4
 8007d36:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10a      	bne.n	8007d54 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	61fb      	str	r3, [r7, #28]
}
 8007d50:	bf00      	nop
 8007d52:	e7fe      	b.n	8007d52 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d5a:	6850      	ldr	r0, [r2, #4]
 8007d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d5e:	6892      	ldr	r2, [r2, #8]
 8007d60:	4611      	mov	r1, r2
 8007d62:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f2c0 80ab 	blt.w	8007ec2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d004      	beq.n	8007d82 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7fe f9a5 	bl	80060cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d82:	463b      	mov	r3, r7
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7ff ff6b 	bl	8007c60 <prvSampleTimeNow>
 8007d8a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2b09      	cmp	r3, #9
 8007d90:	f200 8096 	bhi.w	8007ec0 <prvProcessReceivedCommands+0x19c>
 8007d94:	a201      	add	r2, pc, #4	; (adr r2, 8007d9c <prvProcessReceivedCommands+0x78>)
 8007d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9a:	bf00      	nop
 8007d9c:	08007dc5 	.word	0x08007dc5
 8007da0:	08007dc5 	.word	0x08007dc5
 8007da4:	08007dc5 	.word	0x08007dc5
 8007da8:	08007e39 	.word	0x08007e39
 8007dac:	08007e4d 	.word	0x08007e4d
 8007db0:	08007e97 	.word	0x08007e97
 8007db4:	08007dc5 	.word	0x08007dc5
 8007db8:	08007dc5 	.word	0x08007dc5
 8007dbc:	08007e39 	.word	0x08007e39
 8007dc0:	08007e4d 	.word	0x08007e4d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dca:	f043 0301 	orr.w	r3, r3, #1
 8007dce:	b2da      	uxtb	r2, r3
 8007dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007dd6:	68ba      	ldr	r2, [r7, #8]
 8007dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dda:	699b      	ldr	r3, [r3, #24]
 8007ddc:	18d1      	adds	r1, r2, r3
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007de2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007de4:	f7ff ff5c 	bl	8007ca0 <prvInsertTimerInActiveList>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d069      	beq.n	8007ec2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df0:	6a1b      	ldr	r3, [r3, #32]
 8007df2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007df4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dfc:	f003 0304 	and.w	r3, r3, #4
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d05e      	beq.n	8007ec2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007e04:	68ba      	ldr	r2, [r7, #8]
 8007e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	441a      	add	r2, r3
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	2300      	movs	r3, #0
 8007e12:	2100      	movs	r1, #0
 8007e14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e16:	f7ff fe05 	bl	8007a24 <xTimerGenericCommand>
 8007e1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d14f      	bne.n	8007ec2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e26:	f383 8811 	msr	BASEPRI, r3
 8007e2a:	f3bf 8f6f 	isb	sy
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	61bb      	str	r3, [r7, #24]
}
 8007e34:	bf00      	nop
 8007e36:	e7fe      	b.n	8007e36 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e3e:	f023 0301 	bic.w	r3, r3, #1
 8007e42:	b2da      	uxtb	r2, r3
 8007e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007e4a:	e03a      	b.n	8007ec2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e52:	f043 0301 	orr.w	r3, r3, #1
 8007e56:	b2da      	uxtb	r2, r3
 8007e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007e5e:	68ba      	ldr	r2, [r7, #8]
 8007e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e62:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e66:	699b      	ldr	r3, [r3, #24]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d10a      	bne.n	8007e82 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e70:	f383 8811 	msr	BASEPRI, r3
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	617b      	str	r3, [r7, #20]
}
 8007e7e:	bf00      	nop
 8007e80:	e7fe      	b.n	8007e80 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e84:	699a      	ldr	r2, [r3, #24]
 8007e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e88:	18d1      	adds	r1, r2, r3
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e90:	f7ff ff06 	bl	8007ca0 <prvInsertTimerInActiveList>
					break;
 8007e94:	e015      	b.n	8007ec2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e9c:	f003 0302 	and.w	r3, r3, #2
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d103      	bne.n	8007eac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ea6:	f000 fbdb 	bl	8008660 <vPortFree>
 8007eaa:	e00a      	b.n	8007ec2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007eb2:	f023 0301 	bic.w	r3, r3, #1
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007ebe:	e000      	b.n	8007ec2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007ec0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ec2:	4b08      	ldr	r3, [pc, #32]	; (8007ee4 <prvProcessReceivedCommands+0x1c0>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	1d39      	adds	r1, r7, #4
 8007ec8:	2200      	movs	r2, #0
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fe fbc6 	bl	800665c <xQueueReceive>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f47f af2a 	bne.w	8007d2c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007ed8:	bf00      	nop
 8007eda:	bf00      	nop
 8007edc:	3730      	adds	r7, #48	; 0x30
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	2000585c 	.word	0x2000585c

08007ee8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b088      	sub	sp, #32
 8007eec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007eee:	e048      	b.n	8007f82 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ef0:	4b2d      	ldr	r3, [pc, #180]	; (8007fa8 <prvSwitchTimerLists+0xc0>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007efa:	4b2b      	ldr	r3, [pc, #172]	; (8007fa8 <prvSwitchTimerLists+0xc0>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	3304      	adds	r3, #4
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7fe f8df 	bl	80060cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f1c:	f003 0304 	and.w	r3, r3, #4
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d02e      	beq.n	8007f82 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d90e      	bls.n	8007f54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f42:	4b19      	ldr	r3, [pc, #100]	; (8007fa8 <prvSwitchTimerLists+0xc0>)
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	3304      	adds	r3, #4
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	4610      	mov	r0, r2
 8007f4e:	f7fe f884 	bl	800605a <vListInsert>
 8007f52:	e016      	b.n	8007f82 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f54:	2300      	movs	r3, #0
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	2300      	movs	r3, #0
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f7ff fd60 	bl	8007a24 <xTimerGenericCommand>
 8007f64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d10a      	bne.n	8007f82 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f70:	f383 8811 	msr	BASEPRI, r3
 8007f74:	f3bf 8f6f 	isb	sy
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	603b      	str	r3, [r7, #0]
}
 8007f7e:	bf00      	nop
 8007f80:	e7fe      	b.n	8007f80 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f82:	4b09      	ldr	r3, [pc, #36]	; (8007fa8 <prvSwitchTimerLists+0xc0>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1b1      	bne.n	8007ef0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007f8c:	4b06      	ldr	r3, [pc, #24]	; (8007fa8 <prvSwitchTimerLists+0xc0>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007f92:	4b06      	ldr	r3, [pc, #24]	; (8007fac <prvSwitchTimerLists+0xc4>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a04      	ldr	r2, [pc, #16]	; (8007fa8 <prvSwitchTimerLists+0xc0>)
 8007f98:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007f9a:	4a04      	ldr	r2, [pc, #16]	; (8007fac <prvSwitchTimerLists+0xc4>)
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	6013      	str	r3, [r2, #0]
}
 8007fa0:	bf00      	nop
 8007fa2:	3718      	adds	r7, #24
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	20005854 	.word	0x20005854
 8007fac:	20005858 	.word	0x20005858

08007fb0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007fb6:	f000 f965 	bl	8008284 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007fba:	4b15      	ldr	r3, [pc, #84]	; (8008010 <prvCheckForValidListAndQueue+0x60>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d120      	bne.n	8008004 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007fc2:	4814      	ldr	r0, [pc, #80]	; (8008014 <prvCheckForValidListAndQueue+0x64>)
 8007fc4:	f7fd fff8 	bl	8005fb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007fc8:	4813      	ldr	r0, [pc, #76]	; (8008018 <prvCheckForValidListAndQueue+0x68>)
 8007fca:	f7fd fff5 	bl	8005fb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007fce:	4b13      	ldr	r3, [pc, #76]	; (800801c <prvCheckForValidListAndQueue+0x6c>)
 8007fd0:	4a10      	ldr	r2, [pc, #64]	; (8008014 <prvCheckForValidListAndQueue+0x64>)
 8007fd2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007fd4:	4b12      	ldr	r3, [pc, #72]	; (8008020 <prvCheckForValidListAndQueue+0x70>)
 8007fd6:	4a10      	ldr	r2, [pc, #64]	; (8008018 <prvCheckForValidListAndQueue+0x68>)
 8007fd8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007fda:	2300      	movs	r3, #0
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	4b11      	ldr	r3, [pc, #68]	; (8008024 <prvCheckForValidListAndQueue+0x74>)
 8007fe0:	4a11      	ldr	r2, [pc, #68]	; (8008028 <prvCheckForValidListAndQueue+0x78>)
 8007fe2:	2110      	movs	r1, #16
 8007fe4:	200a      	movs	r0, #10
 8007fe6:	f7fe f903 	bl	80061f0 <xQueueGenericCreateStatic>
 8007fea:	4603      	mov	r3, r0
 8007fec:	4a08      	ldr	r2, [pc, #32]	; (8008010 <prvCheckForValidListAndQueue+0x60>)
 8007fee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007ff0:	4b07      	ldr	r3, [pc, #28]	; (8008010 <prvCheckForValidListAndQueue+0x60>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d005      	beq.n	8008004 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ff8:	4b05      	ldr	r3, [pc, #20]	; (8008010 <prvCheckForValidListAndQueue+0x60>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	490b      	ldr	r1, [pc, #44]	; (800802c <prvCheckForValidListAndQueue+0x7c>)
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fe fd1c 	bl	8006a3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008004:	f000 f96e 	bl	80082e4 <vPortExitCritical>
}
 8008008:	bf00      	nop
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	2000585c 	.word	0x2000585c
 8008014:	2000582c 	.word	0x2000582c
 8008018:	20005840 	.word	0x20005840
 800801c:	20005854 	.word	0x20005854
 8008020:	20005858 	.word	0x20005858
 8008024:	20005908 	.word	0x20005908
 8008028:	20005868 	.word	0x20005868
 800802c:	08012d30 	.word	0x08012d30

08008030 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008030:	b480      	push	{r7}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	3b04      	subs	r3, #4
 8008040:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008048:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	3b04      	subs	r3, #4
 800804e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	f023 0201 	bic.w	r2, r3, #1
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	3b04      	subs	r3, #4
 800805e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008060:	4a0c      	ldr	r2, [pc, #48]	; (8008094 <pxPortInitialiseStack+0x64>)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	3b14      	subs	r3, #20
 800806a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	3b04      	subs	r3, #4
 8008076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f06f 0202 	mvn.w	r2, #2
 800807e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	3b20      	subs	r3, #32
 8008084:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008086:	68fb      	ldr	r3, [r7, #12]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3714      	adds	r7, #20
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr
 8008094:	08008099 	.word	0x08008099

08008098 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800809e:	2300      	movs	r3, #0
 80080a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80080a2:	4b12      	ldr	r3, [pc, #72]	; (80080ec <prvTaskExitError+0x54>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080aa:	d00a      	beq.n	80080c2 <prvTaskExitError+0x2a>
	__asm volatile
 80080ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b0:	f383 8811 	msr	BASEPRI, r3
 80080b4:	f3bf 8f6f 	isb	sy
 80080b8:	f3bf 8f4f 	dsb	sy
 80080bc:	60fb      	str	r3, [r7, #12]
}
 80080be:	bf00      	nop
 80080c0:	e7fe      	b.n	80080c0 <prvTaskExitError+0x28>
	__asm volatile
 80080c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c6:	f383 8811 	msr	BASEPRI, r3
 80080ca:	f3bf 8f6f 	isb	sy
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	60bb      	str	r3, [r7, #8]
}
 80080d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80080d6:	bf00      	nop
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0fc      	beq.n	80080d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80080de:	bf00      	nop
 80080e0:	bf00      	nop
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr
 80080ec:	20000010 	.word	0x20000010

080080f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80080f0:	4b07      	ldr	r3, [pc, #28]	; (8008110 <pxCurrentTCBConst2>)
 80080f2:	6819      	ldr	r1, [r3, #0]
 80080f4:	6808      	ldr	r0, [r1, #0]
 80080f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fa:	f380 8809 	msr	PSP, r0
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	f04f 0000 	mov.w	r0, #0
 8008106:	f380 8811 	msr	BASEPRI, r0
 800810a:	4770      	bx	lr
 800810c:	f3af 8000 	nop.w

08008110 <pxCurrentTCBConst2>:
 8008110:	2000532c 	.word	0x2000532c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008114:	bf00      	nop
 8008116:	bf00      	nop

08008118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008118:	4808      	ldr	r0, [pc, #32]	; (800813c <prvPortStartFirstTask+0x24>)
 800811a:	6800      	ldr	r0, [r0, #0]
 800811c:	6800      	ldr	r0, [r0, #0]
 800811e:	f380 8808 	msr	MSP, r0
 8008122:	f04f 0000 	mov.w	r0, #0
 8008126:	f380 8814 	msr	CONTROL, r0
 800812a:	b662      	cpsie	i
 800812c:	b661      	cpsie	f
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	df00      	svc	0
 8008138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800813a:	bf00      	nop
 800813c:	e000ed08 	.word	0xe000ed08

08008140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008146:	4b46      	ldr	r3, [pc, #280]	; (8008260 <xPortStartScheduler+0x120>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a46      	ldr	r2, [pc, #280]	; (8008264 <xPortStartScheduler+0x124>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d10a      	bne.n	8008166 <xPortStartScheduler+0x26>
	__asm volatile
 8008150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	613b      	str	r3, [r7, #16]
}
 8008162:	bf00      	nop
 8008164:	e7fe      	b.n	8008164 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008166:	4b3e      	ldr	r3, [pc, #248]	; (8008260 <xPortStartScheduler+0x120>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a3f      	ldr	r2, [pc, #252]	; (8008268 <xPortStartScheduler+0x128>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d10a      	bne.n	8008186 <xPortStartScheduler+0x46>
	__asm volatile
 8008170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	60fb      	str	r3, [r7, #12]
}
 8008182:	bf00      	nop
 8008184:	e7fe      	b.n	8008184 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008186:	4b39      	ldr	r3, [pc, #228]	; (800826c <xPortStartScheduler+0x12c>)
 8008188:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	b2db      	uxtb	r3, r3
 8008190:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	22ff      	movs	r2, #255	; 0xff
 8008196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	b2db      	uxtb	r3, r3
 800819e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80081a0:	78fb      	ldrb	r3, [r7, #3]
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	4b31      	ldr	r3, [pc, #196]	; (8008270 <xPortStartScheduler+0x130>)
 80081ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80081ae:	4b31      	ldr	r3, [pc, #196]	; (8008274 <xPortStartScheduler+0x134>)
 80081b0:	2207      	movs	r2, #7
 80081b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081b4:	e009      	b.n	80081ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80081b6:	4b2f      	ldr	r3, [pc, #188]	; (8008274 <xPortStartScheduler+0x134>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	3b01      	subs	r3, #1
 80081bc:	4a2d      	ldr	r2, [pc, #180]	; (8008274 <xPortStartScheduler+0x134>)
 80081be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80081c0:	78fb      	ldrb	r3, [r7, #3]
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	005b      	lsls	r3, r3, #1
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081ca:	78fb      	ldrb	r3, [r7, #3]
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081d2:	2b80      	cmp	r3, #128	; 0x80
 80081d4:	d0ef      	beq.n	80081b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80081d6:	4b27      	ldr	r3, [pc, #156]	; (8008274 <xPortStartScheduler+0x134>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f1c3 0307 	rsb	r3, r3, #7
 80081de:	2b04      	cmp	r3, #4
 80081e0:	d00a      	beq.n	80081f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80081e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e6:	f383 8811 	msr	BASEPRI, r3
 80081ea:	f3bf 8f6f 	isb	sy
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	60bb      	str	r3, [r7, #8]
}
 80081f4:	bf00      	nop
 80081f6:	e7fe      	b.n	80081f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80081f8:	4b1e      	ldr	r3, [pc, #120]	; (8008274 <xPortStartScheduler+0x134>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	021b      	lsls	r3, r3, #8
 80081fe:	4a1d      	ldr	r2, [pc, #116]	; (8008274 <xPortStartScheduler+0x134>)
 8008200:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008202:	4b1c      	ldr	r3, [pc, #112]	; (8008274 <xPortStartScheduler+0x134>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800820a:	4a1a      	ldr	r2, [pc, #104]	; (8008274 <xPortStartScheduler+0x134>)
 800820c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	b2da      	uxtb	r2, r3
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008216:	4b18      	ldr	r3, [pc, #96]	; (8008278 <xPortStartScheduler+0x138>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a17      	ldr	r2, [pc, #92]	; (8008278 <xPortStartScheduler+0x138>)
 800821c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008220:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008222:	4b15      	ldr	r3, [pc, #84]	; (8008278 <xPortStartScheduler+0x138>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a14      	ldr	r2, [pc, #80]	; (8008278 <xPortStartScheduler+0x138>)
 8008228:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800822c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800822e:	f000 f8dd 	bl	80083ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008232:	4b12      	ldr	r3, [pc, #72]	; (800827c <xPortStartScheduler+0x13c>)
 8008234:	2200      	movs	r2, #0
 8008236:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008238:	f000 f8fc 	bl	8008434 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800823c:	4b10      	ldr	r3, [pc, #64]	; (8008280 <xPortStartScheduler+0x140>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a0f      	ldr	r2, [pc, #60]	; (8008280 <xPortStartScheduler+0x140>)
 8008242:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008246:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008248:	f7ff ff66 	bl	8008118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800824c:	f7ff f826 	bl	800729c <vTaskSwitchContext>
	prvTaskExitError();
 8008250:	f7ff ff22 	bl	8008098 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3718      	adds	r7, #24
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	e000ed00 	.word	0xe000ed00
 8008264:	410fc271 	.word	0x410fc271
 8008268:	410fc270 	.word	0x410fc270
 800826c:	e000e400 	.word	0xe000e400
 8008270:	20005958 	.word	0x20005958
 8008274:	2000595c 	.word	0x2000595c
 8008278:	e000ed20 	.word	0xe000ed20
 800827c:	20000010 	.word	0x20000010
 8008280:	e000ef34 	.word	0xe000ef34

08008284 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
	__asm volatile
 800828a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828e:	f383 8811 	msr	BASEPRI, r3
 8008292:	f3bf 8f6f 	isb	sy
 8008296:	f3bf 8f4f 	dsb	sy
 800829a:	607b      	str	r3, [r7, #4]
}
 800829c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800829e:	4b0f      	ldr	r3, [pc, #60]	; (80082dc <vPortEnterCritical+0x58>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	3301      	adds	r3, #1
 80082a4:	4a0d      	ldr	r2, [pc, #52]	; (80082dc <vPortEnterCritical+0x58>)
 80082a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80082a8:	4b0c      	ldr	r3, [pc, #48]	; (80082dc <vPortEnterCritical+0x58>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d10f      	bne.n	80082d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80082b0:	4b0b      	ldr	r3, [pc, #44]	; (80082e0 <vPortEnterCritical+0x5c>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00a      	beq.n	80082d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80082ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082be:	f383 8811 	msr	BASEPRI, r3
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	603b      	str	r3, [r7, #0]
}
 80082cc:	bf00      	nop
 80082ce:	e7fe      	b.n	80082ce <vPortEnterCritical+0x4a>
	}
}
 80082d0:	bf00      	nop
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr
 80082dc:	20000010 	.word	0x20000010
 80082e0:	e000ed04 	.word	0xe000ed04

080082e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80082ea:	4b12      	ldr	r3, [pc, #72]	; (8008334 <vPortExitCritical+0x50>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10a      	bne.n	8008308 <vPortExitCritical+0x24>
	__asm volatile
 80082f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f6:	f383 8811 	msr	BASEPRI, r3
 80082fa:	f3bf 8f6f 	isb	sy
 80082fe:	f3bf 8f4f 	dsb	sy
 8008302:	607b      	str	r3, [r7, #4]
}
 8008304:	bf00      	nop
 8008306:	e7fe      	b.n	8008306 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008308:	4b0a      	ldr	r3, [pc, #40]	; (8008334 <vPortExitCritical+0x50>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	3b01      	subs	r3, #1
 800830e:	4a09      	ldr	r2, [pc, #36]	; (8008334 <vPortExitCritical+0x50>)
 8008310:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008312:	4b08      	ldr	r3, [pc, #32]	; (8008334 <vPortExitCritical+0x50>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d105      	bne.n	8008326 <vPortExitCritical+0x42>
 800831a:	2300      	movs	r3, #0
 800831c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	f383 8811 	msr	BASEPRI, r3
}
 8008324:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008326:	bf00      	nop
 8008328:	370c      	adds	r7, #12
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	20000010 	.word	0x20000010
	...

08008340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008340:	f3ef 8009 	mrs	r0, PSP
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	4b15      	ldr	r3, [pc, #84]	; (80083a0 <pxCurrentTCBConst>)
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	f01e 0f10 	tst.w	lr, #16
 8008350:	bf08      	it	eq
 8008352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835a:	6010      	str	r0, [r2, #0]
 800835c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008360:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008364:	f380 8811 	msr	BASEPRI, r0
 8008368:	f3bf 8f4f 	dsb	sy
 800836c:	f3bf 8f6f 	isb	sy
 8008370:	f7fe ff94 	bl	800729c <vTaskSwitchContext>
 8008374:	f04f 0000 	mov.w	r0, #0
 8008378:	f380 8811 	msr	BASEPRI, r0
 800837c:	bc09      	pop	{r0, r3}
 800837e:	6819      	ldr	r1, [r3, #0]
 8008380:	6808      	ldr	r0, [r1, #0]
 8008382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008386:	f01e 0f10 	tst.w	lr, #16
 800838a:	bf08      	it	eq
 800838c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008390:	f380 8809 	msr	PSP, r0
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	f3af 8000 	nop.w

080083a0 <pxCurrentTCBConst>:
 80083a0:	2000532c 	.word	0x2000532c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80083a4:	bf00      	nop
 80083a6:	bf00      	nop

080083a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
	__asm volatile
 80083ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b2:	f383 8811 	msr	BASEPRI, r3
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	f3bf 8f4f 	dsb	sy
 80083be:	607b      	str	r3, [r7, #4]
}
 80083c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80083c2:	f7fe feb1 	bl	8007128 <xTaskIncrementTick>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d003      	beq.n	80083d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083cc:	4b06      	ldr	r3, [pc, #24]	; (80083e8 <xPortSysTickHandler+0x40>)
 80083ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	2300      	movs	r3, #0
 80083d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	f383 8811 	msr	BASEPRI, r3
}
 80083de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80083e0:	bf00      	nop
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	e000ed04 	.word	0xe000ed04

080083ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80083ec:	b480      	push	{r7}
 80083ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80083f0:	4b0b      	ldr	r3, [pc, #44]	; (8008420 <vPortSetupTimerInterrupt+0x34>)
 80083f2:	2200      	movs	r2, #0
 80083f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80083f6:	4b0b      	ldr	r3, [pc, #44]	; (8008424 <vPortSetupTimerInterrupt+0x38>)
 80083f8:	2200      	movs	r2, #0
 80083fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083fc:	4b0a      	ldr	r3, [pc, #40]	; (8008428 <vPortSetupTimerInterrupt+0x3c>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a0a      	ldr	r2, [pc, #40]	; (800842c <vPortSetupTimerInterrupt+0x40>)
 8008402:	fba2 2303 	umull	r2, r3, r2, r3
 8008406:	099b      	lsrs	r3, r3, #6
 8008408:	4a09      	ldr	r2, [pc, #36]	; (8008430 <vPortSetupTimerInterrupt+0x44>)
 800840a:	3b01      	subs	r3, #1
 800840c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800840e:	4b04      	ldr	r3, [pc, #16]	; (8008420 <vPortSetupTimerInterrupt+0x34>)
 8008410:	2207      	movs	r2, #7
 8008412:	601a      	str	r2, [r3, #0]
}
 8008414:	bf00      	nop
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	e000e010 	.word	0xe000e010
 8008424:	e000e018 	.word	0xe000e018
 8008428:	20000004 	.word	0x20000004
 800842c:	10624dd3 	.word	0x10624dd3
 8008430:	e000e014 	.word	0xe000e014

08008434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008434:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008444 <vPortEnableVFP+0x10>
 8008438:	6801      	ldr	r1, [r0, #0]
 800843a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800843e:	6001      	str	r1, [r0, #0]
 8008440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008442:	bf00      	nop
 8008444:	e000ed88 	.word	0xe000ed88

08008448 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800844e:	f3ef 8305 	mrs	r3, IPSR
 8008452:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2b0f      	cmp	r3, #15
 8008458:	d914      	bls.n	8008484 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800845a:	4a17      	ldr	r2, [pc, #92]	; (80084b8 <vPortValidateInterruptPriority+0x70>)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4413      	add	r3, r2
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008464:	4b15      	ldr	r3, [pc, #84]	; (80084bc <vPortValidateInterruptPriority+0x74>)
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	7afa      	ldrb	r2, [r7, #11]
 800846a:	429a      	cmp	r2, r3
 800846c:	d20a      	bcs.n	8008484 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	607b      	str	r3, [r7, #4]
}
 8008480:	bf00      	nop
 8008482:	e7fe      	b.n	8008482 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008484:	4b0e      	ldr	r3, [pc, #56]	; (80084c0 <vPortValidateInterruptPriority+0x78>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800848c:	4b0d      	ldr	r3, [pc, #52]	; (80084c4 <vPortValidateInterruptPriority+0x7c>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	429a      	cmp	r2, r3
 8008492:	d90a      	bls.n	80084aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008498:	f383 8811 	msr	BASEPRI, r3
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	603b      	str	r3, [r7, #0]
}
 80084a6:	bf00      	nop
 80084a8:	e7fe      	b.n	80084a8 <vPortValidateInterruptPriority+0x60>
	}
 80084aa:	bf00      	nop
 80084ac:	3714      	adds	r7, #20
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	e000e3f0 	.word	0xe000e3f0
 80084bc:	20005958 	.word	0x20005958
 80084c0:	e000ed0c 	.word	0xe000ed0c
 80084c4:	2000595c 	.word	0x2000595c

080084c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b08a      	sub	sp, #40	; 0x28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80084d0:	2300      	movs	r3, #0
 80084d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80084d4:	f7fe fd6c 	bl	8006fb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80084d8:	4b5b      	ldr	r3, [pc, #364]	; (8008648 <pvPortMalloc+0x180>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d101      	bne.n	80084e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80084e0:	f000 f920 	bl	8008724 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80084e4:	4b59      	ldr	r3, [pc, #356]	; (800864c <pvPortMalloc+0x184>)
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4013      	ands	r3, r2
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f040 8093 	bne.w	8008618 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d01d      	beq.n	8008534 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80084f8:	2208      	movs	r2, #8
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4413      	add	r3, r2
 80084fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f003 0307 	and.w	r3, r3, #7
 8008506:	2b00      	cmp	r3, #0
 8008508:	d014      	beq.n	8008534 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f023 0307 	bic.w	r3, r3, #7
 8008510:	3308      	adds	r3, #8
 8008512:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f003 0307 	and.w	r3, r3, #7
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00a      	beq.n	8008534 <pvPortMalloc+0x6c>
	__asm volatile
 800851e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008522:	f383 8811 	msr	BASEPRI, r3
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	617b      	str	r3, [r7, #20]
}
 8008530:	bf00      	nop
 8008532:	e7fe      	b.n	8008532 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d06e      	beq.n	8008618 <pvPortMalloc+0x150>
 800853a:	4b45      	ldr	r3, [pc, #276]	; (8008650 <pvPortMalloc+0x188>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	429a      	cmp	r2, r3
 8008542:	d869      	bhi.n	8008618 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008544:	4b43      	ldr	r3, [pc, #268]	; (8008654 <pvPortMalloc+0x18c>)
 8008546:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008548:	4b42      	ldr	r3, [pc, #264]	; (8008654 <pvPortMalloc+0x18c>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800854e:	e004      	b.n	800855a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008552:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	429a      	cmp	r2, r3
 8008562:	d903      	bls.n	800856c <pvPortMalloc+0xa4>
 8008564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d1f1      	bne.n	8008550 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800856c:	4b36      	ldr	r3, [pc, #216]	; (8008648 <pvPortMalloc+0x180>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008572:	429a      	cmp	r2, r3
 8008574:	d050      	beq.n	8008618 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008576:	6a3b      	ldr	r3, [r7, #32]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2208      	movs	r2, #8
 800857c:	4413      	add	r3, r2
 800857e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	6a3b      	ldr	r3, [r7, #32]
 8008586:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	685a      	ldr	r2, [r3, #4]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	1ad2      	subs	r2, r2, r3
 8008590:	2308      	movs	r3, #8
 8008592:	005b      	lsls	r3, r3, #1
 8008594:	429a      	cmp	r2, r3
 8008596:	d91f      	bls.n	80085d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4413      	add	r3, r2
 800859e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	f003 0307 	and.w	r3, r3, #7
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00a      	beq.n	80085c0 <pvPortMalloc+0xf8>
	__asm volatile
 80085aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ae:	f383 8811 	msr	BASEPRI, r3
 80085b2:	f3bf 8f6f 	isb	sy
 80085b6:	f3bf 8f4f 	dsb	sy
 80085ba:	613b      	str	r3, [r7, #16]
}
 80085bc:	bf00      	nop
 80085be:	e7fe      	b.n	80085be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80085c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c2:	685a      	ldr	r2, [r3, #4]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	1ad2      	subs	r2, r2, r3
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80085cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80085d2:	69b8      	ldr	r0, [r7, #24]
 80085d4:	f000 f908 	bl	80087e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085d8:	4b1d      	ldr	r3, [pc, #116]	; (8008650 <pvPortMalloc+0x188>)
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	4a1b      	ldr	r2, [pc, #108]	; (8008650 <pvPortMalloc+0x188>)
 80085e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80085e6:	4b1a      	ldr	r3, [pc, #104]	; (8008650 <pvPortMalloc+0x188>)
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	4b1b      	ldr	r3, [pc, #108]	; (8008658 <pvPortMalloc+0x190>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d203      	bcs.n	80085fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085f2:	4b17      	ldr	r3, [pc, #92]	; (8008650 <pvPortMalloc+0x188>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a18      	ldr	r2, [pc, #96]	; (8008658 <pvPortMalloc+0x190>)
 80085f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80085fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fc:	685a      	ldr	r2, [r3, #4]
 80085fe:	4b13      	ldr	r3, [pc, #76]	; (800864c <pvPortMalloc+0x184>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	431a      	orrs	r2, r3
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860a:	2200      	movs	r2, #0
 800860c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800860e:	4b13      	ldr	r3, [pc, #76]	; (800865c <pvPortMalloc+0x194>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	3301      	adds	r3, #1
 8008614:	4a11      	ldr	r2, [pc, #68]	; (800865c <pvPortMalloc+0x194>)
 8008616:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008618:	f7fe fcd8 	bl	8006fcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	f003 0307 	and.w	r3, r3, #7
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00a      	beq.n	800863c <pvPortMalloc+0x174>
	__asm volatile
 8008626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862a:	f383 8811 	msr	BASEPRI, r3
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	60fb      	str	r3, [r7, #12]
}
 8008638:	bf00      	nop
 800863a:	e7fe      	b.n	800863a <pvPortMalloc+0x172>
	return pvReturn;
 800863c:	69fb      	ldr	r3, [r7, #28]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3728      	adds	r7, #40	; 0x28
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	20009568 	.word	0x20009568
 800864c:	2000957c 	.word	0x2000957c
 8008650:	2000956c 	.word	0x2000956c
 8008654:	20009560 	.word	0x20009560
 8008658:	20009570 	.word	0x20009570
 800865c:	20009574 	.word	0x20009574

08008660 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b086      	sub	sp, #24
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d04d      	beq.n	800870e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008672:	2308      	movs	r3, #8
 8008674:	425b      	negs	r3, r3
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	4413      	add	r3, r2
 800867a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	685a      	ldr	r2, [r3, #4]
 8008684:	4b24      	ldr	r3, [pc, #144]	; (8008718 <vPortFree+0xb8>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4013      	ands	r3, r2
 800868a:	2b00      	cmp	r3, #0
 800868c:	d10a      	bne.n	80086a4 <vPortFree+0x44>
	__asm volatile
 800868e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008692:	f383 8811 	msr	BASEPRI, r3
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	60fb      	str	r3, [r7, #12]
}
 80086a0:	bf00      	nop
 80086a2:	e7fe      	b.n	80086a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00a      	beq.n	80086c2 <vPortFree+0x62>
	__asm volatile
 80086ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b0:	f383 8811 	msr	BASEPRI, r3
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	60bb      	str	r3, [r7, #8]
}
 80086be:	bf00      	nop
 80086c0:	e7fe      	b.n	80086c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	685a      	ldr	r2, [r3, #4]
 80086c6:	4b14      	ldr	r3, [pc, #80]	; (8008718 <vPortFree+0xb8>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4013      	ands	r3, r2
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d01e      	beq.n	800870e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d11a      	bne.n	800870e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	685a      	ldr	r2, [r3, #4]
 80086dc:	4b0e      	ldr	r3, [pc, #56]	; (8008718 <vPortFree+0xb8>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	43db      	mvns	r3, r3
 80086e2:	401a      	ands	r2, r3
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80086e8:	f7fe fc62 	bl	8006fb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	685a      	ldr	r2, [r3, #4]
 80086f0:	4b0a      	ldr	r3, [pc, #40]	; (800871c <vPortFree+0xbc>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4413      	add	r3, r2
 80086f6:	4a09      	ldr	r2, [pc, #36]	; (800871c <vPortFree+0xbc>)
 80086f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086fa:	6938      	ldr	r0, [r7, #16]
 80086fc:	f000 f874 	bl	80087e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008700:	4b07      	ldr	r3, [pc, #28]	; (8008720 <vPortFree+0xc0>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	3301      	adds	r3, #1
 8008706:	4a06      	ldr	r2, [pc, #24]	; (8008720 <vPortFree+0xc0>)
 8008708:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800870a:	f7fe fc5f 	bl	8006fcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800870e:	bf00      	nop
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	2000957c 	.word	0x2000957c
 800871c:	2000956c 	.word	0x2000956c
 8008720:	20009578 	.word	0x20009578

08008724 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800872a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800872e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008730:	4b27      	ldr	r3, [pc, #156]	; (80087d0 <prvHeapInit+0xac>)
 8008732:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f003 0307 	and.w	r3, r3, #7
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00c      	beq.n	8008758 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	3307      	adds	r3, #7
 8008742:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f023 0307 	bic.w	r3, r3, #7
 800874a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800874c:	68ba      	ldr	r2, [r7, #8]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	4a1f      	ldr	r2, [pc, #124]	; (80087d0 <prvHeapInit+0xac>)
 8008754:	4413      	add	r3, r2
 8008756:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800875c:	4a1d      	ldr	r2, [pc, #116]	; (80087d4 <prvHeapInit+0xb0>)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008762:	4b1c      	ldr	r3, [pc, #112]	; (80087d4 <prvHeapInit+0xb0>)
 8008764:	2200      	movs	r2, #0
 8008766:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	4413      	add	r3, r2
 800876e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008770:	2208      	movs	r2, #8
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	1a9b      	subs	r3, r3, r2
 8008776:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f023 0307 	bic.w	r3, r3, #7
 800877e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	4a15      	ldr	r2, [pc, #84]	; (80087d8 <prvHeapInit+0xb4>)
 8008784:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008786:	4b14      	ldr	r3, [pc, #80]	; (80087d8 <prvHeapInit+0xb4>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2200      	movs	r2, #0
 800878c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800878e:	4b12      	ldr	r3, [pc, #72]	; (80087d8 <prvHeapInit+0xb4>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2200      	movs	r2, #0
 8008794:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	1ad2      	subs	r2, r2, r3
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80087a4:	4b0c      	ldr	r3, [pc, #48]	; (80087d8 <prvHeapInit+0xb4>)
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	4a0a      	ldr	r2, [pc, #40]	; (80087dc <prvHeapInit+0xb8>)
 80087b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	4a09      	ldr	r2, [pc, #36]	; (80087e0 <prvHeapInit+0xbc>)
 80087ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80087bc:	4b09      	ldr	r3, [pc, #36]	; (80087e4 <prvHeapInit+0xc0>)
 80087be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80087c2:	601a      	str	r2, [r3, #0]
}
 80087c4:	bf00      	nop
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	20005960 	.word	0x20005960
 80087d4:	20009560 	.word	0x20009560
 80087d8:	20009568 	.word	0x20009568
 80087dc:	20009570 	.word	0x20009570
 80087e0:	2000956c 	.word	0x2000956c
 80087e4:	2000957c 	.word	0x2000957c

080087e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80087e8:	b480      	push	{r7}
 80087ea:	b085      	sub	sp, #20
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087f0:	4b28      	ldr	r3, [pc, #160]	; (8008894 <prvInsertBlockIntoFreeList+0xac>)
 80087f2:	60fb      	str	r3, [r7, #12]
 80087f4:	e002      	b.n	80087fc <prvInsertBlockIntoFreeList+0x14>
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	60fb      	str	r3, [r7, #12]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	429a      	cmp	r2, r3
 8008804:	d8f7      	bhi.n	80087f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	4413      	add	r3, r2
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	429a      	cmp	r2, r3
 8008816:	d108      	bne.n	800882a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	685a      	ldr	r2, [r3, #4]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	441a      	add	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	441a      	add	r2, r3
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	429a      	cmp	r2, r3
 800883c:	d118      	bne.n	8008870 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	4b15      	ldr	r3, [pc, #84]	; (8008898 <prvInsertBlockIntoFreeList+0xb0>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	429a      	cmp	r2, r3
 8008848:	d00d      	beq.n	8008866 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	685a      	ldr	r2, [r3, #4]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	441a      	add	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	601a      	str	r2, [r3, #0]
 8008864:	e008      	b.n	8008878 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008866:	4b0c      	ldr	r3, [pc, #48]	; (8008898 <prvInsertBlockIntoFreeList+0xb0>)
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	601a      	str	r2, [r3, #0]
 800886e:	e003      	b.n	8008878 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	429a      	cmp	r2, r3
 800887e:	d002      	beq.n	8008886 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008886:	bf00      	nop
 8008888:	3714      	adds	r7, #20
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	20009560 	.word	0x20009560
 8008898:	20009568 	.word	0x20009568

0800889c <rcl_get_zero_initialized_publisher>:
 800889c:	4b01      	ldr	r3, [pc, #4]	; (80088a4 <rcl_get_zero_initialized_publisher+0x8>)
 800889e:	6818      	ldr	r0, [r3, #0]
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	08012d88 	.word	0x08012d88

080088a8 <rcl_publisher_init>:
 80088a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088ac:	b088      	sub	sp, #32
 80088ae:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80088b0:	2d00      	cmp	r5, #0
 80088b2:	d069      	beq.n	8008988 <rcl_publisher_init+0xe0>
 80088b4:	f105 0950 	add.w	r9, r5, #80	; 0x50
 80088b8:	4604      	mov	r4, r0
 80088ba:	4648      	mov	r0, r9
 80088bc:	460e      	mov	r6, r1
 80088be:	4690      	mov	r8, r2
 80088c0:	461f      	mov	r7, r3
 80088c2:	f000 f9d5 	bl	8008c70 <rcutils_allocator_is_valid>
 80088c6:	2800      	cmp	r0, #0
 80088c8:	d05e      	beq.n	8008988 <rcl_publisher_init+0xe0>
 80088ca:	2c00      	cmp	r4, #0
 80088cc:	d05c      	beq.n	8008988 <rcl_publisher_init+0xe0>
 80088ce:	f8d4 a000 	ldr.w	sl, [r4]
 80088d2:	f1ba 0f00 	cmp.w	sl, #0
 80088d6:	d004      	beq.n	80088e2 <rcl_publisher_init+0x3a>
 80088d8:	2764      	movs	r7, #100	; 0x64
 80088da:	4638      	mov	r0, r7
 80088dc:	b008      	add	sp, #32
 80088de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088e2:	4630      	mov	r0, r6
 80088e4:	f004 ffb8 	bl	800d858 <rcl_node_is_valid>
 80088e8:	2800      	cmp	r0, #0
 80088ea:	d052      	beq.n	8008992 <rcl_publisher_init+0xea>
 80088ec:	f1b8 0f00 	cmp.w	r8, #0
 80088f0:	d04a      	beq.n	8008988 <rcl_publisher_init+0xe0>
 80088f2:	2f00      	cmp	r7, #0
 80088f4:	d048      	beq.n	8008988 <rcl_publisher_init+0xe0>
 80088f6:	e9cd aa03 	strd	sl, sl, [sp, #12]
 80088fa:	aa07      	add	r2, sp, #28
 80088fc:	9205      	str	r2, [sp, #20]
 80088fe:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8008902:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008906:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800890a:	f8cd a01c 	str.w	sl, [sp, #28]
 800890e:	4639      	mov	r1, r7
 8008910:	e899 000c 	ldmia.w	r9, {r2, r3}
 8008914:	4630      	mov	r0, r6
 8008916:	f004 fff3 	bl	800d900 <rcl_node_resolve_name>
 800891a:	4607      	mov	r7, r0
 800891c:	2800      	cmp	r0, #0
 800891e:	d14f      	bne.n	80089c0 <rcl_publisher_init+0x118>
 8008920:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8008922:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8008924:	20c8      	movs	r0, #200	; 0xc8
 8008926:	4798      	blx	r3
 8008928:	6020      	str	r0, [r4, #0]
 800892a:	2800      	cmp	r0, #0
 800892c:	d04e      	beq.n	80089cc <rcl_publisher_init+0x124>
 800892e:	4630      	mov	r0, r6
 8008930:	f004 ffb4 	bl	800d89c <rcl_node_get_rmw_handle>
 8008934:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	9a07      	ldr	r2, [sp, #28]
 800893c:	6827      	ldr	r7, [r4, #0]
 800893e:	462b      	mov	r3, r5
 8008940:	4641      	mov	r1, r8
 8008942:	f000 fa53 	bl	8008dec <rmw_create_publisher>
 8008946:	6823      	ldr	r3, [r4, #0]
 8008948:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800894c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8008950:	b370      	cbz	r0, 80089b0 <rcl_publisher_init+0x108>
 8008952:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8008956:	f000 fb27 	bl	8008fa8 <rmw_publisher_get_actual_qos>
 800895a:	6823      	ldr	r3, [r4, #0]
 800895c:	4607      	mov	r7, r0
 800895e:	b9d0      	cbnz	r0, 8008996 <rcl_publisher_init+0xee>
 8008960:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 8008964:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8008968:	4629      	mov	r1, r5
 800896a:	2270      	movs	r2, #112	; 0x70
 800896c:	4618      	mov	r0, r3
 800896e:	f009 faa6 	bl	8011ebe <memcpy>
 8008972:	6832      	ldr	r2, [r6, #0]
 8008974:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 8008978:	9807      	ldr	r0, [sp, #28]
 800897a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800897c:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800897e:	4798      	blx	r3
 8008980:	4638      	mov	r0, r7
 8008982:	b008      	add	sp, #32
 8008984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008988:	270b      	movs	r7, #11
 800898a:	4638      	mov	r0, r7
 800898c:	b008      	add	sp, #32
 800898e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008992:	27c8      	movs	r7, #200	; 0xc8
 8008994:	e7a1      	b.n	80088da <rcl_publisher_init+0x32>
 8008996:	b18b      	cbz	r3, 80089bc <rcl_publisher_init+0x114>
 8008998:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800899c:	b142      	cbz	r2, 80089b0 <rcl_publisher_init+0x108>
 800899e:	4630      	mov	r0, r6
 80089a0:	f004 ff7c 	bl	800d89c <rcl_node_get_rmw_handle>
 80089a4:	6823      	ldr	r3, [r4, #0]
 80089a6:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 80089aa:	f000 fb0d 	bl	8008fc8 <rmw_destroy_publisher>
 80089ae:	6823      	ldr	r3, [r4, #0]
 80089b0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 80089b2:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80089b4:	4618      	mov	r0, r3
 80089b6:	4790      	blx	r2
 80089b8:	2300      	movs	r3, #0
 80089ba:	6023      	str	r3, [r4, #0]
 80089bc:	2701      	movs	r7, #1
 80089be:	e7db      	b.n	8008978 <rcl_publisher_init+0xd0>
 80089c0:	2867      	cmp	r0, #103	; 0x67
 80089c2:	d0d9      	beq.n	8008978 <rcl_publisher_init+0xd0>
 80089c4:	2869      	cmp	r0, #105	; 0x69
 80089c6:	d003      	beq.n	80089d0 <rcl_publisher_init+0x128>
 80089c8:	280a      	cmp	r0, #10
 80089ca:	d1f7      	bne.n	80089bc <rcl_publisher_init+0x114>
 80089cc:	270a      	movs	r7, #10
 80089ce:	e7d3      	b.n	8008978 <rcl_publisher_init+0xd0>
 80089d0:	2767      	movs	r7, #103	; 0x67
 80089d2:	e7d1      	b.n	8008978 <rcl_publisher_init+0xd0>

080089d4 <rcl_publisher_get_default_options>:
 80089d4:	b570      	push	{r4, r5, r6, lr}
 80089d6:	4d14      	ldr	r5, [pc, #80]	; (8008a28 <rcl_publisher_get_default_options+0x54>)
 80089d8:	4914      	ldr	r1, [pc, #80]	; (8008a2c <rcl_publisher_get_default_options+0x58>)
 80089da:	b088      	sub	sp, #32
 80089dc:	4604      	mov	r4, r0
 80089de:	2250      	movs	r2, #80	; 0x50
 80089e0:	4628      	mov	r0, r5
 80089e2:	f009 fa6c 	bl	8011ebe <memcpy>
 80089e6:	a802      	add	r0, sp, #8
 80089e8:	f000 f934 	bl	8008c54 <rcutils_get_default_allocator>
 80089ec:	f10d 0c08 	add.w	ip, sp, #8
 80089f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80089f4:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 80089f8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80089fc:	466e      	mov	r6, sp
 80089fe:	f8dc 3000 	ldr.w	r3, [ip]
 8008a02:	f8ce 3000 	str.w	r3, [lr]
 8008a06:	4630      	mov	r0, r6
 8008a08:	f000 f972 	bl	8008cf0 <rmw_get_default_publisher_options>
 8008a0c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008a10:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8008a14:	e883 0003 	stmia.w	r3, {r0, r1}
 8008a18:	2270      	movs	r2, #112	; 0x70
 8008a1a:	4629      	mov	r1, r5
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f009 fa4e 	bl	8011ebe <memcpy>
 8008a22:	4620      	mov	r0, r4
 8008a24:	b008      	add	sp, #32
 8008a26:	bd70      	pop	{r4, r5, r6, pc}
 8008a28:	20009580 	.word	0x20009580
 8008a2c:	08012d90 	.word	0x08012d90

08008a30 <rcl_publish>:
 8008a30:	b1f8      	cbz	r0, 8008a72 <rcl_publish+0x42>
 8008a32:	6803      	ldr	r3, [r0, #0]
 8008a34:	b570      	push	{r4, r5, r6, lr}
 8008a36:	4604      	mov	r4, r0
 8008a38:	b1b3      	cbz	r3, 8008a68 <rcl_publish+0x38>
 8008a3a:	4616      	mov	r6, r2
 8008a3c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008a40:	b192      	cbz	r2, 8008a68 <rcl_publish+0x38>
 8008a42:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8008a46:	460d      	mov	r5, r1
 8008a48:	f004 fb2c 	bl	800d0a4 <rcl_context_is_valid>
 8008a4c:	b160      	cbz	r0, 8008a68 <rcl_publish+0x38>
 8008a4e:	6823      	ldr	r3, [r4, #0]
 8008a50:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8008a54:	b140      	cbz	r0, 8008a68 <rcl_publish+0x38>
 8008a56:	b155      	cbz	r5, 8008a6e <rcl_publish+0x3e>
 8008a58:	4632      	mov	r2, r6
 8008a5a:	4629      	mov	r1, r5
 8008a5c:	f000 f966 	bl	8008d2c <rmw_publish>
 8008a60:	3800      	subs	r0, #0
 8008a62:	bf18      	it	ne
 8008a64:	2001      	movne	r0, #1
 8008a66:	bd70      	pop	{r4, r5, r6, pc}
 8008a68:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008a6c:	bd70      	pop	{r4, r5, r6, pc}
 8008a6e:	200b      	movs	r0, #11
 8008a70:	bd70      	pop	{r4, r5, r6, pc}
 8008a72:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008a76:	4770      	bx	lr

08008a78 <rclc_support_init>:
 8008a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a7c:	b086      	sub	sp, #24
 8008a7e:	b3b8      	cbz	r0, 8008af0 <rclc_support_init+0x78>
 8008a80:	461c      	mov	r4, r3
 8008a82:	b3ab      	cbz	r3, 8008af0 <rclc_support_init+0x78>
 8008a84:	460f      	mov	r7, r1
 8008a86:	4690      	mov	r8, r2
 8008a88:	4606      	mov	r6, r0
 8008a8a:	f004 fc75 	bl	800d378 <rcl_get_zero_initialized_init_options>
 8008a8e:	f104 030c 	add.w	r3, r4, #12
 8008a92:	9005      	str	r0, [sp, #20]
 8008a94:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008a98:	e88d 0003 	stmia.w	sp, {r0, r1}
 8008a9c:	a805      	add	r0, sp, #20
 8008a9e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8008aa2:	f004 fc6b 	bl	800d37c <rcl_init_options_init>
 8008aa6:	4605      	mov	r5, r0
 8008aa8:	b9e0      	cbnz	r0, 8008ae4 <rclc_support_init+0x6c>
 8008aaa:	ad02      	add	r5, sp, #8
 8008aac:	4628      	mov	r0, r5
 8008aae:	f004 faef 	bl	800d090 <rcl_get_zero_initialized_context>
 8008ab2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008ab6:	4633      	mov	r3, r6
 8008ab8:	e886 0003 	stmia.w	r6, {r0, r1}
 8008abc:	aa05      	add	r2, sp, #20
 8008abe:	4641      	mov	r1, r8
 8008ac0:	4638      	mov	r0, r7
 8008ac2:	f004 fb55 	bl	800d170 <rcl_init>
 8008ac6:	4605      	mov	r5, r0
 8008ac8:	b9b8      	cbnz	r0, 8008afa <rclc_support_init+0x82>
 8008aca:	60b4      	str	r4, [r6, #8]
 8008acc:	4622      	mov	r2, r4
 8008ace:	f106 010c 	add.w	r1, r6, #12
 8008ad2:	2003      	movs	r0, #3
 8008ad4:	f005 f8d0 	bl	800dc78 <rcl_clock_init>
 8008ad8:	4605      	mov	r5, r0
 8008ada:	b970      	cbnz	r0, 8008afa <rclc_support_init+0x82>
 8008adc:	a805      	add	r0, sp, #20
 8008ade:	f004 fcb3 	bl	800d448 <rcl_init_options_fini>
 8008ae2:	b108      	cbz	r0, 8008ae8 <rclc_support_init+0x70>
 8008ae4:	f000 f8e8 	bl	8008cb8 <rcutils_reset_error>
 8008ae8:	4628      	mov	r0, r5
 8008aea:	b006      	add	sp, #24
 8008aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008af0:	250b      	movs	r5, #11
 8008af2:	4628      	mov	r0, r5
 8008af4:	b006      	add	sp, #24
 8008af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008afa:	f000 f8dd 	bl	8008cb8 <rcutils_reset_error>
 8008afe:	a805      	add	r0, sp, #20
 8008b00:	f004 fca2 	bl	800d448 <rcl_init_options_fini>
 8008b04:	2800      	cmp	r0, #0
 8008b06:	d0ef      	beq.n	8008ae8 <rclc_support_init+0x70>
 8008b08:	e7ec      	b.n	8008ae4 <rclc_support_init+0x6c>
 8008b0a:	bf00      	nop

08008b0c <rclc_node_init_default>:
 8008b0c:	b3b8      	cbz	r0, 8008b7e <rclc_node_init_default+0x72>
 8008b0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b12:	460d      	mov	r5, r1
 8008b14:	b0a1      	sub	sp, #132	; 0x84
 8008b16:	b329      	cbz	r1, 8008b64 <rclc_node_init_default+0x58>
 8008b18:	4616      	mov	r6, r2
 8008b1a:	b31a      	cbz	r2, 8008b64 <rclc_node_init_default+0x58>
 8008b1c:	461f      	mov	r7, r3
 8008b1e:	b30b      	cbz	r3, 8008b64 <rclc_node_init_default+0x58>
 8008b20:	f10d 0810 	add.w	r8, sp, #16
 8008b24:	4604      	mov	r4, r0
 8008b26:	4640      	mov	r0, r8
 8008b28:	f004 fd46 	bl	800d5b8 <rcl_get_zero_initialized_node>
 8008b2c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8008b30:	f10d 0918 	add.w	r9, sp, #24
 8008b34:	e884 0003 	stmia.w	r4, {r0, r1}
 8008b38:	4648      	mov	r0, r9
 8008b3a:	f004 feb5 	bl	800d8a8 <rcl_node_get_default_options>
 8008b3e:	4640      	mov	r0, r8
 8008b40:	f004 fd3a 	bl	800d5b8 <rcl_get_zero_initialized_node>
 8008b44:	f8cd 9000 	str.w	r9, [sp]
 8008b48:	e898 0003 	ldmia.w	r8, {r0, r1}
 8008b4c:	463b      	mov	r3, r7
 8008b4e:	e884 0003 	stmia.w	r4, {r0, r1}
 8008b52:	4632      	mov	r2, r6
 8008b54:	4629      	mov	r1, r5
 8008b56:	4620      	mov	r0, r4
 8008b58:	f004 fd38 	bl	800d5cc <rcl_node_init>
 8008b5c:	b930      	cbnz	r0, 8008b6c <rclc_node_init_default+0x60>
 8008b5e:	b021      	add	sp, #132	; 0x84
 8008b60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b64:	200b      	movs	r0, #11
 8008b66:	b021      	add	sp, #132	; 0x84
 8008b68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b6c:	9003      	str	r0, [sp, #12]
 8008b6e:	f000 f8a3 	bl	8008cb8 <rcutils_reset_error>
 8008b72:	f000 f8a1 	bl	8008cb8 <rcutils_reset_error>
 8008b76:	9803      	ldr	r0, [sp, #12]
 8008b78:	b021      	add	sp, #132	; 0x84
 8008b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b7e:	200b      	movs	r0, #11
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop

08008b84 <rclc_publisher_init_default>:
 8008b84:	b368      	cbz	r0, 8008be2 <rclc_publisher_init_default+0x5e>
 8008b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b8a:	460d      	mov	r5, r1
 8008b8c:	b0a0      	sub	sp, #128	; 0x80
 8008b8e:	b321      	cbz	r1, 8008bda <rclc_publisher_init_default+0x56>
 8008b90:	4616      	mov	r6, r2
 8008b92:	b312      	cbz	r2, 8008bda <rclc_publisher_init_default+0x56>
 8008b94:	461f      	mov	r7, r3
 8008b96:	b303      	cbz	r3, 8008bda <rclc_publisher_init_default+0x56>
 8008b98:	4604      	mov	r4, r0
 8008b9a:	f7ff fe7f 	bl	800889c <rcl_get_zero_initialized_publisher>
 8008b9e:	f10d 0810 	add.w	r8, sp, #16
 8008ba2:	6020      	str	r0, [r4, #0]
 8008ba4:	4640      	mov	r0, r8
 8008ba6:	f7ff ff15 	bl	80089d4 <rcl_publisher_get_default_options>
 8008baa:	490f      	ldr	r1, [pc, #60]	; (8008be8 <rclc_publisher_init_default+0x64>)
 8008bac:	2250      	movs	r2, #80	; 0x50
 8008bae:	4640      	mov	r0, r8
 8008bb0:	f009 f985 	bl	8011ebe <memcpy>
 8008bb4:	f8cd 8000 	str.w	r8, [sp]
 8008bb8:	463b      	mov	r3, r7
 8008bba:	4632      	mov	r2, r6
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f7ff fe72 	bl	80088a8 <rcl_publisher_init>
 8008bc4:	b910      	cbnz	r0, 8008bcc <rclc_publisher_init_default+0x48>
 8008bc6:	b020      	add	sp, #128	; 0x80
 8008bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bcc:	9003      	str	r0, [sp, #12]
 8008bce:	f000 f873 	bl	8008cb8 <rcutils_reset_error>
 8008bd2:	9803      	ldr	r0, [sp, #12]
 8008bd4:	b020      	add	sp, #128	; 0x80
 8008bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bda:	200b      	movs	r0, #11
 8008bdc:	b020      	add	sp, #128	; 0x80
 8008bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008be2:	200b      	movs	r0, #11
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	08012de0 	.word	0x08012de0

08008bec <__default_zero_allocate>:
 8008bec:	f008 bc82 	b.w	80114f4 <calloc>

08008bf0 <__default_reallocate>:
 8008bf0:	f008 be0e 	b.w	8011810 <realloc>

08008bf4 <__default_deallocate>:
 8008bf4:	f008 bcec 	b.w	80115d0 <free>

08008bf8 <__default_allocate>:
 8008bf8:	f008 bce2 	b.w	80115c0 <malloc>

08008bfc <rcutils_get_zero_initialized_allocator>:
 8008bfc:	b510      	push	{r4, lr}
 8008bfe:	4c05      	ldr	r4, [pc, #20]	; (8008c14 <rcutils_get_zero_initialized_allocator+0x18>)
 8008c00:	4686      	mov	lr, r0
 8008c02:	4684      	mov	ip, r0
 8008c04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008c0a:	6823      	ldr	r3, [r4, #0]
 8008c0c:	f8cc 3000 	str.w	r3, [ip]
 8008c10:	4670      	mov	r0, lr
 8008c12:	bd10      	pop	{r4, pc}
 8008c14:	08012e30 	.word	0x08012e30

08008c18 <rcutils_set_default_allocator>:
 8008c18:	b1a8      	cbz	r0, 8008c46 <rcutils_set_default_allocator+0x2e>
 8008c1a:	6802      	ldr	r2, [r0, #0]
 8008c1c:	b1a2      	cbz	r2, 8008c48 <rcutils_set_default_allocator+0x30>
 8008c1e:	6841      	ldr	r1, [r0, #4]
 8008c20:	b1a1      	cbz	r1, 8008c4c <rcutils_set_default_allocator+0x34>
 8008c22:	b410      	push	{r4}
 8008c24:	68c4      	ldr	r4, [r0, #12]
 8008c26:	b164      	cbz	r4, 8008c42 <rcutils_set_default_allocator+0x2a>
 8008c28:	6880      	ldr	r0, [r0, #8]
 8008c2a:	b138      	cbz	r0, 8008c3c <rcutils_set_default_allocator+0x24>
 8008c2c:	4b08      	ldr	r3, [pc, #32]	; (8008c50 <rcutils_set_default_allocator+0x38>)
 8008c2e:	601a      	str	r2, [r3, #0]
 8008c30:	2200      	movs	r2, #0
 8008c32:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8008c36:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8008c3a:	2001      	movs	r0, #1
 8008c3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c40:	4770      	bx	lr
 8008c42:	4620      	mov	r0, r4
 8008c44:	e7fa      	b.n	8008c3c <rcutils_set_default_allocator+0x24>
 8008c46:	4770      	bx	lr
 8008c48:	4610      	mov	r0, r2
 8008c4a:	4770      	bx	lr
 8008c4c:	4608      	mov	r0, r1
 8008c4e:	4770      	bx	lr
 8008c50:	20000014 	.word	0x20000014

08008c54 <rcutils_get_default_allocator>:
 8008c54:	b510      	push	{r4, lr}
 8008c56:	4c05      	ldr	r4, [pc, #20]	; (8008c6c <rcutils_get_default_allocator+0x18>)
 8008c58:	4686      	mov	lr, r0
 8008c5a:	4684      	mov	ip, r0
 8008c5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008c62:	6823      	ldr	r3, [r4, #0]
 8008c64:	f8cc 3000 	str.w	r3, [ip]
 8008c68:	4670      	mov	r0, lr
 8008c6a:	bd10      	pop	{r4, pc}
 8008c6c:	20000014 	.word	0x20000014

08008c70 <rcutils_allocator_is_valid>:
 8008c70:	b158      	cbz	r0, 8008c8a <rcutils_allocator_is_valid+0x1a>
 8008c72:	6803      	ldr	r3, [r0, #0]
 8008c74:	b143      	cbz	r3, 8008c88 <rcutils_allocator_is_valid+0x18>
 8008c76:	6843      	ldr	r3, [r0, #4]
 8008c78:	b133      	cbz	r3, 8008c88 <rcutils_allocator_is_valid+0x18>
 8008c7a:	68c3      	ldr	r3, [r0, #12]
 8008c7c:	b123      	cbz	r3, 8008c88 <rcutils_allocator_is_valid+0x18>
 8008c7e:	6880      	ldr	r0, [r0, #8]
 8008c80:	3800      	subs	r0, #0
 8008c82:	bf18      	it	ne
 8008c84:	2001      	movne	r0, #1
 8008c86:	4770      	bx	lr
 8008c88:	4618      	mov	r0, r3
 8008c8a:	4770      	bx	lr

08008c8c <rcutils_get_error_string>:
 8008c8c:	4b06      	ldr	r3, [pc, #24]	; (8008ca8 <rcutils_get_error_string+0x1c>)
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	b13b      	cbz	r3, 8008ca2 <rcutils_get_error_string+0x16>
 8008c92:	4b06      	ldr	r3, [pc, #24]	; (8008cac <rcutils_get_error_string+0x20>)
 8008c94:	781a      	ldrb	r2, [r3, #0]
 8008c96:	b90a      	cbnz	r2, 8008c9c <rcutils_get_error_string+0x10>
 8008c98:	2201      	movs	r2, #1
 8008c9a:	701a      	strb	r2, [r3, #0]
 8008c9c:	4b04      	ldr	r3, [pc, #16]	; (8008cb0 <rcutils_get_error_string+0x24>)
 8008c9e:	7818      	ldrb	r0, [r3, #0]
 8008ca0:	4770      	bx	lr
 8008ca2:	4b04      	ldr	r3, [pc, #16]	; (8008cb4 <rcutils_get_error_string+0x28>)
 8008ca4:	7818      	ldrb	r0, [r3, #0]
 8008ca6:	4770      	bx	lr
 8008ca8:	200095f0 	.word	0x200095f0
 8008cac:	20009609 	.word	0x20009609
 8008cb0:	20009608 	.word	0x20009608
 8008cb4:	08012e44 	.word	0x08012e44

08008cb8 <rcutils_reset_error>:
 8008cb8:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8008cd8 <rcutils_reset_error+0x20>
 8008cbc:	4a08      	ldr	r2, [pc, #32]	; (8008ce0 <rcutils_reset_error+0x28>)
 8008cbe:	4809      	ldr	r0, [pc, #36]	; (8008ce4 <rcutils_reset_error+0x2c>)
 8008cc0:	4909      	ldr	r1, [pc, #36]	; (8008ce8 <rcutils_reset_error+0x30>)
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	8013      	strh	r3, [r2, #0]
 8008cc6:	ed82 7b02 	vstr	d7, [r2, #8]
 8008cca:	4a08      	ldr	r2, [pc, #32]	; (8008cec <rcutils_reset_error+0x34>)
 8008ccc:	7003      	strb	r3, [r0, #0]
 8008cce:	700b      	strb	r3, [r1, #0]
 8008cd0:	7013      	strb	r3, [r2, #0]
 8008cd2:	4770      	bx	lr
 8008cd4:	f3af 8000 	nop.w
	...
 8008ce0:	200095f8 	.word	0x200095f8
 8008ce4:	20009609 	.word	0x20009609
 8008ce8:	20009608 	.word	0x20009608
 8008cec:	200095f0 	.word	0x200095f0

08008cf0 <rmw_get_default_publisher_options>:
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	6002      	str	r2, [r0, #0]
 8008cf4:	7102      	strb	r2, [r0, #4]
 8008cf6:	4770      	bx	lr

08008cf8 <rmw_uros_set_custom_transport>:
 8008cf8:	b470      	push	{r4, r5, r6}
 8008cfa:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8008cfe:	b162      	cbz	r2, 8008d1a <rmw_uros_set_custom_transport+0x22>
 8008d00:	b15b      	cbz	r3, 8008d1a <rmw_uros_set_custom_transport+0x22>
 8008d02:	b155      	cbz	r5, 8008d1a <rmw_uros_set_custom_transport+0x22>
 8008d04:	b14e      	cbz	r6, 8008d1a <rmw_uros_set_custom_transport+0x22>
 8008d06:	4c06      	ldr	r4, [pc, #24]	; (8008d20 <rmw_uros_set_custom_transport+0x28>)
 8008d08:	7020      	strb	r0, [r4, #0]
 8008d0a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8008d0e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008d12:	6166      	str	r6, [r4, #20]
 8008d14:	2000      	movs	r0, #0
 8008d16:	bc70      	pop	{r4, r5, r6}
 8008d18:	4770      	bx	lr
 8008d1a:	200b      	movs	r0, #11
 8008d1c:	bc70      	pop	{r4, r5, r6}
 8008d1e:	4770      	bx	lr
 8008d20:	2000960c 	.word	0x2000960c

08008d24 <flush_session>:
 8008d24:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8008d26:	f002 bb3d 	b.w	800b3a4 <uxr_run_session_until_confirm_delivery>
 8008d2a:	bf00      	nop

08008d2c <rmw_publish>:
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	d053      	beq.n	8008dd8 <rmw_publish+0xac>
 8008d30:	b570      	push	{r4, r5, r6, lr}
 8008d32:	460d      	mov	r5, r1
 8008d34:	b08e      	sub	sp, #56	; 0x38
 8008d36:	2900      	cmp	r1, #0
 8008d38:	d04b      	beq.n	8008dd2 <rmw_publish+0xa6>
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	6800      	ldr	r0, [r0, #0]
 8008d3e:	f000 fc47 	bl	80095d0 <is_uxrce_rmw_identifier_valid>
 8008d42:	2800      	cmp	r0, #0
 8008d44:	d045      	beq.n	8008dd2 <rmw_publish+0xa6>
 8008d46:	6866      	ldr	r6, [r4, #4]
 8008d48:	2e00      	cmp	r6, #0
 8008d4a:	d042      	beq.n	8008dd2 <rmw_publish+0xa6>
 8008d4c:	69b4      	ldr	r4, [r6, #24]
 8008d4e:	4628      	mov	r0, r5
 8008d50:	6923      	ldr	r3, [r4, #16]
 8008d52:	4798      	blx	r3
 8008d54:	69f3      	ldr	r3, [r6, #28]
 8008d56:	9005      	str	r0, [sp, #20]
 8008d58:	b113      	cbz	r3, 8008d60 <rmw_publish+0x34>
 8008d5a:	a805      	add	r0, sp, #20
 8008d5c:	4798      	blx	r3
 8008d5e:	9805      	ldr	r0, [sp, #20]
 8008d60:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8008d64:	691b      	ldr	r3, [r3, #16]
 8008d66:	9000      	str	r0, [sp, #0]
 8008d68:	6972      	ldr	r2, [r6, #20]
 8008d6a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8008d6c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8008d70:	ab06      	add	r3, sp, #24
 8008d72:	f003 f903 	bl	800bf7c <uxr_prepare_output_stream>
 8008d76:	b1d8      	cbz	r0, 8008db0 <rmw_publish+0x84>
 8008d78:	68a3      	ldr	r3, [r4, #8]
 8008d7a:	a906      	add	r1, sp, #24
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	4798      	blx	r3
 8008d80:	6a33      	ldr	r3, [r6, #32]
 8008d82:	4604      	mov	r4, r0
 8008d84:	b10b      	cbz	r3, 8008d8a <rmw_publish+0x5e>
 8008d86:	a806      	add	r0, sp, #24
 8008d88:	4798      	blx	r3
 8008d8a:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8008d94:	d022      	beq.n	8008ddc <rmw_publish+0xb0>
 8008d96:	6918      	ldr	r0, [r3, #16]
 8008d98:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 8008d9a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008d9e:	f002 fb01 	bl	800b3a4 <uxr_run_session_until_confirm_delivery>
 8008da2:	4020      	ands	r0, r4
 8008da4:	b2c4      	uxtb	r4, r0
 8008da6:	f084 0001 	eor.w	r0, r4, #1
 8008daa:	b2c0      	uxtb	r0, r0
 8008dac:	b00e      	add	sp, #56	; 0x38
 8008dae:	bd70      	pop	{r4, r5, r6, pc}
 8008db0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8008db4:	6918      	ldr	r0, [r3, #16]
 8008db6:	9b05      	ldr	r3, [sp, #20]
 8008db8:	9300      	str	r3, [sp, #0]
 8008dba:	4b0b      	ldr	r3, [pc, #44]	; (8008de8 <rmw_publish+0xbc>)
 8008dbc:	9301      	str	r3, [sp, #4]
 8008dbe:	9602      	str	r6, [sp, #8]
 8008dc0:	6972      	ldr	r2, [r6, #20]
 8008dc2:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8008dc4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008dc8:	ab06      	add	r3, sp, #24
 8008dca:	f003 f907 	bl	800bfdc <uxr_prepare_output_stream_fragmented>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d1d2      	bne.n	8008d78 <rmw_publish+0x4c>
 8008dd2:	2001      	movs	r0, #1
 8008dd4:	b00e      	add	sp, #56	; 0x38
 8008dd6:	bd70      	pop	{r4, r5, r6, pc}
 8008dd8:	2001      	movs	r0, #1
 8008dda:	4770      	bx	lr
 8008ddc:	6918      	ldr	r0, [r3, #16]
 8008dde:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008de2:	f001 ff59 	bl	800ac98 <uxr_flash_output_streams>
 8008de6:	e7de      	b.n	8008da6 <rmw_publish+0x7a>
 8008de8:	08008d25 	.word	0x08008d25

08008dec <rmw_create_publisher>:
 8008dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df0:	b087      	sub	sp, #28
 8008df2:	2800      	cmp	r0, #0
 8008df4:	f000 80cc 	beq.w	8008f90 <rmw_create_publisher+0x1a4>
 8008df8:	460e      	mov	r6, r1
 8008dfa:	2900      	cmp	r1, #0
 8008dfc:	f000 80c8 	beq.w	8008f90 <rmw_create_publisher+0x1a4>
 8008e00:	4604      	mov	r4, r0
 8008e02:	6800      	ldr	r0, [r0, #0]
 8008e04:	4615      	mov	r5, r2
 8008e06:	4698      	mov	r8, r3
 8008e08:	f000 fbe2 	bl	80095d0 <is_uxrce_rmw_identifier_valid>
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	f000 80bf 	beq.w	8008f90 <rmw_create_publisher+0x1a4>
 8008e12:	2d00      	cmp	r5, #0
 8008e14:	f000 80bc 	beq.w	8008f90 <rmw_create_publisher+0x1a4>
 8008e18:	782b      	ldrb	r3, [r5, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f000 80b8 	beq.w	8008f90 <rmw_create_publisher+0x1a4>
 8008e20:	f1b8 0f00 	cmp.w	r8, #0
 8008e24:	f000 80b4 	beq.w	8008f90 <rmw_create_publisher+0x1a4>
 8008e28:	485c      	ldr	r0, [pc, #368]	; (8008f9c <rmw_create_publisher+0x1b0>)
 8008e2a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8008e2e:	f005 fc9b 	bl	800e768 <get_memory>
 8008e32:	2800      	cmp	r0, #0
 8008e34:	f000 80ac 	beq.w	8008f90 <rmw_create_publisher+0x1a4>
 8008e38:	6884      	ldr	r4, [r0, #8]
 8008e3a:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 8008e3e:	f005 fcb7 	bl	800e7b0 <rmw_get_implementation_identifier>
 8008e42:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 8008e46:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8008e4a:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8008e4e:	4628      	mov	r0, r5
 8008e50:	f7f7 f9e8 	bl	8000224 <strlen>
 8008e54:	3001      	adds	r0, #1
 8008e56:	283c      	cmp	r0, #60	; 0x3c
 8008e58:	f104 0784 	add.w	r7, r4, #132	; 0x84
 8008e5c:	f200 8091 	bhi.w	8008f82 <rmw_create_publisher+0x196>
 8008e60:	4a4f      	ldr	r2, [pc, #316]	; (8008fa0 <rmw_create_publisher+0x1b4>)
 8008e62:	462b      	mov	r3, r5
 8008e64:	213c      	movs	r1, #60	; 0x3c
 8008e66:	4650      	mov	r0, sl
 8008e68:	f008 fe5a 	bl	8011b20 <sniprintf>
 8008e6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008e70:	67e3      	str	r3, [r4, #124]	; 0x7c
 8008e72:	4641      	mov	r1, r8
 8008e74:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 8008e78:	2250      	movs	r2, #80	; 0x50
 8008e7a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008e7e:	f009 f81e 	bl	8011ebe <memcpy>
 8008e82:	f898 3008 	ldrb.w	r3, [r8, #8]
 8008e86:	4947      	ldr	r1, [pc, #284]	; (8008fa4 <rmw_create_publisher+0x1b8>)
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e8e:	bf0c      	ite	eq
 8008e90:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 8008e94:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 8008e98:	67a3      	str	r3, [r4, #120]	; 0x78
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8008ea0:	4630      	mov	r0, r6
 8008ea2:	f000 fba3 	bl	80095ec <get_message_typesupport_handle>
 8008ea6:	2800      	cmp	r0, #0
 8008ea8:	d06b      	beq.n	8008f82 <rmw_create_publisher+0x196>
 8008eaa:	6842      	ldr	r2, [r0, #4]
 8008eac:	61a2      	str	r2, [r4, #24]
 8008eae:	2a00      	cmp	r2, #0
 8008eb0:	d067      	beq.n	8008f82 <rmw_create_publisher+0x196>
 8008eb2:	4629      	mov	r1, r5
 8008eb4:	4643      	mov	r3, r8
 8008eb6:	4648      	mov	r0, r9
 8008eb8:	f005 fee0 	bl	800ec7c <create_topic>
 8008ebc:	6260      	str	r0, [r4, #36]	; 0x24
 8008ebe:	2800      	cmp	r0, #0
 8008ec0:	d063      	beq.n	8008f8a <rmw_create_publisher+0x19e>
 8008ec2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eca:	2103      	movs	r1, #3
 8008ecc:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 8008ed0:	1c42      	adds	r2, r0, #1
 8008ed2:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 8008ed6:	f001 fd91 	bl	800a9fc <uxr_object_id>
 8008eda:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8008ede:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ee2:	6120      	str	r0, [r4, #16]
 8008ee4:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8008ee8:	6910      	ldr	r0, [r2, #16]
 8008eea:	2506      	movs	r5, #6
 8008eec:	9500      	str	r5, [sp, #0]
 8008eee:	6819      	ldr	r1, [r3, #0]
 8008ef0:	6922      	ldr	r2, [r4, #16]
 8008ef2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8008ef6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008efa:	f001 fcd9 	bl	800a8b0 <uxr_buffer_create_publisher_bin>
 8008efe:	4602      	mov	r2, r0
 8008f00:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8008f04:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8008f08:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8008f0c:	f000 fae0 	bl	80094d0 <run_xrce_session>
 8008f10:	b3b8      	cbz	r0, 8008f82 <rmw_create_publisher+0x196>
 8008f12:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f1a:	2105      	movs	r1, #5
 8008f1c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 8008f20:	1c42      	adds	r2, r0, #1
 8008f22:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 8008f26:	f001 fd69 	bl	800a9fc <uxr_object_id>
 8008f2a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8008f2e:	6160      	str	r0, [r4, #20]
 8008f30:	691e      	ldr	r6, [r3, #16]
 8008f32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f36:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8008f3a:	f10d 0a10 	add.w	sl, sp, #16
 8008f3e:	4641      	mov	r1, r8
 8008f40:	4650      	mov	r0, sl
 8008f42:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 8008f46:	f000 fadf 	bl	8009508 <convert_qos_profile>
 8008f4a:	9503      	str	r5, [sp, #12]
 8008f4c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8008f50:	9001      	str	r0, [sp, #4]
 8008f52:	f8ad 1008 	strh.w	r1, [sp, #8]
 8008f56:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 8008f60:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8008f64:	f8d8 1000 	ldr.w	r1, [r8]
 8008f68:	4630      	mov	r0, r6
 8008f6a:	f001 fcd1 	bl	800a910 <uxr_buffer_create_datawriter_bin>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8008f74:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8008f78:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8008f7c:	f000 faa8 	bl	80094d0 <run_xrce_session>
 8008f80:	b938      	cbnz	r0, 8008f92 <rmw_create_publisher+0x1a6>
 8008f82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008f84:	b108      	cbz	r0, 8008f8a <rmw_create_publisher+0x19e>
 8008f86:	f000 fa47 	bl	8009418 <rmw_uxrce_fini_topic_memory>
 8008f8a:	4638      	mov	r0, r7
 8008f8c:	f000 f9ec 	bl	8009368 <rmw_uxrce_fini_publisher_memory>
 8008f90:	2700      	movs	r7, #0
 8008f92:	4638      	mov	r0, r7
 8008f94:	b007      	add	sp, #28
 8008f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f9a:	bf00      	nop
 8008f9c:	2000df04 	.word	0x2000df04
 8008fa0:	08012e7c 	.word	0x08012e7c
 8008fa4:	08012e48 	.word	0x08012e48

08008fa8 <rmw_publisher_get_actual_qos>:
 8008fa8:	b150      	cbz	r0, 8008fc0 <rmw_publisher_get_actual_qos+0x18>
 8008faa:	b508      	push	{r3, lr}
 8008fac:	460b      	mov	r3, r1
 8008fae:	b149      	cbz	r1, 8008fc4 <rmw_publisher_get_actual_qos+0x1c>
 8008fb0:	6841      	ldr	r1, [r0, #4]
 8008fb2:	2250      	movs	r2, #80	; 0x50
 8008fb4:	3128      	adds	r1, #40	; 0x28
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f008 ff81 	bl	8011ebe <memcpy>
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	bd08      	pop	{r3, pc}
 8008fc0:	200b      	movs	r0, #11
 8008fc2:	4770      	bx	lr
 8008fc4:	200b      	movs	r0, #11
 8008fc6:	bd08      	pop	{r3, pc}

08008fc8 <rmw_destroy_publisher>:
 8008fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fca:	b128      	cbz	r0, 8008fd8 <rmw_destroy_publisher+0x10>
 8008fcc:	4604      	mov	r4, r0
 8008fce:	6800      	ldr	r0, [r0, #0]
 8008fd0:	460d      	mov	r5, r1
 8008fd2:	f000 fafd 	bl	80095d0 <is_uxrce_rmw_identifier_valid>
 8008fd6:	b910      	cbnz	r0, 8008fde <rmw_destroy_publisher+0x16>
 8008fd8:	2401      	movs	r4, #1
 8008fda:	4620      	mov	r0, r4
 8008fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fde:	6863      	ldr	r3, [r4, #4]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d0f9      	beq.n	8008fd8 <rmw_destroy_publisher+0x10>
 8008fe4:	2d00      	cmp	r5, #0
 8008fe6:	d0f7      	beq.n	8008fd8 <rmw_destroy_publisher+0x10>
 8008fe8:	6828      	ldr	r0, [r5, #0]
 8008fea:	f000 faf1 	bl	80095d0 <is_uxrce_rmw_identifier_valid>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	d0f2      	beq.n	8008fd8 <rmw_destroy_publisher+0x10>
 8008ff2:	686c      	ldr	r4, [r5, #4]
 8008ff4:	2c00      	cmp	r4, #0
 8008ff6:	d0ef      	beq.n	8008fd8 <rmw_destroy_publisher+0x10>
 8008ff8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008ffa:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 8008ffe:	f005 fe8d 	bl	800ed1c <destroy_topic>
 8009002:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8009006:	6962      	ldr	r2, [r4, #20]
 8009008:	6918      	ldr	r0, [r3, #16]
 800900a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800900e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8009012:	6819      	ldr	r1, [r3, #0]
 8009014:	f001 fb98 	bl	800a748 <uxr_buffer_delete_entity>
 8009018:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800901c:	6922      	ldr	r2, [r4, #16]
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 8009024:	4604      	mov	r4, r0
 8009026:	6809      	ldr	r1, [r1, #0]
 8009028:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800902c:	f001 fb8c 	bl	800a748 <uxr_buffer_delete_entity>
 8009030:	693e      	ldr	r6, [r7, #16]
 8009032:	4622      	mov	r2, r4
 8009034:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 8009038:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800903c:	4604      	mov	r4, r0
 800903e:	4630      	mov	r0, r6
 8009040:	f000 fa46 	bl	80094d0 <run_xrce_session>
 8009044:	693e      	ldr	r6, [r7, #16]
 8009046:	4622      	mov	r2, r4
 8009048:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800904c:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 8009050:	4604      	mov	r4, r0
 8009052:	4630      	mov	r0, r6
 8009054:	f000 fa3c 	bl	80094d0 <run_xrce_session>
 8009058:	b12c      	cbz	r4, 8009066 <rmw_destroy_publisher+0x9e>
 800905a:	b120      	cbz	r0, 8009066 <rmw_destroy_publisher+0x9e>
 800905c:	2400      	movs	r4, #0
 800905e:	4628      	mov	r0, r5
 8009060:	f000 f982 	bl	8009368 <rmw_uxrce_fini_publisher_memory>
 8009064:	e7b9      	b.n	8008fda <rmw_destroy_publisher+0x12>
 8009066:	2402      	movs	r4, #2
 8009068:	e7f9      	b.n	800905e <rmw_destroy_publisher+0x96>
 800906a:	bf00      	nop

0800906c <rmw_uxrce_init_service_memory>:
 800906c:	b1e2      	cbz	r2, 80090a8 <rmw_uxrce_init_service_memory+0x3c>
 800906e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009072:	7b05      	ldrb	r5, [r0, #12]
 8009074:	4606      	mov	r6, r0
 8009076:	b9ad      	cbnz	r5, 80090a4 <rmw_uxrce_init_service_memory+0x38>
 8009078:	23c8      	movs	r3, #200	; 0xc8
 800907a:	e9c0 5500 	strd	r5, r5, [r0]
 800907e:	6083      	str	r3, [r0, #8]
 8009080:	f240 1301 	movw	r3, #257	; 0x101
 8009084:	4617      	mov	r7, r2
 8009086:	8183      	strh	r3, [r0, #12]
 8009088:	460c      	mov	r4, r1
 800908a:	46a8      	mov	r8, r5
 800908c:	4621      	mov	r1, r4
 800908e:	4630      	mov	r0, r6
 8009090:	3501      	adds	r5, #1
 8009092:	f005 fb79 	bl	800e788 <put_memory>
 8009096:	42af      	cmp	r7, r5
 8009098:	60a4      	str	r4, [r4, #8]
 800909a:	f884 800c 	strb.w	r8, [r4, #12]
 800909e:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 80090a2:	d1f3      	bne.n	800908c <rmw_uxrce_init_service_memory+0x20>
 80090a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop

080090ac <rmw_uxrce_init_client_memory>:
 80090ac:	b1e2      	cbz	r2, 80090e8 <rmw_uxrce_init_client_memory+0x3c>
 80090ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090b2:	7b05      	ldrb	r5, [r0, #12]
 80090b4:	4606      	mov	r6, r0
 80090b6:	b9ad      	cbnz	r5, 80090e4 <rmw_uxrce_init_client_memory+0x38>
 80090b8:	23c8      	movs	r3, #200	; 0xc8
 80090ba:	e9c0 5500 	strd	r5, r5, [r0]
 80090be:	6083      	str	r3, [r0, #8]
 80090c0:	f240 1301 	movw	r3, #257	; 0x101
 80090c4:	4617      	mov	r7, r2
 80090c6:	8183      	strh	r3, [r0, #12]
 80090c8:	460c      	mov	r4, r1
 80090ca:	46a8      	mov	r8, r5
 80090cc:	4621      	mov	r1, r4
 80090ce:	4630      	mov	r0, r6
 80090d0:	3501      	adds	r5, #1
 80090d2:	f005 fb59 	bl	800e788 <put_memory>
 80090d6:	42af      	cmp	r7, r5
 80090d8:	60a4      	str	r4, [r4, #8]
 80090da:	f884 800c 	strb.w	r8, [r4, #12]
 80090de:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 80090e2:	d1f3      	bne.n	80090cc <rmw_uxrce_init_client_memory+0x20>
 80090e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop

080090ec <rmw_uxrce_init_publisher_memory>:
 80090ec:	b1e2      	cbz	r2, 8009128 <rmw_uxrce_init_publisher_memory+0x3c>
 80090ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090f2:	7b05      	ldrb	r5, [r0, #12]
 80090f4:	4606      	mov	r6, r0
 80090f6:	b9ad      	cbnz	r5, 8009124 <rmw_uxrce_init_publisher_memory+0x38>
 80090f8:	23d8      	movs	r3, #216	; 0xd8
 80090fa:	e9c0 5500 	strd	r5, r5, [r0]
 80090fe:	6083      	str	r3, [r0, #8]
 8009100:	f240 1301 	movw	r3, #257	; 0x101
 8009104:	4617      	mov	r7, r2
 8009106:	8183      	strh	r3, [r0, #12]
 8009108:	460c      	mov	r4, r1
 800910a:	46a8      	mov	r8, r5
 800910c:	4621      	mov	r1, r4
 800910e:	4630      	mov	r0, r6
 8009110:	3501      	adds	r5, #1
 8009112:	f005 fb39 	bl	800e788 <put_memory>
 8009116:	42af      	cmp	r7, r5
 8009118:	60a4      	str	r4, [r4, #8]
 800911a:	f884 800c 	strb.w	r8, [r4, #12]
 800911e:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8009122:	d1f3      	bne.n	800910c <rmw_uxrce_init_publisher_memory+0x20>
 8009124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop

0800912c <rmw_uxrce_init_subscription_memory>:
 800912c:	b1e2      	cbz	r2, 8009168 <rmw_uxrce_init_subscription_memory+0x3c>
 800912e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009132:	7b05      	ldrb	r5, [r0, #12]
 8009134:	4606      	mov	r6, r0
 8009136:	b9ad      	cbnz	r5, 8009164 <rmw_uxrce_init_subscription_memory+0x38>
 8009138:	23d8      	movs	r3, #216	; 0xd8
 800913a:	e9c0 5500 	strd	r5, r5, [r0]
 800913e:	6083      	str	r3, [r0, #8]
 8009140:	f240 1301 	movw	r3, #257	; 0x101
 8009144:	4617      	mov	r7, r2
 8009146:	8183      	strh	r3, [r0, #12]
 8009148:	460c      	mov	r4, r1
 800914a:	46a8      	mov	r8, r5
 800914c:	4621      	mov	r1, r4
 800914e:	4630      	mov	r0, r6
 8009150:	3501      	adds	r5, #1
 8009152:	f005 fb19 	bl	800e788 <put_memory>
 8009156:	42af      	cmp	r7, r5
 8009158:	60a4      	str	r4, [r4, #8]
 800915a:	f884 800c 	strb.w	r8, [r4, #12]
 800915e:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8009162:	d1f3      	bne.n	800914c <rmw_uxrce_init_subscription_memory+0x20>
 8009164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop

0800916c <rmw_uxrce_init_node_memory>:
 800916c:	b1e2      	cbz	r2, 80091a8 <rmw_uxrce_init_node_memory+0x3c>
 800916e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009172:	7b05      	ldrb	r5, [r0, #12]
 8009174:	4606      	mov	r6, r0
 8009176:	b9ad      	cbnz	r5, 80091a4 <rmw_uxrce_init_node_memory+0x38>
 8009178:	23a4      	movs	r3, #164	; 0xa4
 800917a:	e9c0 5500 	strd	r5, r5, [r0]
 800917e:	6083      	str	r3, [r0, #8]
 8009180:	f240 1301 	movw	r3, #257	; 0x101
 8009184:	4617      	mov	r7, r2
 8009186:	8183      	strh	r3, [r0, #12]
 8009188:	460c      	mov	r4, r1
 800918a:	46a8      	mov	r8, r5
 800918c:	4621      	mov	r1, r4
 800918e:	4630      	mov	r0, r6
 8009190:	3501      	adds	r5, #1
 8009192:	f005 faf9 	bl	800e788 <put_memory>
 8009196:	42af      	cmp	r7, r5
 8009198:	60a4      	str	r4, [r4, #8]
 800919a:	f884 800c 	strb.w	r8, [r4, #12]
 800919e:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 80091a2:	d1f3      	bne.n	800918c <rmw_uxrce_init_node_memory+0x20>
 80091a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop

080091ac <rmw_uxrce_init_session_memory>:
 80091ac:	b1ea      	cbz	r2, 80091ea <rmw_uxrce_init_session_memory+0x3e>
 80091ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091b2:	7b05      	ldrb	r5, [r0, #12]
 80091b4:	4606      	mov	r6, r0
 80091b6:	b9b5      	cbnz	r5, 80091e6 <rmw_uxrce_init_session_memory+0x3a>
 80091b8:	e9c0 5500 	strd	r5, r5, [r0]
 80091bc:	f241 58a8 	movw	r8, #5544	; 0x15a8
 80091c0:	f240 1301 	movw	r3, #257	; 0x101
 80091c4:	4617      	mov	r7, r2
 80091c6:	f8c0 8008 	str.w	r8, [r0, #8]
 80091ca:	460c      	mov	r4, r1
 80091cc:	8183      	strh	r3, [r0, #12]
 80091ce:	46a9      	mov	r9, r5
 80091d0:	4621      	mov	r1, r4
 80091d2:	4630      	mov	r0, r6
 80091d4:	3501      	adds	r5, #1
 80091d6:	f005 fad7 	bl	800e788 <put_memory>
 80091da:	42af      	cmp	r7, r5
 80091dc:	60a4      	str	r4, [r4, #8]
 80091de:	f884 900c 	strb.w	r9, [r4, #12]
 80091e2:	4444      	add	r4, r8
 80091e4:	d1f4      	bne.n	80091d0 <rmw_uxrce_init_session_memory+0x24>
 80091e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091ea:	4770      	bx	lr

080091ec <rmw_uxrce_init_topic_memory>:
 80091ec:	b1e2      	cbz	r2, 8009228 <rmw_uxrce_init_topic_memory+0x3c>
 80091ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091f2:	7b05      	ldrb	r5, [r0, #12]
 80091f4:	4606      	mov	r6, r0
 80091f6:	b9ad      	cbnz	r5, 8009224 <rmw_uxrce_init_topic_memory+0x38>
 80091f8:	231c      	movs	r3, #28
 80091fa:	e9c0 5500 	strd	r5, r5, [r0]
 80091fe:	6083      	str	r3, [r0, #8]
 8009200:	f240 1301 	movw	r3, #257	; 0x101
 8009204:	4617      	mov	r7, r2
 8009206:	8183      	strh	r3, [r0, #12]
 8009208:	460c      	mov	r4, r1
 800920a:	46a8      	mov	r8, r5
 800920c:	4621      	mov	r1, r4
 800920e:	4630      	mov	r0, r6
 8009210:	3501      	adds	r5, #1
 8009212:	f005 fab9 	bl	800e788 <put_memory>
 8009216:	42af      	cmp	r7, r5
 8009218:	60a4      	str	r4, [r4, #8]
 800921a:	f884 800c 	strb.w	r8, [r4, #12]
 800921e:	f104 041c 	add.w	r4, r4, #28
 8009222:	d1f3      	bne.n	800920c <rmw_uxrce_init_topic_memory+0x20>
 8009224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop

0800922c <rmw_uxrce_init_static_input_buffer_memory>:
 800922c:	b1ea      	cbz	r2, 800926a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800922e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009232:	7b05      	ldrb	r5, [r0, #12]
 8009234:	4606      	mov	r6, r0
 8009236:	b9b5      	cbnz	r5, 8009266 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8009238:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800923c:	e9c0 5500 	strd	r5, r5, [r0]
 8009240:	6083      	str	r3, [r0, #8]
 8009242:	f240 1301 	movw	r3, #257	; 0x101
 8009246:	4617      	mov	r7, r2
 8009248:	8183      	strh	r3, [r0, #12]
 800924a:	460c      	mov	r4, r1
 800924c:	46a8      	mov	r8, r5
 800924e:	4621      	mov	r1, r4
 8009250:	4630      	mov	r0, r6
 8009252:	3501      	adds	r5, #1
 8009254:	f005 fa98 	bl	800e788 <put_memory>
 8009258:	42af      	cmp	r7, r5
 800925a:	60a4      	str	r4, [r4, #8]
 800925c:	f884 800c 	strb.w	r8, [r4, #12]
 8009260:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8009264:	d1f3      	bne.n	800924e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8009266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800926a:	4770      	bx	lr

0800926c <rmw_uxrce_init_init_options_impl_memory>:
 800926c:	b1e2      	cbz	r2, 80092a8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800926e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009272:	7b05      	ldrb	r5, [r0, #12]
 8009274:	4606      	mov	r6, r0
 8009276:	b9ad      	cbnz	r5, 80092a4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8009278:	232c      	movs	r3, #44	; 0x2c
 800927a:	e9c0 5500 	strd	r5, r5, [r0]
 800927e:	6083      	str	r3, [r0, #8]
 8009280:	f240 1301 	movw	r3, #257	; 0x101
 8009284:	4617      	mov	r7, r2
 8009286:	8183      	strh	r3, [r0, #12]
 8009288:	460c      	mov	r4, r1
 800928a:	46a8      	mov	r8, r5
 800928c:	4621      	mov	r1, r4
 800928e:	4630      	mov	r0, r6
 8009290:	3501      	adds	r5, #1
 8009292:	f005 fa79 	bl	800e788 <put_memory>
 8009296:	42af      	cmp	r7, r5
 8009298:	60a4      	str	r4, [r4, #8]
 800929a:	f884 800c 	strb.w	r8, [r4, #12]
 800929e:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 80092a2:	d1f3      	bne.n	800928c <rmw_uxrce_init_init_options_impl_memory+0x20>
 80092a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092a8:	4770      	bx	lr
 80092aa:	bf00      	nop

080092ac <rmw_uxrce_init_wait_set_memory>:
 80092ac:	b1e2      	cbz	r2, 80092e8 <rmw_uxrce_init_wait_set_memory+0x3c>
 80092ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092b2:	7b05      	ldrb	r5, [r0, #12]
 80092b4:	4606      	mov	r6, r0
 80092b6:	b9ad      	cbnz	r5, 80092e4 <rmw_uxrce_init_wait_set_memory+0x38>
 80092b8:	231c      	movs	r3, #28
 80092ba:	e9c0 5500 	strd	r5, r5, [r0]
 80092be:	6083      	str	r3, [r0, #8]
 80092c0:	f240 1301 	movw	r3, #257	; 0x101
 80092c4:	4617      	mov	r7, r2
 80092c6:	8183      	strh	r3, [r0, #12]
 80092c8:	460c      	mov	r4, r1
 80092ca:	46a8      	mov	r8, r5
 80092cc:	4621      	mov	r1, r4
 80092ce:	4630      	mov	r0, r6
 80092d0:	3501      	adds	r5, #1
 80092d2:	f005 fa59 	bl	800e788 <put_memory>
 80092d6:	42af      	cmp	r7, r5
 80092d8:	60a4      	str	r4, [r4, #8]
 80092da:	f884 800c 	strb.w	r8, [r4, #12]
 80092de:	f104 041c 	add.w	r4, r4, #28
 80092e2:	d1f3      	bne.n	80092cc <rmw_uxrce_init_wait_set_memory+0x20>
 80092e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop

080092ec <rmw_uxrce_init_guard_condition_memory>:
 80092ec:	b1e2      	cbz	r2, 8009328 <rmw_uxrce_init_guard_condition_memory+0x3c>
 80092ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f2:	7b05      	ldrb	r5, [r0, #12]
 80092f4:	4606      	mov	r6, r0
 80092f6:	b9ad      	cbnz	r5, 8009324 <rmw_uxrce_init_guard_condition_memory+0x38>
 80092f8:	2320      	movs	r3, #32
 80092fa:	e9c0 5500 	strd	r5, r5, [r0]
 80092fe:	6083      	str	r3, [r0, #8]
 8009300:	f240 1301 	movw	r3, #257	; 0x101
 8009304:	4617      	mov	r7, r2
 8009306:	8183      	strh	r3, [r0, #12]
 8009308:	460c      	mov	r4, r1
 800930a:	46a8      	mov	r8, r5
 800930c:	4621      	mov	r1, r4
 800930e:	4630      	mov	r0, r6
 8009310:	3501      	adds	r5, #1
 8009312:	f005 fa39 	bl	800e788 <put_memory>
 8009316:	42af      	cmp	r7, r5
 8009318:	60a4      	str	r4, [r4, #8]
 800931a:	f884 800c 	strb.w	r8, [r4, #12]
 800931e:	f104 0420 	add.w	r4, r4, #32
 8009322:	d1f3      	bne.n	800930c <rmw_uxrce_init_guard_condition_memory+0x20>
 8009324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop

0800932c <rmw_uxrce_fini_session_memory>:
 800932c:	4601      	mov	r1, r0
 800932e:	4801      	ldr	r0, [pc, #4]	; (8009334 <rmw_uxrce_fini_session_memory+0x8>)
 8009330:	f005 ba2a 	b.w	800e788 <put_memory>
 8009334:	2000df24 	.word	0x2000df24

08009338 <rmw_uxrce_fini_node_memory>:
 8009338:	b538      	push	{r3, r4, r5, lr}
 800933a:	4604      	mov	r4, r0
 800933c:	6800      	ldr	r0, [r0, #0]
 800933e:	b128      	cbz	r0, 800934c <rmw_uxrce_fini_node_memory+0x14>
 8009340:	4b07      	ldr	r3, [pc, #28]	; (8009360 <rmw_uxrce_fini_node_memory+0x28>)
 8009342:	6819      	ldr	r1, [r3, #0]
 8009344:	f7f6 ff64 	bl	8000210 <strcmp>
 8009348:	b940      	cbnz	r0, 800935c <rmw_uxrce_fini_node_memory+0x24>
 800934a:	6020      	str	r0, [r4, #0]
 800934c:	6861      	ldr	r1, [r4, #4]
 800934e:	b129      	cbz	r1, 800935c <rmw_uxrce_fini_node_memory+0x24>
 8009350:	2500      	movs	r5, #0
 8009352:	4804      	ldr	r0, [pc, #16]	; (8009364 <rmw_uxrce_fini_node_memory+0x2c>)
 8009354:	610d      	str	r5, [r1, #16]
 8009356:	f005 fa17 	bl	800e788 <put_memory>
 800935a:	6065      	str	r5, [r4, #4]
 800935c:	bd38      	pop	{r3, r4, r5, pc}
 800935e:	bf00      	nop
 8009360:	08013464 	.word	0x08013464
 8009364:	2000def4 	.word	0x2000def4

08009368 <rmw_uxrce_fini_publisher_memory>:
 8009368:	b510      	push	{r4, lr}
 800936a:	4604      	mov	r4, r0
 800936c:	6800      	ldr	r0, [r0, #0]
 800936e:	b128      	cbz	r0, 800937c <rmw_uxrce_fini_publisher_memory+0x14>
 8009370:	4b06      	ldr	r3, [pc, #24]	; (800938c <rmw_uxrce_fini_publisher_memory+0x24>)
 8009372:	6819      	ldr	r1, [r3, #0]
 8009374:	f7f6 ff4c 	bl	8000210 <strcmp>
 8009378:	b938      	cbnz	r0, 800938a <rmw_uxrce_fini_publisher_memory+0x22>
 800937a:	6020      	str	r0, [r4, #0]
 800937c:	6861      	ldr	r1, [r4, #4]
 800937e:	b121      	cbz	r1, 800938a <rmw_uxrce_fini_publisher_memory+0x22>
 8009380:	4803      	ldr	r0, [pc, #12]	; (8009390 <rmw_uxrce_fini_publisher_memory+0x28>)
 8009382:	f005 fa01 	bl	800e788 <put_memory>
 8009386:	2300      	movs	r3, #0
 8009388:	6063      	str	r3, [r4, #4]
 800938a:	bd10      	pop	{r4, pc}
 800938c:	08013464 	.word	0x08013464
 8009390:	2000df04 	.word	0x2000df04

08009394 <rmw_uxrce_fini_subscription_memory>:
 8009394:	b510      	push	{r4, lr}
 8009396:	4604      	mov	r4, r0
 8009398:	6800      	ldr	r0, [r0, #0]
 800939a:	b128      	cbz	r0, 80093a8 <rmw_uxrce_fini_subscription_memory+0x14>
 800939c:	4b06      	ldr	r3, [pc, #24]	; (80093b8 <rmw_uxrce_fini_subscription_memory+0x24>)
 800939e:	6819      	ldr	r1, [r3, #0]
 80093a0:	f7f6 ff36 	bl	8000210 <strcmp>
 80093a4:	b938      	cbnz	r0, 80093b6 <rmw_uxrce_fini_subscription_memory+0x22>
 80093a6:	6020      	str	r0, [r4, #0]
 80093a8:	6861      	ldr	r1, [r4, #4]
 80093aa:	b121      	cbz	r1, 80093b6 <rmw_uxrce_fini_subscription_memory+0x22>
 80093ac:	4803      	ldr	r0, [pc, #12]	; (80093bc <rmw_uxrce_fini_subscription_memory+0x28>)
 80093ae:	f005 f9eb 	bl	800e788 <put_memory>
 80093b2:	2300      	movs	r3, #0
 80093b4:	6063      	str	r3, [r4, #4]
 80093b6:	bd10      	pop	{r4, pc}
 80093b8:	08013464 	.word	0x08013464
 80093bc:	2000df44 	.word	0x2000df44

080093c0 <rmw_uxrce_fini_service_memory>:
 80093c0:	b510      	push	{r4, lr}
 80093c2:	4604      	mov	r4, r0
 80093c4:	6800      	ldr	r0, [r0, #0]
 80093c6:	b128      	cbz	r0, 80093d4 <rmw_uxrce_fini_service_memory+0x14>
 80093c8:	4b06      	ldr	r3, [pc, #24]	; (80093e4 <rmw_uxrce_fini_service_memory+0x24>)
 80093ca:	6819      	ldr	r1, [r3, #0]
 80093cc:	f7f6 ff20 	bl	8000210 <strcmp>
 80093d0:	b938      	cbnz	r0, 80093e2 <rmw_uxrce_fini_service_memory+0x22>
 80093d2:	6020      	str	r0, [r4, #0]
 80093d4:	6861      	ldr	r1, [r4, #4]
 80093d6:	b121      	cbz	r1, 80093e2 <rmw_uxrce_fini_service_memory+0x22>
 80093d8:	4803      	ldr	r0, [pc, #12]	; (80093e8 <rmw_uxrce_fini_service_memory+0x28>)
 80093da:	f005 f9d5 	bl	800e788 <put_memory>
 80093de:	2300      	movs	r3, #0
 80093e0:	6063      	str	r3, [r4, #4]
 80093e2:	bd10      	pop	{r4, pc}
 80093e4:	08013464 	.word	0x08013464
 80093e8:	2000df14 	.word	0x2000df14

080093ec <rmw_uxrce_fini_client_memory>:
 80093ec:	b510      	push	{r4, lr}
 80093ee:	4604      	mov	r4, r0
 80093f0:	6800      	ldr	r0, [r0, #0]
 80093f2:	b128      	cbz	r0, 8009400 <rmw_uxrce_fini_client_memory+0x14>
 80093f4:	4b06      	ldr	r3, [pc, #24]	; (8009410 <rmw_uxrce_fini_client_memory+0x24>)
 80093f6:	6819      	ldr	r1, [r3, #0]
 80093f8:	f7f6 ff0a 	bl	8000210 <strcmp>
 80093fc:	b938      	cbnz	r0, 800940e <rmw_uxrce_fini_client_memory+0x22>
 80093fe:	6020      	str	r0, [r4, #0]
 8009400:	6861      	ldr	r1, [r4, #4]
 8009402:	b121      	cbz	r1, 800940e <rmw_uxrce_fini_client_memory+0x22>
 8009404:	4803      	ldr	r0, [pc, #12]	; (8009414 <rmw_uxrce_fini_client_memory+0x28>)
 8009406:	f005 f9bf 	bl	800e788 <put_memory>
 800940a:	2300      	movs	r3, #0
 800940c:	6063      	str	r3, [r4, #4]
 800940e:	bd10      	pop	{r4, pc}
 8009410:	08013464 	.word	0x08013464
 8009414:	20009628 	.word	0x20009628

08009418 <rmw_uxrce_fini_topic_memory>:
 8009418:	b510      	push	{r4, lr}
 800941a:	4604      	mov	r4, r0
 800941c:	4621      	mov	r1, r4
 800941e:	4803      	ldr	r0, [pc, #12]	; (800942c <rmw_uxrce_fini_topic_memory+0x14>)
 8009420:	f005 f9b2 	bl	800e788 <put_memory>
 8009424:	2300      	movs	r3, #0
 8009426:	61a3      	str	r3, [r4, #24]
 8009428:	bd10      	pop	{r4, pc}
 800942a:	bf00      	nop
 800942c:	2000df54 	.word	0x2000df54

08009430 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8009430:	b082      	sub	sp, #8
 8009432:	b530      	push	{r4, r5, lr}
 8009434:	4925      	ldr	r1, [pc, #148]	; (80094cc <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8009436:	680d      	ldr	r5, [r1, #0]
 8009438:	ac03      	add	r4, sp, #12
 800943a:	e884 000c 	stmia.w	r4, {r2, r3}
 800943e:	461c      	mov	r4, r3
 8009440:	2d00      	cmp	r5, #0
 8009442:	d041      	beq.n	80094c8 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 8009444:	462b      	mov	r3, r5
 8009446:	2100      	movs	r1, #0
 8009448:	689a      	ldr	r2, [r3, #8]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8009450:	4290      	cmp	r0, r2
 8009452:	bf08      	it	eq
 8009454:	3101      	addeq	r1, #1
 8009456:	2b00      	cmp	r3, #0
 8009458:	d1f6      	bne.n	8009448 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800945a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800945e:	2b02      	cmp	r3, #2
 8009460:	d029      	beq.n	80094b6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8009462:	d907      	bls.n	8009474 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8009464:	2b03      	cmp	r3, #3
 8009466:	d005      	beq.n	8009474 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8009468:	2100      	movs	r1, #0
 800946a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800946e:	4608      	mov	r0, r1
 8009470:	b002      	add	sp, #8
 8009472:	4770      	bx	lr
 8009474:	b314      	cbz	r4, 80094bc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8009476:	428c      	cmp	r4, r1
 8009478:	d820      	bhi.n	80094bc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800947a:	2d00      	cmp	r5, #0
 800947c:	d0f4      	beq.n	8009468 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800947e:	2100      	movs	r1, #0
 8009480:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8009484:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8009488:	e002      	b.n	8009490 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800948a:	686d      	ldr	r5, [r5, #4]
 800948c:	2d00      	cmp	r5, #0
 800948e:	d0ec      	beq.n	800946a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8009490:	68ab      	ldr	r3, [r5, #8]
 8009492:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8009496:	4290      	cmp	r0, r2
 8009498:	d1f7      	bne.n	800948a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800949a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800949e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 80094a2:	4562      	cmp	r2, ip
 80094a4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80094a8:	eb73 0e04 	sbcs.w	lr, r3, r4
 80094ac:	daed      	bge.n	800948a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 80094ae:	4694      	mov	ip, r2
 80094b0:	461c      	mov	r4, r3
 80094b2:	4629      	mov	r1, r5
 80094b4:	e7e9      	b.n	800948a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 80094b6:	b10c      	cbz	r4, 80094bc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 80094b8:	428c      	cmp	r4, r1
 80094ba:	d9d5      	bls.n	8009468 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 80094bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094c0:	4802      	ldr	r0, [pc, #8]	; (80094cc <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 80094c2:	b002      	add	sp, #8
 80094c4:	f005 b950 	b.w	800e768 <get_memory>
 80094c8:	4629      	mov	r1, r5
 80094ca:	e7c6      	b.n	800945a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 80094cc:	2000df34 	.word	0x2000df34

080094d0 <run_xrce_session>:
 80094d0:	b510      	push	{r4, lr}
 80094d2:	788c      	ldrb	r4, [r1, #2]
 80094d4:	b086      	sub	sp, #24
 80094d6:	2c01      	cmp	r4, #1
 80094d8:	f8ad 200e 	strh.w	r2, [sp, #14]
 80094dc:	d00c      	beq.n	80094f8 <run_xrce_session+0x28>
 80094de:	4619      	mov	r1, r3
 80094e0:	2301      	movs	r3, #1
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	f10d 020e 	add.w	r2, sp, #14
 80094e8:	f10d 0317 	add.w	r3, sp, #23
 80094ec:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80094f0:	f001 ff7e 	bl	800b3f0 <uxr_run_session_until_all_status>
 80094f4:	b006      	add	sp, #24
 80094f6:	bd10      	pop	{r4, pc}
 80094f8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80094fc:	f001 fbcc 	bl	800ac98 <uxr_flash_output_streams>
 8009500:	4620      	mov	r0, r4
 8009502:	b006      	add	sp, #24
 8009504:	bd10      	pop	{r4, pc}
 8009506:	bf00      	nop

08009508 <convert_qos_profile>:
 8009508:	7a4a      	ldrb	r2, [r1, #9]
 800950a:	f891 c008 	ldrb.w	ip, [r1, #8]
 800950e:	2a02      	cmp	r2, #2
 8009510:	bf18      	it	ne
 8009512:	2200      	movne	r2, #0
 8009514:	7002      	strb	r2, [r0, #0]
 8009516:	780a      	ldrb	r2, [r1, #0]
 8009518:	8889      	ldrh	r1, [r1, #4]
 800951a:	8081      	strh	r1, [r0, #4]
 800951c:	f1ac 0c02 	sub.w	ip, ip, #2
 8009520:	f1a2 0202 	sub.w	r2, r2, #2
 8009524:	fabc fc8c 	clz	ip, ip
 8009528:	fab2 f282 	clz	r2, r2
 800952c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8009530:	0952      	lsrs	r2, r2, #5
 8009532:	f880 c001 	strb.w	ip, [r0, #1]
 8009536:	7082      	strb	r2, [r0, #2]
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop

0800953c <generate_type_name>:
 800953c:	b530      	push	{r4, r5, lr}
 800953e:	2300      	movs	r3, #0
 8009540:	700b      	strb	r3, [r1, #0]
 8009542:	6803      	ldr	r3, [r0, #0]
 8009544:	b087      	sub	sp, #28
 8009546:	4614      	mov	r4, r2
 8009548:	b1d3      	cbz	r3, 8009580 <generate_type_name+0x44>
 800954a:	4a0f      	ldr	r2, [pc, #60]	; (8009588 <generate_type_name+0x4c>)
 800954c:	4615      	mov	r5, r2
 800954e:	9203      	str	r2, [sp, #12]
 8009550:	9500      	str	r5, [sp, #0]
 8009552:	6842      	ldr	r2, [r0, #4]
 8009554:	480d      	ldr	r0, [pc, #52]	; (800958c <generate_type_name+0x50>)
 8009556:	9001      	str	r0, [sp, #4]
 8009558:	4608      	mov	r0, r1
 800955a:	490d      	ldr	r1, [pc, #52]	; (8009590 <generate_type_name+0x54>)
 800955c:	9204      	str	r2, [sp, #16]
 800955e:	9105      	str	r1, [sp, #20]
 8009560:	9102      	str	r1, [sp, #8]
 8009562:	4a0c      	ldr	r2, [pc, #48]	; (8009594 <generate_type_name+0x58>)
 8009564:	4621      	mov	r1, r4
 8009566:	f008 fadb 	bl	8011b20 <sniprintf>
 800956a:	2800      	cmp	r0, #0
 800956c:	db05      	blt.n	800957a <generate_type_name+0x3e>
 800956e:	4284      	cmp	r4, r0
 8009570:	bfd4      	ite	le
 8009572:	2000      	movle	r0, #0
 8009574:	2001      	movgt	r0, #1
 8009576:	b007      	add	sp, #28
 8009578:	bd30      	pop	{r4, r5, pc}
 800957a:	2000      	movs	r0, #0
 800957c:	b007      	add	sp, #28
 800957e:	bd30      	pop	{r4, r5, pc}
 8009580:	4b05      	ldr	r3, [pc, #20]	; (8009598 <generate_type_name+0x5c>)
 8009582:	4a01      	ldr	r2, [pc, #4]	; (8009588 <generate_type_name+0x4c>)
 8009584:	461d      	mov	r5, r3
 8009586:	e7e2      	b.n	800954e <generate_type_name+0x12>
 8009588:	08012e6c 	.word	0x08012e6c
 800958c:	08012e84 	.word	0x08012e84
 8009590:	08012e80 	.word	0x08012e80
 8009594:	08012e70 	.word	0x08012e70
 8009598:	0801323c 	.word	0x0801323c

0800959c <generate_topic_name>:
 800959c:	b510      	push	{r4, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	4614      	mov	r4, r2
 80095a2:	9000      	str	r0, [sp, #0]
 80095a4:	4b08      	ldr	r3, [pc, #32]	; (80095c8 <generate_topic_name+0x2c>)
 80095a6:	4a09      	ldr	r2, [pc, #36]	; (80095cc <generate_topic_name+0x30>)
 80095a8:	4608      	mov	r0, r1
 80095aa:	4621      	mov	r1, r4
 80095ac:	f008 fab8 	bl	8011b20 <sniprintf>
 80095b0:	2800      	cmp	r0, #0
 80095b2:	db05      	blt.n	80095c0 <generate_topic_name+0x24>
 80095b4:	4284      	cmp	r4, r0
 80095b6:	bfd4      	ite	le
 80095b8:	2000      	movle	r0, #0
 80095ba:	2001      	movgt	r0, #1
 80095bc:	b002      	add	sp, #8
 80095be:	bd10      	pop	{r4, pc}
 80095c0:	2000      	movs	r0, #0
 80095c2:	b002      	add	sp, #8
 80095c4:	bd10      	pop	{r4, pc}
 80095c6:	bf00      	nop
 80095c8:	08012e90 	.word	0x08012e90
 80095cc:	08012e88 	.word	0x08012e88

080095d0 <is_uxrce_rmw_identifier_valid>:
 80095d0:	b510      	push	{r4, lr}
 80095d2:	4604      	mov	r4, r0
 80095d4:	b140      	cbz	r0, 80095e8 <is_uxrce_rmw_identifier_valid+0x18>
 80095d6:	f005 f8eb 	bl	800e7b0 <rmw_get_implementation_identifier>
 80095da:	4601      	mov	r1, r0
 80095dc:	4620      	mov	r0, r4
 80095de:	f7f6 fe17 	bl	8000210 <strcmp>
 80095e2:	fab0 f080 	clz	r0, r0
 80095e6:	0940      	lsrs	r0, r0, #5
 80095e8:	bd10      	pop	{r4, pc}
 80095ea:	bf00      	nop

080095ec <get_message_typesupport_handle>:
 80095ec:	6883      	ldr	r3, [r0, #8]
 80095ee:	4718      	bx	r3

080095f0 <get_message_typesupport_handle_function>:
 80095f0:	b510      	push	{r4, lr}
 80095f2:	4604      	mov	r4, r0
 80095f4:	6800      	ldr	r0, [r0, #0]
 80095f6:	f7f6 fe0b 	bl	8000210 <strcmp>
 80095fa:	2800      	cmp	r0, #0
 80095fc:	bf0c      	ite	eq
 80095fe:	4620      	moveq	r0, r4
 8009600:	2000      	movne	r0, #0
 8009602:	bd10      	pop	{r4, pc}

08009604 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8009604:	4b04      	ldr	r3, [pc, #16]	; (8009618 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	b10a      	cbz	r2, 800960e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800960a:	4803      	ldr	r0, [pc, #12]	; (8009618 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800960c:	4770      	bx	lr
 800960e:	4a03      	ldr	r2, [pc, #12]	; (800961c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8009610:	4801      	ldr	r0, [pc, #4]	; (8009618 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8009612:	6812      	ldr	r2, [r2, #0]
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	4770      	bx	lr
 8009618:	20000030 	.word	0x20000030
 800961c:	200000ac 	.word	0x200000ac

08009620 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8009620:	4a02      	ldr	r2, [pc, #8]	; (800962c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8009622:	4b03      	ldr	r3, [pc, #12]	; (8009630 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8009624:	6812      	ldr	r2, [r2, #0]
 8009626:	601a      	str	r2, [r3, #0]
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	200000ac 	.word	0x200000ac
 8009630:	20000030 	.word	0x20000030

08009634 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 8009634:	f005 bda0 	b.w	800f178 <std_msgs__msg__Int32__init>

08009638 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 8009638:	f005 bda2 	b.w	800f180 <std_msgs__msg__Int32__fini>

0800963c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800963c:	4b04      	ldr	r3, [pc, #16]	; (8009650 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	b10a      	cbz	r2, 8009646 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8009642:	4803      	ldr	r0, [pc, #12]	; (8009650 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8009644:	4770      	bx	lr
 8009646:	4a03      	ldr	r2, [pc, #12]	; (8009654 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8009648:	4801      	ldr	r0, [pc, #4]	; (8009650 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800964a:	6812      	ldr	r2, [r2, #0]
 800964c:	601a      	str	r2, [r3, #0]
 800964e:	4770      	bx	lr
 8009650:	20000078 	.word	0x20000078
 8009654:	200000b0 	.word	0x200000b0

08009658 <_Int32__max_serialized_size>:
 8009658:	b508      	push	{r3, lr}
 800965a:	2104      	movs	r1, #4
 800965c:	2000      	movs	r0, #0
 800965e:	f001 f807 	bl	800a670 <ucdr_alignment>
 8009662:	3004      	adds	r0, #4
 8009664:	bd08      	pop	{r3, pc}
 8009666:	bf00      	nop

08009668 <_Int32__cdr_deserialize>:
 8009668:	b109      	cbz	r1, 800966e <_Int32__cdr_deserialize+0x6>
 800966a:	f000 bf19 	b.w	800a4a0 <ucdr_deserialize_int32_t>
 800966e:	4608      	mov	r0, r1
 8009670:	4770      	bx	lr
 8009672:	bf00      	nop

08009674 <get_serialized_size_std_msgs__msg__Int32>:
 8009674:	b138      	cbz	r0, 8009686 <get_serialized_size_std_msgs__msg__Int32+0x12>
 8009676:	b508      	push	{r3, lr}
 8009678:	460b      	mov	r3, r1
 800967a:	4618      	mov	r0, r3
 800967c:	2104      	movs	r1, #4
 800967e:	f000 fff7 	bl	800a670 <ucdr_alignment>
 8009682:	3004      	adds	r0, #4
 8009684:	bd08      	pop	{r3, pc}
 8009686:	4770      	bx	lr

08009688 <_Int32__cdr_serialize>:
 8009688:	460a      	mov	r2, r1
 800968a:	b118      	cbz	r0, 8009694 <_Int32__cdr_serialize+0xc>
 800968c:	6801      	ldr	r1, [r0, #0]
 800968e:	4610      	mov	r0, r2
 8009690:	f000 be6e 	b.w	800a370 <ucdr_serialize_int32_t>
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop

08009698 <_Int32__get_serialized_size>:
 8009698:	b130      	cbz	r0, 80096a8 <_Int32__get_serialized_size+0x10>
 800969a:	b508      	push	{r3, lr}
 800969c:	2104      	movs	r1, #4
 800969e:	2000      	movs	r0, #0
 80096a0:	f000 ffe6 	bl	800a670 <ucdr_alignment>
 80096a4:	3004      	adds	r0, #4
 80096a6:	bd08      	pop	{r3, pc}
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop

080096ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80096ac:	4800      	ldr	r0, [pc, #0]	; (80096b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 80096ae:	4770      	bx	lr
 80096b0:	20000084 	.word	0x20000084

080096b4 <ucdr_serialize_bool>:
 80096b4:	b538      	push	{r3, r4, r5, lr}
 80096b6:	460d      	mov	r5, r1
 80096b8:	2101      	movs	r1, #1
 80096ba:	4604      	mov	r4, r0
 80096bc:	f000 ff8c 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 80096c0:	b148      	cbz	r0, 80096d6 <ucdr_serialize_bool+0x22>
 80096c2:	68a3      	ldr	r3, [r4, #8]
 80096c4:	701d      	strb	r5, [r3, #0]
 80096c6:	68a2      	ldr	r2, [r4, #8]
 80096c8:	6923      	ldr	r3, [r4, #16]
 80096ca:	2101      	movs	r1, #1
 80096cc:	440a      	add	r2, r1
 80096ce:	440b      	add	r3, r1
 80096d0:	60a2      	str	r2, [r4, #8]
 80096d2:	6123      	str	r3, [r4, #16]
 80096d4:	7561      	strb	r1, [r4, #21]
 80096d6:	7da0      	ldrb	r0, [r4, #22]
 80096d8:	f080 0001 	eor.w	r0, r0, #1
 80096dc:	bd38      	pop	{r3, r4, r5, pc}
 80096de:	bf00      	nop

080096e0 <ucdr_deserialize_bool>:
 80096e0:	b538      	push	{r3, r4, r5, lr}
 80096e2:	460d      	mov	r5, r1
 80096e4:	2101      	movs	r1, #1
 80096e6:	4604      	mov	r4, r0
 80096e8:	f000 ff76 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 80096ec:	b160      	cbz	r0, 8009708 <ucdr_deserialize_bool+0x28>
 80096ee:	68a2      	ldr	r2, [r4, #8]
 80096f0:	6923      	ldr	r3, [r4, #16]
 80096f2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80096f6:	3900      	subs	r1, #0
 80096f8:	bf18      	it	ne
 80096fa:	2101      	movne	r1, #1
 80096fc:	7029      	strb	r1, [r5, #0]
 80096fe:	3301      	adds	r3, #1
 8009700:	2101      	movs	r1, #1
 8009702:	60a2      	str	r2, [r4, #8]
 8009704:	6123      	str	r3, [r4, #16]
 8009706:	7561      	strb	r1, [r4, #21]
 8009708:	7da0      	ldrb	r0, [r4, #22]
 800970a:	f080 0001 	eor.w	r0, r0, #1
 800970e:	bd38      	pop	{r3, r4, r5, pc}

08009710 <ucdr_serialize_uint8_t>:
 8009710:	b538      	push	{r3, r4, r5, lr}
 8009712:	460d      	mov	r5, r1
 8009714:	2101      	movs	r1, #1
 8009716:	4604      	mov	r4, r0
 8009718:	f000 ff5e 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 800971c:	b148      	cbz	r0, 8009732 <ucdr_serialize_uint8_t+0x22>
 800971e:	68a3      	ldr	r3, [r4, #8]
 8009720:	701d      	strb	r5, [r3, #0]
 8009722:	68a2      	ldr	r2, [r4, #8]
 8009724:	6923      	ldr	r3, [r4, #16]
 8009726:	2101      	movs	r1, #1
 8009728:	440a      	add	r2, r1
 800972a:	440b      	add	r3, r1
 800972c:	60a2      	str	r2, [r4, #8]
 800972e:	6123      	str	r3, [r4, #16]
 8009730:	7561      	strb	r1, [r4, #21]
 8009732:	7da0      	ldrb	r0, [r4, #22]
 8009734:	f080 0001 	eor.w	r0, r0, #1
 8009738:	bd38      	pop	{r3, r4, r5, pc}
 800973a:	bf00      	nop

0800973c <ucdr_deserialize_uint8_t>:
 800973c:	b538      	push	{r3, r4, r5, lr}
 800973e:	460d      	mov	r5, r1
 8009740:	2101      	movs	r1, #1
 8009742:	4604      	mov	r4, r0
 8009744:	f000 ff48 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 8009748:	b150      	cbz	r0, 8009760 <ucdr_deserialize_uint8_t+0x24>
 800974a:	68a3      	ldr	r3, [r4, #8]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	702b      	strb	r3, [r5, #0]
 8009750:	68a2      	ldr	r2, [r4, #8]
 8009752:	6923      	ldr	r3, [r4, #16]
 8009754:	2101      	movs	r1, #1
 8009756:	440a      	add	r2, r1
 8009758:	440b      	add	r3, r1
 800975a:	60a2      	str	r2, [r4, #8]
 800975c:	6123      	str	r3, [r4, #16]
 800975e:	7561      	strb	r1, [r4, #21]
 8009760:	7da0      	ldrb	r0, [r4, #22]
 8009762:	f080 0001 	eor.w	r0, r0, #1
 8009766:	bd38      	pop	{r3, r4, r5, pc}

08009768 <ucdr_serialize_uint16_t>:
 8009768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800976c:	b082      	sub	sp, #8
 800976e:	460b      	mov	r3, r1
 8009770:	2102      	movs	r1, #2
 8009772:	4604      	mov	r4, r0
 8009774:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009778:	f000 ff82 	bl	800a680 <ucdr_buffer_alignment>
 800977c:	4601      	mov	r1, r0
 800977e:	4620      	mov	r0, r4
 8009780:	7d67      	ldrb	r7, [r4, #21]
 8009782:	f000 ffc1 	bl	800a708 <ucdr_advance_buffer>
 8009786:	2102      	movs	r1, #2
 8009788:	4620      	mov	r0, r4
 800978a:	f000 ff19 	bl	800a5c0 <ucdr_check_buffer_available_for>
 800978e:	bb78      	cbnz	r0, 80097f0 <ucdr_serialize_uint16_t+0x88>
 8009790:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009794:	42ab      	cmp	r3, r5
 8009796:	d926      	bls.n	80097e6 <ucdr_serialize_uint16_t+0x7e>
 8009798:	1b5e      	subs	r6, r3, r5
 800979a:	60a3      	str	r3, [r4, #8]
 800979c:	6923      	ldr	r3, [r4, #16]
 800979e:	f1c6 0802 	rsb	r8, r6, #2
 80097a2:	4433      	add	r3, r6
 80097a4:	6123      	str	r3, [r4, #16]
 80097a6:	4641      	mov	r1, r8
 80097a8:	4620      	mov	r0, r4
 80097aa:	f000 ff15 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 80097ae:	2800      	cmp	r0, #0
 80097b0:	d03b      	beq.n	800982a <ucdr_serialize_uint16_t+0xc2>
 80097b2:	7d23      	ldrb	r3, [r4, #20]
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d04a      	beq.n	800984e <ucdr_serialize_uint16_t+0xe6>
 80097b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80097bc:	702b      	strb	r3, [r5, #0]
 80097be:	2e00      	cmp	r6, #0
 80097c0:	d040      	beq.n	8009844 <ucdr_serialize_uint16_t+0xdc>
 80097c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80097c6:	706b      	strb	r3, [r5, #1]
 80097c8:	6923      	ldr	r3, [r4, #16]
 80097ca:	68a2      	ldr	r2, [r4, #8]
 80097cc:	7da0      	ldrb	r0, [r4, #22]
 80097ce:	3302      	adds	r3, #2
 80097d0:	1b9e      	subs	r6, r3, r6
 80097d2:	4442      	add	r2, r8
 80097d4:	2302      	movs	r3, #2
 80097d6:	f080 0001 	eor.w	r0, r0, #1
 80097da:	60a2      	str	r2, [r4, #8]
 80097dc:	6126      	str	r6, [r4, #16]
 80097de:	7563      	strb	r3, [r4, #21]
 80097e0:	b002      	add	sp, #8
 80097e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097e6:	2102      	movs	r1, #2
 80097e8:	4620      	mov	r0, r4
 80097ea:	f000 fef5 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 80097ee:	b190      	cbz	r0, 8009816 <ucdr_serialize_uint16_t+0xae>
 80097f0:	7d23      	ldrb	r3, [r4, #20]
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	68a3      	ldr	r3, [r4, #8]
 80097f6:	d014      	beq.n	8009822 <ucdr_serialize_uint16_t+0xba>
 80097f8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80097fc:	701a      	strb	r2, [r3, #0]
 80097fe:	68a3      	ldr	r3, [r4, #8]
 8009800:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009804:	705a      	strb	r2, [r3, #1]
 8009806:	68a2      	ldr	r2, [r4, #8]
 8009808:	6923      	ldr	r3, [r4, #16]
 800980a:	3202      	adds	r2, #2
 800980c:	3302      	adds	r3, #2
 800980e:	2102      	movs	r1, #2
 8009810:	60a2      	str	r2, [r4, #8]
 8009812:	6123      	str	r3, [r4, #16]
 8009814:	7561      	strb	r1, [r4, #21]
 8009816:	7da0      	ldrb	r0, [r4, #22]
 8009818:	f080 0001 	eor.w	r0, r0, #1
 800981c:	b002      	add	sp, #8
 800981e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009822:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009826:	801a      	strh	r2, [r3, #0]
 8009828:	e7ed      	b.n	8009806 <ucdr_serialize_uint16_t+0x9e>
 800982a:	68a2      	ldr	r2, [r4, #8]
 800982c:	6923      	ldr	r3, [r4, #16]
 800982e:	7da0      	ldrb	r0, [r4, #22]
 8009830:	7567      	strb	r7, [r4, #21]
 8009832:	1b92      	subs	r2, r2, r6
 8009834:	1b9b      	subs	r3, r3, r6
 8009836:	f080 0001 	eor.w	r0, r0, #1
 800983a:	60a2      	str	r2, [r4, #8]
 800983c:	6123      	str	r3, [r4, #16]
 800983e:	b002      	add	sp, #8
 8009840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009844:	68a3      	ldr	r3, [r4, #8]
 8009846:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800984a:	701a      	strb	r2, [r3, #0]
 800984c:	e7bc      	b.n	80097c8 <ucdr_serialize_uint16_t+0x60>
 800984e:	4628      	mov	r0, r5
 8009850:	f10d 0506 	add.w	r5, sp, #6
 8009854:	4629      	mov	r1, r5
 8009856:	4632      	mov	r2, r6
 8009858:	f008 fb31 	bl	8011ebe <memcpy>
 800985c:	68a0      	ldr	r0, [r4, #8]
 800985e:	4642      	mov	r2, r8
 8009860:	19a9      	adds	r1, r5, r6
 8009862:	f008 fb2c 	bl	8011ebe <memcpy>
 8009866:	e7af      	b.n	80097c8 <ucdr_serialize_uint16_t+0x60>

08009868 <ucdr_serialize_endian_uint16_t>:
 8009868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800986c:	b083      	sub	sp, #12
 800986e:	460d      	mov	r5, r1
 8009870:	2102      	movs	r1, #2
 8009872:	4604      	mov	r4, r0
 8009874:	f8ad 2006 	strh.w	r2, [sp, #6]
 8009878:	f000 ff02 	bl	800a680 <ucdr_buffer_alignment>
 800987c:	4601      	mov	r1, r0
 800987e:	4620      	mov	r0, r4
 8009880:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009884:	f000 ff40 	bl	800a708 <ucdr_advance_buffer>
 8009888:	2102      	movs	r1, #2
 800988a:	4620      	mov	r0, r4
 800988c:	f000 fe98 	bl	800a5c0 <ucdr_check_buffer_available_for>
 8009890:	bb70      	cbnz	r0, 80098f0 <ucdr_serialize_endian_uint16_t+0x88>
 8009892:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009896:	42be      	cmp	r6, r7
 8009898:	d925      	bls.n	80098e6 <ucdr_serialize_endian_uint16_t+0x7e>
 800989a:	6923      	ldr	r3, [r4, #16]
 800989c:	60a6      	str	r6, [r4, #8]
 800989e:	1bf6      	subs	r6, r6, r7
 80098a0:	4433      	add	r3, r6
 80098a2:	f1c6 0902 	rsb	r9, r6, #2
 80098a6:	6123      	str	r3, [r4, #16]
 80098a8:	4649      	mov	r1, r9
 80098aa:	4620      	mov	r0, r4
 80098ac:	f000 fe94 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 80098b0:	2800      	cmp	r0, #0
 80098b2:	d039      	beq.n	8009928 <ucdr_serialize_endian_uint16_t+0xc0>
 80098b4:	2d01      	cmp	r5, #1
 80098b6:	d04a      	beq.n	800994e <ucdr_serialize_endian_uint16_t+0xe6>
 80098b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80098bc:	703b      	strb	r3, [r7, #0]
 80098be:	2e00      	cmp	r6, #0
 80098c0:	d040      	beq.n	8009944 <ucdr_serialize_endian_uint16_t+0xdc>
 80098c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80098c6:	707b      	strb	r3, [r7, #1]
 80098c8:	6923      	ldr	r3, [r4, #16]
 80098ca:	68a2      	ldr	r2, [r4, #8]
 80098cc:	7da0      	ldrb	r0, [r4, #22]
 80098ce:	3302      	adds	r3, #2
 80098d0:	444a      	add	r2, r9
 80098d2:	1b9b      	subs	r3, r3, r6
 80098d4:	2102      	movs	r1, #2
 80098d6:	f080 0001 	eor.w	r0, r0, #1
 80098da:	60a2      	str	r2, [r4, #8]
 80098dc:	6123      	str	r3, [r4, #16]
 80098de:	7561      	strb	r1, [r4, #21]
 80098e0:	b003      	add	sp, #12
 80098e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098e6:	2102      	movs	r1, #2
 80098e8:	4620      	mov	r0, r4
 80098ea:	f000 fe75 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 80098ee:	b188      	cbz	r0, 8009914 <ucdr_serialize_endian_uint16_t+0xac>
 80098f0:	2d01      	cmp	r5, #1
 80098f2:	68a3      	ldr	r3, [r4, #8]
 80098f4:	d014      	beq.n	8009920 <ucdr_serialize_endian_uint16_t+0xb8>
 80098f6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80098fa:	701a      	strb	r2, [r3, #0]
 80098fc:	68a3      	ldr	r3, [r4, #8]
 80098fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009902:	705a      	strb	r2, [r3, #1]
 8009904:	68a2      	ldr	r2, [r4, #8]
 8009906:	6923      	ldr	r3, [r4, #16]
 8009908:	3202      	adds	r2, #2
 800990a:	3302      	adds	r3, #2
 800990c:	2102      	movs	r1, #2
 800990e:	60a2      	str	r2, [r4, #8]
 8009910:	6123      	str	r3, [r4, #16]
 8009912:	7561      	strb	r1, [r4, #21]
 8009914:	7da0      	ldrb	r0, [r4, #22]
 8009916:	f080 0001 	eor.w	r0, r0, #1
 800991a:	b003      	add	sp, #12
 800991c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009920:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009924:	801a      	strh	r2, [r3, #0]
 8009926:	e7ed      	b.n	8009904 <ucdr_serialize_endian_uint16_t+0x9c>
 8009928:	68a2      	ldr	r2, [r4, #8]
 800992a:	6923      	ldr	r3, [r4, #16]
 800992c:	7da0      	ldrb	r0, [r4, #22]
 800992e:	f884 8015 	strb.w	r8, [r4, #21]
 8009932:	1b92      	subs	r2, r2, r6
 8009934:	1b9b      	subs	r3, r3, r6
 8009936:	f080 0001 	eor.w	r0, r0, #1
 800993a:	60a2      	str	r2, [r4, #8]
 800993c:	6123      	str	r3, [r4, #16]
 800993e:	b003      	add	sp, #12
 8009940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009944:	68a3      	ldr	r3, [r4, #8]
 8009946:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800994a:	701a      	strb	r2, [r3, #0]
 800994c:	e7bc      	b.n	80098c8 <ucdr_serialize_endian_uint16_t+0x60>
 800994e:	f10d 0506 	add.w	r5, sp, #6
 8009952:	4629      	mov	r1, r5
 8009954:	4632      	mov	r2, r6
 8009956:	4638      	mov	r0, r7
 8009958:	f008 fab1 	bl	8011ebe <memcpy>
 800995c:	68a0      	ldr	r0, [r4, #8]
 800995e:	464a      	mov	r2, r9
 8009960:	19a9      	adds	r1, r5, r6
 8009962:	f008 faac 	bl	8011ebe <memcpy>
 8009966:	e7af      	b.n	80098c8 <ucdr_serialize_endian_uint16_t+0x60>

08009968 <ucdr_deserialize_uint16_t>:
 8009968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800996c:	460d      	mov	r5, r1
 800996e:	2102      	movs	r1, #2
 8009970:	4604      	mov	r4, r0
 8009972:	f000 fe85 	bl	800a680 <ucdr_buffer_alignment>
 8009976:	4601      	mov	r1, r0
 8009978:	4620      	mov	r0, r4
 800997a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800997e:	f000 fec3 	bl	800a708 <ucdr_advance_buffer>
 8009982:	2102      	movs	r1, #2
 8009984:	4620      	mov	r0, r4
 8009986:	f000 fe1b 	bl	800a5c0 <ucdr_check_buffer_available_for>
 800998a:	bb60      	cbnz	r0, 80099e6 <ucdr_deserialize_uint16_t+0x7e>
 800998c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009990:	42be      	cmp	r6, r7
 8009992:	d923      	bls.n	80099dc <ucdr_deserialize_uint16_t+0x74>
 8009994:	6923      	ldr	r3, [r4, #16]
 8009996:	60a6      	str	r6, [r4, #8]
 8009998:	1bf6      	subs	r6, r6, r7
 800999a:	4433      	add	r3, r6
 800999c:	f1c6 0902 	rsb	r9, r6, #2
 80099a0:	6123      	str	r3, [r4, #16]
 80099a2:	4649      	mov	r1, r9
 80099a4:	4620      	mov	r0, r4
 80099a6:	f000 fe17 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 80099aa:	2800      	cmp	r0, #0
 80099ac:	d034      	beq.n	8009a18 <ucdr_deserialize_uint16_t+0xb0>
 80099ae:	7d23      	ldrb	r3, [r4, #20]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d042      	beq.n	8009a3a <ucdr_deserialize_uint16_t+0xd2>
 80099b4:	787b      	ldrb	r3, [r7, #1]
 80099b6:	702b      	strb	r3, [r5, #0]
 80099b8:	2e00      	cmp	r6, #0
 80099ba:	d03a      	beq.n	8009a32 <ucdr_deserialize_uint16_t+0xca>
 80099bc:	783b      	ldrb	r3, [r7, #0]
 80099be:	706b      	strb	r3, [r5, #1]
 80099c0:	6923      	ldr	r3, [r4, #16]
 80099c2:	68a2      	ldr	r2, [r4, #8]
 80099c4:	7da0      	ldrb	r0, [r4, #22]
 80099c6:	2102      	movs	r1, #2
 80099c8:	3302      	adds	r3, #2
 80099ca:	444a      	add	r2, r9
 80099cc:	1b9b      	subs	r3, r3, r6
 80099ce:	7561      	strb	r1, [r4, #21]
 80099d0:	60a2      	str	r2, [r4, #8]
 80099d2:	6123      	str	r3, [r4, #16]
 80099d4:	f080 0001 	eor.w	r0, r0, #1
 80099d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099dc:	2102      	movs	r1, #2
 80099de:	4620      	mov	r0, r4
 80099e0:	f000 fdfa 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 80099e4:	b180      	cbz	r0, 8009a08 <ucdr_deserialize_uint16_t+0xa0>
 80099e6:	7d23      	ldrb	r3, [r4, #20]
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	68a3      	ldr	r3, [r4, #8]
 80099ec:	d011      	beq.n	8009a12 <ucdr_deserialize_uint16_t+0xaa>
 80099ee:	785b      	ldrb	r3, [r3, #1]
 80099f0:	702b      	strb	r3, [r5, #0]
 80099f2:	68a3      	ldr	r3, [r4, #8]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	706b      	strb	r3, [r5, #1]
 80099f8:	68a2      	ldr	r2, [r4, #8]
 80099fa:	6923      	ldr	r3, [r4, #16]
 80099fc:	3202      	adds	r2, #2
 80099fe:	3302      	adds	r3, #2
 8009a00:	2102      	movs	r1, #2
 8009a02:	60a2      	str	r2, [r4, #8]
 8009a04:	6123      	str	r3, [r4, #16]
 8009a06:	7561      	strb	r1, [r4, #21]
 8009a08:	7da0      	ldrb	r0, [r4, #22]
 8009a0a:	f080 0001 	eor.w	r0, r0, #1
 8009a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a12:	881b      	ldrh	r3, [r3, #0]
 8009a14:	802b      	strh	r3, [r5, #0]
 8009a16:	e7ef      	b.n	80099f8 <ucdr_deserialize_uint16_t+0x90>
 8009a18:	68a2      	ldr	r2, [r4, #8]
 8009a1a:	6923      	ldr	r3, [r4, #16]
 8009a1c:	7da0      	ldrb	r0, [r4, #22]
 8009a1e:	f884 8015 	strb.w	r8, [r4, #21]
 8009a22:	1b92      	subs	r2, r2, r6
 8009a24:	1b9b      	subs	r3, r3, r6
 8009a26:	60a2      	str	r2, [r4, #8]
 8009a28:	6123      	str	r3, [r4, #16]
 8009a2a:	f080 0001 	eor.w	r0, r0, #1
 8009a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a32:	68a3      	ldr	r3, [r4, #8]
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	706b      	strb	r3, [r5, #1]
 8009a38:	e7c2      	b.n	80099c0 <ucdr_deserialize_uint16_t+0x58>
 8009a3a:	4639      	mov	r1, r7
 8009a3c:	4632      	mov	r2, r6
 8009a3e:	4628      	mov	r0, r5
 8009a40:	f008 fa3d 	bl	8011ebe <memcpy>
 8009a44:	68a1      	ldr	r1, [r4, #8]
 8009a46:	464a      	mov	r2, r9
 8009a48:	19a8      	adds	r0, r5, r6
 8009a4a:	f008 fa38 	bl	8011ebe <memcpy>
 8009a4e:	e7b7      	b.n	80099c0 <ucdr_deserialize_uint16_t+0x58>

08009a50 <ucdr_deserialize_endian_uint16_t>:
 8009a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a54:	460e      	mov	r6, r1
 8009a56:	2102      	movs	r1, #2
 8009a58:	4604      	mov	r4, r0
 8009a5a:	4615      	mov	r5, r2
 8009a5c:	f000 fe10 	bl	800a680 <ucdr_buffer_alignment>
 8009a60:	4601      	mov	r1, r0
 8009a62:	4620      	mov	r0, r4
 8009a64:	f894 9015 	ldrb.w	r9, [r4, #21]
 8009a68:	f000 fe4e 	bl	800a708 <ucdr_advance_buffer>
 8009a6c:	2102      	movs	r1, #2
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f000 fda6 	bl	800a5c0 <ucdr_check_buffer_available_for>
 8009a74:	bb70      	cbnz	r0, 8009ad4 <ucdr_deserialize_endian_uint16_t+0x84>
 8009a76:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8009a7a:	4547      	cmp	r7, r8
 8009a7c:	d925      	bls.n	8009aca <ucdr_deserialize_endian_uint16_t+0x7a>
 8009a7e:	6923      	ldr	r3, [r4, #16]
 8009a80:	60a7      	str	r7, [r4, #8]
 8009a82:	eba7 0708 	sub.w	r7, r7, r8
 8009a86:	443b      	add	r3, r7
 8009a88:	f1c7 0a02 	rsb	sl, r7, #2
 8009a8c:	6123      	str	r3, [r4, #16]
 8009a8e:	4651      	mov	r1, sl
 8009a90:	4620      	mov	r0, r4
 8009a92:	f000 fda1 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 8009a96:	2800      	cmp	r0, #0
 8009a98:	d034      	beq.n	8009b04 <ucdr_deserialize_endian_uint16_t+0xb4>
 8009a9a:	2e01      	cmp	r6, #1
 8009a9c:	d043      	beq.n	8009b26 <ucdr_deserialize_endian_uint16_t+0xd6>
 8009a9e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009aa2:	702b      	strb	r3, [r5, #0]
 8009aa4:	2f00      	cmp	r7, #0
 8009aa6:	d03a      	beq.n	8009b1e <ucdr_deserialize_endian_uint16_t+0xce>
 8009aa8:	f898 3000 	ldrb.w	r3, [r8]
 8009aac:	706b      	strb	r3, [r5, #1]
 8009aae:	6923      	ldr	r3, [r4, #16]
 8009ab0:	68a2      	ldr	r2, [r4, #8]
 8009ab2:	7da0      	ldrb	r0, [r4, #22]
 8009ab4:	2102      	movs	r1, #2
 8009ab6:	3302      	adds	r3, #2
 8009ab8:	4452      	add	r2, sl
 8009aba:	1bdb      	subs	r3, r3, r7
 8009abc:	7561      	strb	r1, [r4, #21]
 8009abe:	60a2      	str	r2, [r4, #8]
 8009ac0:	6123      	str	r3, [r4, #16]
 8009ac2:	f080 0001 	eor.w	r0, r0, #1
 8009ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aca:	2102      	movs	r1, #2
 8009acc:	4620      	mov	r0, r4
 8009ace:	f000 fd83 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 8009ad2:	b178      	cbz	r0, 8009af4 <ucdr_deserialize_endian_uint16_t+0xa4>
 8009ad4:	2e01      	cmp	r6, #1
 8009ad6:	68a3      	ldr	r3, [r4, #8]
 8009ad8:	d011      	beq.n	8009afe <ucdr_deserialize_endian_uint16_t+0xae>
 8009ada:	785b      	ldrb	r3, [r3, #1]
 8009adc:	702b      	strb	r3, [r5, #0]
 8009ade:	68a3      	ldr	r3, [r4, #8]
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	706b      	strb	r3, [r5, #1]
 8009ae4:	68a2      	ldr	r2, [r4, #8]
 8009ae6:	6923      	ldr	r3, [r4, #16]
 8009ae8:	3202      	adds	r2, #2
 8009aea:	3302      	adds	r3, #2
 8009aec:	2102      	movs	r1, #2
 8009aee:	60a2      	str	r2, [r4, #8]
 8009af0:	6123      	str	r3, [r4, #16]
 8009af2:	7561      	strb	r1, [r4, #21]
 8009af4:	7da0      	ldrb	r0, [r4, #22]
 8009af6:	f080 0001 	eor.w	r0, r0, #1
 8009afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009afe:	881b      	ldrh	r3, [r3, #0]
 8009b00:	802b      	strh	r3, [r5, #0]
 8009b02:	e7ef      	b.n	8009ae4 <ucdr_deserialize_endian_uint16_t+0x94>
 8009b04:	68a2      	ldr	r2, [r4, #8]
 8009b06:	6923      	ldr	r3, [r4, #16]
 8009b08:	7da0      	ldrb	r0, [r4, #22]
 8009b0a:	f884 9015 	strb.w	r9, [r4, #21]
 8009b0e:	1bd2      	subs	r2, r2, r7
 8009b10:	1bdb      	subs	r3, r3, r7
 8009b12:	60a2      	str	r2, [r4, #8]
 8009b14:	6123      	str	r3, [r4, #16]
 8009b16:	f080 0001 	eor.w	r0, r0, #1
 8009b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b1e:	68a3      	ldr	r3, [r4, #8]
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	706b      	strb	r3, [r5, #1]
 8009b24:	e7c3      	b.n	8009aae <ucdr_deserialize_endian_uint16_t+0x5e>
 8009b26:	4641      	mov	r1, r8
 8009b28:	463a      	mov	r2, r7
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	f008 f9c7 	bl	8011ebe <memcpy>
 8009b30:	68a1      	ldr	r1, [r4, #8]
 8009b32:	4652      	mov	r2, sl
 8009b34:	19e8      	adds	r0, r5, r7
 8009b36:	f008 f9c2 	bl	8011ebe <memcpy>
 8009b3a:	e7b8      	b.n	8009aae <ucdr_deserialize_endian_uint16_t+0x5e>

08009b3c <ucdr_serialize_uint32_t>:
 8009b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b40:	b082      	sub	sp, #8
 8009b42:	4604      	mov	r4, r0
 8009b44:	9101      	str	r1, [sp, #4]
 8009b46:	2104      	movs	r1, #4
 8009b48:	f000 fd9a 	bl	800a680 <ucdr_buffer_alignment>
 8009b4c:	4601      	mov	r1, r0
 8009b4e:	4620      	mov	r0, r4
 8009b50:	7d67      	ldrb	r7, [r4, #21]
 8009b52:	f000 fdd9 	bl	800a708 <ucdr_advance_buffer>
 8009b56:	2104      	movs	r1, #4
 8009b58:	4620      	mov	r0, r4
 8009b5a:	f000 fd31 	bl	800a5c0 <ucdr_check_buffer_available_for>
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	d139      	bne.n	8009bd6 <ucdr_serialize_uint32_t+0x9a>
 8009b62:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009b66:	42ab      	cmp	r3, r5
 8009b68:	d930      	bls.n	8009bcc <ucdr_serialize_uint32_t+0x90>
 8009b6a:	1b5e      	subs	r6, r3, r5
 8009b6c:	60a3      	str	r3, [r4, #8]
 8009b6e:	6923      	ldr	r3, [r4, #16]
 8009b70:	f1c6 0804 	rsb	r8, r6, #4
 8009b74:	4433      	add	r3, r6
 8009b76:	6123      	str	r3, [r4, #16]
 8009b78:	4641      	mov	r1, r8
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	f000 fd2c 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 8009b80:	2800      	cmp	r0, #0
 8009b82:	d04c      	beq.n	8009c1e <ucdr_serialize_uint32_t+0xe2>
 8009b84:	7d23      	ldrb	r3, [r4, #20]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d063      	beq.n	8009c52 <ucdr_serialize_uint32_t+0x116>
 8009b8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009b8e:	702b      	strb	r3, [r5, #0]
 8009b90:	2e00      	cmp	r6, #0
 8009b92:	d051      	beq.n	8009c38 <ucdr_serialize_uint32_t+0xfc>
 8009b94:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009b98:	706b      	strb	r3, [r5, #1]
 8009b9a:	2e01      	cmp	r6, #1
 8009b9c:	d050      	beq.n	8009c40 <ucdr_serialize_uint32_t+0x104>
 8009b9e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009ba2:	70ab      	strb	r3, [r5, #2]
 8009ba4:	2e02      	cmp	r6, #2
 8009ba6:	d04f      	beq.n	8009c48 <ucdr_serialize_uint32_t+0x10c>
 8009ba8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009bac:	70eb      	strb	r3, [r5, #3]
 8009bae:	6923      	ldr	r3, [r4, #16]
 8009bb0:	68a2      	ldr	r2, [r4, #8]
 8009bb2:	7da0      	ldrb	r0, [r4, #22]
 8009bb4:	3304      	adds	r3, #4
 8009bb6:	1b9e      	subs	r6, r3, r6
 8009bb8:	4442      	add	r2, r8
 8009bba:	2304      	movs	r3, #4
 8009bbc:	f080 0001 	eor.w	r0, r0, #1
 8009bc0:	60a2      	str	r2, [r4, #8]
 8009bc2:	6126      	str	r6, [r4, #16]
 8009bc4:	7563      	strb	r3, [r4, #21]
 8009bc6:	b002      	add	sp, #8
 8009bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bcc:	2104      	movs	r1, #4
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f000 fd02 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 8009bd4:	b1d0      	cbz	r0, 8009c0c <ucdr_serialize_uint32_t+0xd0>
 8009bd6:	7d23      	ldrb	r3, [r4, #20]
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	68a3      	ldr	r3, [r4, #8]
 8009bdc:	d01c      	beq.n	8009c18 <ucdr_serialize_uint32_t+0xdc>
 8009bde:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009be2:	701a      	strb	r2, [r3, #0]
 8009be4:	68a3      	ldr	r3, [r4, #8]
 8009be6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009bea:	705a      	strb	r2, [r3, #1]
 8009bec:	68a3      	ldr	r3, [r4, #8]
 8009bee:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009bf2:	709a      	strb	r2, [r3, #2]
 8009bf4:	68a3      	ldr	r3, [r4, #8]
 8009bf6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009bfa:	70da      	strb	r2, [r3, #3]
 8009bfc:	68a2      	ldr	r2, [r4, #8]
 8009bfe:	6923      	ldr	r3, [r4, #16]
 8009c00:	3204      	adds	r2, #4
 8009c02:	3304      	adds	r3, #4
 8009c04:	2104      	movs	r1, #4
 8009c06:	60a2      	str	r2, [r4, #8]
 8009c08:	6123      	str	r3, [r4, #16]
 8009c0a:	7561      	strb	r1, [r4, #21]
 8009c0c:	7da0      	ldrb	r0, [r4, #22]
 8009c0e:	f080 0001 	eor.w	r0, r0, #1
 8009c12:	b002      	add	sp, #8
 8009c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c18:	9a01      	ldr	r2, [sp, #4]
 8009c1a:	601a      	str	r2, [r3, #0]
 8009c1c:	e7ee      	b.n	8009bfc <ucdr_serialize_uint32_t+0xc0>
 8009c1e:	68a2      	ldr	r2, [r4, #8]
 8009c20:	6923      	ldr	r3, [r4, #16]
 8009c22:	7da0      	ldrb	r0, [r4, #22]
 8009c24:	7567      	strb	r7, [r4, #21]
 8009c26:	1b92      	subs	r2, r2, r6
 8009c28:	1b9b      	subs	r3, r3, r6
 8009c2a:	f080 0001 	eor.w	r0, r0, #1
 8009c2e:	60a2      	str	r2, [r4, #8]
 8009c30:	6123      	str	r3, [r4, #16]
 8009c32:	b002      	add	sp, #8
 8009c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c38:	68a3      	ldr	r3, [r4, #8]
 8009c3a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009c3e:	701a      	strb	r2, [r3, #0]
 8009c40:	68a3      	ldr	r3, [r4, #8]
 8009c42:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009c46:	701a      	strb	r2, [r3, #0]
 8009c48:	68a3      	ldr	r3, [r4, #8]
 8009c4a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009c4e:	701a      	strb	r2, [r3, #0]
 8009c50:	e7ad      	b.n	8009bae <ucdr_serialize_uint32_t+0x72>
 8009c52:	4628      	mov	r0, r5
 8009c54:	ad01      	add	r5, sp, #4
 8009c56:	4629      	mov	r1, r5
 8009c58:	4632      	mov	r2, r6
 8009c5a:	f008 f930 	bl	8011ebe <memcpy>
 8009c5e:	68a0      	ldr	r0, [r4, #8]
 8009c60:	4642      	mov	r2, r8
 8009c62:	19a9      	adds	r1, r5, r6
 8009c64:	f008 f92b 	bl	8011ebe <memcpy>
 8009c68:	e7a1      	b.n	8009bae <ucdr_serialize_uint32_t+0x72>
 8009c6a:	bf00      	nop

08009c6c <ucdr_serialize_endian_uint32_t>:
 8009c6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c70:	b083      	sub	sp, #12
 8009c72:	460d      	mov	r5, r1
 8009c74:	2104      	movs	r1, #4
 8009c76:	4604      	mov	r4, r0
 8009c78:	9201      	str	r2, [sp, #4]
 8009c7a:	f000 fd01 	bl	800a680 <ucdr_buffer_alignment>
 8009c7e:	4601      	mov	r1, r0
 8009c80:	4620      	mov	r0, r4
 8009c82:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009c86:	f000 fd3f 	bl	800a708 <ucdr_advance_buffer>
 8009c8a:	2104      	movs	r1, #4
 8009c8c:	4620      	mov	r0, r4
 8009c8e:	f000 fc97 	bl	800a5c0 <ucdr_check_buffer_available_for>
 8009c92:	2800      	cmp	r0, #0
 8009c94:	d138      	bne.n	8009d08 <ucdr_serialize_endian_uint32_t+0x9c>
 8009c96:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8009c9a:	42b7      	cmp	r7, r6
 8009c9c:	d92f      	bls.n	8009cfe <ucdr_serialize_endian_uint32_t+0x92>
 8009c9e:	6923      	ldr	r3, [r4, #16]
 8009ca0:	60a7      	str	r7, [r4, #8]
 8009ca2:	1bbf      	subs	r7, r7, r6
 8009ca4:	443b      	add	r3, r7
 8009ca6:	f1c7 0904 	rsb	r9, r7, #4
 8009caa:	6123      	str	r3, [r4, #16]
 8009cac:	4649      	mov	r1, r9
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f000 fc92 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	d04a      	beq.n	8009d4e <ucdr_serialize_endian_uint32_t+0xe2>
 8009cb8:	2d01      	cmp	r5, #1
 8009cba:	d063      	beq.n	8009d84 <ucdr_serialize_endian_uint32_t+0x118>
 8009cbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009cc0:	7033      	strb	r3, [r6, #0]
 8009cc2:	2f00      	cmp	r7, #0
 8009cc4:	d051      	beq.n	8009d6a <ucdr_serialize_endian_uint32_t+0xfe>
 8009cc6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009cca:	7073      	strb	r3, [r6, #1]
 8009ccc:	2f01      	cmp	r7, #1
 8009cce:	d050      	beq.n	8009d72 <ucdr_serialize_endian_uint32_t+0x106>
 8009cd0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009cd4:	70b3      	strb	r3, [r6, #2]
 8009cd6:	2f02      	cmp	r7, #2
 8009cd8:	d04f      	beq.n	8009d7a <ucdr_serialize_endian_uint32_t+0x10e>
 8009cda:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009cde:	70f3      	strb	r3, [r6, #3]
 8009ce0:	6923      	ldr	r3, [r4, #16]
 8009ce2:	68a2      	ldr	r2, [r4, #8]
 8009ce4:	7da0      	ldrb	r0, [r4, #22]
 8009ce6:	3304      	adds	r3, #4
 8009ce8:	444a      	add	r2, r9
 8009cea:	1bdb      	subs	r3, r3, r7
 8009cec:	2104      	movs	r1, #4
 8009cee:	f080 0001 	eor.w	r0, r0, #1
 8009cf2:	60a2      	str	r2, [r4, #8]
 8009cf4:	6123      	str	r3, [r4, #16]
 8009cf6:	7561      	strb	r1, [r4, #21]
 8009cf8:	b003      	add	sp, #12
 8009cfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cfe:	2104      	movs	r1, #4
 8009d00:	4620      	mov	r0, r4
 8009d02:	f000 fc69 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 8009d06:	b1c8      	cbz	r0, 8009d3c <ucdr_serialize_endian_uint32_t+0xd0>
 8009d08:	2d01      	cmp	r5, #1
 8009d0a:	68a3      	ldr	r3, [r4, #8]
 8009d0c:	d01c      	beq.n	8009d48 <ucdr_serialize_endian_uint32_t+0xdc>
 8009d0e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009d12:	701a      	strb	r2, [r3, #0]
 8009d14:	68a3      	ldr	r3, [r4, #8]
 8009d16:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009d1a:	705a      	strb	r2, [r3, #1]
 8009d1c:	68a3      	ldr	r3, [r4, #8]
 8009d1e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009d22:	709a      	strb	r2, [r3, #2]
 8009d24:	68a3      	ldr	r3, [r4, #8]
 8009d26:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009d2a:	70da      	strb	r2, [r3, #3]
 8009d2c:	68a2      	ldr	r2, [r4, #8]
 8009d2e:	6923      	ldr	r3, [r4, #16]
 8009d30:	3204      	adds	r2, #4
 8009d32:	3304      	adds	r3, #4
 8009d34:	2104      	movs	r1, #4
 8009d36:	60a2      	str	r2, [r4, #8]
 8009d38:	6123      	str	r3, [r4, #16]
 8009d3a:	7561      	strb	r1, [r4, #21]
 8009d3c:	7da0      	ldrb	r0, [r4, #22]
 8009d3e:	f080 0001 	eor.w	r0, r0, #1
 8009d42:	b003      	add	sp, #12
 8009d44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d48:	9a01      	ldr	r2, [sp, #4]
 8009d4a:	601a      	str	r2, [r3, #0]
 8009d4c:	e7ee      	b.n	8009d2c <ucdr_serialize_endian_uint32_t+0xc0>
 8009d4e:	68a2      	ldr	r2, [r4, #8]
 8009d50:	6923      	ldr	r3, [r4, #16]
 8009d52:	7da0      	ldrb	r0, [r4, #22]
 8009d54:	f884 8015 	strb.w	r8, [r4, #21]
 8009d58:	1bd2      	subs	r2, r2, r7
 8009d5a:	1bdb      	subs	r3, r3, r7
 8009d5c:	f080 0001 	eor.w	r0, r0, #1
 8009d60:	60a2      	str	r2, [r4, #8]
 8009d62:	6123      	str	r3, [r4, #16]
 8009d64:	b003      	add	sp, #12
 8009d66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d6a:	68a3      	ldr	r3, [r4, #8]
 8009d6c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009d70:	701a      	strb	r2, [r3, #0]
 8009d72:	68a3      	ldr	r3, [r4, #8]
 8009d74:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009d78:	701a      	strb	r2, [r3, #0]
 8009d7a:	68a3      	ldr	r3, [r4, #8]
 8009d7c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009d80:	701a      	strb	r2, [r3, #0]
 8009d82:	e7ad      	b.n	8009ce0 <ucdr_serialize_endian_uint32_t+0x74>
 8009d84:	ad01      	add	r5, sp, #4
 8009d86:	4629      	mov	r1, r5
 8009d88:	463a      	mov	r2, r7
 8009d8a:	4630      	mov	r0, r6
 8009d8c:	f008 f897 	bl	8011ebe <memcpy>
 8009d90:	68a0      	ldr	r0, [r4, #8]
 8009d92:	464a      	mov	r2, r9
 8009d94:	19e9      	adds	r1, r5, r7
 8009d96:	f008 f892 	bl	8011ebe <memcpy>
 8009d9a:	e7a1      	b.n	8009ce0 <ucdr_serialize_endian_uint32_t+0x74>

08009d9c <ucdr_deserialize_uint32_t>:
 8009d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009da0:	460d      	mov	r5, r1
 8009da2:	2104      	movs	r1, #4
 8009da4:	4604      	mov	r4, r0
 8009da6:	f000 fc6b 	bl	800a680 <ucdr_buffer_alignment>
 8009daa:	4601      	mov	r1, r0
 8009dac:	4620      	mov	r0, r4
 8009dae:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009db2:	f000 fca9 	bl	800a708 <ucdr_advance_buffer>
 8009db6:	2104      	movs	r1, #4
 8009db8:	4620      	mov	r0, r4
 8009dba:	f000 fc01 	bl	800a5c0 <ucdr_check_buffer_available_for>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	d138      	bne.n	8009e34 <ucdr_deserialize_uint32_t+0x98>
 8009dc2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8009dc6:	42b7      	cmp	r7, r6
 8009dc8:	d92f      	bls.n	8009e2a <ucdr_deserialize_uint32_t+0x8e>
 8009dca:	6923      	ldr	r3, [r4, #16]
 8009dcc:	60a7      	str	r7, [r4, #8]
 8009dce:	1bbf      	subs	r7, r7, r6
 8009dd0:	443b      	add	r3, r7
 8009dd2:	f1c7 0904 	rsb	r9, r7, #4
 8009dd6:	6123      	str	r3, [r4, #16]
 8009dd8:	4649      	mov	r1, r9
 8009dda:	4620      	mov	r0, r4
 8009ddc:	f000 fbfc 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 8009de0:	2800      	cmp	r0, #0
 8009de2:	d046      	beq.n	8009e72 <ucdr_deserialize_uint32_t+0xd6>
 8009de4:	7d23      	ldrb	r3, [r4, #20]
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d05c      	beq.n	8009ea4 <ucdr_deserialize_uint32_t+0x108>
 8009dea:	78f3      	ldrb	r3, [r6, #3]
 8009dec:	702b      	strb	r3, [r5, #0]
 8009dee:	2f00      	cmp	r7, #0
 8009df0:	d04c      	beq.n	8009e8c <ucdr_deserialize_uint32_t+0xf0>
 8009df2:	78b3      	ldrb	r3, [r6, #2]
 8009df4:	706b      	strb	r3, [r5, #1]
 8009df6:	2f01      	cmp	r7, #1
 8009df8:	f105 0302 	add.w	r3, r5, #2
 8009dfc:	d04a      	beq.n	8009e94 <ucdr_deserialize_uint32_t+0xf8>
 8009dfe:	7873      	ldrb	r3, [r6, #1]
 8009e00:	70ab      	strb	r3, [r5, #2]
 8009e02:	2f02      	cmp	r7, #2
 8009e04:	f105 0303 	add.w	r3, r5, #3
 8009e08:	d048      	beq.n	8009e9c <ucdr_deserialize_uint32_t+0x100>
 8009e0a:	7833      	ldrb	r3, [r6, #0]
 8009e0c:	70eb      	strb	r3, [r5, #3]
 8009e0e:	6923      	ldr	r3, [r4, #16]
 8009e10:	68a2      	ldr	r2, [r4, #8]
 8009e12:	7da0      	ldrb	r0, [r4, #22]
 8009e14:	2104      	movs	r1, #4
 8009e16:	3304      	adds	r3, #4
 8009e18:	444a      	add	r2, r9
 8009e1a:	1bdb      	subs	r3, r3, r7
 8009e1c:	7561      	strb	r1, [r4, #21]
 8009e1e:	60a2      	str	r2, [r4, #8]
 8009e20:	6123      	str	r3, [r4, #16]
 8009e22:	f080 0001 	eor.w	r0, r0, #1
 8009e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e2a:	2104      	movs	r1, #4
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f000 fbd3 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 8009e32:	b1b0      	cbz	r0, 8009e62 <ucdr_deserialize_uint32_t+0xc6>
 8009e34:	7d23      	ldrb	r3, [r4, #20]
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	68a3      	ldr	r3, [r4, #8]
 8009e3a:	d017      	beq.n	8009e6c <ucdr_deserialize_uint32_t+0xd0>
 8009e3c:	78db      	ldrb	r3, [r3, #3]
 8009e3e:	702b      	strb	r3, [r5, #0]
 8009e40:	68a3      	ldr	r3, [r4, #8]
 8009e42:	789b      	ldrb	r3, [r3, #2]
 8009e44:	706b      	strb	r3, [r5, #1]
 8009e46:	68a3      	ldr	r3, [r4, #8]
 8009e48:	785b      	ldrb	r3, [r3, #1]
 8009e4a:	70ab      	strb	r3, [r5, #2]
 8009e4c:	68a3      	ldr	r3, [r4, #8]
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	70eb      	strb	r3, [r5, #3]
 8009e52:	68a2      	ldr	r2, [r4, #8]
 8009e54:	6923      	ldr	r3, [r4, #16]
 8009e56:	3204      	adds	r2, #4
 8009e58:	3304      	adds	r3, #4
 8009e5a:	2104      	movs	r1, #4
 8009e5c:	60a2      	str	r2, [r4, #8]
 8009e5e:	6123      	str	r3, [r4, #16]
 8009e60:	7561      	strb	r1, [r4, #21]
 8009e62:	7da0      	ldrb	r0, [r4, #22]
 8009e64:	f080 0001 	eor.w	r0, r0, #1
 8009e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	602b      	str	r3, [r5, #0]
 8009e70:	e7ef      	b.n	8009e52 <ucdr_deserialize_uint32_t+0xb6>
 8009e72:	68a2      	ldr	r2, [r4, #8]
 8009e74:	6923      	ldr	r3, [r4, #16]
 8009e76:	7da0      	ldrb	r0, [r4, #22]
 8009e78:	f884 8015 	strb.w	r8, [r4, #21]
 8009e7c:	1bd2      	subs	r2, r2, r7
 8009e7e:	1bdb      	subs	r3, r3, r7
 8009e80:	60a2      	str	r2, [r4, #8]
 8009e82:	6123      	str	r3, [r4, #16]
 8009e84:	f080 0001 	eor.w	r0, r0, #1
 8009e88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e8c:	68a3      	ldr	r3, [r4, #8]
 8009e8e:	789b      	ldrb	r3, [r3, #2]
 8009e90:	706b      	strb	r3, [r5, #1]
 8009e92:	1cab      	adds	r3, r5, #2
 8009e94:	68a2      	ldr	r2, [r4, #8]
 8009e96:	7852      	ldrb	r2, [r2, #1]
 8009e98:	f803 2b01 	strb.w	r2, [r3], #1
 8009e9c:	68a2      	ldr	r2, [r4, #8]
 8009e9e:	7812      	ldrb	r2, [r2, #0]
 8009ea0:	701a      	strb	r2, [r3, #0]
 8009ea2:	e7b4      	b.n	8009e0e <ucdr_deserialize_uint32_t+0x72>
 8009ea4:	4631      	mov	r1, r6
 8009ea6:	463a      	mov	r2, r7
 8009ea8:	4628      	mov	r0, r5
 8009eaa:	f008 f808 	bl	8011ebe <memcpy>
 8009eae:	68a1      	ldr	r1, [r4, #8]
 8009eb0:	464a      	mov	r2, r9
 8009eb2:	19e8      	adds	r0, r5, r7
 8009eb4:	f008 f803 	bl	8011ebe <memcpy>
 8009eb8:	e7a9      	b.n	8009e0e <ucdr_deserialize_uint32_t+0x72>
 8009eba:	bf00      	nop

08009ebc <ucdr_deserialize_endian_uint32_t>:
 8009ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ec0:	460e      	mov	r6, r1
 8009ec2:	2104      	movs	r1, #4
 8009ec4:	4604      	mov	r4, r0
 8009ec6:	4615      	mov	r5, r2
 8009ec8:	f000 fbda 	bl	800a680 <ucdr_buffer_alignment>
 8009ecc:	4601      	mov	r1, r0
 8009ece:	4620      	mov	r0, r4
 8009ed0:	f894 9015 	ldrb.w	r9, [r4, #21]
 8009ed4:	f000 fc18 	bl	800a708 <ucdr_advance_buffer>
 8009ed8:	2104      	movs	r1, #4
 8009eda:	4620      	mov	r0, r4
 8009edc:	f000 fb70 	bl	800a5c0 <ucdr_check_buffer_available_for>
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	d13c      	bne.n	8009f5e <ucdr_deserialize_endian_uint32_t+0xa2>
 8009ee4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8009ee8:	42bb      	cmp	r3, r7
 8009eea:	d933      	bls.n	8009f54 <ucdr_deserialize_endian_uint32_t+0x98>
 8009eec:	eba3 0807 	sub.w	r8, r3, r7
 8009ef0:	60a3      	str	r3, [r4, #8]
 8009ef2:	6923      	ldr	r3, [r4, #16]
 8009ef4:	f1c8 0a04 	rsb	sl, r8, #4
 8009ef8:	4443      	add	r3, r8
 8009efa:	6123      	str	r3, [r4, #16]
 8009efc:	4651      	mov	r1, sl
 8009efe:	4620      	mov	r0, r4
 8009f00:	f000 fb6a 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 8009f04:	2800      	cmp	r0, #0
 8009f06:	d048      	beq.n	8009f9a <ucdr_deserialize_endian_uint32_t+0xde>
 8009f08:	2e01      	cmp	r6, #1
 8009f0a:	d061      	beq.n	8009fd0 <ucdr_deserialize_endian_uint32_t+0x114>
 8009f0c:	78fb      	ldrb	r3, [r7, #3]
 8009f0e:	702b      	strb	r3, [r5, #0]
 8009f10:	f1b8 0f00 	cmp.w	r8, #0
 8009f14:	d050      	beq.n	8009fb8 <ucdr_deserialize_endian_uint32_t+0xfc>
 8009f16:	78bb      	ldrb	r3, [r7, #2]
 8009f18:	706b      	strb	r3, [r5, #1]
 8009f1a:	f1b8 0f01 	cmp.w	r8, #1
 8009f1e:	f105 0302 	add.w	r3, r5, #2
 8009f22:	d04d      	beq.n	8009fc0 <ucdr_deserialize_endian_uint32_t+0x104>
 8009f24:	787b      	ldrb	r3, [r7, #1]
 8009f26:	70ab      	strb	r3, [r5, #2]
 8009f28:	f1b8 0f02 	cmp.w	r8, #2
 8009f2c:	f105 0303 	add.w	r3, r5, #3
 8009f30:	d04a      	beq.n	8009fc8 <ucdr_deserialize_endian_uint32_t+0x10c>
 8009f32:	783b      	ldrb	r3, [r7, #0]
 8009f34:	70eb      	strb	r3, [r5, #3]
 8009f36:	6923      	ldr	r3, [r4, #16]
 8009f38:	68a2      	ldr	r2, [r4, #8]
 8009f3a:	7da0      	ldrb	r0, [r4, #22]
 8009f3c:	2104      	movs	r1, #4
 8009f3e:	3304      	adds	r3, #4
 8009f40:	4452      	add	r2, sl
 8009f42:	eba3 0308 	sub.w	r3, r3, r8
 8009f46:	7561      	strb	r1, [r4, #21]
 8009f48:	60a2      	str	r2, [r4, #8]
 8009f4a:	6123      	str	r3, [r4, #16]
 8009f4c:	f080 0001 	eor.w	r0, r0, #1
 8009f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f54:	2104      	movs	r1, #4
 8009f56:	4620      	mov	r0, r4
 8009f58:	f000 fb3e 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 8009f5c:	b1a8      	cbz	r0, 8009f8a <ucdr_deserialize_endian_uint32_t+0xce>
 8009f5e:	2e01      	cmp	r6, #1
 8009f60:	68a3      	ldr	r3, [r4, #8]
 8009f62:	d017      	beq.n	8009f94 <ucdr_deserialize_endian_uint32_t+0xd8>
 8009f64:	78db      	ldrb	r3, [r3, #3]
 8009f66:	702b      	strb	r3, [r5, #0]
 8009f68:	68a3      	ldr	r3, [r4, #8]
 8009f6a:	789b      	ldrb	r3, [r3, #2]
 8009f6c:	706b      	strb	r3, [r5, #1]
 8009f6e:	68a3      	ldr	r3, [r4, #8]
 8009f70:	785b      	ldrb	r3, [r3, #1]
 8009f72:	70ab      	strb	r3, [r5, #2]
 8009f74:	68a3      	ldr	r3, [r4, #8]
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	70eb      	strb	r3, [r5, #3]
 8009f7a:	68a2      	ldr	r2, [r4, #8]
 8009f7c:	6923      	ldr	r3, [r4, #16]
 8009f7e:	3204      	adds	r2, #4
 8009f80:	3304      	adds	r3, #4
 8009f82:	2104      	movs	r1, #4
 8009f84:	60a2      	str	r2, [r4, #8]
 8009f86:	6123      	str	r3, [r4, #16]
 8009f88:	7561      	strb	r1, [r4, #21]
 8009f8a:	7da0      	ldrb	r0, [r4, #22]
 8009f8c:	f080 0001 	eor.w	r0, r0, #1
 8009f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	602b      	str	r3, [r5, #0]
 8009f98:	e7ef      	b.n	8009f7a <ucdr_deserialize_endian_uint32_t+0xbe>
 8009f9a:	68a2      	ldr	r2, [r4, #8]
 8009f9c:	6923      	ldr	r3, [r4, #16]
 8009f9e:	7da0      	ldrb	r0, [r4, #22]
 8009fa0:	f884 9015 	strb.w	r9, [r4, #21]
 8009fa4:	eba2 0208 	sub.w	r2, r2, r8
 8009fa8:	eba3 0308 	sub.w	r3, r3, r8
 8009fac:	60a2      	str	r2, [r4, #8]
 8009fae:	6123      	str	r3, [r4, #16]
 8009fb0:	f080 0001 	eor.w	r0, r0, #1
 8009fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fb8:	68a3      	ldr	r3, [r4, #8]
 8009fba:	789b      	ldrb	r3, [r3, #2]
 8009fbc:	706b      	strb	r3, [r5, #1]
 8009fbe:	1cab      	adds	r3, r5, #2
 8009fc0:	68a2      	ldr	r2, [r4, #8]
 8009fc2:	7852      	ldrb	r2, [r2, #1]
 8009fc4:	f803 2b01 	strb.w	r2, [r3], #1
 8009fc8:	68a2      	ldr	r2, [r4, #8]
 8009fca:	7812      	ldrb	r2, [r2, #0]
 8009fcc:	701a      	strb	r2, [r3, #0]
 8009fce:	e7b2      	b.n	8009f36 <ucdr_deserialize_endian_uint32_t+0x7a>
 8009fd0:	4639      	mov	r1, r7
 8009fd2:	4642      	mov	r2, r8
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	f007 ff72 	bl	8011ebe <memcpy>
 8009fda:	68a1      	ldr	r1, [r4, #8]
 8009fdc:	4652      	mov	r2, sl
 8009fde:	eb05 0008 	add.w	r0, r5, r8
 8009fe2:	f007 ff6c 	bl	8011ebe <memcpy>
 8009fe6:	e7a6      	b.n	8009f36 <ucdr_deserialize_endian_uint32_t+0x7a>

08009fe8 <ucdr_serialize_uint64_t>:
 8009fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fec:	2108      	movs	r1, #8
 8009fee:	b082      	sub	sp, #8
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	e9cd 2300 	strd	r2, r3, [sp]
 8009ff6:	f000 fb43 	bl	800a680 <ucdr_buffer_alignment>
 8009ffa:	4601      	mov	r1, r0
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	7d67      	ldrb	r7, [r4, #21]
 800a000:	f000 fb82 	bl	800a708 <ucdr_advance_buffer>
 800a004:	2108      	movs	r1, #8
 800a006:	4620      	mov	r0, r4
 800a008:	f000 fada 	bl	800a5c0 <ucdr_check_buffer_available_for>
 800a00c:	2800      	cmp	r0, #0
 800a00e:	d14e      	bne.n	800a0ae <ucdr_serialize_uint64_t+0xc6>
 800a010:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a014:	42ab      	cmp	r3, r5
 800a016:	d945      	bls.n	800a0a4 <ucdr_serialize_uint64_t+0xbc>
 800a018:	1b5e      	subs	r6, r3, r5
 800a01a:	60a3      	str	r3, [r4, #8]
 800a01c:	6923      	ldr	r3, [r4, #16]
 800a01e:	f1c6 0808 	rsb	r8, r6, #8
 800a022:	4433      	add	r3, r6
 800a024:	6123      	str	r3, [r4, #16]
 800a026:	4641      	mov	r1, r8
 800a028:	4620      	mov	r0, r4
 800a02a:	f000 fad5 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 800a02e:	2800      	cmp	r0, #0
 800a030:	d074      	beq.n	800a11c <ucdr_serialize_uint64_t+0x134>
 800a032:	7d23      	ldrb	r3, [r4, #20]
 800a034:	2b01      	cmp	r3, #1
 800a036:	f000 809b 	beq.w	800a170 <ucdr_serialize_uint64_t+0x188>
 800a03a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a03e:	702b      	strb	r3, [r5, #0]
 800a040:	2e00      	cmp	r6, #0
 800a042:	d078      	beq.n	800a136 <ucdr_serialize_uint64_t+0x14e>
 800a044:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a048:	706b      	strb	r3, [r5, #1]
 800a04a:	2e01      	cmp	r6, #1
 800a04c:	d077      	beq.n	800a13e <ucdr_serialize_uint64_t+0x156>
 800a04e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a052:	70ab      	strb	r3, [r5, #2]
 800a054:	2e02      	cmp	r6, #2
 800a056:	d076      	beq.n	800a146 <ucdr_serialize_uint64_t+0x15e>
 800a058:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a05c:	70eb      	strb	r3, [r5, #3]
 800a05e:	2e03      	cmp	r6, #3
 800a060:	d075      	beq.n	800a14e <ucdr_serialize_uint64_t+0x166>
 800a062:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a066:	712b      	strb	r3, [r5, #4]
 800a068:	2e04      	cmp	r6, #4
 800a06a:	d074      	beq.n	800a156 <ucdr_serialize_uint64_t+0x16e>
 800a06c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800a070:	716b      	strb	r3, [r5, #5]
 800a072:	2e05      	cmp	r6, #5
 800a074:	d073      	beq.n	800a15e <ucdr_serialize_uint64_t+0x176>
 800a076:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800a07a:	71ab      	strb	r3, [r5, #6]
 800a07c:	2e06      	cmp	r6, #6
 800a07e:	d072      	beq.n	800a166 <ucdr_serialize_uint64_t+0x17e>
 800a080:	f89d 3000 	ldrb.w	r3, [sp]
 800a084:	71eb      	strb	r3, [r5, #7]
 800a086:	6923      	ldr	r3, [r4, #16]
 800a088:	68a2      	ldr	r2, [r4, #8]
 800a08a:	7da0      	ldrb	r0, [r4, #22]
 800a08c:	3308      	adds	r3, #8
 800a08e:	1b9e      	subs	r6, r3, r6
 800a090:	4442      	add	r2, r8
 800a092:	2308      	movs	r3, #8
 800a094:	f080 0001 	eor.w	r0, r0, #1
 800a098:	60a2      	str	r2, [r4, #8]
 800a09a:	6126      	str	r6, [r4, #16]
 800a09c:	7563      	strb	r3, [r4, #21]
 800a09e:	b002      	add	sp, #8
 800a0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0a4:	2108      	movs	r1, #8
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	f000 fa96 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 800a0ac:	b350      	cbz	r0, 800a104 <ucdr_serialize_uint64_t+0x11c>
 800a0ae:	7d23      	ldrb	r3, [r4, #20]
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d02d      	beq.n	800a110 <ucdr_serialize_uint64_t+0x128>
 800a0b4:	68a3      	ldr	r3, [r4, #8]
 800a0b6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a0ba:	701a      	strb	r2, [r3, #0]
 800a0bc:	68a3      	ldr	r3, [r4, #8]
 800a0be:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a0c2:	705a      	strb	r2, [r3, #1]
 800a0c4:	68a3      	ldr	r3, [r4, #8]
 800a0c6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a0ca:	709a      	strb	r2, [r3, #2]
 800a0cc:	68a3      	ldr	r3, [r4, #8]
 800a0ce:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a0d2:	70da      	strb	r2, [r3, #3]
 800a0d4:	68a3      	ldr	r3, [r4, #8]
 800a0d6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800a0da:	711a      	strb	r2, [r3, #4]
 800a0dc:	68a3      	ldr	r3, [r4, #8]
 800a0de:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800a0e2:	715a      	strb	r2, [r3, #5]
 800a0e4:	68a3      	ldr	r3, [r4, #8]
 800a0e6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800a0ea:	719a      	strb	r2, [r3, #6]
 800a0ec:	68a3      	ldr	r3, [r4, #8]
 800a0ee:	f89d 2000 	ldrb.w	r2, [sp]
 800a0f2:	71da      	strb	r2, [r3, #7]
 800a0f4:	68a2      	ldr	r2, [r4, #8]
 800a0f6:	6923      	ldr	r3, [r4, #16]
 800a0f8:	3208      	adds	r2, #8
 800a0fa:	3308      	adds	r3, #8
 800a0fc:	2108      	movs	r1, #8
 800a0fe:	60a2      	str	r2, [r4, #8]
 800a100:	6123      	str	r3, [r4, #16]
 800a102:	7561      	strb	r1, [r4, #21]
 800a104:	7da0      	ldrb	r0, [r4, #22]
 800a106:	f080 0001 	eor.w	r0, r0, #1
 800a10a:	b002      	add	sp, #8
 800a10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a110:	466b      	mov	r3, sp
 800a112:	cb03      	ldmia	r3!, {r0, r1}
 800a114:	68a3      	ldr	r3, [r4, #8]
 800a116:	6018      	str	r0, [r3, #0]
 800a118:	6059      	str	r1, [r3, #4]
 800a11a:	e7eb      	b.n	800a0f4 <ucdr_serialize_uint64_t+0x10c>
 800a11c:	68a2      	ldr	r2, [r4, #8]
 800a11e:	6923      	ldr	r3, [r4, #16]
 800a120:	7da0      	ldrb	r0, [r4, #22]
 800a122:	7567      	strb	r7, [r4, #21]
 800a124:	1b92      	subs	r2, r2, r6
 800a126:	1b9b      	subs	r3, r3, r6
 800a128:	f080 0001 	eor.w	r0, r0, #1
 800a12c:	60a2      	str	r2, [r4, #8]
 800a12e:	6123      	str	r3, [r4, #16]
 800a130:	b002      	add	sp, #8
 800a132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a136:	68a3      	ldr	r3, [r4, #8]
 800a138:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a13c:	701a      	strb	r2, [r3, #0]
 800a13e:	68a3      	ldr	r3, [r4, #8]
 800a140:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a144:	701a      	strb	r2, [r3, #0]
 800a146:	68a3      	ldr	r3, [r4, #8]
 800a148:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a14c:	701a      	strb	r2, [r3, #0]
 800a14e:	68a3      	ldr	r3, [r4, #8]
 800a150:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800a154:	701a      	strb	r2, [r3, #0]
 800a156:	68a3      	ldr	r3, [r4, #8]
 800a158:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800a15c:	701a      	strb	r2, [r3, #0]
 800a15e:	68a3      	ldr	r3, [r4, #8]
 800a160:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800a164:	701a      	strb	r2, [r3, #0]
 800a166:	68a3      	ldr	r3, [r4, #8]
 800a168:	f89d 2000 	ldrb.w	r2, [sp]
 800a16c:	701a      	strb	r2, [r3, #0]
 800a16e:	e78a      	b.n	800a086 <ucdr_serialize_uint64_t+0x9e>
 800a170:	4628      	mov	r0, r5
 800a172:	466d      	mov	r5, sp
 800a174:	4629      	mov	r1, r5
 800a176:	4632      	mov	r2, r6
 800a178:	f007 fea1 	bl	8011ebe <memcpy>
 800a17c:	68a0      	ldr	r0, [r4, #8]
 800a17e:	4642      	mov	r2, r8
 800a180:	19a9      	adds	r1, r5, r6
 800a182:	f007 fe9c 	bl	8011ebe <memcpy>
 800a186:	e77e      	b.n	800a086 <ucdr_serialize_uint64_t+0x9e>

0800a188 <ucdr_serialize_int16_t>:
 800a188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a18c:	b082      	sub	sp, #8
 800a18e:	460b      	mov	r3, r1
 800a190:	2102      	movs	r1, #2
 800a192:	4604      	mov	r4, r0
 800a194:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a198:	f000 fa72 	bl	800a680 <ucdr_buffer_alignment>
 800a19c:	4601      	mov	r1, r0
 800a19e:	4620      	mov	r0, r4
 800a1a0:	7d67      	ldrb	r7, [r4, #21]
 800a1a2:	f000 fab1 	bl	800a708 <ucdr_advance_buffer>
 800a1a6:	2102      	movs	r1, #2
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	f000 fa09 	bl	800a5c0 <ucdr_check_buffer_available_for>
 800a1ae:	bb78      	cbnz	r0, 800a210 <ucdr_serialize_int16_t+0x88>
 800a1b0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a1b4:	42ab      	cmp	r3, r5
 800a1b6:	d926      	bls.n	800a206 <ucdr_serialize_int16_t+0x7e>
 800a1b8:	1b5e      	subs	r6, r3, r5
 800a1ba:	60a3      	str	r3, [r4, #8]
 800a1bc:	6923      	ldr	r3, [r4, #16]
 800a1be:	f1c6 0802 	rsb	r8, r6, #2
 800a1c2:	4433      	add	r3, r6
 800a1c4:	6123      	str	r3, [r4, #16]
 800a1c6:	4641      	mov	r1, r8
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	f000 fa05 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	d03b      	beq.n	800a24a <ucdr_serialize_int16_t+0xc2>
 800a1d2:	7d23      	ldrb	r3, [r4, #20]
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d04a      	beq.n	800a26e <ucdr_serialize_int16_t+0xe6>
 800a1d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a1dc:	702b      	strb	r3, [r5, #0]
 800a1de:	2e00      	cmp	r6, #0
 800a1e0:	d040      	beq.n	800a264 <ucdr_serialize_int16_t+0xdc>
 800a1e2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a1e6:	706b      	strb	r3, [r5, #1]
 800a1e8:	6923      	ldr	r3, [r4, #16]
 800a1ea:	68a2      	ldr	r2, [r4, #8]
 800a1ec:	7da0      	ldrb	r0, [r4, #22]
 800a1ee:	3302      	adds	r3, #2
 800a1f0:	1b9e      	subs	r6, r3, r6
 800a1f2:	4442      	add	r2, r8
 800a1f4:	2302      	movs	r3, #2
 800a1f6:	f080 0001 	eor.w	r0, r0, #1
 800a1fa:	60a2      	str	r2, [r4, #8]
 800a1fc:	6126      	str	r6, [r4, #16]
 800a1fe:	7563      	strb	r3, [r4, #21]
 800a200:	b002      	add	sp, #8
 800a202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a206:	2102      	movs	r1, #2
 800a208:	4620      	mov	r0, r4
 800a20a:	f000 f9e5 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 800a20e:	b190      	cbz	r0, 800a236 <ucdr_serialize_int16_t+0xae>
 800a210:	7d23      	ldrb	r3, [r4, #20]
 800a212:	2b01      	cmp	r3, #1
 800a214:	68a3      	ldr	r3, [r4, #8]
 800a216:	d014      	beq.n	800a242 <ucdr_serialize_int16_t+0xba>
 800a218:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a21c:	701a      	strb	r2, [r3, #0]
 800a21e:	68a3      	ldr	r3, [r4, #8]
 800a220:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a224:	705a      	strb	r2, [r3, #1]
 800a226:	68a2      	ldr	r2, [r4, #8]
 800a228:	6923      	ldr	r3, [r4, #16]
 800a22a:	3202      	adds	r2, #2
 800a22c:	3302      	adds	r3, #2
 800a22e:	2102      	movs	r1, #2
 800a230:	60a2      	str	r2, [r4, #8]
 800a232:	6123      	str	r3, [r4, #16]
 800a234:	7561      	strb	r1, [r4, #21]
 800a236:	7da0      	ldrb	r0, [r4, #22]
 800a238:	f080 0001 	eor.w	r0, r0, #1
 800a23c:	b002      	add	sp, #8
 800a23e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a242:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a246:	801a      	strh	r2, [r3, #0]
 800a248:	e7ed      	b.n	800a226 <ucdr_serialize_int16_t+0x9e>
 800a24a:	68a2      	ldr	r2, [r4, #8]
 800a24c:	6923      	ldr	r3, [r4, #16]
 800a24e:	7da0      	ldrb	r0, [r4, #22]
 800a250:	7567      	strb	r7, [r4, #21]
 800a252:	1b92      	subs	r2, r2, r6
 800a254:	1b9b      	subs	r3, r3, r6
 800a256:	f080 0001 	eor.w	r0, r0, #1
 800a25a:	60a2      	str	r2, [r4, #8]
 800a25c:	6123      	str	r3, [r4, #16]
 800a25e:	b002      	add	sp, #8
 800a260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a264:	68a3      	ldr	r3, [r4, #8]
 800a266:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a26a:	701a      	strb	r2, [r3, #0]
 800a26c:	e7bc      	b.n	800a1e8 <ucdr_serialize_int16_t+0x60>
 800a26e:	4628      	mov	r0, r5
 800a270:	f10d 0506 	add.w	r5, sp, #6
 800a274:	4629      	mov	r1, r5
 800a276:	4632      	mov	r2, r6
 800a278:	f007 fe21 	bl	8011ebe <memcpy>
 800a27c:	68a0      	ldr	r0, [r4, #8]
 800a27e:	4642      	mov	r2, r8
 800a280:	19a9      	adds	r1, r5, r6
 800a282:	f007 fe1c 	bl	8011ebe <memcpy>
 800a286:	e7af      	b.n	800a1e8 <ucdr_serialize_int16_t+0x60>

0800a288 <ucdr_deserialize_int16_t>:
 800a288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a28c:	460d      	mov	r5, r1
 800a28e:	2102      	movs	r1, #2
 800a290:	4604      	mov	r4, r0
 800a292:	f000 f9f5 	bl	800a680 <ucdr_buffer_alignment>
 800a296:	4601      	mov	r1, r0
 800a298:	4620      	mov	r0, r4
 800a29a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a29e:	f000 fa33 	bl	800a708 <ucdr_advance_buffer>
 800a2a2:	2102      	movs	r1, #2
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	f000 f98b 	bl	800a5c0 <ucdr_check_buffer_available_for>
 800a2aa:	bb60      	cbnz	r0, 800a306 <ucdr_deserialize_int16_t+0x7e>
 800a2ac:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a2b0:	42be      	cmp	r6, r7
 800a2b2:	d923      	bls.n	800a2fc <ucdr_deserialize_int16_t+0x74>
 800a2b4:	6923      	ldr	r3, [r4, #16]
 800a2b6:	60a6      	str	r6, [r4, #8]
 800a2b8:	1bf6      	subs	r6, r6, r7
 800a2ba:	4433      	add	r3, r6
 800a2bc:	f1c6 0902 	rsb	r9, r6, #2
 800a2c0:	6123      	str	r3, [r4, #16]
 800a2c2:	4649      	mov	r1, r9
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	f000 f987 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	d034      	beq.n	800a338 <ucdr_deserialize_int16_t+0xb0>
 800a2ce:	7d23      	ldrb	r3, [r4, #20]
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d042      	beq.n	800a35a <ucdr_deserialize_int16_t+0xd2>
 800a2d4:	787b      	ldrb	r3, [r7, #1]
 800a2d6:	702b      	strb	r3, [r5, #0]
 800a2d8:	2e00      	cmp	r6, #0
 800a2da:	d03a      	beq.n	800a352 <ucdr_deserialize_int16_t+0xca>
 800a2dc:	783b      	ldrb	r3, [r7, #0]
 800a2de:	706b      	strb	r3, [r5, #1]
 800a2e0:	6923      	ldr	r3, [r4, #16]
 800a2e2:	68a2      	ldr	r2, [r4, #8]
 800a2e4:	7da0      	ldrb	r0, [r4, #22]
 800a2e6:	2102      	movs	r1, #2
 800a2e8:	3302      	adds	r3, #2
 800a2ea:	444a      	add	r2, r9
 800a2ec:	1b9b      	subs	r3, r3, r6
 800a2ee:	7561      	strb	r1, [r4, #21]
 800a2f0:	60a2      	str	r2, [r4, #8]
 800a2f2:	6123      	str	r3, [r4, #16]
 800a2f4:	f080 0001 	eor.w	r0, r0, #1
 800a2f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2fc:	2102      	movs	r1, #2
 800a2fe:	4620      	mov	r0, r4
 800a300:	f000 f96a 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 800a304:	b180      	cbz	r0, 800a328 <ucdr_deserialize_int16_t+0xa0>
 800a306:	7d23      	ldrb	r3, [r4, #20]
 800a308:	2b01      	cmp	r3, #1
 800a30a:	68a3      	ldr	r3, [r4, #8]
 800a30c:	d011      	beq.n	800a332 <ucdr_deserialize_int16_t+0xaa>
 800a30e:	785b      	ldrb	r3, [r3, #1]
 800a310:	702b      	strb	r3, [r5, #0]
 800a312:	68a3      	ldr	r3, [r4, #8]
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	706b      	strb	r3, [r5, #1]
 800a318:	68a2      	ldr	r2, [r4, #8]
 800a31a:	6923      	ldr	r3, [r4, #16]
 800a31c:	3202      	adds	r2, #2
 800a31e:	3302      	adds	r3, #2
 800a320:	2102      	movs	r1, #2
 800a322:	60a2      	str	r2, [r4, #8]
 800a324:	6123      	str	r3, [r4, #16]
 800a326:	7561      	strb	r1, [r4, #21]
 800a328:	7da0      	ldrb	r0, [r4, #22]
 800a32a:	f080 0001 	eor.w	r0, r0, #1
 800a32e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a332:	881b      	ldrh	r3, [r3, #0]
 800a334:	802b      	strh	r3, [r5, #0]
 800a336:	e7ef      	b.n	800a318 <ucdr_deserialize_int16_t+0x90>
 800a338:	68a2      	ldr	r2, [r4, #8]
 800a33a:	6923      	ldr	r3, [r4, #16]
 800a33c:	7da0      	ldrb	r0, [r4, #22]
 800a33e:	f884 8015 	strb.w	r8, [r4, #21]
 800a342:	1b92      	subs	r2, r2, r6
 800a344:	1b9b      	subs	r3, r3, r6
 800a346:	60a2      	str	r2, [r4, #8]
 800a348:	6123      	str	r3, [r4, #16]
 800a34a:	f080 0001 	eor.w	r0, r0, #1
 800a34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a352:	68a3      	ldr	r3, [r4, #8]
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	706b      	strb	r3, [r5, #1]
 800a358:	e7c2      	b.n	800a2e0 <ucdr_deserialize_int16_t+0x58>
 800a35a:	4639      	mov	r1, r7
 800a35c:	4632      	mov	r2, r6
 800a35e:	4628      	mov	r0, r5
 800a360:	f007 fdad 	bl	8011ebe <memcpy>
 800a364:	68a1      	ldr	r1, [r4, #8]
 800a366:	464a      	mov	r2, r9
 800a368:	19a8      	adds	r0, r5, r6
 800a36a:	f007 fda8 	bl	8011ebe <memcpy>
 800a36e:	e7b7      	b.n	800a2e0 <ucdr_deserialize_int16_t+0x58>

0800a370 <ucdr_serialize_int32_t>:
 800a370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a374:	b082      	sub	sp, #8
 800a376:	4604      	mov	r4, r0
 800a378:	9101      	str	r1, [sp, #4]
 800a37a:	2104      	movs	r1, #4
 800a37c:	f000 f980 	bl	800a680 <ucdr_buffer_alignment>
 800a380:	4601      	mov	r1, r0
 800a382:	4620      	mov	r0, r4
 800a384:	7d67      	ldrb	r7, [r4, #21]
 800a386:	f000 f9bf 	bl	800a708 <ucdr_advance_buffer>
 800a38a:	2104      	movs	r1, #4
 800a38c:	4620      	mov	r0, r4
 800a38e:	f000 f917 	bl	800a5c0 <ucdr_check_buffer_available_for>
 800a392:	2800      	cmp	r0, #0
 800a394:	d139      	bne.n	800a40a <ucdr_serialize_int32_t+0x9a>
 800a396:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a39a:	42ab      	cmp	r3, r5
 800a39c:	d930      	bls.n	800a400 <ucdr_serialize_int32_t+0x90>
 800a39e:	1b5e      	subs	r6, r3, r5
 800a3a0:	60a3      	str	r3, [r4, #8]
 800a3a2:	6923      	ldr	r3, [r4, #16]
 800a3a4:	f1c6 0804 	rsb	r8, r6, #4
 800a3a8:	4433      	add	r3, r6
 800a3aa:	6123      	str	r3, [r4, #16]
 800a3ac:	4641      	mov	r1, r8
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f000 f912 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	d04c      	beq.n	800a452 <ucdr_serialize_int32_t+0xe2>
 800a3b8:	7d23      	ldrb	r3, [r4, #20]
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d063      	beq.n	800a486 <ucdr_serialize_int32_t+0x116>
 800a3be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a3c2:	702b      	strb	r3, [r5, #0]
 800a3c4:	2e00      	cmp	r6, #0
 800a3c6:	d051      	beq.n	800a46c <ucdr_serialize_int32_t+0xfc>
 800a3c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a3cc:	706b      	strb	r3, [r5, #1]
 800a3ce:	2e01      	cmp	r6, #1
 800a3d0:	d050      	beq.n	800a474 <ucdr_serialize_int32_t+0x104>
 800a3d2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a3d6:	70ab      	strb	r3, [r5, #2]
 800a3d8:	2e02      	cmp	r6, #2
 800a3da:	d04f      	beq.n	800a47c <ucdr_serialize_int32_t+0x10c>
 800a3dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a3e0:	70eb      	strb	r3, [r5, #3]
 800a3e2:	6923      	ldr	r3, [r4, #16]
 800a3e4:	68a2      	ldr	r2, [r4, #8]
 800a3e6:	7da0      	ldrb	r0, [r4, #22]
 800a3e8:	3304      	adds	r3, #4
 800a3ea:	1b9e      	subs	r6, r3, r6
 800a3ec:	4442      	add	r2, r8
 800a3ee:	2304      	movs	r3, #4
 800a3f0:	f080 0001 	eor.w	r0, r0, #1
 800a3f4:	60a2      	str	r2, [r4, #8]
 800a3f6:	6126      	str	r6, [r4, #16]
 800a3f8:	7563      	strb	r3, [r4, #21]
 800a3fa:	b002      	add	sp, #8
 800a3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a400:	2104      	movs	r1, #4
 800a402:	4620      	mov	r0, r4
 800a404:	f000 f8e8 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 800a408:	b1d0      	cbz	r0, 800a440 <ucdr_serialize_int32_t+0xd0>
 800a40a:	7d23      	ldrb	r3, [r4, #20]
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	68a3      	ldr	r3, [r4, #8]
 800a410:	d01c      	beq.n	800a44c <ucdr_serialize_int32_t+0xdc>
 800a412:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a416:	701a      	strb	r2, [r3, #0]
 800a418:	68a3      	ldr	r3, [r4, #8]
 800a41a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a41e:	705a      	strb	r2, [r3, #1]
 800a420:	68a3      	ldr	r3, [r4, #8]
 800a422:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a426:	709a      	strb	r2, [r3, #2]
 800a428:	68a3      	ldr	r3, [r4, #8]
 800a42a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a42e:	70da      	strb	r2, [r3, #3]
 800a430:	68a2      	ldr	r2, [r4, #8]
 800a432:	6923      	ldr	r3, [r4, #16]
 800a434:	3204      	adds	r2, #4
 800a436:	3304      	adds	r3, #4
 800a438:	2104      	movs	r1, #4
 800a43a:	60a2      	str	r2, [r4, #8]
 800a43c:	6123      	str	r3, [r4, #16]
 800a43e:	7561      	strb	r1, [r4, #21]
 800a440:	7da0      	ldrb	r0, [r4, #22]
 800a442:	f080 0001 	eor.w	r0, r0, #1
 800a446:	b002      	add	sp, #8
 800a448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a44c:	9a01      	ldr	r2, [sp, #4]
 800a44e:	601a      	str	r2, [r3, #0]
 800a450:	e7ee      	b.n	800a430 <ucdr_serialize_int32_t+0xc0>
 800a452:	68a2      	ldr	r2, [r4, #8]
 800a454:	6923      	ldr	r3, [r4, #16]
 800a456:	7da0      	ldrb	r0, [r4, #22]
 800a458:	7567      	strb	r7, [r4, #21]
 800a45a:	1b92      	subs	r2, r2, r6
 800a45c:	1b9b      	subs	r3, r3, r6
 800a45e:	f080 0001 	eor.w	r0, r0, #1
 800a462:	60a2      	str	r2, [r4, #8]
 800a464:	6123      	str	r3, [r4, #16]
 800a466:	b002      	add	sp, #8
 800a468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a46c:	68a3      	ldr	r3, [r4, #8]
 800a46e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a472:	701a      	strb	r2, [r3, #0]
 800a474:	68a3      	ldr	r3, [r4, #8]
 800a476:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a47a:	701a      	strb	r2, [r3, #0]
 800a47c:	68a3      	ldr	r3, [r4, #8]
 800a47e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a482:	701a      	strb	r2, [r3, #0]
 800a484:	e7ad      	b.n	800a3e2 <ucdr_serialize_int32_t+0x72>
 800a486:	4628      	mov	r0, r5
 800a488:	ad01      	add	r5, sp, #4
 800a48a:	4629      	mov	r1, r5
 800a48c:	4632      	mov	r2, r6
 800a48e:	f007 fd16 	bl	8011ebe <memcpy>
 800a492:	68a0      	ldr	r0, [r4, #8]
 800a494:	4642      	mov	r2, r8
 800a496:	19a9      	adds	r1, r5, r6
 800a498:	f007 fd11 	bl	8011ebe <memcpy>
 800a49c:	e7a1      	b.n	800a3e2 <ucdr_serialize_int32_t+0x72>
 800a49e:	bf00      	nop

0800a4a0 <ucdr_deserialize_int32_t>:
 800a4a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4a4:	460d      	mov	r5, r1
 800a4a6:	2104      	movs	r1, #4
 800a4a8:	4604      	mov	r4, r0
 800a4aa:	f000 f8e9 	bl	800a680 <ucdr_buffer_alignment>
 800a4ae:	4601      	mov	r1, r0
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a4b6:	f000 f927 	bl	800a708 <ucdr_advance_buffer>
 800a4ba:	2104      	movs	r1, #4
 800a4bc:	4620      	mov	r0, r4
 800a4be:	f000 f87f 	bl	800a5c0 <ucdr_check_buffer_available_for>
 800a4c2:	2800      	cmp	r0, #0
 800a4c4:	d138      	bne.n	800a538 <ucdr_deserialize_int32_t+0x98>
 800a4c6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800a4ca:	42b7      	cmp	r7, r6
 800a4cc:	d92f      	bls.n	800a52e <ucdr_deserialize_int32_t+0x8e>
 800a4ce:	6923      	ldr	r3, [r4, #16]
 800a4d0:	60a7      	str	r7, [r4, #8]
 800a4d2:	1bbf      	subs	r7, r7, r6
 800a4d4:	443b      	add	r3, r7
 800a4d6:	f1c7 0904 	rsb	r9, r7, #4
 800a4da:	6123      	str	r3, [r4, #16]
 800a4dc:	4649      	mov	r1, r9
 800a4de:	4620      	mov	r0, r4
 800a4e0:	f000 f87a 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	d046      	beq.n	800a576 <ucdr_deserialize_int32_t+0xd6>
 800a4e8:	7d23      	ldrb	r3, [r4, #20]
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d05c      	beq.n	800a5a8 <ucdr_deserialize_int32_t+0x108>
 800a4ee:	78f3      	ldrb	r3, [r6, #3]
 800a4f0:	702b      	strb	r3, [r5, #0]
 800a4f2:	2f00      	cmp	r7, #0
 800a4f4:	d04c      	beq.n	800a590 <ucdr_deserialize_int32_t+0xf0>
 800a4f6:	78b3      	ldrb	r3, [r6, #2]
 800a4f8:	706b      	strb	r3, [r5, #1]
 800a4fa:	2f01      	cmp	r7, #1
 800a4fc:	f105 0302 	add.w	r3, r5, #2
 800a500:	d04a      	beq.n	800a598 <ucdr_deserialize_int32_t+0xf8>
 800a502:	7873      	ldrb	r3, [r6, #1]
 800a504:	70ab      	strb	r3, [r5, #2]
 800a506:	2f02      	cmp	r7, #2
 800a508:	f105 0303 	add.w	r3, r5, #3
 800a50c:	d048      	beq.n	800a5a0 <ucdr_deserialize_int32_t+0x100>
 800a50e:	7833      	ldrb	r3, [r6, #0]
 800a510:	70eb      	strb	r3, [r5, #3]
 800a512:	6923      	ldr	r3, [r4, #16]
 800a514:	68a2      	ldr	r2, [r4, #8]
 800a516:	7da0      	ldrb	r0, [r4, #22]
 800a518:	2104      	movs	r1, #4
 800a51a:	3304      	adds	r3, #4
 800a51c:	444a      	add	r2, r9
 800a51e:	1bdb      	subs	r3, r3, r7
 800a520:	7561      	strb	r1, [r4, #21]
 800a522:	60a2      	str	r2, [r4, #8]
 800a524:	6123      	str	r3, [r4, #16]
 800a526:	f080 0001 	eor.w	r0, r0, #1
 800a52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a52e:	2104      	movs	r1, #4
 800a530:	4620      	mov	r0, r4
 800a532:	f000 f851 	bl	800a5d8 <ucdr_check_final_buffer_behavior>
 800a536:	b1b0      	cbz	r0, 800a566 <ucdr_deserialize_int32_t+0xc6>
 800a538:	7d23      	ldrb	r3, [r4, #20]
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	68a3      	ldr	r3, [r4, #8]
 800a53e:	d017      	beq.n	800a570 <ucdr_deserialize_int32_t+0xd0>
 800a540:	78db      	ldrb	r3, [r3, #3]
 800a542:	702b      	strb	r3, [r5, #0]
 800a544:	68a3      	ldr	r3, [r4, #8]
 800a546:	789b      	ldrb	r3, [r3, #2]
 800a548:	706b      	strb	r3, [r5, #1]
 800a54a:	68a3      	ldr	r3, [r4, #8]
 800a54c:	785b      	ldrb	r3, [r3, #1]
 800a54e:	70ab      	strb	r3, [r5, #2]
 800a550:	68a3      	ldr	r3, [r4, #8]
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	70eb      	strb	r3, [r5, #3]
 800a556:	68a2      	ldr	r2, [r4, #8]
 800a558:	6923      	ldr	r3, [r4, #16]
 800a55a:	3204      	adds	r2, #4
 800a55c:	3304      	adds	r3, #4
 800a55e:	2104      	movs	r1, #4
 800a560:	60a2      	str	r2, [r4, #8]
 800a562:	6123      	str	r3, [r4, #16]
 800a564:	7561      	strb	r1, [r4, #21]
 800a566:	7da0      	ldrb	r0, [r4, #22]
 800a568:	f080 0001 	eor.w	r0, r0, #1
 800a56c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	602b      	str	r3, [r5, #0]
 800a574:	e7ef      	b.n	800a556 <ucdr_deserialize_int32_t+0xb6>
 800a576:	68a2      	ldr	r2, [r4, #8]
 800a578:	6923      	ldr	r3, [r4, #16]
 800a57a:	7da0      	ldrb	r0, [r4, #22]
 800a57c:	f884 8015 	strb.w	r8, [r4, #21]
 800a580:	1bd2      	subs	r2, r2, r7
 800a582:	1bdb      	subs	r3, r3, r7
 800a584:	60a2      	str	r2, [r4, #8]
 800a586:	6123      	str	r3, [r4, #16]
 800a588:	f080 0001 	eor.w	r0, r0, #1
 800a58c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a590:	68a3      	ldr	r3, [r4, #8]
 800a592:	789b      	ldrb	r3, [r3, #2]
 800a594:	706b      	strb	r3, [r5, #1]
 800a596:	1cab      	adds	r3, r5, #2
 800a598:	68a2      	ldr	r2, [r4, #8]
 800a59a:	7852      	ldrb	r2, [r2, #1]
 800a59c:	f803 2b01 	strb.w	r2, [r3], #1
 800a5a0:	68a2      	ldr	r2, [r4, #8]
 800a5a2:	7812      	ldrb	r2, [r2, #0]
 800a5a4:	701a      	strb	r2, [r3, #0]
 800a5a6:	e7b4      	b.n	800a512 <ucdr_deserialize_int32_t+0x72>
 800a5a8:	4631      	mov	r1, r6
 800a5aa:	463a      	mov	r2, r7
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	f007 fc86 	bl	8011ebe <memcpy>
 800a5b2:	68a1      	ldr	r1, [r4, #8]
 800a5b4:	464a      	mov	r2, r9
 800a5b6:	19e8      	adds	r0, r5, r7
 800a5b8:	f007 fc81 	bl	8011ebe <memcpy>
 800a5bc:	e7a9      	b.n	800a512 <ucdr_deserialize_int32_t+0x72>
 800a5be:	bf00      	nop

0800a5c0 <ucdr_check_buffer_available_for>:
 800a5c0:	7d83      	ldrb	r3, [r0, #22]
 800a5c2:	b93b      	cbnz	r3, 800a5d4 <ucdr_check_buffer_available_for+0x14>
 800a5c4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800a5c8:	4419      	add	r1, r3
 800a5ca:	4288      	cmp	r0, r1
 800a5cc:	bf34      	ite	cc
 800a5ce:	2000      	movcc	r0, #0
 800a5d0:	2001      	movcs	r0, #1
 800a5d2:	4770      	bx	lr
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	4770      	bx	lr

0800a5d8 <ucdr_check_final_buffer_behavior>:
 800a5d8:	7d83      	ldrb	r3, [r0, #22]
 800a5da:	b943      	cbnz	r3, 800a5ee <ucdr_check_final_buffer_behavior+0x16>
 800a5dc:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800a5e0:	4291      	cmp	r1, r2
 800a5e2:	b510      	push	{r4, lr}
 800a5e4:	4604      	mov	r4, r0
 800a5e6:	d205      	bcs.n	800a5f4 <ucdr_check_final_buffer_behavior+0x1c>
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	bd10      	pop	{r4, pc}
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	4770      	bx	lr
 800a5f4:	6982      	ldr	r2, [r0, #24]
 800a5f6:	b13a      	cbz	r2, 800a608 <ucdr_check_final_buffer_behavior+0x30>
 800a5f8:	69c1      	ldr	r1, [r0, #28]
 800a5fa:	4790      	blx	r2
 800a5fc:	f080 0301 	eor.w	r3, r0, #1
 800a600:	b2db      	uxtb	r3, r3
 800a602:	75a0      	strb	r0, [r4, #22]
 800a604:	4618      	mov	r0, r3
 800a606:	bd10      	pop	{r4, pc}
 800a608:	2001      	movs	r0, #1
 800a60a:	75a0      	strb	r0, [r4, #22]
 800a60c:	e7fa      	b.n	800a604 <ucdr_check_final_buffer_behavior+0x2c>
 800a60e:	bf00      	nop

0800a610 <ucdr_set_on_full_buffer_callback>:
 800a610:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800a614:	4770      	bx	lr
 800a616:	bf00      	nop

0800a618 <ucdr_init_buffer_origin_offset_endian>:
 800a618:	b410      	push	{r4}
 800a61a:	9c01      	ldr	r4, [sp, #4]
 800a61c:	6001      	str	r1, [r0, #0]
 800a61e:	440a      	add	r2, r1
 800a620:	6042      	str	r2, [r0, #4]
 800a622:	190a      	adds	r2, r1, r4
 800a624:	441c      	add	r4, r3
 800a626:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800a62a:	6082      	str	r2, [r0, #8]
 800a62c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a630:	7503      	strb	r3, [r0, #20]
 800a632:	2200      	movs	r2, #0
 800a634:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800a638:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a63c:	7542      	strb	r2, [r0, #21]
 800a63e:	7582      	strb	r2, [r0, #22]
 800a640:	4770      	bx	lr
 800a642:	bf00      	nop

0800a644 <ucdr_init_buffer_origin_offset>:
 800a644:	b510      	push	{r4, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	9c04      	ldr	r4, [sp, #16]
 800a64a:	9400      	str	r4, [sp, #0]
 800a64c:	2401      	movs	r4, #1
 800a64e:	9401      	str	r4, [sp, #4]
 800a650:	f7ff ffe2 	bl	800a618 <ucdr_init_buffer_origin_offset_endian>
 800a654:	b002      	add	sp, #8
 800a656:	bd10      	pop	{r4, pc}

0800a658 <ucdr_init_buffer_origin>:
 800a658:	b510      	push	{r4, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	2400      	movs	r4, #0
 800a65e:	9400      	str	r4, [sp, #0]
 800a660:	f7ff fff0 	bl	800a644 <ucdr_init_buffer_origin_offset>
 800a664:	b002      	add	sp, #8
 800a666:	bd10      	pop	{r4, pc}

0800a668 <ucdr_init_buffer>:
 800a668:	2300      	movs	r3, #0
 800a66a:	f7ff bff5 	b.w	800a658 <ucdr_init_buffer_origin>
 800a66e:	bf00      	nop

0800a670 <ucdr_alignment>:
 800a670:	fbb0 f3f1 	udiv	r3, r0, r1
 800a674:	fb03 0011 	mls	r0, r3, r1, r0
 800a678:	1a08      	subs	r0, r1, r0
 800a67a:	3901      	subs	r1, #1
 800a67c:	4008      	ands	r0, r1
 800a67e:	4770      	bx	lr

0800a680 <ucdr_buffer_alignment>:
 800a680:	7d43      	ldrb	r3, [r0, #21]
 800a682:	428b      	cmp	r3, r1
 800a684:	d208      	bcs.n	800a698 <ucdr_buffer_alignment+0x18>
 800a686:	6900      	ldr	r0, [r0, #16]
 800a688:	fbb0 f3f1 	udiv	r3, r0, r1
 800a68c:	fb01 0013 	mls	r0, r1, r3, r0
 800a690:	1a08      	subs	r0, r1, r0
 800a692:	3901      	subs	r1, #1
 800a694:	4008      	ands	r0, r1
 800a696:	4770      	bx	lr
 800a698:	2000      	movs	r0, #0
 800a69a:	4770      	bx	lr

0800a69c <ucdr_align_to>:
 800a69c:	b538      	push	{r3, r4, r5, lr}
 800a69e:	4604      	mov	r4, r0
 800a6a0:	460d      	mov	r5, r1
 800a6a2:	f7ff ffed 	bl	800a680 <ucdr_buffer_alignment>
 800a6a6:	68a3      	ldr	r3, [r4, #8]
 800a6a8:	6921      	ldr	r1, [r4, #16]
 800a6aa:	7565      	strb	r5, [r4, #21]
 800a6ac:	181a      	adds	r2, r3, r0
 800a6ae:	6863      	ldr	r3, [r4, #4]
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	4408      	add	r0, r1
 800a6b4:	bf28      	it	cs
 800a6b6:	4613      	movcs	r3, r2
 800a6b8:	6120      	str	r0, [r4, #16]
 800a6ba:	60a3      	str	r3, [r4, #8]
 800a6bc:	bd38      	pop	{r3, r4, r5, pc}
 800a6be:	bf00      	nop

0800a6c0 <ucdr_buffer_length>:
 800a6c0:	6882      	ldr	r2, [r0, #8]
 800a6c2:	6800      	ldr	r0, [r0, #0]
 800a6c4:	1a10      	subs	r0, r2, r0
 800a6c6:	4770      	bx	lr

0800a6c8 <ucdr_buffer_remaining>:
 800a6c8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800a6cc:	1a10      	subs	r0, r2, r0
 800a6ce:	4770      	bx	lr

0800a6d0 <ucdr_check_final_buffer_behavior_array>:
 800a6d0:	b538      	push	{r3, r4, r5, lr}
 800a6d2:	7d83      	ldrb	r3, [r0, #22]
 800a6d4:	b963      	cbnz	r3, 800a6f0 <ucdr_check_final_buffer_behavior_array+0x20>
 800a6d6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	4604      	mov	r4, r0
 800a6de:	460d      	mov	r5, r1
 800a6e0:	d308      	bcc.n	800a6f4 <ucdr_check_final_buffer_behavior_array+0x24>
 800a6e2:	b139      	cbz	r1, 800a6f4 <ucdr_check_final_buffer_behavior_array+0x24>
 800a6e4:	6983      	ldr	r3, [r0, #24]
 800a6e6:	b163      	cbz	r3, 800a702 <ucdr_check_final_buffer_behavior_array+0x32>
 800a6e8:	69c1      	ldr	r1, [r0, #28]
 800a6ea:	4798      	blx	r3
 800a6ec:	75a0      	strb	r0, [r4, #22]
 800a6ee:	b108      	cbz	r0, 800a6f4 <ucdr_check_final_buffer_behavior_array+0x24>
 800a6f0:	2000      	movs	r0, #0
 800a6f2:	bd38      	pop	{r3, r4, r5, pc}
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	f7ff ffe7 	bl	800a6c8 <ucdr_buffer_remaining>
 800a6fa:	42a8      	cmp	r0, r5
 800a6fc:	bf28      	it	cs
 800a6fe:	4628      	movcs	r0, r5
 800a700:	bd38      	pop	{r3, r4, r5, pc}
 800a702:	2301      	movs	r3, #1
 800a704:	7583      	strb	r3, [r0, #22]
 800a706:	e7f3      	b.n	800a6f0 <ucdr_check_final_buffer_behavior_array+0x20>

0800a708 <ucdr_advance_buffer>:
 800a708:	b538      	push	{r3, r4, r5, lr}
 800a70a:	4604      	mov	r4, r0
 800a70c:	460d      	mov	r5, r1
 800a70e:	f7ff ff57 	bl	800a5c0 <ucdr_check_buffer_available_for>
 800a712:	b178      	cbz	r0, 800a734 <ucdr_advance_buffer+0x2c>
 800a714:	6923      	ldr	r3, [r4, #16]
 800a716:	68a2      	ldr	r2, [r4, #8]
 800a718:	442b      	add	r3, r5
 800a71a:	6123      	str	r3, [r4, #16]
 800a71c:	2301      	movs	r3, #1
 800a71e:	442a      	add	r2, r5
 800a720:	7563      	strb	r3, [r4, #21]
 800a722:	60a2      	str	r2, [r4, #8]
 800a724:	bd38      	pop	{r3, r4, r5, pc}
 800a726:	68a2      	ldr	r2, [r4, #8]
 800a728:	6923      	ldr	r3, [r4, #16]
 800a72a:	4402      	add	r2, r0
 800a72c:	4403      	add	r3, r0
 800a72e:	1a2d      	subs	r5, r5, r0
 800a730:	60a2      	str	r2, [r4, #8]
 800a732:	6123      	str	r3, [r4, #16]
 800a734:	4629      	mov	r1, r5
 800a736:	2201      	movs	r2, #1
 800a738:	4620      	mov	r0, r4
 800a73a:	f7ff ffc9 	bl	800a6d0 <ucdr_check_final_buffer_behavior_array>
 800a73e:	2800      	cmp	r0, #0
 800a740:	d1f1      	bne.n	800a726 <ucdr_advance_buffer+0x1e>
 800a742:	2301      	movs	r3, #1
 800a744:	7563      	strb	r3, [r4, #21]
 800a746:	bd38      	pop	{r3, r4, r5, pc}

0800a748 <uxr_buffer_delete_entity>:
 800a748:	b510      	push	{r4, lr}
 800a74a:	2300      	movs	r3, #0
 800a74c:	b08e      	sub	sp, #56	; 0x38
 800a74e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a752:	2303      	movs	r3, #3
 800a754:	9300      	str	r3, [sp, #0]
 800a756:	2204      	movs	r2, #4
 800a758:	ab06      	add	r3, sp, #24
 800a75a:	4604      	mov	r4, r0
 800a75c:	9103      	str	r1, [sp, #12]
 800a75e:	f001 f86f 	bl	800b840 <uxr_prepare_stream_to_write_submessage>
 800a762:	b918      	cbnz	r0, 800a76c <uxr_buffer_delete_entity+0x24>
 800a764:	4604      	mov	r4, r0
 800a766:	4620      	mov	r0, r4
 800a768:	b00e      	add	sp, #56	; 0x38
 800a76a:	bd10      	pop	{r4, pc}
 800a76c:	9902      	ldr	r1, [sp, #8]
 800a76e:	aa05      	add	r2, sp, #20
 800a770:	4620      	mov	r0, r4
 800a772:	f001 f99b 	bl	800baac <uxr_init_base_object_request>
 800a776:	a905      	add	r1, sp, #20
 800a778:	4604      	mov	r4, r0
 800a77a:	a806      	add	r0, sp, #24
 800a77c:	f002 fb00 	bl	800cd80 <uxr_serialize_DELETE_Payload>
 800a780:	4620      	mov	r0, r4
 800a782:	b00e      	add	sp, #56	; 0x38
 800a784:	bd10      	pop	{r4, pc}
 800a786:	bf00      	nop

0800a788 <uxr_common_create_entity>:
 800a788:	b510      	push	{r4, lr}
 800a78a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800a78e:	b08c      	sub	sp, #48	; 0x30
 800a790:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800a794:	f1bc 0f01 	cmp.w	ip, #1
 800a798:	bf0c      	ite	eq
 800a79a:	f003 0201 	andeq.w	r2, r3, #1
 800a79e:	2200      	movne	r2, #0
 800a7a0:	330e      	adds	r3, #14
 800a7a2:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800a7a6:	9101      	str	r1, [sp, #4]
 800a7a8:	441a      	add	r2, r3
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	9300      	str	r3, [sp, #0]
 800a7ae:	9903      	ldr	r1, [sp, #12]
 800a7b0:	ab04      	add	r3, sp, #16
 800a7b2:	b292      	uxth	r2, r2
 800a7b4:	4604      	mov	r4, r0
 800a7b6:	f001 f843 	bl	800b840 <uxr_prepare_stream_to_write_submessage>
 800a7ba:	b918      	cbnz	r0, 800a7c4 <uxr_common_create_entity+0x3c>
 800a7bc:	4604      	mov	r4, r0
 800a7be:	4620      	mov	r0, r4
 800a7c0:	b00c      	add	sp, #48	; 0x30
 800a7c2:	bd10      	pop	{r4, pc}
 800a7c4:	9902      	ldr	r1, [sp, #8]
 800a7c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f001 f96f 	bl	800baac <uxr_init_base_object_request>
 800a7ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a7d0:	4604      	mov	r4, r0
 800a7d2:	a804      	add	r0, sp, #16
 800a7d4:	f002 fa30 	bl	800cc38 <uxr_serialize_CREATE_Payload>
 800a7d8:	4620      	mov	r0, r4
 800a7da:	b00c      	add	sp, #48	; 0x30
 800a7dc:	bd10      	pop	{r4, pc}
 800a7de:	bf00      	nop

0800a7e0 <uxr_buffer_create_participant_bin>:
 800a7e0:	b570      	push	{r4, r5, r6, lr}
 800a7e2:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800a7e6:	ac11      	add	r4, sp, #68	; 0x44
 800a7e8:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 800a7ec:	2303      	movs	r3, #3
 800a7ee:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800a7f2:	7223      	strb	r3, [r4, #8]
 800a7f4:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 800a7f6:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	2100      	movs	r1, #0
 800a7fe:	4605      	mov	r5, r0
 800a800:	7122      	strb	r2, [r4, #4]
 800a802:	f88d 1014 	strb.w	r1, [sp, #20]
 800a806:	b1cb      	cbz	r3, 800a83c <uxr_buffer_create_participant_bin+0x5c>
 800a808:	f88d 201c 	strb.w	r2, [sp, #28]
 800a80c:	9308      	str	r3, [sp, #32]
 800a80e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a812:	a915      	add	r1, sp, #84	; 0x54
 800a814:	a809      	add	r0, sp, #36	; 0x24
 800a816:	f7ff ff27 	bl	800a668 <ucdr_init_buffer>
 800a81a:	a905      	add	r1, sp, #20
 800a81c:	a809      	add	r0, sp, #36	; 0x24
 800a81e:	f001 fed9 	bl	800c5d4 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800a822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a824:	9600      	str	r6, [sp, #0]
 800a826:	9401      	str	r4, [sp, #4]
 800a828:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a82c:	60e3      	str	r3, [r4, #12]
 800a82e:	4628      	mov	r0, r5
 800a830:	b29b      	uxth	r3, r3
 800a832:	f7ff ffa9 	bl	800a788 <uxr_common_create_entity>
 800a836:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 800a83a:	bd70      	pop	{r4, r5, r6, pc}
 800a83c:	f88d 301c 	strb.w	r3, [sp, #28]
 800a840:	e7e5      	b.n	800a80e <uxr_buffer_create_participant_bin+0x2e>
 800a842:	bf00      	nop

0800a844 <uxr_buffer_create_topic_bin>:
 800a844:	b570      	push	{r4, r5, r6, lr}
 800a846:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800a84a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800a84e:	9105      	str	r1, [sp, #20]
 800a850:	4605      	mov	r5, r0
 800a852:	a997      	add	r1, sp, #604	; 0x25c
 800a854:	4618      	mov	r0, r3
 800a856:	2302      	movs	r3, #2
 800a858:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 800a85c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800a860:	f000 f8ee 	bl	800aa40 <uxr_object_id_to_raw>
 800a864:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 800a866:	9306      	str	r3, [sp, #24]
 800a868:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 800a86a:	930a      	str	r3, [sp, #40]	; 0x28
 800a86c:	2303      	movs	r3, #3
 800a86e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800a872:	2301      	movs	r3, #1
 800a874:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a878:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800a87c:	a917      	add	r1, sp, #92	; 0x5c
 800a87e:	2300      	movs	r3, #0
 800a880:	a80b      	add	r0, sp, #44	; 0x2c
 800a882:	f88d 301c 	strb.w	r3, [sp, #28]
 800a886:	f7ff feef 	bl	800a668 <ucdr_init_buffer>
 800a88a:	a906      	add	r1, sp, #24
 800a88c:	a80b      	add	r0, sp, #44	; 0x2c
 800a88e:	f001 fec3 	bl	800c618 <uxr_serialize_OBJK_Topic_Binary>
 800a892:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a894:	9316      	str	r3, [sp, #88]	; 0x58
 800a896:	ac13      	add	r4, sp, #76	; 0x4c
 800a898:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800a89c:	9600      	str	r6, [sp, #0]
 800a89e:	9401      	str	r4, [sp, #4]
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	f7ff ff70 	bl	800a788 <uxr_common_create_entity>
 800a8a8:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 800a8ac:	bd70      	pop	{r4, r5, r6, pc}
 800a8ae:	bf00      	nop

0800a8b0 <uxr_buffer_create_publisher_bin>:
 800a8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8b2:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800a8b6:	4605      	mov	r5, r0
 800a8b8:	9105      	str	r1, [sp, #20]
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	2603      	movs	r6, #3
 800a8be:	a992      	add	r1, sp, #584	; 0x248
 800a8c0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800a8c4:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800a8c8:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800a8cc:	f000 f8b8 	bl	800aa40 <uxr_object_id_to_raw>
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8d6:	a912      	add	r1, sp, #72	; 0x48
 800a8d8:	a806      	add	r0, sp, #24
 800a8da:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800a8de:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800a8e2:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 800a8e6:	f7ff febf 	bl	800a668 <ucdr_init_buffer>
 800a8ea:	a993      	add	r1, sp, #588	; 0x24c
 800a8ec:	a806      	add	r0, sp, #24
 800a8ee:	f001 ff47 	bl	800c780 <uxr_serialize_OBJK_Publisher_Binary>
 800a8f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8f4:	9311      	str	r3, [sp, #68]	; 0x44
 800a8f6:	ac0e      	add	r4, sp, #56	; 0x38
 800a8f8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800a8fc:	9700      	str	r7, [sp, #0]
 800a8fe:	9401      	str	r4, [sp, #4]
 800a900:	b29b      	uxth	r3, r3
 800a902:	4628      	mov	r0, r5
 800a904:	f7ff ff40 	bl	800a788 <uxr_common_create_entity>
 800a908:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800a90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a90e:	bf00      	nop

0800a910 <uxr_buffer_create_datawriter_bin>:
 800a910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a914:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a918:	ac1d      	add	r4, sp, #116	; 0x74
 800a91a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800a91e:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800a922:	9105      	str	r1, [sp, #20]
 800a924:	4606      	mov	r6, r0
 800a926:	a9a1      	add	r1, sp, #644	; 0x284
 800a928:	4618      	mov	r0, r3
 800a92a:	2305      	movs	r3, #5
 800a92c:	7123      	strb	r3, [r4, #4]
 800a92e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800a932:	2703      	movs	r7, #3
 800a934:	f000 f884 	bl	800aa40 <uxr_object_id_to_raw>
 800a938:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800a93a:	7227      	strb	r7, [r4, #8]
 800a93c:	a90e      	add	r1, sp, #56	; 0x38
 800a93e:	f000 f87f 	bl	800aa40 <uxr_object_id_to_raw>
 800a942:	2300      	movs	r3, #0
 800a944:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800a948:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 800a94c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800a950:	3d00      	subs	r5, #0
 800a952:	bf18      	it	ne
 800a954:	2501      	movne	r5, #1
 800a956:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800a95a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800a95e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800a962:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800a966:	2301      	movs	r3, #1
 800a968:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800a96c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800a970:	bb8a      	cbnz	r2, 800a9d6 <uxr_buffer_create_datawriter_bin+0xc6>
 800a972:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800a976:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800a97a:	f04f 0c13 	mov.w	ip, #19
 800a97e:	250b      	movs	r5, #11
 800a980:	2221      	movs	r2, #33	; 0x21
 800a982:	2111      	movs	r1, #17
 800a984:	2009      	movs	r0, #9
 800a986:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800a98a:	b923      	cbnz	r3, 800a996 <uxr_buffer_create_datawriter_bin+0x86>
 800a98c:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800a990:	4672      	mov	r2, lr
 800a992:	4661      	mov	r1, ip
 800a994:	4628      	mov	r0, r5
 800a996:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d025      	beq.n	800a9ea <uxr_buffer_create_datawriter_bin+0xda>
 800a99e:	2b03      	cmp	r3, #3
 800a9a0:	d029      	beq.n	800a9f6 <uxr_buffer_create_datawriter_bin+0xe6>
 800a9a2:	b32b      	cbz	r3, 800a9f0 <uxr_buffer_create_datawriter_bin+0xe0>
 800a9a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a9a8:	a921      	add	r1, sp, #132	; 0x84
 800a9aa:	a806      	add	r0, sp, #24
 800a9ac:	f7ff fe5c 	bl	800a668 <ucdr_init_buffer>
 800a9b0:	a90e      	add	r1, sp, #56	; 0x38
 800a9b2:	a806      	add	r0, sp, #24
 800a9b4:	f001 ff5a 	bl	800c86c <uxr_serialize_OBJK_DataWriter_Binary>
 800a9b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9ba:	f8cd 8000 	str.w	r8, [sp]
 800a9be:	9401      	str	r4, [sp, #4]
 800a9c0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800a9c4:	60e3      	str	r3, [r4, #12]
 800a9c6:	4630      	mov	r0, r6
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	f7ff fedd 	bl	800a788 <uxr_common_create_entity>
 800a9ce:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a9d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9d6:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800a9da:	f04f 0c12 	mov.w	ip, #18
 800a9de:	250a      	movs	r5, #10
 800a9e0:	2220      	movs	r2, #32
 800a9e2:	2110      	movs	r1, #16
 800a9e4:	2008      	movs	r0, #8
 800a9e6:	2702      	movs	r7, #2
 800a9e8:	e7cd      	b.n	800a986 <uxr_buffer_create_datawriter_bin+0x76>
 800a9ea:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800a9ee:	e7d9      	b.n	800a9a4 <uxr_buffer_create_datawriter_bin+0x94>
 800a9f0:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800a9f4:	e7d6      	b.n	800a9a4 <uxr_buffer_create_datawriter_bin+0x94>
 800a9f6:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800a9fa:	e7d3      	b.n	800a9a4 <uxr_buffer_create_datawriter_bin+0x94>

0800a9fc <uxr_object_id>:
 800a9fc:	b082      	sub	sp, #8
 800a9fe:	2300      	movs	r3, #0
 800aa00:	f88d 1006 	strb.w	r1, [sp, #6]
 800aa04:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800aa08:	f360 030f 	bfi	r3, r0, #0, #16
 800aa0c:	f362 431f 	bfi	r3, r2, #16, #16
 800aa10:	4618      	mov	r0, r3
 800aa12:	b002      	add	sp, #8
 800aa14:	4770      	bx	lr
 800aa16:	bf00      	nop

0800aa18 <uxr_object_id_from_raw>:
 800aa18:	7843      	ldrb	r3, [r0, #1]
 800aa1a:	7801      	ldrb	r1, [r0, #0]
 800aa1c:	b082      	sub	sp, #8
 800aa1e:	f003 020f 	and.w	r2, r3, #15
 800aa22:	f88d 2006 	strb.w	r2, [sp, #6]
 800aa26:	091b      	lsrs	r3, r3, #4
 800aa28:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800aa2c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800aa30:	2000      	movs	r0, #0
 800aa32:	f363 000f 	bfi	r0, r3, #0, #16
 800aa36:	f362 401f 	bfi	r0, r2, #16, #16
 800aa3a:	b002      	add	sp, #8
 800aa3c:	4770      	bx	lr
 800aa3e:	bf00      	nop

0800aa40 <uxr_object_id_to_raw>:
 800aa40:	4602      	mov	r2, r0
 800aa42:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800aa46:	b082      	sub	sp, #8
 800aa48:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800aa4c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800aa50:	f881 c000 	strb.w	ip, [r1]
 800aa54:	7048      	strb	r0, [r1, #1]
 800aa56:	b002      	add	sp, #8
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop

0800aa5c <on_get_fragmentation_info>:
 800aa5c:	b500      	push	{lr}
 800aa5e:	b08b      	sub	sp, #44	; 0x2c
 800aa60:	4601      	mov	r1, r0
 800aa62:	2204      	movs	r2, #4
 800aa64:	a802      	add	r0, sp, #8
 800aa66:	f7ff fdff 	bl	800a668 <ucdr_init_buffer>
 800aa6a:	f10d 0305 	add.w	r3, sp, #5
 800aa6e:	f10d 0206 	add.w	r2, sp, #6
 800aa72:	a901      	add	r1, sp, #4
 800aa74:	a802      	add	r0, sp, #8
 800aa76:	f001 f99b 	bl	800bdb0 <uxr_read_submessage_header>
 800aa7a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800aa7e:	2b0d      	cmp	r3, #13
 800aa80:	d003      	beq.n	800aa8a <on_get_fragmentation_info+0x2e>
 800aa82:	2000      	movs	r0, #0
 800aa84:	b00b      	add	sp, #44	; 0x2c
 800aa86:	f85d fb04 	ldr.w	pc, [sp], #4
 800aa8a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800aa8e:	f013 0f02 	tst.w	r3, #2
 800aa92:	bf14      	ite	ne
 800aa94:	2002      	movne	r0, #2
 800aa96:	2001      	moveq	r0, #1
 800aa98:	b00b      	add	sp, #44	; 0x2c
 800aa9a:	f85d fb04 	ldr.w	pc, [sp], #4
 800aa9e:	bf00      	nop

0800aaa0 <read_submessage_get_info>:
 800aaa0:	b570      	push	{r4, r5, r6, lr}
 800aaa2:	2500      	movs	r5, #0
 800aaa4:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800aaa8:	4604      	mov	r4, r0
 800aaaa:	f44f 7224 	mov.w	r2, #656	; 0x290
 800aaae:	460e      	mov	r6, r1
 800aab0:	a810      	add	r0, sp, #64	; 0x40
 800aab2:	4629      	mov	r1, r5
 800aab4:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800aab8:	f007 f8e2 	bl	8011c80 <memset>
 800aabc:	a903      	add	r1, sp, #12
 800aabe:	4630      	mov	r0, r6
 800aac0:	f002 f94a 	bl	800cd58 <uxr_deserialize_GET_INFO_Payload>
 800aac4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800aac8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800aacc:	4620      	mov	r0, r4
 800aace:	f000 ffe5 	bl	800ba9c <uxr_session_header_offset>
 800aad2:	462b      	mov	r3, r5
 800aad4:	9000      	str	r0, [sp, #0]
 800aad6:	220c      	movs	r2, #12
 800aad8:	a905      	add	r1, sp, #20
 800aada:	a808      	add	r0, sp, #32
 800aadc:	f7ff fdb2 	bl	800a644 <ucdr_init_buffer_origin_offset>
 800aae0:	a910      	add	r1, sp, #64	; 0x40
 800aae2:	a808      	add	r0, sp, #32
 800aae4:	f002 f9aa 	bl	800ce3c <uxr_serialize_INFO_Payload>
 800aae8:	9b08      	ldr	r3, [sp, #32]
 800aaea:	462a      	mov	r2, r5
 800aaec:	4629      	mov	r1, r5
 800aaee:	4620      	mov	r0, r4
 800aaf0:	f000 ff7e 	bl	800b9f0 <uxr_stamp_session_header>
 800aaf4:	a808      	add	r0, sp, #32
 800aaf6:	f7ff fde3 	bl	800a6c0 <ucdr_buffer_length>
 800aafa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800aafc:	4602      	mov	r2, r0
 800aafe:	a905      	add	r1, sp, #20
 800ab00:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ab04:	47a0      	blx	r4
 800ab06:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800ab0a:	bd70      	pop	{r4, r5, r6, pc}

0800ab0c <write_submessage_acknack.isra.0>:
 800ab0c:	b570      	push	{r4, r5, r6, lr}
 800ab0e:	b092      	sub	sp, #72	; 0x48
 800ab10:	4605      	mov	r5, r0
 800ab12:	460e      	mov	r6, r1
 800ab14:	4614      	mov	r4, r2
 800ab16:	f000 ffc1 	bl	800ba9c <uxr_session_header_offset>
 800ab1a:	a905      	add	r1, sp, #20
 800ab1c:	9000      	str	r0, [sp, #0]
 800ab1e:	2300      	movs	r3, #0
 800ab20:	a80a      	add	r0, sp, #40	; 0x28
 800ab22:	2211      	movs	r2, #17
 800ab24:	f7ff fd8e 	bl	800a644 <ucdr_init_buffer_origin_offset>
 800ab28:	2218      	movs	r2, #24
 800ab2a:	fb02 5404 	mla	r4, r2, r4, r5
 800ab2e:	2300      	movs	r3, #0
 800ab30:	2205      	movs	r2, #5
 800ab32:	3450      	adds	r4, #80	; 0x50
 800ab34:	210a      	movs	r1, #10
 800ab36:	a80a      	add	r0, sp, #40	; 0x28
 800ab38:	f001 f920 	bl	800bd7c <uxr_buffer_submessage_header>
 800ab3c:	a903      	add	r1, sp, #12
 800ab3e:	4620      	mov	r0, r4
 800ab40:	f004 ff20 	bl	800f984 <uxr_compute_acknack>
 800ab44:	ba40      	rev16	r0, r0
 800ab46:	f8ad 000e 	strh.w	r0, [sp, #14]
 800ab4a:	a903      	add	r1, sp, #12
 800ab4c:	a80a      	add	r0, sp, #40	; 0x28
 800ab4e:	f88d 6010 	strb.w	r6, [sp, #16]
 800ab52:	f002 f9e3 	bl	800cf1c <uxr_serialize_ACKNACK_Payload>
 800ab56:	2200      	movs	r2, #0
 800ab58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab5a:	4611      	mov	r1, r2
 800ab5c:	4628      	mov	r0, r5
 800ab5e:	f000 ff47 	bl	800b9f0 <uxr_stamp_session_header>
 800ab62:	a80a      	add	r0, sp, #40	; 0x28
 800ab64:	f7ff fdac 	bl	800a6c0 <ucdr_buffer_length>
 800ab68:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	a905      	add	r1, sp, #20
 800ab6e:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ab72:	47a0      	blx	r4
 800ab74:	b012      	add	sp, #72	; 0x48
 800ab76:	bd70      	pop	{r4, r5, r6, pc}

0800ab78 <uxr_init_session>:
 800ab78:	b510      	push	{r4, lr}
 800ab7a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800abb0 <uxr_init_session+0x38>
 800ab7e:	2300      	movs	r3, #0
 800ab80:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 800ab84:	4604      	mov	r4, r0
 800ab86:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 800ab8a:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 800ab8e:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 800ab92:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 800ab96:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 800ab9a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800ab9e:	2181      	movs	r1, #129	; 0x81
 800aba0:	f000 fe92 	bl	800b8c8 <uxr_init_session_info>
 800aba4:	f104 0008 	add.w	r0, r4, #8
 800aba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abac:	f001 b802 	b.w	800bbb4 <uxr_init_stream_storage>
	...

0800abb8 <uxr_set_status_callback>:
 800abb8:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop

0800abc0 <uxr_set_topic_callback>:
 800abc0:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop

0800abc8 <uxr_set_request_callback>:
 800abc8:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800abcc:	4770      	bx	lr
 800abce:	bf00      	nop

0800abd0 <uxr_set_reply_callback>:
 800abd0:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800abd4:	4770      	bx	lr
 800abd6:	bf00      	nop

0800abd8 <uxr_create_output_best_effort_stream>:
 800abd8:	b510      	push	{r4, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	e9cd 2100 	strd	r2, r1, [sp]
 800abe0:	4604      	mov	r4, r0
 800abe2:	f000 ff5b 	bl	800ba9c <uxr_session_header_offset>
 800abe6:	e9dd 2100 	ldrd	r2, r1, [sp]
 800abea:	4603      	mov	r3, r0
 800abec:	f104 0008 	add.w	r0, r4, #8
 800abf0:	b004      	add	sp, #16
 800abf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abf6:	f001 b827 	b.w	800bc48 <uxr_add_output_best_effort_buffer>
 800abfa:	bf00      	nop

0800abfc <uxr_create_output_reliable_stream>:
 800abfc:	b510      	push	{r4, lr}
 800abfe:	b088      	sub	sp, #32
 800ac00:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800ac04:	4604      	mov	r4, r0
 800ac06:	9303      	str	r3, [sp, #12]
 800ac08:	f000 ff48 	bl	800ba9c <uxr_session_header_offset>
 800ac0c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800ac10:	9000      	str	r0, [sp, #0]
 800ac12:	9905      	ldr	r1, [sp, #20]
 800ac14:	f104 0008 	add.w	r0, r4, #8
 800ac18:	f001 f82a 	bl	800bc70 <uxr_add_output_reliable_buffer>
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	b2c3      	uxtb	r3, r0
 800ac20:	f363 0207 	bfi	r2, r3, #0, #8
 800ac24:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800ac28:	f363 220f 	bfi	r2, r3, #8, #8
 800ac2c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800ac30:	f363 4217 	bfi	r2, r3, #16, #8
 800ac34:	0e03      	lsrs	r3, r0, #24
 800ac36:	f363 621f 	bfi	r2, r3, #24, #8
 800ac3a:	4610      	mov	r0, r2
 800ac3c:	b008      	add	sp, #32
 800ac3e:	bd10      	pop	{r4, pc}

0800ac40 <uxr_create_input_best_effort_stream>:
 800ac40:	b082      	sub	sp, #8
 800ac42:	3008      	adds	r0, #8
 800ac44:	b002      	add	sp, #8
 800ac46:	f001 b82d 	b.w	800bca4 <uxr_add_input_best_effort_buffer>
 800ac4a:	bf00      	nop

0800ac4c <uxr_create_input_reliable_stream>:
 800ac4c:	b510      	push	{r4, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	4c0b      	ldr	r4, [pc, #44]	; (800ac80 <uxr_create_input_reliable_stream+0x34>)
 800ac52:	9400      	str	r4, [sp, #0]
 800ac54:	3008      	adds	r0, #8
 800ac56:	f001 f83b 	bl	800bcd0 <uxr_add_input_reliable_buffer>
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	b2c3      	uxtb	r3, r0
 800ac5e:	f363 0207 	bfi	r2, r3, #0, #8
 800ac62:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800ac66:	f363 220f 	bfi	r2, r3, #8, #8
 800ac6a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800ac6e:	f363 4217 	bfi	r2, r3, #16, #8
 800ac72:	0e03      	lsrs	r3, r0, #24
 800ac74:	f363 621f 	bfi	r2, r3, #24, #8
 800ac78:	4610      	mov	r0, r2
 800ac7a:	b004      	add	sp, #16
 800ac7c:	bd10      	pop	{r4, pc}
 800ac7e:	bf00      	nop
 800ac80:	0800aa5d 	.word	0x0800aa5d

0800ac84 <uxr_epoch_nanos>:
 800ac84:	b510      	push	{r4, lr}
 800ac86:	4604      	mov	r4, r0
 800ac88:	f001 f8d8 	bl	800be3c <uxr_nanos>
 800ac8c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800ac90:	1ac0      	subs	r0, r0, r3
 800ac92:	eb61 0102 	sbc.w	r1, r1, r2
 800ac96:	bd10      	pop	{r4, pc}

0800ac98 <uxr_flash_output_streams>:
 800ac98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac9c:	7e03      	ldrb	r3, [r0, #24]
 800ac9e:	b084      	sub	sp, #16
 800aca0:	4604      	mov	r4, r0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d035      	beq.n	800ad12 <uxr_flash_output_streams+0x7a>
 800aca6:	f04f 0900 	mov.w	r9, #0
 800acaa:	4648      	mov	r0, r9
 800acac:	f10d 0802 	add.w	r8, sp, #2
 800acb0:	af03      	add	r7, sp, #12
 800acb2:	ae02      	add	r6, sp, #8
 800acb4:	e006      	b.n	800acc4 <uxr_flash_output_streams+0x2c>
 800acb6:	7e23      	ldrb	r3, [r4, #24]
 800acb8:	f109 0901 	add.w	r9, r9, #1
 800acbc:	fa5f f089 	uxtb.w	r0, r9
 800acc0:	4283      	cmp	r3, r0
 800acc2:	d926      	bls.n	800ad12 <uxr_flash_output_streams+0x7a>
 800acc4:	2201      	movs	r2, #1
 800acc6:	4611      	mov	r1, r2
 800acc8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800accc:	f000 ff1e 	bl	800bb0c <uxr_stream_id>
 800acd0:	3508      	adds	r5, #8
 800acd2:	4684      	mov	ip, r0
 800acd4:	4643      	mov	r3, r8
 800acd6:	463a      	mov	r2, r7
 800acd8:	4631      	mov	r1, r6
 800acda:	4628      	mov	r0, r5
 800acdc:	f8cd c004 	str.w	ip, [sp, #4]
 800ace0:	f004 fed6 	bl	800fa90 <uxr_prepare_best_effort_buffer_to_send>
 800ace4:	2800      	cmp	r0, #0
 800ace6:	d0e6      	beq.n	800acb6 <uxr_flash_output_streams+0x1e>
 800ace8:	9b02      	ldr	r3, [sp, #8]
 800acea:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800acee:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800acf2:	4620      	mov	r0, r4
 800acf4:	f000 fe7c 	bl	800b9f0 <uxr_stamp_session_header>
 800acf8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800acfa:	9a03      	ldr	r2, [sp, #12]
 800acfc:	685d      	ldr	r5, [r3, #4]
 800acfe:	6818      	ldr	r0, [r3, #0]
 800ad00:	9902      	ldr	r1, [sp, #8]
 800ad02:	47a8      	blx	r5
 800ad04:	f109 0901 	add.w	r9, r9, #1
 800ad08:	7e23      	ldrb	r3, [r4, #24]
 800ad0a:	fa5f f089 	uxtb.w	r0, r9
 800ad0e:	4283      	cmp	r3, r0
 800ad10:	d8d8      	bhi.n	800acc4 <uxr_flash_output_streams+0x2c>
 800ad12:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800ad16:	b38b      	cbz	r3, 800ad7c <uxr_flash_output_streams+0xe4>
 800ad18:	f04f 0900 	mov.w	r9, #0
 800ad1c:	f10d 0802 	add.w	r8, sp, #2
 800ad20:	af03      	add	r7, sp, #12
 800ad22:	ae02      	add	r6, sp, #8
 800ad24:	4648      	mov	r0, r9
 800ad26:	2201      	movs	r2, #1
 800ad28:	2102      	movs	r1, #2
 800ad2a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800ad2e:	f000 feed 	bl	800bb0c <uxr_stream_id>
 800ad32:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800ad36:	3520      	adds	r5, #32
 800ad38:	9001      	str	r0, [sp, #4]
 800ad3a:	e00d      	b.n	800ad58 <uxr_flash_output_streams+0xc0>
 800ad3c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ad40:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ad44:	9b02      	ldr	r3, [sp, #8]
 800ad46:	f000 fe53 	bl	800b9f0 <uxr_stamp_session_header>
 800ad4a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ad4c:	9a03      	ldr	r2, [sp, #12]
 800ad4e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800ad52:	9902      	ldr	r1, [sp, #8]
 800ad54:	6818      	ldr	r0, [r3, #0]
 800ad56:	47d0      	blx	sl
 800ad58:	4643      	mov	r3, r8
 800ad5a:	463a      	mov	r2, r7
 800ad5c:	4631      	mov	r1, r6
 800ad5e:	4628      	mov	r0, r5
 800ad60:	f005 f8b4 	bl	800fecc <uxr_prepare_next_reliable_buffer_to_send>
 800ad64:	4603      	mov	r3, r0
 800ad66:	4620      	mov	r0, r4
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d1e7      	bne.n	800ad3c <uxr_flash_output_streams+0xa4>
 800ad6c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800ad70:	f109 0901 	add.w	r9, r9, #1
 800ad74:	fa5f f089 	uxtb.w	r0, r9
 800ad78:	4283      	cmp	r3, r0
 800ad7a:	d8d4      	bhi.n	800ad26 <uxr_flash_output_streams+0x8e>
 800ad7c:	b004      	add	sp, #16
 800ad7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad82:	bf00      	nop

0800ad84 <read_submessage_info>:
 800ad84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad88:	460d      	mov	r5, r1
 800ad8a:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800ad8e:	4669      	mov	r1, sp
 800ad90:	4607      	mov	r7, r0
 800ad92:	4628      	mov	r0, r5
 800ad94:	f001 feee 	bl	800cb74 <uxr_deserialize_BaseObjectReply>
 800ad98:	a902      	add	r1, sp, #8
 800ad9a:	4604      	mov	r4, r0
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800ada2:	f7fe fc9d 	bl	80096e0 <ucdr_deserialize_bool>
 800ada6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800adaa:	4004      	ands	r4, r0
 800adac:	b2e4      	uxtb	r4, r4
 800adae:	b95b      	cbnz	r3, 800adc8 <read_submessage_info+0x44>
 800adb0:	a987      	add	r1, sp, #540	; 0x21c
 800adb2:	4628      	mov	r0, r5
 800adb4:	f7fe fc94 	bl	80096e0 <ucdr_deserialize_bool>
 800adb8:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800adbc:	4606      	mov	r6, r0
 800adbe:	b94b      	cbnz	r3, 800add4 <read_submessage_info+0x50>
 800adc0:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800adc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adc8:	a903      	add	r1, sp, #12
 800adca:	4628      	mov	r0, r5
 800adcc:	f001 fd7a 	bl	800c8c4 <uxr_deserialize_ObjectVariant>
 800add0:	4004      	ands	r4, r0
 800add2:	e7ed      	b.n	800adb0 <read_submessage_info+0x2c>
 800add4:	a988      	add	r1, sp, #544	; 0x220
 800add6:	4628      	mov	r0, r5
 800add8:	f7fe fcb0 	bl	800973c <ucdr_deserialize_uint8_t>
 800addc:	4234      	tst	r4, r6
 800adde:	d0ef      	beq.n	800adc0 <read_submessage_info+0x3c>
 800ade0:	2800      	cmp	r0, #0
 800ade2:	d0ed      	beq.n	800adc0 <read_submessage_info+0x3c>
 800ade4:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800ade8:	2b0d      	cmp	r3, #13
 800adea:	d1e9      	bne.n	800adc0 <read_submessage_info+0x3c>
 800adec:	a98a      	add	r1, sp, #552	; 0x228
 800adee:	4628      	mov	r0, r5
 800adf0:	f7ff fa4a 	bl	800a288 <ucdr_deserialize_int16_t>
 800adf4:	b140      	cbz	r0, 800ae08 <read_submessage_info+0x84>
 800adf6:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	dd07      	ble.n	800ae0e <read_submessage_info+0x8a>
 800adfe:	f1b8 0f00 	cmp.w	r8, #0
 800ae02:	bf14      	ite	ne
 800ae04:	2001      	movne	r0, #1
 800ae06:	2002      	moveq	r0, #2
 800ae08:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 800ae0c:	e7d8      	b.n	800adc0 <read_submessage_info+0x3c>
 800ae0e:	2000      	movs	r0, #0
 800ae10:	e7fa      	b.n	800ae08 <read_submessage_info+0x84>
 800ae12:	bf00      	nop

0800ae14 <read_submessage_list>:
 800ae14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae18:	b097      	sub	sp, #92	; 0x5c
 800ae1a:	4ec1      	ldr	r6, [pc, #772]	; (800b120 <read_submessage_list+0x30c>)
 800ae1c:	9209      	str	r2, [sp, #36]	; 0x24
 800ae1e:	4604      	mov	r4, r0
 800ae20:	460d      	mov	r5, r1
 800ae22:	f04f 0801 	mov.w	r8, #1
 800ae26:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800ae2a:	aa0c      	add	r2, sp, #48	; 0x30
 800ae2c:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 800ae30:	4628      	mov	r0, r5
 800ae32:	f000 ffbd 	bl	800bdb0 <uxr_read_submessage_header>
 800ae36:	2800      	cmp	r0, #0
 800ae38:	f000 813e 	beq.w	800b0b8 <read_submessage_list+0x2a4>
 800ae3c:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800ae40:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800ae44:	3b02      	subs	r3, #2
 800ae46:	2b0d      	cmp	r3, #13
 800ae48:	d8ed      	bhi.n	800ae26 <read_submessage_list+0x12>
 800ae4a:	a101      	add	r1, pc, #4	; (adr r1, 800ae50 <read_submessage_list+0x3c>)
 800ae4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae50:	0800b0af 	.word	0x0800b0af
 800ae54:	0800ae27 	.word	0x0800ae27
 800ae58:	0800b09f 	.word	0x0800b09f
 800ae5c:	0800b03d 	.word	0x0800b03d
 800ae60:	0800b033 	.word	0x0800b033
 800ae64:	0800ae27 	.word	0x0800ae27
 800ae68:	0800ae27 	.word	0x0800ae27
 800ae6c:	0800af93 	.word	0x0800af93
 800ae70:	0800af23 	.word	0x0800af23
 800ae74:	0800aee3 	.word	0x0800aee3
 800ae78:	0800ae27 	.word	0x0800ae27
 800ae7c:	0800ae27 	.word	0x0800ae27
 800ae80:	0800ae27 	.word	0x0800ae27
 800ae84:	0800ae89 	.word	0x0800ae89
 800ae88:	a910      	add	r1, sp, #64	; 0x40
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	f002 f896 	bl	800cfbc <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800ae90:	f8d4 9090 	ldr.w	r9, [r4, #144]	; 0x90
 800ae94:	f1b9 0f00 	cmp.w	r9, #0
 800ae98:	f000 8116 	beq.w	800b0c8 <read_submessage_list+0x2b4>
 800ae9c:	f000 ffce 	bl	800be3c <uxr_nanos>
 800aea0:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800aea2:	4602      	mov	r2, r0
 800aea4:	460b      	mov	r3, r1
 800aea6:	9814      	ldr	r0, [sp, #80]	; 0x50
 800aea8:	2100      	movs	r1, #0
 800aeaa:	468c      	mov	ip, r1
 800aeac:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800aeb0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800aeb4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800aeb6:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800aeb8:	468c      	mov	ip, r1
 800aeba:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800aebe:	46e2      	mov	sl, ip
 800aec0:	46bc      	mov	ip, r7
 800aec2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	; 0x48
 800aec6:	fbc0 7106 	smlal	r7, r1, r0, r6
 800aeca:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800aece:	e9cd 7100 	strd	r7, r1, [sp]
 800aed2:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800aed6:	9106      	str	r1, [sp, #24]
 800aed8:	4620      	mov	r0, r4
 800aeda:	47c8      	blx	r9
 800aedc:	f884 80a0 	strb.w	r8, [r4, #160]	; 0xa0
 800aee0:	e7a1      	b.n	800ae26 <read_submessage_list+0x12>
 800aee2:	a910      	add	r1, sp, #64	; 0x40
 800aee4:	4628      	mov	r0, r5
 800aee6:	f002 f857 	bl	800cf98 <uxr_deserialize_HEARTBEAT_Payload>
 800aeea:	2100      	movs	r1, #0
 800aeec:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800aef0:	f000 fe36 	bl	800bb60 <uxr_stream_id_from_raw>
 800aef4:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800aef8:	900f      	str	r0, [sp, #60]	; 0x3c
 800aefa:	4639      	mov	r1, r7
 800aefc:	f104 0008 	add.w	r0, r4, #8
 800af00:	f000 ff1c 	bl	800bd3c <uxr_get_input_reliable_stream>
 800af04:	2800      	cmp	r0, #0
 800af06:	d08e      	beq.n	800ae26 <read_submessage_list+0x12>
 800af08:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800af0c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800af10:	f004 fd2c 	bl	800f96c <uxr_process_heartbeat>
 800af14:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800af18:	463a      	mov	r2, r7
 800af1a:	4620      	mov	r0, r4
 800af1c:	f7ff fdf6 	bl	800ab0c <write_submessage_acknack.isra.0>
 800af20:	e781      	b.n	800ae26 <read_submessage_list+0x12>
 800af22:	a910      	add	r1, sp, #64	; 0x40
 800af24:	4628      	mov	r0, r5
 800af26:	f002 f80f 	bl	800cf48 <uxr_deserialize_ACKNACK_Payload>
 800af2a:	2100      	movs	r1, #0
 800af2c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800af30:	f000 fe16 	bl	800bb60 <uxr_stream_id_from_raw>
 800af34:	900d      	str	r0, [sp, #52]	; 0x34
 800af36:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800af3a:	f104 0008 	add.w	r0, r4, #8
 800af3e:	f000 fee9 	bl	800bd14 <uxr_get_output_reliable_stream>
 800af42:	4607      	mov	r7, r0
 800af44:	2800      	cmp	r0, #0
 800af46:	f43f af6e 	beq.w	800ae26 <read_submessage_list+0x12>
 800af4a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800af4e:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 800af52:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800af56:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800af5a:	b289      	uxth	r1, r1
 800af5c:	f005 f860 	bl	8010020 <uxr_process_acknack>
 800af60:	4638      	mov	r0, r7
 800af62:	f005 f81d 	bl	800ffa0 <uxr_begin_output_nack_buffer_it>
 800af66:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800af6a:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 800af6e:	e006      	b.n	800af7e <read_submessage_list+0x16a>
 800af70:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800af72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af74:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800af78:	990e      	ldr	r1, [sp, #56]	; 0x38
 800af7a:	6818      	ldr	r0, [r3, #0]
 800af7c:	47c8      	blx	r9
 800af7e:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800af82:	aa0f      	add	r2, sp, #60	; 0x3c
 800af84:	4651      	mov	r1, sl
 800af86:	4638      	mov	r0, r7
 800af88:	f005 f80c 	bl	800ffa4 <uxr_next_reliable_nack_buffer_to_send>
 800af8c:	2800      	cmp	r0, #0
 800af8e:	d1ef      	bne.n	800af70 <read_submessage_list+0x15c>
 800af90:	e749      	b.n	800ae26 <read_submessage_list+0x12>
 800af92:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800af96:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800af9a:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800af9e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800afa2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 800afa6:	4651      	mov	r1, sl
 800afa8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800afac:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 800afb0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 800afb4:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800afb8:	4628      	mov	r0, r5
 800afba:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800afbe:	f001 fd23 	bl	800ca08 <uxr_deserialize_BaseObjectRequest>
 800afc2:	4650      	mov	r0, sl
 800afc4:	a90f      	add	r1, sp, #60	; 0x3c
 800afc6:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800afca:	f000 fd8d 	bl	800bae8 <uxr_parse_base_object_request>
 800afce:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 800afd2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800afd4:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 800afd8:	9110      	str	r1, [sp, #64]	; 0x40
 800afda:	3f04      	subs	r7, #4
 800afdc:	f009 090e 	and.w	r9, r9, #14
 800afe0:	b2bf      	uxth	r7, r7
 800afe2:	f1bb 0f00 	cmp.w	fp, #0
 800afe6:	d006      	beq.n	800aff6 <read_submessage_list+0x1e2>
 800afe8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800afec:	9300      	str	r3, [sp, #0]
 800afee:	4652      	mov	r2, sl
 800aff0:	2300      	movs	r3, #0
 800aff2:	4620      	mov	r0, r4
 800aff4:	47d8      	blx	fp
 800aff6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800aff8:	b16a      	cbz	r2, 800b016 <read_submessage_list+0x202>
 800affa:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800affc:	2100      	movs	r1, #0
 800affe:	3802      	subs	r0, #2
 800b000:	e002      	b.n	800b008 <read_submessage_list+0x1f4>
 800b002:	3101      	adds	r1, #1
 800b004:	4291      	cmp	r1, r2
 800b006:	d006      	beq.n	800b016 <read_submessage_list+0x202>
 800b008:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800b00c:	4553      	cmp	r3, sl
 800b00e:	d1f8      	bne.n	800b002 <read_submessage_list+0x1ee>
 800b010:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b012:	2200      	movs	r2, #0
 800b014:	545a      	strb	r2, [r3, r1]
 800b016:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800b01a:	9102      	str	r1, [sp, #8]
 800b01c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b01e:	9101      	str	r1, [sp, #4]
 800b020:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b022:	9100      	str	r1, [sp, #0]
 800b024:	464b      	mov	r3, r9
 800b026:	463a      	mov	r2, r7
 800b028:	4629      	mov	r1, r5
 800b02a:	4620      	mov	r0, r4
 800b02c:	f005 f87c 	bl	8010128 <read_submessage_format>
 800b030:	e6f9      	b.n	800ae26 <read_submessage_list+0x12>
 800b032:	4629      	mov	r1, r5
 800b034:	4620      	mov	r0, r4
 800b036:	f7ff fea5 	bl	800ad84 <read_submessage_info>
 800b03a:	e6f4      	b.n	800ae26 <read_submessage_list+0x12>
 800b03c:	2a00      	cmp	r2, #0
 800b03e:	d03e      	beq.n	800b0be <read_submessage_list+0x2aa>
 800b040:	a910      	add	r1, sp, #64	; 0x40
 800b042:	4628      	mov	r0, r5
 800b044:	f001 fedc 	bl	800ce00 <uxr_deserialize_STATUS_Payload>
 800b048:	a90e      	add	r1, sp, #56	; 0x38
 800b04a:	aa0d      	add	r2, sp, #52	; 0x34
 800b04c:	a810      	add	r0, sp, #64	; 0x40
 800b04e:	f000 fd4b 	bl	800bae8 <uxr_parse_base_object_request>
 800b052:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800b056:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b058:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 800b05c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 800b060:	910f      	str	r1, [sp, #60]	; 0x3c
 800b062:	f1ba 0f00 	cmp.w	sl, #0
 800b066:	d006      	beq.n	800b076 <read_submessage_list+0x262>
 800b068:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b06c:	9300      	str	r3, [sp, #0]
 800b06e:	463a      	mov	r2, r7
 800b070:	464b      	mov	r3, r9
 800b072:	4620      	mov	r0, r4
 800b074:	47d0      	blx	sl
 800b076:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800b078:	2a00      	cmp	r2, #0
 800b07a:	f43f aed4 	beq.w	800ae26 <read_submessage_list+0x12>
 800b07e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800b080:	2100      	movs	r1, #0
 800b082:	3802      	subs	r0, #2
 800b084:	e003      	b.n	800b08e <read_submessage_list+0x27a>
 800b086:	3101      	adds	r1, #1
 800b088:	4291      	cmp	r1, r2
 800b08a:	f43f aecc 	beq.w	800ae26 <read_submessage_list+0x12>
 800b08e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800b092:	42bb      	cmp	r3, r7
 800b094:	d1f7      	bne.n	800b086 <read_submessage_list+0x272>
 800b096:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b098:	f803 9001 	strb.w	r9, [r3, r1]
 800b09c:	e6c3      	b.n	800ae26 <read_submessage_list+0x12>
 800b09e:	2a00      	cmp	r2, #0
 800b0a0:	f47f aec1 	bne.w	800ae26 <read_submessage_list+0x12>
 800b0a4:	4629      	mov	r1, r5
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f000 fc64 	bl	800b974 <uxr_read_create_session_status>
 800b0ac:	e6bb      	b.n	800ae26 <read_submessage_list+0x12>
 800b0ae:	4629      	mov	r1, r5
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	f7ff fcf5 	bl	800aaa0 <read_submessage_get_info>
 800b0b6:	e6b6      	b.n	800ae26 <read_submessage_list+0x12>
 800b0b8:	b017      	add	sp, #92	; 0x5c
 800b0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0be:	4629      	mov	r1, r5
 800b0c0:	4620      	mov	r0, r4
 800b0c2:	f000 fc63 	bl	800b98c <uxr_read_delete_session_status>
 800b0c6:	e6ae      	b.n	800ae26 <read_submessage_list+0x12>
 800b0c8:	f000 feb8 	bl	800be3c <uxr_nanos>
 800b0cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b0ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b0d0:	464f      	mov	r7, r9
 800b0d2:	fbc3 2706 	smlal	r2, r7, r3, r6
 800b0d6:	1812      	adds	r2, r2, r0
 800b0d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b0da:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800b0dc:	eb47 0101 	adc.w	r1, r7, r1
 800b0e0:	464f      	mov	r7, r9
 800b0e2:	fbc3 0706 	smlal	r0, r7, r3, r6
 800b0e6:	463b      	mov	r3, r7
 800b0e8:	4684      	mov	ip, r0
 800b0ea:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 800b0ee:	fbc7 0906 	smlal	r0, r9, r7, r6
 800b0f2:	eb1c 0c00 	adds.w	ip, ip, r0
 800b0f6:	464f      	mov	r7, r9
 800b0f8:	eb43 0307 	adc.w	r3, r3, r7
 800b0fc:	ebb2 0c0c 	subs.w	ip, r2, ip
 800b100:	eb61 0303 	sbc.w	r3, r1, r3
 800b104:	0fda      	lsrs	r2, r3, #31
 800b106:	eb12 020c 	adds.w	r2, r2, ip
 800b10a:	f143 0300 	adc.w	r3, r3, #0
 800b10e:	0852      	lsrs	r2, r2, #1
 800b110:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800b114:	105b      	asrs	r3, r3, #1
 800b116:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 800b11a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 800b11e:	e6dd      	b.n	800aedc <read_submessage_list+0xc8>
 800b120:	3b9aca00 	.word	0x3b9aca00

0800b124 <listen_message_reliably>:
 800b124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b128:	1e0b      	subs	r3, r1, #0
 800b12a:	b09d      	sub	sp, #116	; 0x74
 800b12c:	bfb8      	it	lt
 800b12e:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800b132:	4680      	mov	r8, r0
 800b134:	9305      	str	r3, [sp, #20]
 800b136:	f000 fe67 	bl	800be08 <uxr_millis>
 800b13a:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 800b13e:	4681      	mov	r9, r0
 800b140:	2a00      	cmp	r2, #0
 800b142:	f000 80a1 	beq.w	800b288 <listen_message_reliably+0x164>
 800b146:	2600      	movs	r6, #0
 800b148:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b14c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800b150:	9303      	str	r3, [sp, #12]
 800b152:	4630      	mov	r0, r6
 800b154:	460f      	mov	r7, r1
 800b156:	e00f      	b.n	800b178 <listen_message_reliably+0x54>
 800b158:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b15c:	9903      	ldr	r1, [sp, #12]
 800b15e:	455a      	cmp	r2, fp
 800b160:	f106 0601 	add.w	r6, r6, #1
 800b164:	eb73 0101 	sbcs.w	r1, r3, r1
 800b168:	b2f0      	uxtb	r0, r6
 800b16a:	da01      	bge.n	800b170 <listen_message_reliably+0x4c>
 800b16c:	4693      	mov	fp, r2
 800b16e:	9303      	str	r3, [sp, #12]
 800b170:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800b174:	4283      	cmp	r3, r0
 800b176:	d960      	bls.n	800b23a <listen_message_reliably+0x116>
 800b178:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800b17c:	2102      	movs	r1, #2
 800b17e:	2201      	movs	r2, #1
 800b180:	f000 fcc4 	bl	800bb0c <uxr_stream_id>
 800b184:	00e4      	lsls	r4, r4, #3
 800b186:	f104 0520 	add.w	r5, r4, #32
 800b18a:	4445      	add	r5, r8
 800b18c:	4601      	mov	r1, r0
 800b18e:	463b      	mov	r3, r7
 800b190:	464a      	mov	r2, r9
 800b192:	4628      	mov	r0, r5
 800b194:	9109      	str	r1, [sp, #36]	; 0x24
 800b196:	f004 fed9 	bl	800ff4c <uxr_update_output_stream_heartbeat_timestamp>
 800b19a:	eb08 0304 	add.w	r3, r8, r4
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	d0da      	beq.n	800b158 <listen_message_reliably+0x34>
 800b1a2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b1a6:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800b1aa:	9304      	str	r3, [sp, #16]
 800b1ac:	4640      	mov	r0, r8
 800b1ae:	f000 fc75 	bl	800ba9c <uxr_session_header_offset>
 800b1b2:	3501      	adds	r5, #1
 800b1b4:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800b1b8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800b1bc:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	2211      	movs	r2, #17
 800b1c4:	9000      	str	r0, [sp, #0]
 800b1c6:	a90c      	add	r1, sp, #48	; 0x30
 800b1c8:	4650      	mov	r0, sl
 800b1ca:	f7ff fa3b 	bl	800a644 <ucdr_init_buffer_origin_offset>
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	2205      	movs	r2, #5
 800b1d2:	210b      	movs	r1, #11
 800b1d4:	4650      	mov	r0, sl
 800b1d6:	f000 fdd1 	bl	800bd7c <uxr_buffer_submessage_header>
 800b1da:	8968      	ldrh	r0, [r5, #10]
 800b1dc:	2101      	movs	r1, #1
 800b1de:	f005 f86d 	bl	80102bc <uxr_seq_num_add>
 800b1e2:	892b      	ldrh	r3, [r5, #8]
 800b1e4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	9b04      	ldr	r3, [sp, #16]
 800b1ec:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800b1f0:	a90a      	add	r1, sp, #40	; 0x28
 800b1f2:	4650      	mov	r0, sl
 800b1f4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800b1f8:	f001 feba 	bl	800cf70 <uxr_serialize_HEARTBEAT_Payload>
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	4611      	mov	r1, r2
 800b200:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b202:	4640      	mov	r0, r8
 800b204:	f000 fbf4 	bl	800b9f0 <uxr_stamp_session_header>
 800b208:	4650      	mov	r0, sl
 800b20a:	f7ff fa59 	bl	800a6c0 <ucdr_buffer_length>
 800b20e:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800b212:	4602      	mov	r2, r0
 800b214:	a90c      	add	r1, sp, #48	; 0x30
 800b216:	e9d3 0500 	ldrd	r0, r5, [r3]
 800b21a:	4444      	add	r4, r8
 800b21c:	47a8      	blx	r5
 800b21e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800b222:	9903      	ldr	r1, [sp, #12]
 800b224:	455a      	cmp	r2, fp
 800b226:	f106 0601 	add.w	r6, r6, #1
 800b22a:	eb73 0101 	sbcs.w	r1, r3, r1
 800b22e:	b2f0      	uxtb	r0, r6
 800b230:	db9c      	blt.n	800b16c <listen_message_reliably+0x48>
 800b232:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800b236:	4283      	cmp	r3, r0
 800b238:	d89e      	bhi.n	800b178 <listen_message_reliably+0x54>
 800b23a:	9a03      	ldr	r2, [sp, #12]
 800b23c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b240:	429a      	cmp	r2, r3
 800b242:	bf08      	it	eq
 800b244:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 800b248:	d01e      	beq.n	800b288 <listen_message_reliably+0x164>
 800b24a:	ebab 0309 	sub.w	r3, fp, r9
 800b24e:	9905      	ldr	r1, [sp, #20]
 800b250:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
 800b254:	2b00      	cmp	r3, #0
 800b256:	bf08      	it	eq
 800b258:	2301      	moveq	r3, #1
 800b25a:	4299      	cmp	r1, r3
 800b25c:	bfa8      	it	ge
 800b25e:	4619      	movge	r1, r3
 800b260:	6894      	ldr	r4, [r2, #8]
 800b262:	6810      	ldr	r0, [r2, #0]
 800b264:	4689      	mov	r9, r1
 800b266:	460b      	mov	r3, r1
 800b268:	aa08      	add	r2, sp, #32
 800b26a:	a907      	add	r1, sp, #28
 800b26c:	47a0      	blx	r4
 800b26e:	b968      	cbnz	r0, 800b28c <listen_message_reliably+0x168>
 800b270:	9b05      	ldr	r3, [sp, #20]
 800b272:	eba3 0309 	sub.w	r3, r3, r9
 800b276:	2b00      	cmp	r3, #0
 800b278:	9305      	str	r3, [sp, #20]
 800b27a:	f73f af5c 	bgt.w	800b136 <listen_message_reliably+0x12>
 800b27e:	4604      	mov	r4, r0
 800b280:	4620      	mov	r0, r4
 800b282:	b01d      	add	sp, #116	; 0x74
 800b284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b288:	9b05      	ldr	r3, [sp, #20]
 800b28a:	e7e0      	b.n	800b24e <listen_message_reliably+0x12a>
 800b28c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800b290:	4604      	mov	r4, r0
 800b292:	a80c      	add	r0, sp, #48	; 0x30
 800b294:	f7ff f9e8 	bl	800a668 <ucdr_init_buffer>
 800b298:	2500      	movs	r5, #0
 800b29a:	f10d 031a 	add.w	r3, sp, #26
 800b29e:	aa06      	add	r2, sp, #24
 800b2a0:	a90c      	add	r1, sp, #48	; 0x30
 800b2a2:	4640      	mov	r0, r8
 800b2a4:	f88d 5018 	strb.w	r5, [sp, #24]
 800b2a8:	f000 fbb6 	bl	800ba18 <uxr_read_session_header>
 800b2ac:	b918      	cbnz	r0, 800b2b6 <listen_message_reliably+0x192>
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	b01d      	add	sp, #116	; 0x74
 800b2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2b6:	4629      	mov	r1, r5
 800b2b8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800b2bc:	f000 fc50 	bl	800bb60 <uxr_stream_id_from_raw>
 800b2c0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800b2c4:	2d01      	cmp	r5, #1
 800b2c6:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800b2ca:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800b2ce:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800b2d2:	d04b      	beq.n	800b36c <listen_message_reliably+0x248>
 800b2d4:	2d02      	cmp	r5, #2
 800b2d6:	d00f      	beq.n	800b2f8 <listen_message_reliably+0x1d4>
 800b2d8:	2d00      	cmp	r5, #0
 800b2da:	d1e8      	bne.n	800b2ae <listen_message_reliably+0x18a>
 800b2dc:	4629      	mov	r1, r5
 800b2de:	4628      	mov	r0, r5
 800b2e0:	f000 fc3e 	bl	800bb60 <uxr_stream_id_from_raw>
 800b2e4:	a90c      	add	r1, sp, #48	; 0x30
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	4640      	mov	r0, r8
 800b2ea:	920a      	str	r2, [sp, #40]	; 0x28
 800b2ec:	f7ff fd92 	bl	800ae14 <read_submessage_list>
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	b01d      	add	sp, #116	; 0x74
 800b2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2f8:	4631      	mov	r1, r6
 800b2fa:	f108 0008 	add.w	r0, r8, #8
 800b2fe:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800b302:	f000 fd1b 	bl	800bd3c <uxr_get_input_reliable_stream>
 800b306:	4607      	mov	r7, r0
 800b308:	b338      	cbz	r0, 800b35a <listen_message_reliably+0x236>
 800b30a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b30c:	9203      	str	r2, [sp, #12]
 800b30e:	a80c      	add	r0, sp, #48	; 0x30
 800b310:	f7ff f9da 	bl	800a6c8 <ucdr_buffer_remaining>
 800b314:	4603      	mov	r3, r0
 800b316:	f10d 0019 	add.w	r0, sp, #25
 800b31a:	9000      	str	r0, [sp, #0]
 800b31c:	9a03      	ldr	r2, [sp, #12]
 800b31e:	4651      	mov	r1, sl
 800b320:	4638      	mov	r0, r7
 800b322:	f004 fa29 	bl	800f778 <uxr_receive_reliable_message>
 800b326:	b1c0      	cbz	r0, 800b35a <listen_message_reliably+0x236>
 800b328:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800b32c:	b393      	cbz	r3, 800b394 <listen_message_reliably+0x270>
 800b32e:	ad14      	add	r5, sp, #80	; 0x50
 800b330:	f04f 0a02 	mov.w	sl, #2
 800b334:	e00a      	b.n	800b34c <listen_message_reliably+0x228>
 800b336:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 800b33a:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 800b33e:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 800b342:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b344:	4629      	mov	r1, r5
 800b346:	4640      	mov	r0, r8
 800b348:	f7ff fd64 	bl	800ae14 <read_submessage_list>
 800b34c:	2204      	movs	r2, #4
 800b34e:	4629      	mov	r1, r5
 800b350:	4638      	mov	r0, r7
 800b352:	f004 fa91 	bl	800f878 <uxr_next_input_reliable_buffer_available>
 800b356:	2800      	cmp	r0, #0
 800b358:	d1ed      	bne.n	800b336 <listen_message_reliably+0x212>
 800b35a:	4640      	mov	r0, r8
 800b35c:	4632      	mov	r2, r6
 800b35e:	4649      	mov	r1, r9
 800b360:	f7ff fbd4 	bl	800ab0c <write_submessage_acknack.isra.0>
 800b364:	4620      	mov	r0, r4
 800b366:	b01d      	add	sp, #116	; 0x74
 800b368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b36c:	4631      	mov	r1, r6
 800b36e:	f108 0008 	add.w	r0, r8, #8
 800b372:	f000 fcd9 	bl	800bd28 <uxr_get_input_best_effort_stream>
 800b376:	2800      	cmp	r0, #0
 800b378:	d099      	beq.n	800b2ae <listen_message_reliably+0x18a>
 800b37a:	4651      	mov	r1, sl
 800b37c:	f004 f968 	bl	800f650 <uxr_receive_best_effort_message>
 800b380:	2800      	cmp	r0, #0
 800b382:	d094      	beq.n	800b2ae <listen_message_reliably+0x18a>
 800b384:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800b388:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b38a:	a90c      	add	r1, sp, #48	; 0x30
 800b38c:	4640      	mov	r0, r8
 800b38e:	f7ff fd41 	bl	800ae14 <read_submessage_list>
 800b392:	e78c      	b.n	800b2ae <listen_message_reliably+0x18a>
 800b394:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800b398:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b39a:	a90c      	add	r1, sp, #48	; 0x30
 800b39c:	4640      	mov	r0, r8
 800b39e:	f7ff fd39 	bl	800ae14 <read_submessage_list>
 800b3a2:	e7c4      	b.n	800b32e <listen_message_reliably+0x20a>

0800b3a4 <uxr_run_session_until_confirm_delivery>:
 800b3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3a8:	4606      	mov	r6, r0
 800b3aa:	460d      	mov	r5, r1
 800b3ac:	f000 fd2c 	bl	800be08 <uxr_millis>
 800b3b0:	4607      	mov	r7, r0
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	f7ff fc70 	bl	800ac98 <uxr_flash_output_streams>
 800b3b8:	2d00      	cmp	r5, #0
 800b3ba:	f106 0808 	add.w	r8, r6, #8
 800b3be:	bfa8      	it	ge
 800b3c0:	462c      	movge	r4, r5
 800b3c2:	da07      	bge.n	800b3d4 <uxr_run_session_until_confirm_delivery+0x30>
 800b3c4:	e00e      	b.n	800b3e4 <uxr_run_session_until_confirm_delivery+0x40>
 800b3c6:	f7ff fead 	bl	800b124 <listen_message_reliably>
 800b3ca:	f000 fd1d 	bl	800be08 <uxr_millis>
 800b3ce:	1bc3      	subs	r3, r0, r7
 800b3d0:	1aec      	subs	r4, r5, r3
 800b3d2:	d407      	bmi.n	800b3e4 <uxr_run_session_until_confirm_delivery+0x40>
 800b3d4:	4640      	mov	r0, r8
 800b3d6:	f000 fcbb 	bl	800bd50 <uxr_output_streams_confirmed>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	4621      	mov	r1, r4
 800b3de:	4630      	mov	r0, r6
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d0f0      	beq.n	800b3c6 <uxr_run_session_until_confirm_delivery+0x22>
 800b3e4:	4640      	mov	r0, r8
 800b3e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ea:	f000 bcb1 	b.w	800bd50 <uxr_output_streams_confirmed>
 800b3ee:	bf00      	nop

0800b3f0 <uxr_run_session_until_all_status>:
 800b3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3f4:	9c08      	ldr	r4, [sp, #32]
 800b3f6:	4606      	mov	r6, r0
 800b3f8:	460f      	mov	r7, r1
 800b3fa:	4691      	mov	r9, r2
 800b3fc:	461d      	mov	r5, r3
 800b3fe:	f7ff fc4b 	bl	800ac98 <uxr_flash_output_streams>
 800b402:	b124      	cbz	r4, 800b40e <uxr_run_session_until_all_status+0x1e>
 800b404:	4622      	mov	r2, r4
 800b406:	21ff      	movs	r1, #255	; 0xff
 800b408:	4628      	mov	r0, r5
 800b40a:	f006 fc39 	bl	8011c80 <memset>
 800b40e:	e9c6 951d 	strd	r9, r5, [r6, #116]	; 0x74
 800b412:	67f4      	str	r4, [r6, #124]	; 0x7c
 800b414:	f000 fcf8 	bl	800be08 <uxr_millis>
 800b418:	3d01      	subs	r5, #1
 800b41a:	f1a9 0902 	sub.w	r9, r9, #2
 800b41e:	4680      	mov	r8, r0
 800b420:	4639      	mov	r1, r7
 800b422:	4630      	mov	r0, r6
 800b424:	f7ff fe7e 	bl	800b124 <listen_message_reliably>
 800b428:	f000 fcee 	bl	800be08 <uxr_millis>
 800b42c:	eba0 0008 	sub.w	r0, r0, r8
 800b430:	1a39      	subs	r1, r7, r0
 800b432:	b344      	cbz	r4, 800b486 <uxr_run_session_until_all_status+0x96>
 800b434:	4628      	mov	r0, r5
 800b436:	46ac      	mov	ip, r5
 800b438:	2301      	movs	r3, #1
 800b43a:	e002      	b.n	800b442 <uxr_run_session_until_all_status+0x52>
 800b43c:	42a3      	cmp	r3, r4
 800b43e:	d20d      	bcs.n	800b45c <uxr_run_session_until_all_status+0x6c>
 800b440:	3301      	adds	r3, #1
 800b442:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800b446:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800b44a:	d1f7      	bne.n	800b43c <uxr_run_session_until_all_status+0x4c>
 800b44c:	42a3      	cmp	r3, r4
 800b44e:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800b452:	d213      	bcs.n	800b47c <uxr_run_session_until_all_status+0x8c>
 800b454:	2a00      	cmp	r2, #0
 800b456:	d0f3      	beq.n	800b440 <uxr_run_session_until_all_status+0x50>
 800b458:	2900      	cmp	r1, #0
 800b45a:	dce2      	bgt.n	800b422 <uxr_run_session_until_all_status+0x32>
 800b45c:	2300      	movs	r3, #0
 800b45e:	67f3      	str	r3, [r6, #124]	; 0x7c
 800b460:	442c      	add	r4, r5
 800b462:	e001      	b.n	800b468 <uxr_run_session_until_all_status+0x78>
 800b464:	2b01      	cmp	r3, #1
 800b466:	d812      	bhi.n	800b48e <uxr_run_session_until_all_status+0x9e>
 800b468:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b46c:	4284      	cmp	r4, r0
 800b46e:	d1f9      	bne.n	800b464 <uxr_run_session_until_all_status+0x74>
 800b470:	2b01      	cmp	r3, #1
 800b472:	bf8c      	ite	hi
 800b474:	2000      	movhi	r0, #0
 800b476:	2001      	movls	r0, #1
 800b478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b47c:	2900      	cmp	r1, #0
 800b47e:	dded      	ble.n	800b45c <uxr_run_session_until_all_status+0x6c>
 800b480:	2a00      	cmp	r2, #0
 800b482:	d1ce      	bne.n	800b422 <uxr_run_session_until_all_status+0x32>
 800b484:	e7ea      	b.n	800b45c <uxr_run_session_until_all_status+0x6c>
 800b486:	67f4      	str	r4, [r6, #124]	; 0x7c
 800b488:	2001      	movs	r0, #1
 800b48a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b48e:	2000      	movs	r0, #0
 800b490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b494 <wait_session_status>:
 800b494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b498:	4604      	mov	r4, r0
 800b49a:	b09d      	sub	sp, #116	; 0x74
 800b49c:	20ff      	movs	r0, #255	; 0xff
 800b49e:	7160      	strb	r0, [r4, #5]
 800b4a0:	9303      	str	r3, [sp, #12]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	f000 80b6 	beq.w	800b614 <wait_session_status+0x180>
 800b4a8:	468a      	mov	sl, r1
 800b4aa:	4691      	mov	r9, r2
 800b4ac:	f04f 0b00 	mov.w	fp, #0
 800b4b0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b4b2:	464a      	mov	r2, r9
 800b4b4:	e9d3 0500 	ldrd	r0, r5, [r3]
 800b4b8:	4651      	mov	r1, sl
 800b4ba:	47a8      	blx	r5
 800b4bc:	f000 fca4 	bl	800be08 <uxr_millis>
 800b4c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b4c4:	4605      	mov	r5, r0
 800b4c6:	e009      	b.n	800b4dc <wait_session_status+0x48>
 800b4c8:	f000 fc9e 	bl	800be08 <uxr_millis>
 800b4cc:	1b40      	subs	r0, r0, r5
 800b4ce:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	dd40      	ble.n	800b558 <wait_session_status+0xc4>
 800b4d6:	7960      	ldrb	r0, [r4, #5]
 800b4d8:	28ff      	cmp	r0, #255	; 0xff
 800b4da:	d145      	bne.n	800b568 <wait_session_status+0xd4>
 800b4dc:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800b4de:	a908      	add	r1, sp, #32
 800b4e0:	6896      	ldr	r6, [r2, #8]
 800b4e2:	6810      	ldr	r0, [r2, #0]
 800b4e4:	aa09      	add	r2, sp, #36	; 0x24
 800b4e6:	47b0      	blx	r6
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d0ed      	beq.n	800b4c8 <wait_session_status+0x34>
 800b4ec:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800b4f0:	a80c      	add	r0, sp, #48	; 0x30
 800b4f2:	f7ff f8b9 	bl	800a668 <ucdr_init_buffer>
 800b4f6:	2600      	movs	r6, #0
 800b4f8:	f10d 031e 	add.w	r3, sp, #30
 800b4fc:	aa07      	add	r2, sp, #28
 800b4fe:	a90c      	add	r1, sp, #48	; 0x30
 800b500:	4620      	mov	r0, r4
 800b502:	f88d 601c 	strb.w	r6, [sp, #28]
 800b506:	f000 fa87 	bl	800ba18 <uxr_read_session_header>
 800b50a:	2800      	cmp	r0, #0
 800b50c:	d0dc      	beq.n	800b4c8 <wait_session_status+0x34>
 800b50e:	4631      	mov	r1, r6
 800b510:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800b514:	f000 fb24 	bl	800bb60 <uxr_stream_id_from_raw>
 800b518:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800b51c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800b520:	9302      	str	r3, [sp, #8]
 800b522:	2f01      	cmp	r7, #1
 800b524:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800b528:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800b52c:	d05c      	beq.n	800b5e8 <wait_session_status+0x154>
 800b52e:	2f02      	cmp	r7, #2
 800b530:	d020      	beq.n	800b574 <wait_session_status+0xe0>
 800b532:	2f00      	cmp	r7, #0
 800b534:	d1c8      	bne.n	800b4c8 <wait_session_status+0x34>
 800b536:	4639      	mov	r1, r7
 800b538:	4638      	mov	r0, r7
 800b53a:	f000 fb11 	bl	800bb60 <uxr_stream_id_from_raw>
 800b53e:	a90c      	add	r1, sp, #48	; 0x30
 800b540:	4602      	mov	r2, r0
 800b542:	900b      	str	r0, [sp, #44]	; 0x2c
 800b544:	4620      	mov	r0, r4
 800b546:	f7ff fc65 	bl	800ae14 <read_submessage_list>
 800b54a:	f000 fc5d 	bl	800be08 <uxr_millis>
 800b54e:	1b40      	subs	r0, r0, r5
 800b550:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800b554:	2b00      	cmp	r3, #0
 800b556:	dcbe      	bgt.n	800b4d6 <wait_session_status+0x42>
 800b558:	9b03      	ldr	r3, [sp, #12]
 800b55a:	7960      	ldrb	r0, [r4, #5]
 800b55c:	f10b 0b01 	add.w	fp, fp, #1
 800b560:	455b      	cmp	r3, fp
 800b562:	d001      	beq.n	800b568 <wait_session_status+0xd4>
 800b564:	28ff      	cmp	r0, #255	; 0xff
 800b566:	d0a3      	beq.n	800b4b0 <wait_session_status+0x1c>
 800b568:	38ff      	subs	r0, #255	; 0xff
 800b56a:	bf18      	it	ne
 800b56c:	2001      	movne	r0, #1
 800b56e:	b01d      	add	sp, #116	; 0x74
 800b570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b574:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800b578:	9304      	str	r3, [sp, #16]
 800b57a:	4631      	mov	r1, r6
 800b57c:	f104 0008 	add.w	r0, r4, #8
 800b580:	f000 fbdc 	bl	800bd3c <uxr_get_input_reliable_stream>
 800b584:	4680      	mov	r8, r0
 800b586:	b348      	cbz	r0, 800b5dc <wait_session_status+0x148>
 800b588:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b58a:	9205      	str	r2, [sp, #20]
 800b58c:	a80c      	add	r0, sp, #48	; 0x30
 800b58e:	f7ff f89b 	bl	800a6c8 <ucdr_buffer_remaining>
 800b592:	4603      	mov	r3, r0
 800b594:	f10d 001d 	add.w	r0, sp, #29
 800b598:	9000      	str	r0, [sp, #0]
 800b59a:	9a05      	ldr	r2, [sp, #20]
 800b59c:	9902      	ldr	r1, [sp, #8]
 800b59e:	4640      	mov	r0, r8
 800b5a0:	f004 f8ea 	bl	800f778 <uxr_receive_reliable_message>
 800b5a4:	b1d0      	cbz	r0, 800b5dc <wait_session_status+0x148>
 800b5a6:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d03a      	beq.n	800b624 <wait_session_status+0x190>
 800b5ae:	9f04      	ldr	r7, [sp, #16]
 800b5b0:	e00a      	b.n	800b5c8 <wait_session_status+0x134>
 800b5b2:	f04f 0302 	mov.w	r3, #2
 800b5b6:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 800b5ba:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800b5be:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800b5c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b5c4:	f7ff fc26 	bl	800ae14 <read_submessage_list>
 800b5c8:	a914      	add	r1, sp, #80	; 0x50
 800b5ca:	2204      	movs	r2, #4
 800b5cc:	4640      	mov	r0, r8
 800b5ce:	f004 f953 	bl	800f878 <uxr_next_input_reliable_buffer_available>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	a914      	add	r1, sp, #80	; 0x50
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d1ea      	bne.n	800b5b2 <wait_session_status+0x11e>
 800b5dc:	9904      	ldr	r1, [sp, #16]
 800b5de:	4632      	mov	r2, r6
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	f7ff fa93 	bl	800ab0c <write_submessage_acknack.isra.0>
 800b5e6:	e76f      	b.n	800b4c8 <wait_session_status+0x34>
 800b5e8:	4631      	mov	r1, r6
 800b5ea:	f104 0008 	add.w	r0, r4, #8
 800b5ee:	f000 fb9b 	bl	800bd28 <uxr_get_input_best_effort_stream>
 800b5f2:	2800      	cmp	r0, #0
 800b5f4:	f43f af68 	beq.w	800b4c8 <wait_session_status+0x34>
 800b5f8:	9902      	ldr	r1, [sp, #8]
 800b5fa:	f004 f829 	bl	800f650 <uxr_receive_best_effort_message>
 800b5fe:	2800      	cmp	r0, #0
 800b600:	f43f af62 	beq.w	800b4c8 <wait_session_status+0x34>
 800b604:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800b608:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b60a:	a90c      	add	r1, sp, #48	; 0x30
 800b60c:	4620      	mov	r0, r4
 800b60e:	f7ff fc01 	bl	800ae14 <read_submessage_list>
 800b612:	e759      	b.n	800b4c8 <wait_session_status+0x34>
 800b614:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b616:	e9d3 0400 	ldrd	r0, r4, [r3]
 800b61a:	47a0      	blx	r4
 800b61c:	2001      	movs	r0, #1
 800b61e:	b01d      	add	sp, #116	; 0x74
 800b620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b624:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800b628:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b62a:	a90c      	add	r1, sp, #48	; 0x30
 800b62c:	4620      	mov	r0, r4
 800b62e:	f7ff fbf1 	bl	800ae14 <read_submessage_list>
 800b632:	e7bc      	b.n	800b5ae <wait_session_status+0x11a>

0800b634 <uxr_delete_session_retries>:
 800b634:	b530      	push	{r4, r5, lr}
 800b636:	b08f      	sub	sp, #60	; 0x3c
 800b638:	4604      	mov	r4, r0
 800b63a:	460d      	mov	r5, r1
 800b63c:	f000 fa2e 	bl	800ba9c <uxr_session_header_offset>
 800b640:	2300      	movs	r3, #0
 800b642:	2210      	movs	r2, #16
 800b644:	9000      	str	r0, [sp, #0]
 800b646:	a902      	add	r1, sp, #8
 800b648:	a806      	add	r0, sp, #24
 800b64a:	f7fe fffb 	bl	800a644 <ucdr_init_buffer_origin_offset>
 800b64e:	a906      	add	r1, sp, #24
 800b650:	4620      	mov	r0, r4
 800b652:	f000 f973 	bl	800b93c <uxr_buffer_delete_session>
 800b656:	2200      	movs	r2, #0
 800b658:	4611      	mov	r1, r2
 800b65a:	9b06      	ldr	r3, [sp, #24]
 800b65c:	4620      	mov	r0, r4
 800b65e:	f000 f9c7 	bl	800b9f0 <uxr_stamp_session_header>
 800b662:	a806      	add	r0, sp, #24
 800b664:	f7ff f82c 	bl	800a6c0 <ucdr_buffer_length>
 800b668:	462b      	mov	r3, r5
 800b66a:	4602      	mov	r2, r0
 800b66c:	a902      	add	r1, sp, #8
 800b66e:	4620      	mov	r0, r4
 800b670:	f7ff ff10 	bl	800b494 <wait_session_status>
 800b674:	b118      	cbz	r0, 800b67e <uxr_delete_session_retries+0x4a>
 800b676:	7960      	ldrb	r0, [r4, #5]
 800b678:	fab0 f080 	clz	r0, r0
 800b67c:	0940      	lsrs	r0, r0, #5
 800b67e:	b00f      	add	sp, #60	; 0x3c
 800b680:	bd30      	pop	{r4, r5, pc}
 800b682:	bf00      	nop

0800b684 <uxr_create_session>:
 800b684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b688:	f100 0b08 	add.w	fp, r0, #8
 800b68c:	b0ab      	sub	sp, #172	; 0xac
 800b68e:	4604      	mov	r4, r0
 800b690:	4658      	mov	r0, fp
 800b692:	f000 fa99 	bl	800bbc8 <uxr_reset_stream_storage>
 800b696:	4620      	mov	r0, r4
 800b698:	f000 fa00 	bl	800ba9c <uxr_session_header_offset>
 800b69c:	2300      	movs	r3, #0
 800b69e:	9000      	str	r0, [sp, #0]
 800b6a0:	221c      	movs	r2, #28
 800b6a2:	a90b      	add	r1, sp, #44	; 0x2c
 800b6a4:	a812      	add	r0, sp, #72	; 0x48
 800b6a6:	f7fe ffcd 	bl	800a644 <ucdr_init_buffer_origin_offset>
 800b6aa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b6ac:	8a1a      	ldrh	r2, [r3, #16]
 800b6ae:	3a04      	subs	r2, #4
 800b6b0:	b292      	uxth	r2, r2
 800b6b2:	a912      	add	r1, sp, #72	; 0x48
 800b6b4:	4620      	mov	r0, r4
 800b6b6:	f000 f917 	bl	800b8e8 <uxr_buffer_create_session>
 800b6ba:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b6bc:	4620      	mov	r0, r4
 800b6be:	f000 f983 	bl	800b9c8 <uxr_stamp_create_session_header>
 800b6c2:	a812      	add	r0, sp, #72	; 0x48
 800b6c4:	f7fe fffc 	bl	800a6c0 <ucdr_buffer_length>
 800b6c8:	23ff      	movs	r3, #255	; 0xff
 800b6ca:	7163      	strb	r3, [r4, #5]
 800b6cc:	230a      	movs	r3, #10
 800b6ce:	46da      	mov	sl, fp
 800b6d0:	9303      	str	r3, [sp, #12]
 800b6d2:	4683      	mov	fp, r0
 800b6d4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b6d6:	465a      	mov	r2, fp
 800b6d8:	e9d3 0500 	ldrd	r0, r5, [r3]
 800b6dc:	a90b      	add	r1, sp, #44	; 0x2c
 800b6de:	47a8      	blx	r5
 800b6e0:	f000 fb92 	bl	800be08 <uxr_millis>
 800b6e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b6e8:	4605      	mov	r5, r0
 800b6ea:	e009      	b.n	800b700 <uxr_create_session+0x7c>
 800b6ec:	f000 fb8c 	bl	800be08 <uxr_millis>
 800b6f0:	1b40      	subs	r0, r0, r5
 800b6f2:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	7962      	ldrb	r2, [r4, #5]
 800b6fa:	dd38      	ble.n	800b76e <uxr_create_session+0xea>
 800b6fc:	2aff      	cmp	r2, #255	; 0xff
 800b6fe:	d13c      	bne.n	800b77a <uxr_create_session+0xf6>
 800b700:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800b702:	a907      	add	r1, sp, #28
 800b704:	6896      	ldr	r6, [r2, #8]
 800b706:	6810      	ldr	r0, [r2, #0]
 800b708:	aa08      	add	r2, sp, #32
 800b70a:	47b0      	blx	r6
 800b70c:	2800      	cmp	r0, #0
 800b70e:	d0ed      	beq.n	800b6ec <uxr_create_session+0x68>
 800b710:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800b714:	a81a      	add	r0, sp, #104	; 0x68
 800b716:	f7fe ffa7 	bl	800a668 <ucdr_init_buffer>
 800b71a:	2600      	movs	r6, #0
 800b71c:	f10d 031a 	add.w	r3, sp, #26
 800b720:	aa06      	add	r2, sp, #24
 800b722:	a91a      	add	r1, sp, #104	; 0x68
 800b724:	4620      	mov	r0, r4
 800b726:	f88d 6018 	strb.w	r6, [sp, #24]
 800b72a:	f000 f975 	bl	800ba18 <uxr_read_session_header>
 800b72e:	2800      	cmp	r0, #0
 800b730:	d0dc      	beq.n	800b6ec <uxr_create_session+0x68>
 800b732:	4631      	mov	r1, r6
 800b734:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800b738:	f000 fa12 	bl	800bb60 <uxr_stream_id_from_raw>
 800b73c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800b740:	2e01      	cmp	r6, #1
 800b742:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800b746:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800b74a:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800b74e:	d053      	beq.n	800b7f8 <uxr_create_session+0x174>
 800b750:	2e02      	cmp	r6, #2
 800b752:	d018      	beq.n	800b786 <uxr_create_session+0x102>
 800b754:	2e00      	cmp	r6, #0
 800b756:	d1c9      	bne.n	800b6ec <uxr_create_session+0x68>
 800b758:	4631      	mov	r1, r6
 800b75a:	4630      	mov	r0, r6
 800b75c:	f000 fa00 	bl	800bb60 <uxr_stream_id_from_raw>
 800b760:	a91a      	add	r1, sp, #104	; 0x68
 800b762:	4602      	mov	r2, r0
 800b764:	900a      	str	r0, [sp, #40]	; 0x28
 800b766:	4620      	mov	r0, r4
 800b768:	f7ff fb54 	bl	800ae14 <read_submessage_list>
 800b76c:	e7be      	b.n	800b6ec <uxr_create_session+0x68>
 800b76e:	9b03      	ldr	r3, [sp, #12]
 800b770:	3b01      	subs	r3, #1
 800b772:	9303      	str	r3, [sp, #12]
 800b774:	d001      	beq.n	800b77a <uxr_create_session+0xf6>
 800b776:	2aff      	cmp	r2, #255	; 0xff
 800b778:	d0ac      	beq.n	800b6d4 <uxr_create_session+0x50>
 800b77a:	2a00      	cmp	r2, #0
 800b77c:	d051      	beq.n	800b822 <uxr_create_session+0x19e>
 800b77e:	2000      	movs	r0, #0
 800b780:	b02b      	add	sp, #172	; 0xac
 800b782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b786:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b78a:	9304      	str	r3, [sp, #16]
 800b78c:	4639      	mov	r1, r7
 800b78e:	4650      	mov	r0, sl
 800b790:	f000 fad4 	bl	800bd3c <uxr_get_input_reliable_stream>
 800b794:	4680      	mov	r8, r0
 800b796:	b348      	cbz	r0, 800b7ec <uxr_create_session+0x168>
 800b798:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b79a:	9205      	str	r2, [sp, #20]
 800b79c:	a81a      	add	r0, sp, #104	; 0x68
 800b79e:	f7fe ff93 	bl	800a6c8 <ucdr_buffer_remaining>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	f10d 0019 	add.w	r0, sp, #25
 800b7a8:	9000      	str	r0, [sp, #0]
 800b7aa:	9a05      	ldr	r2, [sp, #20]
 800b7ac:	4649      	mov	r1, r9
 800b7ae:	4640      	mov	r0, r8
 800b7b0:	f003 ffe2 	bl	800f778 <uxr_receive_reliable_message>
 800b7b4:	b1d0      	cbz	r0, 800b7ec <uxr_create_session+0x168>
 800b7b6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d038      	beq.n	800b830 <uxr_create_session+0x1ac>
 800b7be:	9e04      	ldr	r6, [sp, #16]
 800b7c0:	e00a      	b.n	800b7d8 <uxr_create_session+0x154>
 800b7c2:	f04f 0302 	mov.w	r3, #2
 800b7c6:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 800b7ca:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 800b7ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7d4:	f7ff fb1e 	bl	800ae14 <read_submessage_list>
 800b7d8:	a922      	add	r1, sp, #136	; 0x88
 800b7da:	2204      	movs	r2, #4
 800b7dc:	4640      	mov	r0, r8
 800b7de:	f004 f84b 	bl	800f878 <uxr_next_input_reliable_buffer_available>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	a922      	add	r1, sp, #136	; 0x88
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d1ea      	bne.n	800b7c2 <uxr_create_session+0x13e>
 800b7ec:	9904      	ldr	r1, [sp, #16]
 800b7ee:	463a      	mov	r2, r7
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f7ff f98b 	bl	800ab0c <write_submessage_acknack.isra.0>
 800b7f6:	e779      	b.n	800b6ec <uxr_create_session+0x68>
 800b7f8:	4639      	mov	r1, r7
 800b7fa:	4650      	mov	r0, sl
 800b7fc:	f000 fa94 	bl	800bd28 <uxr_get_input_best_effort_stream>
 800b800:	2800      	cmp	r0, #0
 800b802:	f43f af73 	beq.w	800b6ec <uxr_create_session+0x68>
 800b806:	4649      	mov	r1, r9
 800b808:	f003 ff22 	bl	800f650 <uxr_receive_best_effort_message>
 800b80c:	2800      	cmp	r0, #0
 800b80e:	f43f af6d 	beq.w	800b6ec <uxr_create_session+0x68>
 800b812:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800b816:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b818:	a91a      	add	r1, sp, #104	; 0x68
 800b81a:	4620      	mov	r0, r4
 800b81c:	f7ff fafa 	bl	800ae14 <read_submessage_list>
 800b820:	e764      	b.n	800b6ec <uxr_create_session+0x68>
 800b822:	4650      	mov	r0, sl
 800b824:	f000 f9d0 	bl	800bbc8 <uxr_reset_stream_storage>
 800b828:	2001      	movs	r0, #1
 800b82a:	b02b      	add	sp, #172	; 0xac
 800b82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b830:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800b834:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b836:	a91a      	add	r1, sp, #104	; 0x68
 800b838:	4620      	mov	r0, r4
 800b83a:	f7ff faeb 	bl	800ae14 <read_submessage_list>
 800b83e:	e7be      	b.n	800b7be <uxr_create_session+0x13a>

0800b840 <uxr_prepare_stream_to_write_submessage>:
 800b840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b844:	b082      	sub	sp, #8
 800b846:	4682      	mov	sl, r0
 800b848:	4610      	mov	r0, r2
 800b84a:	4615      	mov	r5, r2
 800b84c:	461e      	mov	r6, r3
 800b84e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800b852:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800b856:	9101      	str	r1, [sp, #4]
 800b858:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800b85c:	f000 face 	bl	800bdfc <uxr_submessage_padding>
 800b860:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b864:	f105 0904 	add.w	r9, r5, #4
 800b868:	2b01      	cmp	r3, #1
 800b86a:	4481      	add	r9, r0
 800b86c:	d01d      	beq.n	800b8aa <uxr_prepare_stream_to_write_submessage+0x6a>
 800b86e:	2b02      	cmp	r3, #2
 800b870:	d116      	bne.n	800b8a0 <uxr_prepare_stream_to_write_submessage+0x60>
 800b872:	4621      	mov	r1, r4
 800b874:	f10a 0008 	add.w	r0, sl, #8
 800b878:	f000 fa4c 	bl	800bd14 <uxr_get_output_reliable_stream>
 800b87c:	4604      	mov	r4, r0
 800b87e:	b158      	cbz	r0, 800b898 <uxr_prepare_stream_to_write_submessage+0x58>
 800b880:	4649      	mov	r1, r9
 800b882:	4632      	mov	r2, r6
 800b884:	f004 f9b4 	bl	800fbf0 <uxr_prepare_reliable_buffer_to_write>
 800b888:	4604      	mov	r4, r0
 800b88a:	b12c      	cbz	r4, 800b898 <uxr_prepare_stream_to_write_submessage+0x58>
 800b88c:	4643      	mov	r3, r8
 800b88e:	b2aa      	uxth	r2, r5
 800b890:	4639      	mov	r1, r7
 800b892:	4630      	mov	r0, r6
 800b894:	f000 fa72 	bl	800bd7c <uxr_buffer_submessage_header>
 800b898:	4620      	mov	r0, r4
 800b89a:	b002      	add	sp, #8
 800b89c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8a0:	2400      	movs	r4, #0
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	b002      	add	sp, #8
 800b8a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8aa:	4621      	mov	r1, r4
 800b8ac:	f10a 0008 	add.w	r0, sl, #8
 800b8b0:	f000 fa28 	bl	800bd04 <uxr_get_output_best_effort_stream>
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	2800      	cmp	r0, #0
 800b8b8:	d0ee      	beq.n	800b898 <uxr_prepare_stream_to_write_submessage+0x58>
 800b8ba:	4649      	mov	r1, r9
 800b8bc:	4632      	mov	r2, r6
 800b8be:	f004 f8c7 	bl	800fa50 <uxr_prepare_best_effort_buffer_to_write>
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	e7e1      	b.n	800b88a <uxr_prepare_stream_to_write_submessage+0x4a>
 800b8c6:	bf00      	nop

0800b8c8 <uxr_init_session_info>:
 800b8c8:	0e13      	lsrs	r3, r2, #24
 800b8ca:	7043      	strb	r3, [r0, #1]
 800b8cc:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800b8d0:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800b8d4:	7001      	strb	r1, [r0, #0]
 800b8d6:	70c3      	strb	r3, [r0, #3]
 800b8d8:	2109      	movs	r1, #9
 800b8da:	23ff      	movs	r3, #255	; 0xff
 800b8dc:	f880 c002 	strb.w	ip, [r0, #2]
 800b8e0:	7102      	strb	r2, [r0, #4]
 800b8e2:	80c1      	strh	r1, [r0, #6]
 800b8e4:	7143      	strb	r3, [r0, #5]
 800b8e6:	4770      	bx	lr

0800b8e8 <uxr_buffer_create_session>:
 800b8e8:	b530      	push	{r4, r5, lr}
 800b8ea:	b089      	sub	sp, #36	; 0x24
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	4d12      	ldr	r5, [pc, #72]	; (800b938 <uxr_buffer_create_session+0x50>)
 800b8f0:	9307      	str	r3, [sp, #28]
 800b8f2:	f8ad 201c 	strh.w	r2, [sp, #28]
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	9301      	str	r3, [sp, #4]
 800b8fa:	80c2      	strh	r2, [r0, #6]
 800b8fc:	f88d 2004 	strb.w	r2, [sp, #4]
 800b900:	682a      	ldr	r2, [r5, #0]
 800b902:	9200      	str	r2, [sp, #0]
 800b904:	88aa      	ldrh	r2, [r5, #4]
 800b906:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b90a:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800b90e:	9202      	str	r2, [sp, #8]
 800b910:	460c      	mov	r4, r1
 800b912:	7802      	ldrb	r2, [r0, #0]
 800b914:	9303      	str	r3, [sp, #12]
 800b916:	4619      	mov	r1, r3
 800b918:	f88d 200c 	strb.w	r2, [sp, #12]
 800b91c:	4620      	mov	r0, r4
 800b91e:	2210      	movs	r2, #16
 800b920:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800b924:	9306      	str	r3, [sp, #24]
 800b926:	f000 fa29 	bl	800bd7c <uxr_buffer_submessage_header>
 800b92a:	4669      	mov	r1, sp
 800b92c:	4620      	mov	r0, r4
 800b92e:	f001 f981 	bl	800cc34 <uxr_serialize_CREATE_CLIENT_Payload>
 800b932:	b009      	add	sp, #36	; 0x24
 800b934:	bd30      	pop	{r4, r5, pc}
 800b936:	bf00      	nop
 800b938:	08012d38 	.word	0x08012d38

0800b93c <uxr_buffer_delete_session>:
 800b93c:	b510      	push	{r4, lr}
 800b93e:	4b0c      	ldr	r3, [pc, #48]	; (800b970 <uxr_buffer_delete_session+0x34>)
 800b940:	b082      	sub	sp, #8
 800b942:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800b946:	f8ad c006 	strh.w	ip, [sp, #6]
 800b94a:	460c      	mov	r4, r1
 800b94c:	2202      	movs	r2, #2
 800b94e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b952:	80c2      	strh	r2, [r0, #6]
 800b954:	f8ad 3004 	strh.w	r3, [sp, #4]
 800b958:	2204      	movs	r2, #4
 800b95a:	2300      	movs	r3, #0
 800b95c:	2103      	movs	r1, #3
 800b95e:	4620      	mov	r0, r4
 800b960:	f000 fa0c 	bl	800bd7c <uxr_buffer_submessage_header>
 800b964:	a901      	add	r1, sp, #4
 800b966:	4620      	mov	r0, r4
 800b968:	f001 fa0a 	bl	800cd80 <uxr_serialize_DELETE_Payload>
 800b96c:	b002      	add	sp, #8
 800b96e:	bd10      	pop	{r4, pc}
 800b970:	08012d38 	.word	0x08012d38

0800b974 <uxr_read_create_session_status>:
 800b974:	b510      	push	{r4, lr}
 800b976:	b088      	sub	sp, #32
 800b978:	4604      	mov	r4, r0
 800b97a:	4608      	mov	r0, r1
 800b97c:	a901      	add	r1, sp, #4
 800b97e:	f001 fa0f 	bl	800cda0 <uxr_deserialize_STATUS_AGENT_Payload>
 800b982:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b986:	7163      	strb	r3, [r4, #5]
 800b988:	b008      	add	sp, #32
 800b98a:	bd10      	pop	{r4, pc}

0800b98c <uxr_read_delete_session_status>:
 800b98c:	b510      	push	{r4, lr}
 800b98e:	4604      	mov	r4, r0
 800b990:	b084      	sub	sp, #16
 800b992:	4608      	mov	r0, r1
 800b994:	a902      	add	r1, sp, #8
 800b996:	f001 fa33 	bl	800ce00 <uxr_deserialize_STATUS_Payload>
 800b99a:	88e3      	ldrh	r3, [r4, #6]
 800b99c:	2b02      	cmp	r3, #2
 800b99e:	d001      	beq.n	800b9a4 <uxr_read_delete_session_status+0x18>
 800b9a0:	b004      	add	sp, #16
 800b9a2:	bd10      	pop	{r4, pc}
 800b9a4:	f10d 000a 	add.w	r0, sp, #10
 800b9a8:	f7ff f836 	bl	800aa18 <uxr_object_id_from_raw>
 800b9ac:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800b9b0:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800b9b4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	2b02      	cmp	r3, #2
 800b9bc:	bf04      	itt	eq
 800b9be:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800b9c2:	7163      	strbeq	r3, [r4, #5]
 800b9c4:	b004      	add	sp, #16
 800b9c6:	bd10      	pop	{r4, pc}

0800b9c8 <uxr_stamp_create_session_header>:
 800b9c8:	b510      	push	{r4, lr}
 800b9ca:	2208      	movs	r2, #8
 800b9cc:	b08a      	sub	sp, #40	; 0x28
 800b9ce:	4604      	mov	r4, r0
 800b9d0:	eb0d 0002 	add.w	r0, sp, r2
 800b9d4:	f7fe fe48 	bl	800a668 <ucdr_init_buffer>
 800b9d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9dc:	9400      	str	r4, [sp, #0]
 800b9de:	2300      	movs	r3, #0
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800b9e6:	a802      	add	r0, sp, #8
 800b9e8:	f000 fbc2 	bl	800c170 <uxr_serialize_message_header>
 800b9ec:	b00a      	add	sp, #40	; 0x28
 800b9ee:	bd10      	pop	{r4, pc}

0800b9f0 <uxr_stamp_session_header>:
 800b9f0:	b530      	push	{r4, r5, lr}
 800b9f2:	b08d      	sub	sp, #52	; 0x34
 800b9f4:	4604      	mov	r4, r0
 800b9f6:	460d      	mov	r5, r1
 800b9f8:	9203      	str	r2, [sp, #12]
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	a804      	add	r0, sp, #16
 800b9fe:	2208      	movs	r2, #8
 800ba00:	f7fe fe32 	bl	800a668 <ucdr_init_buffer>
 800ba04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba08:	9b03      	ldr	r3, [sp, #12]
 800ba0a:	9400      	str	r4, [sp, #0]
 800ba0c:	462a      	mov	r2, r5
 800ba0e:	a804      	add	r0, sp, #16
 800ba10:	f000 fbae 	bl	800c170 <uxr_serialize_message_header>
 800ba14:	b00d      	add	sp, #52	; 0x34
 800ba16:	bd30      	pop	{r4, r5, pc}

0800ba18 <uxr_read_session_header>:
 800ba18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba1c:	4607      	mov	r7, r0
 800ba1e:	b084      	sub	sp, #16
 800ba20:	4608      	mov	r0, r1
 800ba22:	460c      	mov	r4, r1
 800ba24:	4615      	mov	r5, r2
 800ba26:	461e      	mov	r6, r3
 800ba28:	f7fe fe4e 	bl	800a6c8 <ucdr_buffer_remaining>
 800ba2c:	2808      	cmp	r0, #8
 800ba2e:	d803      	bhi.n	800ba38 <uxr_read_session_header+0x20>
 800ba30:	2000      	movs	r0, #0
 800ba32:	b004      	add	sp, #16
 800ba34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba38:	f10d 080c 	add.w	r8, sp, #12
 800ba3c:	4633      	mov	r3, r6
 800ba3e:	462a      	mov	r2, r5
 800ba40:	f8cd 8000 	str.w	r8, [sp]
 800ba44:	4620      	mov	r0, r4
 800ba46:	f10d 010b 	add.w	r1, sp, #11
 800ba4a:	f000 fbaf 	bl	800c1ac <uxr_deserialize_message_header>
 800ba4e:	783a      	ldrb	r2, [r7, #0]
 800ba50:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d1eb      	bne.n	800ba30 <uxr_read_session_header+0x18>
 800ba58:	061b      	lsls	r3, r3, #24
 800ba5a:	d41c      	bmi.n	800ba96 <uxr_read_session_header+0x7e>
 800ba5c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800ba60:	787b      	ldrb	r3, [r7, #1]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d003      	beq.n	800ba6e <uxr_read_session_header+0x56>
 800ba66:	2001      	movs	r0, #1
 800ba68:	f080 0001 	eor.w	r0, r0, #1
 800ba6c:	e7e1      	b.n	800ba32 <uxr_read_session_header+0x1a>
 800ba6e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800ba72:	78bb      	ldrb	r3, [r7, #2]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	f107 0102 	add.w	r1, r7, #2
 800ba7a:	d1f4      	bne.n	800ba66 <uxr_read_session_header+0x4e>
 800ba7c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800ba80:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d1ee      	bne.n	800ba66 <uxr_read_session_header+0x4e>
 800ba88:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800ba8c:	784b      	ldrb	r3, [r1, #1]
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d1e9      	bne.n	800ba66 <uxr_read_session_header+0x4e>
 800ba92:	2000      	movs	r0, #0
 800ba94:	e7e8      	b.n	800ba68 <uxr_read_session_header+0x50>
 800ba96:	2001      	movs	r0, #1
 800ba98:	e7cb      	b.n	800ba32 <uxr_read_session_header+0x1a>
 800ba9a:	bf00      	nop

0800ba9c <uxr_session_header_offset>:
 800ba9c:	f990 3000 	ldrsb.w	r3, [r0]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	bfac      	ite	ge
 800baa4:	2008      	movge	r0, #8
 800baa6:	2004      	movlt	r0, #4
 800baa8:	4770      	bx	lr
 800baaa:	bf00      	nop

0800baac <uxr_init_base_object_request>:
 800baac:	b510      	push	{r4, lr}
 800baae:	88c3      	ldrh	r3, [r0, #6]
 800bab0:	b082      	sub	sp, #8
 800bab2:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800bab6:	9101      	str	r1, [sp, #4]
 800bab8:	f1a3 010a 	sub.w	r1, r3, #10
 800babc:	b289      	uxth	r1, r1
 800babe:	42a1      	cmp	r1, r4
 800bac0:	d80e      	bhi.n	800bae0 <uxr_init_base_object_request+0x34>
 800bac2:	3301      	adds	r3, #1
 800bac4:	b29c      	uxth	r4, r3
 800bac6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800baca:	b2db      	uxtb	r3, r3
 800bacc:	80c4      	strh	r4, [r0, #6]
 800bace:	9801      	ldr	r0, [sp, #4]
 800bad0:	7011      	strb	r1, [r2, #0]
 800bad2:	7053      	strb	r3, [r2, #1]
 800bad4:	1c91      	adds	r1, r2, #2
 800bad6:	f7fe ffb3 	bl	800aa40 <uxr_object_id_to_raw>
 800bada:	4620      	mov	r0, r4
 800badc:	b002      	add	sp, #8
 800bade:	bd10      	pop	{r4, pc}
 800bae0:	230a      	movs	r3, #10
 800bae2:	2100      	movs	r1, #0
 800bae4:	461c      	mov	r4, r3
 800bae6:	e7f1      	b.n	800bacc <uxr_init_base_object_request+0x20>

0800bae8 <uxr_parse_base_object_request>:
 800bae8:	b570      	push	{r4, r5, r6, lr}
 800baea:	4604      	mov	r4, r0
 800baec:	3002      	adds	r0, #2
 800baee:	460d      	mov	r5, r1
 800baf0:	4616      	mov	r6, r2
 800baf2:	f7fe ff91 	bl	800aa18 <uxr_object_id_from_raw>
 800baf6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800bafa:	8028      	strh	r0, [r5, #0]
 800bafc:	806b      	strh	r3, [r5, #2]
 800bafe:	7822      	ldrb	r2, [r4, #0]
 800bb00:	7863      	ldrb	r3, [r4, #1]
 800bb02:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800bb06:	8033      	strh	r3, [r6, #0]
 800bb08:	bd70      	pop	{r4, r5, r6, pc}
 800bb0a:	bf00      	nop

0800bb0c <uxr_stream_id>:
 800bb0c:	2901      	cmp	r1, #1
 800bb0e:	b082      	sub	sp, #8
 800bb10:	d01d      	beq.n	800bb4e <uxr_stream_id+0x42>
 800bb12:	2902      	cmp	r1, #2
 800bb14:	f04f 0c00 	mov.w	ip, #0
 800bb18:	d01e      	beq.n	800bb58 <uxr_stream_id+0x4c>
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	f36c 0307 	bfi	r3, ip, #0, #8
 800bb20:	f360 230f 	bfi	r3, r0, #8, #8
 800bb24:	f361 4317 	bfi	r3, r1, #16, #8
 800bb28:	f362 631f 	bfi	r3, r2, #24, #8
 800bb2c:	b2da      	uxtb	r2, r3
 800bb2e:	2000      	movs	r0, #0
 800bb30:	f362 0007 	bfi	r0, r2, #0, #8
 800bb34:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800bb38:	f362 200f 	bfi	r0, r2, #8, #8
 800bb3c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800bb40:	f362 4017 	bfi	r0, r2, #16, #8
 800bb44:	0e1b      	lsrs	r3, r3, #24
 800bb46:	f363 601f 	bfi	r0, r3, #24, #8
 800bb4a:	b002      	add	sp, #8
 800bb4c:	4770      	bx	lr
 800bb4e:	f100 0c01 	add.w	ip, r0, #1
 800bb52:	fa5f fc8c 	uxtb.w	ip, ip
 800bb56:	e7e0      	b.n	800bb1a <uxr_stream_id+0xe>
 800bb58:	f080 0c80 	eor.w	ip, r0, #128	; 0x80
 800bb5c:	e7dd      	b.n	800bb1a <uxr_stream_id+0xe>
 800bb5e:	bf00      	nop

0800bb60 <uxr_stream_id_from_raw>:
 800bb60:	b082      	sub	sp, #8
 800bb62:	b130      	cbz	r0, 800bb72 <uxr_stream_id_from_raw+0x12>
 800bb64:	0603      	lsls	r3, r0, #24
 800bb66:	d420      	bmi.n	800bbaa <uxr_stream_id_from_raw+0x4a>
 800bb68:	1e42      	subs	r2, r0, #1
 800bb6a:	b2d2      	uxtb	r2, r2
 800bb6c:	f04f 0c01 	mov.w	ip, #1
 800bb70:	e001      	b.n	800bb76 <uxr_stream_id_from_raw+0x16>
 800bb72:	4684      	mov	ip, r0
 800bb74:	4602      	mov	r2, r0
 800bb76:	2300      	movs	r3, #0
 800bb78:	f360 0307 	bfi	r3, r0, #0, #8
 800bb7c:	f362 230f 	bfi	r3, r2, #8, #8
 800bb80:	f36c 4317 	bfi	r3, ip, #16, #8
 800bb84:	f361 631f 	bfi	r3, r1, #24, #8
 800bb88:	b2da      	uxtb	r2, r3
 800bb8a:	2000      	movs	r0, #0
 800bb8c:	f362 0007 	bfi	r0, r2, #0, #8
 800bb90:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800bb94:	f362 200f 	bfi	r0, r2, #8, #8
 800bb98:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800bb9c:	f362 4017 	bfi	r0, r2, #16, #8
 800bba0:	0e1b      	lsrs	r3, r3, #24
 800bba2:	f363 601f 	bfi	r0, r3, #24, #8
 800bba6:	b002      	add	sp, #8
 800bba8:	4770      	bx	lr
 800bbaa:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800bbae:	f04f 0c02 	mov.w	ip, #2
 800bbb2:	e7e0      	b.n	800bb76 <uxr_stream_id_from_raw+0x16>

0800bbb4 <uxr_init_stream_storage>:
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	7403      	strb	r3, [r0, #16]
 800bbb8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800bbbc:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800bbc0:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800bbc4:	4770      	bx	lr
 800bbc6:	bf00      	nop

0800bbc8 <uxr_reset_stream_storage>:
 800bbc8:	b570      	push	{r4, r5, r6, lr}
 800bbca:	7c03      	ldrb	r3, [r0, #16]
 800bbcc:	4604      	mov	r4, r0
 800bbce:	b153      	cbz	r3, 800bbe6 <uxr_reset_stream_storage+0x1e>
 800bbd0:	4606      	mov	r6, r0
 800bbd2:	2500      	movs	r5, #0
 800bbd4:	4630      	mov	r0, r6
 800bbd6:	f003 ff35 	bl	800fa44 <uxr_reset_output_best_effort_stream>
 800bbda:	7c23      	ldrb	r3, [r4, #16]
 800bbdc:	3501      	adds	r5, #1
 800bbde:	42ab      	cmp	r3, r5
 800bbe0:	f106 0610 	add.w	r6, r6, #16
 800bbe4:	d8f6      	bhi.n	800bbd4 <uxr_reset_stream_storage+0xc>
 800bbe6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bbea:	b163      	cbz	r3, 800bc06 <uxr_reset_stream_storage+0x3e>
 800bbec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bbf0:	2500      	movs	r5, #0
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	f003 fd28 	bl	800f648 <uxr_reset_input_best_effort_stream>
 800bbf8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bbfc:	3501      	adds	r5, #1
 800bbfe:	42ab      	cmp	r3, r5
 800bc00:	f106 0602 	add.w	r6, r6, #2
 800bc04:	d8f5      	bhi.n	800bbf2 <uxr_reset_stream_storage+0x2a>
 800bc06:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800bc0a:	b163      	cbz	r3, 800bc26 <uxr_reset_stream_storage+0x5e>
 800bc0c:	f104 0618 	add.w	r6, r4, #24
 800bc10:	2500      	movs	r5, #0
 800bc12:	4630      	mov	r0, r6
 800bc14:	f003 ffc2 	bl	800fb9c <uxr_reset_output_reliable_stream>
 800bc18:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800bc1c:	3501      	adds	r5, #1
 800bc1e:	42ab      	cmp	r3, r5
 800bc20:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800bc24:	d8f5      	bhi.n	800bc12 <uxr_reset_stream_storage+0x4a>
 800bc26:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800bc2a:	b163      	cbz	r3, 800bc46 <uxr_reset_stream_storage+0x7e>
 800bc2c:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800bc30:	2500      	movs	r5, #0
 800bc32:	4630      	mov	r0, r6
 800bc34:	f003 fd7c 	bl	800f730 <uxr_reset_input_reliable_stream>
 800bc38:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800bc3c:	3501      	adds	r5, #1
 800bc3e:	42ab      	cmp	r3, r5
 800bc40:	f106 0618 	add.w	r6, r6, #24
 800bc44:	d8f5      	bhi.n	800bc32 <uxr_reset_stream_storage+0x6a>
 800bc46:	bd70      	pop	{r4, r5, r6, pc}

0800bc48 <uxr_add_output_best_effort_buffer>:
 800bc48:	b510      	push	{r4, lr}
 800bc4a:	7c04      	ldrb	r4, [r0, #16]
 800bc4c:	f104 0c01 	add.w	ip, r4, #1
 800bc50:	b082      	sub	sp, #8
 800bc52:	f880 c010 	strb.w	ip, [r0, #16]
 800bc56:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800bc5a:	f003 fee9 	bl	800fa30 <uxr_init_output_best_effort_stream>
 800bc5e:	2201      	movs	r2, #1
 800bc60:	4611      	mov	r1, r2
 800bc62:	4620      	mov	r0, r4
 800bc64:	b002      	add	sp, #8
 800bc66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc6a:	f7ff bf4f 	b.w	800bb0c <uxr_stream_id>
 800bc6e:	bf00      	nop

0800bc70 <uxr_add_output_reliable_buffer>:
 800bc70:	b510      	push	{r4, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	4684      	mov	ip, r0
 800bc76:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800bc7a:	9000      	str	r0, [sp, #0]
 800bc7c:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 800bc80:	2028      	movs	r0, #40	; 0x28
 800bc82:	fb00 c004 	mla	r0, r0, r4, ip
 800bc86:	f104 0e01 	add.w	lr, r4, #1
 800bc8a:	3018      	adds	r0, #24
 800bc8c:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 800bc90:	f003 ff4c 	bl	800fb2c <uxr_init_output_reliable_stream>
 800bc94:	2201      	movs	r2, #1
 800bc96:	2102      	movs	r1, #2
 800bc98:	4620      	mov	r0, r4
 800bc9a:	b004      	add	sp, #16
 800bc9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bca0:	f7ff bf34 	b.w	800bb0c <uxr_stream_id>

0800bca4 <uxr_add_input_best_effort_buffer>:
 800bca4:	b510      	push	{r4, lr}
 800bca6:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800bcaa:	4603      	mov	r3, r0
 800bcac:	1c62      	adds	r2, r4, #1
 800bcae:	f104 0021 	add.w	r0, r4, #33	; 0x21
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800bcb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcbc:	f003 fcc0 	bl	800f640 <uxr_init_input_best_effort_stream>
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	2101      	movs	r1, #1
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	b002      	add	sp, #8
 800bcc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bccc:	f7ff bf1e 	b.w	800bb0c <uxr_stream_id>

0800bcd0 <uxr_add_input_reliable_buffer>:
 800bcd0:	b510      	push	{r4, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	4684      	mov	ip, r0
 800bcd6:	9806      	ldr	r0, [sp, #24]
 800bcd8:	9000      	str	r0, [sp, #0]
 800bcda:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 800bcde:	2018      	movs	r0, #24
 800bce0:	fb00 c004 	mla	r0, r0, r4, ip
 800bce4:	f104 0e01 	add.w	lr, r4, #1
 800bce8:	3048      	adds	r0, #72	; 0x48
 800bcea:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 800bcee:	f003 fcf3 	bl	800f6d8 <uxr_init_input_reliable_stream>
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	2102      	movs	r1, #2
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	b004      	add	sp, #16
 800bcfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcfe:	f7ff bf05 	b.w	800bb0c <uxr_stream_id>
 800bd02:	bf00      	nop

0800bd04 <uxr_get_output_best_effort_stream>:
 800bd04:	7c03      	ldrb	r3, [r0, #16]
 800bd06:	428b      	cmp	r3, r1
 800bd08:	bf8c      	ite	hi
 800bd0a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800bd0e:	2000      	movls	r0, #0
 800bd10:	4770      	bx	lr
 800bd12:	bf00      	nop

0800bd14 <uxr_get_output_reliable_stream>:
 800bd14:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800bd18:	428b      	cmp	r3, r1
 800bd1a:	bf83      	ittte	hi
 800bd1c:	2328      	movhi	r3, #40	; 0x28
 800bd1e:	fb03 0001 	mlahi	r0, r3, r1, r0
 800bd22:	3018      	addhi	r0, #24
 800bd24:	2000      	movls	r0, #0
 800bd26:	4770      	bx	lr

0800bd28 <uxr_get_input_best_effort_stream>:
 800bd28:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800bd2c:	428b      	cmp	r3, r1
 800bd2e:	bf86      	itte	hi
 800bd30:	3121      	addhi	r1, #33	; 0x21
 800bd32:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800bd36:	2000      	movls	r0, #0
 800bd38:	4770      	bx	lr
 800bd3a:	bf00      	nop

0800bd3c <uxr_get_input_reliable_stream>:
 800bd3c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800bd40:	428b      	cmp	r3, r1
 800bd42:	bf83      	ittte	hi
 800bd44:	2318      	movhi	r3, #24
 800bd46:	fb03 0001 	mlahi	r0, r3, r1, r0
 800bd4a:	3048      	addhi	r0, #72	; 0x48
 800bd4c:	2000      	movls	r0, #0
 800bd4e:	4770      	bx	lr

0800bd50 <uxr_output_streams_confirmed>:
 800bd50:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800bd54:	b183      	cbz	r3, 800bd78 <uxr_output_streams_confirmed+0x28>
 800bd56:	b570      	push	{r4, r5, r6, lr}
 800bd58:	4606      	mov	r6, r0
 800bd5a:	f100 0518 	add.w	r5, r0, #24
 800bd5e:	2400      	movs	r4, #0
 800bd60:	e001      	b.n	800bd66 <uxr_output_streams_confirmed+0x16>
 800bd62:	3528      	adds	r5, #40	; 0x28
 800bd64:	b138      	cbz	r0, 800bd76 <uxr_output_streams_confirmed+0x26>
 800bd66:	4628      	mov	r0, r5
 800bd68:	f004 f988 	bl	801007c <uxr_is_output_up_to_date>
 800bd6c:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800bd70:	3401      	adds	r4, #1
 800bd72:	42a3      	cmp	r3, r4
 800bd74:	d8f5      	bhi.n	800bd62 <uxr_output_streams_confirmed+0x12>
 800bd76:	bd70      	pop	{r4, r5, r6, pc}
 800bd78:	2001      	movs	r0, #1
 800bd7a:	4770      	bx	lr

0800bd7c <uxr_buffer_submessage_header>:
 800bd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd7e:	4604      	mov	r4, r0
 800bd80:	460e      	mov	r6, r1
 800bd82:	2104      	movs	r1, #4
 800bd84:	4615      	mov	r5, r2
 800bd86:	461f      	mov	r7, r3
 800bd88:	f7fe fc88 	bl	800a69c <ucdr_align_to>
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	ea47 0203 	orr.w	r2, r7, r3
 800bd92:	4631      	mov	r1, r6
 800bd94:	7523      	strb	r3, [r4, #20]
 800bd96:	4620      	mov	r0, r4
 800bd98:	462b      	mov	r3, r5
 800bd9a:	f000 fa27 	bl	800c1ec <uxr_serialize_submessage_header>
 800bd9e:	4620      	mov	r0, r4
 800bda0:	f7fe fc92 	bl	800a6c8 <ucdr_buffer_remaining>
 800bda4:	42a8      	cmp	r0, r5
 800bda6:	bf34      	ite	cc
 800bda8:	2000      	movcc	r0, #0
 800bdaa:	2001      	movcs	r0, #1
 800bdac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdae:	bf00      	nop

0800bdb0 <uxr_read_submessage_header>:
 800bdb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdb4:	4604      	mov	r4, r0
 800bdb6:	460d      	mov	r5, r1
 800bdb8:	2104      	movs	r1, #4
 800bdba:	4616      	mov	r6, r2
 800bdbc:	4698      	mov	r8, r3
 800bdbe:	f7fe fc6d 	bl	800a69c <ucdr_align_to>
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	f7fe fc80 	bl	800a6c8 <ucdr_buffer_remaining>
 800bdc8:	2803      	cmp	r0, #3
 800bdca:	bf8c      	ite	hi
 800bdcc:	2701      	movhi	r7, #1
 800bdce:	2700      	movls	r7, #0
 800bdd0:	d802      	bhi.n	800bdd8 <uxr_read_submessage_header+0x28>
 800bdd2:	4638      	mov	r0, r7
 800bdd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdd8:	4633      	mov	r3, r6
 800bdda:	4642      	mov	r2, r8
 800bddc:	4620      	mov	r0, r4
 800bdde:	4629      	mov	r1, r5
 800bde0:	f000 fa18 	bl	800c214 <uxr_deserialize_submessage_header>
 800bde4:	f898 3000 	ldrb.w	r3, [r8]
 800bde8:	f003 0201 	and.w	r2, r3, #1
 800bdec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800bdf0:	f888 3000 	strb.w	r3, [r8]
 800bdf4:	7522      	strb	r2, [r4, #20]
 800bdf6:	4638      	mov	r0, r7
 800bdf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bdfc <uxr_submessage_padding>:
 800bdfc:	f010 0003 	ands.w	r0, r0, #3
 800be00:	bf18      	it	ne
 800be02:	f1c0 0004 	rsbne	r0, r0, #4
 800be06:	4770      	bx	lr

0800be08 <uxr_millis>:
 800be08:	b510      	push	{r4, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	4669      	mov	r1, sp
 800be0e:	2001      	movs	r0, #1
 800be10:	f7f5 fa6e 	bl	80012f0 <clock_gettime>
 800be14:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800be18:	4906      	ldr	r1, [pc, #24]	; (800be34 <uxr_millis+0x2c>)
 800be1a:	fba0 0301 	umull	r0, r3, r0, r1
 800be1e:	1900      	adds	r0, r0, r4
 800be20:	fb01 3102 	mla	r1, r1, r2, r3
 800be24:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800be28:	4a03      	ldr	r2, [pc, #12]	; (800be38 <uxr_millis+0x30>)
 800be2a:	2300      	movs	r3, #0
 800be2c:	f7f4 fa58 	bl	80002e0 <__aeabi_ldivmod>
 800be30:	b004      	add	sp, #16
 800be32:	bd10      	pop	{r4, pc}
 800be34:	3b9aca00 	.word	0x3b9aca00
 800be38:	000f4240 	.word	0x000f4240

0800be3c <uxr_nanos>:
 800be3c:	b510      	push	{r4, lr}
 800be3e:	b084      	sub	sp, #16
 800be40:	4669      	mov	r1, sp
 800be42:	2001      	movs	r0, #1
 800be44:	f7f5 fa54 	bl	80012f0 <clock_gettime>
 800be48:	4a06      	ldr	r2, [pc, #24]	; (800be64 <uxr_nanos+0x28>)
 800be4a:	9800      	ldr	r0, [sp, #0]
 800be4c:	9902      	ldr	r1, [sp, #8]
 800be4e:	9c01      	ldr	r4, [sp, #4]
 800be50:	fba0 0302 	umull	r0, r3, r0, r2
 800be54:	1840      	adds	r0, r0, r1
 800be56:	fb02 3304 	mla	r3, r2, r4, r3
 800be5a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800be5e:	b004      	add	sp, #16
 800be60:	bd10      	pop	{r4, pc}
 800be62:	bf00      	nop
 800be64:	3b9aca00 	.word	0x3b9aca00

0800be68 <on_full_output_buffer_fragmented>:
 800be68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be6c:	460c      	mov	r4, r1
 800be6e:	b08a      	sub	sp, #40	; 0x28
 800be70:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 800be74:	4606      	mov	r6, r0
 800be76:	f104 0008 	add.w	r0, r4, #8
 800be7a:	f7ff ff4b 	bl	800bd14 <uxr_get_output_reliable_stream>
 800be7e:	4605      	mov	r5, r0
 800be80:	f004 f906 	bl	8010090 <get_available_free_slots>
 800be84:	b968      	cbnz	r0, 800bea2 <on_full_output_buffer_fragmented+0x3a>
 800be86:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 800be8a:	4620      	mov	r0, r4
 800be8c:	4798      	blx	r3
 800be8e:	b918      	cbnz	r0, 800be98 <on_full_output_buffer_fragmented+0x30>
 800be90:	2001      	movs	r0, #1
 800be92:	b00a      	add	sp, #40	; 0x28
 800be94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be98:	4628      	mov	r0, r5
 800be9a:	f004 f8f9 	bl	8010090 <get_available_free_slots>
 800be9e:	2800      	cmp	r0, #0
 800bea0:	d0f6      	beq.n	800be90 <on_full_output_buffer_fragmented+0x28>
 800bea2:	8929      	ldrh	r1, [r5, #8]
 800bea4:	89eb      	ldrh	r3, [r5, #14]
 800bea6:	7b28      	ldrb	r0, [r5, #12]
 800bea8:	686a      	ldr	r2, [r5, #4]
 800beaa:	fbb2 f8f1 	udiv	r8, r2, r1
 800beae:	fbb3 f2f1 	udiv	r2, r3, r1
 800beb2:	fb01 3112 	mls	r1, r1, r2, r3
 800beb6:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
 800beba:	b289      	uxth	r1, r1
 800bebc:	fb08 f101 	mul.w	r1, r8, r1
 800bec0:	30fc      	adds	r0, #252	; 0xfc
 800bec2:	f1a8 0804 	sub.w	r8, r8, #4
 800bec6:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800beca:	4440      	add	r0, r8
 800becc:	b287      	uxth	r7, r0
 800bece:	1bdb      	subs	r3, r3, r7
 800bed0:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800bed4:	682b      	ldr	r3, [r5, #0]
 800bed6:	3104      	adds	r1, #4
 800bed8:	4419      	add	r1, r3
 800beda:	4642      	mov	r2, r8
 800bedc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bee0:	9300      	str	r3, [sp, #0]
 800bee2:	a802      	add	r0, sp, #8
 800bee4:	2300      	movs	r3, #0
 800bee6:	f7fe fbad 	bl	800a644 <ucdr_init_buffer_origin_offset>
 800beea:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800beee:	f102 0308 	add.w	r3, r2, #8
 800bef2:	4543      	cmp	r3, r8
 800bef4:	d928      	bls.n	800bf48 <on_full_output_buffer_fragmented+0xe0>
 800bef6:	463a      	mov	r2, r7
 800bef8:	2300      	movs	r3, #0
 800befa:	210d      	movs	r1, #13
 800befc:	a802      	add	r0, sp, #8
 800befe:	f7ff ff3d 	bl	800bd7c <uxr_buffer_submessage_header>
 800bf02:	8929      	ldrh	r1, [r5, #8]
 800bf04:	89eb      	ldrh	r3, [r5, #14]
 800bf06:	fbb3 f2f1 	udiv	r2, r3, r1
 800bf0a:	fb01 3312 	mls	r3, r1, r2, r3
 800bf0e:	b29b      	uxth	r3, r3
 800bf10:	686a      	ldr	r2, [r5, #4]
 800bf12:	fbb2 f2f1 	udiv	r2, r2, r1
 800bf16:	fb02 f303 	mul.w	r3, r2, r3
 800bf1a:	682a      	ldr	r2, [r5, #0]
 800bf1c:	f842 8003 	str.w	r8, [r2, r3]
 800bf20:	89e8      	ldrh	r0, [r5, #14]
 800bf22:	2101      	movs	r1, #1
 800bf24:	f004 f9ca 	bl	80102bc <uxr_seq_num_add>
 800bf28:	9904      	ldr	r1, [sp, #16]
 800bf2a:	9a03      	ldr	r2, [sp, #12]
 800bf2c:	81e8      	strh	r0, [r5, #14]
 800bf2e:	1a52      	subs	r2, r2, r1
 800bf30:	4630      	mov	r0, r6
 800bf32:	f7fe fb99 	bl	800a668 <ucdr_init_buffer>
 800bf36:	4630      	mov	r0, r6
 800bf38:	490f      	ldr	r1, [pc, #60]	; (800bf78 <on_full_output_buffer_fragmented+0x110>)
 800bf3a:	4622      	mov	r2, r4
 800bf3c:	f7fe fb68 	bl	800a610 <ucdr_set_on_full_buffer_callback>
 800bf40:	2000      	movs	r0, #0
 800bf42:	b00a      	add	sp, #40	; 0x28
 800bf44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf48:	b292      	uxth	r2, r2
 800bf4a:	2302      	movs	r3, #2
 800bf4c:	210d      	movs	r1, #13
 800bf4e:	a802      	add	r0, sp, #8
 800bf50:	f7ff ff14 	bl	800bd7c <uxr_buffer_submessage_header>
 800bf54:	8928      	ldrh	r0, [r5, #8]
 800bf56:	89eb      	ldrh	r3, [r5, #14]
 800bf58:	fbb3 f1f0 	udiv	r1, r3, r0
 800bf5c:	fb00 3311 	mls	r3, r0, r1, r3
 800bf60:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800bf64:	6869      	ldr	r1, [r5, #4]
 800bf66:	fbb1 f1f0 	udiv	r1, r1, r0
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	fb01 f303 	mul.w	r3, r1, r3
 800bf70:	6829      	ldr	r1, [r5, #0]
 800bf72:	3208      	adds	r2, #8
 800bf74:	50ca      	str	r2, [r1, r3]
 800bf76:	e7d3      	b.n	800bf20 <on_full_output_buffer_fragmented+0xb8>
 800bf78:	0800be69 	.word	0x0800be69

0800bf7c <uxr_prepare_output_stream>:
 800bf7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf7e:	b087      	sub	sp, #28
 800bf80:	2707      	movs	r7, #7
 800bf82:	9202      	str	r2, [sp, #8]
 800bf84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf86:	9103      	str	r1, [sp, #12]
 800bf88:	2500      	movs	r5, #0
 800bf8a:	3204      	adds	r2, #4
 800bf8c:	e9cd 7500 	strd	r7, r5, [sp]
 800bf90:	461c      	mov	r4, r3
 800bf92:	4606      	mov	r6, r0
 800bf94:	f7ff fc54 	bl	800b840 <uxr_prepare_stream_to_write_submessage>
 800bf98:	f080 0201 	eor.w	r2, r0, #1
 800bf9c:	b2d2      	uxtb	r2, r2
 800bf9e:	75a2      	strb	r2, [r4, #22]
 800bfa0:	b112      	cbz	r2, 800bfa8 <uxr_prepare_output_stream+0x2c>
 800bfa2:	4628      	mov	r0, r5
 800bfa4:	b007      	add	sp, #28
 800bfa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfa8:	aa05      	add	r2, sp, #20
 800bfaa:	9902      	ldr	r1, [sp, #8]
 800bfac:	4630      	mov	r0, r6
 800bfae:	f7ff fd7d 	bl	800baac <uxr_init_base_object_request>
 800bfb2:	a905      	add	r1, sp, #20
 800bfb4:	4605      	mov	r5, r0
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	f000 ffa0 	bl	800cefc <uxr_serialize_WRITE_DATA_Payload_Data>
 800bfbc:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800bfc0:	69a6      	ldr	r6, [r4, #24]
 800bfc2:	69e7      	ldr	r7, [r4, #28]
 800bfc4:	1a52      	subs	r2, r2, r1
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	f7fe fb4e 	bl	800a668 <ucdr_init_buffer>
 800bfcc:	4620      	mov	r0, r4
 800bfce:	463a      	mov	r2, r7
 800bfd0:	4631      	mov	r1, r6
 800bfd2:	f7fe fb1d 	bl	800a610 <ucdr_set_on_full_buffer_callback>
 800bfd6:	4628      	mov	r0, r5
 800bfd8:	b007      	add	sp, #28
 800bfda:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bfdc <uxr_prepare_output_stream_fragmented>:
 800bfdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe0:	b091      	sub	sp, #68	; 0x44
 800bfe2:	4605      	mov	r5, r0
 800bfe4:	9105      	str	r1, [sp, #20]
 800bfe6:	3008      	adds	r0, #8
 800bfe8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800bfec:	461e      	mov	r6, r3
 800bfee:	9204      	str	r2, [sp, #16]
 800bff0:	f7ff fe90 	bl	800bd14 <uxr_get_output_reliable_stream>
 800bff4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	f000 8091 	beq.w	800c120 <uxr_prepare_output_stream_fragmented+0x144>
 800bffe:	4604      	mov	r4, r0
 800c000:	2800      	cmp	r0, #0
 800c002:	f000 808d 	beq.w	800c120 <uxr_prepare_output_stream_fragmented+0x144>
 800c006:	f004 f843 	bl	8010090 <get_available_free_slots>
 800c00a:	2800      	cmp	r0, #0
 800c00c:	f000 8083 	beq.w	800c116 <uxr_prepare_output_stream_fragmented+0x13a>
 800c010:	8922      	ldrh	r2, [r4, #8]
 800c012:	89e7      	ldrh	r7, [r4, #14]
 800c014:	fbb7 f9f2 	udiv	r9, r7, r2
 800c018:	fb02 7919 	mls	r9, r2, r9, r7
 800c01c:	fa1f f989 	uxth.w	r9, r9
 800c020:	6863      	ldr	r3, [r4, #4]
 800c022:	fbb3 f2f2 	udiv	r2, r3, r2
 800c026:	6823      	ldr	r3, [r4, #0]
 800c028:	9203      	str	r2, [sp, #12]
 800c02a:	fb02 f909 	mul.w	r9, r2, r9
 800c02e:	f109 0904 	add.w	r9, r9, #4
 800c032:	4499      	add	r9, r3
 800c034:	7b23      	ldrb	r3, [r4, #12]
 800c036:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800c03a:	4543      	cmp	r3, r8
 800c03c:	f1a2 0b04 	sub.w	fp, r2, #4
 800c040:	d37a      	bcc.n	800c138 <uxr_prepare_output_stream_fragmented+0x15c>
 800c042:	f1ab 0a04 	sub.w	sl, fp, #4
 800c046:	ebaa 0a03 	sub.w	sl, sl, r3
 800c04a:	465a      	mov	r2, fp
 800c04c:	2300      	movs	r3, #0
 800c04e:	4649      	mov	r1, r9
 800c050:	a808      	add	r0, sp, #32
 800c052:	f8cd 8000 	str.w	r8, [sp]
 800c056:	f7fe faf5 	bl	800a644 <ucdr_init_buffer_origin_offset>
 800c05a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c05c:	fa1f fa8a 	uxth.w	sl, sl
 800c060:	4652      	mov	r2, sl
 800c062:	f103 0a08 	add.w	sl, r3, #8
 800c066:	45da      	cmp	sl, fp
 800c068:	bf34      	ite	cc
 800c06a:	2302      	movcc	r3, #2
 800c06c:	2300      	movcs	r3, #0
 800c06e:	210d      	movs	r1, #13
 800c070:	a808      	add	r0, sp, #32
 800c072:	f7ff fe83 	bl	800bd7c <uxr_buffer_submessage_header>
 800c076:	8921      	ldrh	r1, [r4, #8]
 800c078:	fbb7 f2f1 	udiv	r2, r7, r1
 800c07c:	fb01 7212 	mls	r2, r1, r2, r7
 800c080:	b292      	uxth	r2, r2
 800c082:	6863      	ldr	r3, [r4, #4]
 800c084:	fbb3 f3f1 	udiv	r3, r3, r1
 800c088:	fb02 f303 	mul.w	r3, r2, r3
 800c08c:	6822      	ldr	r2, [r4, #0]
 800c08e:	4638      	mov	r0, r7
 800c090:	f842 b003 	str.w	fp, [r2, r3]
 800c094:	2101      	movs	r1, #1
 800c096:	f004 f911 	bl	80102bc <uxr_seq_num_add>
 800c09a:	9b03      	ldr	r3, [sp, #12]
 800c09c:	f108 0104 	add.w	r1, r8, #4
 800c0a0:	f1a3 0208 	sub.w	r2, r3, #8
 800c0a4:	eba2 0208 	sub.w	r2, r2, r8
 800c0a8:	4449      	add	r1, r9
 800c0aa:	4607      	mov	r7, r0
 800c0ac:	4630      	mov	r0, r6
 800c0ae:	f7fe fadb 	bl	800a668 <ucdr_init_buffer>
 800c0b2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c0b4:	81e7      	strh	r7, [r4, #14]
 800c0b6:	1d1a      	adds	r2, r3, #4
 800c0b8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800c0bc:	bf28      	it	cs
 800c0be:	2200      	movcs	r2, #0
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	b292      	uxth	r2, r2
 800c0c4:	2107      	movs	r1, #7
 800c0c6:	4630      	mov	r0, r6
 800c0c8:	f7ff fe58 	bl	800bd7c <uxr_buffer_submessage_header>
 800c0cc:	9904      	ldr	r1, [sp, #16]
 800c0ce:	aa07      	add	r2, sp, #28
 800c0d0:	4628      	mov	r0, r5
 800c0d2:	f7ff fceb 	bl	800baac <uxr_init_base_object_request>
 800c0d6:	4604      	mov	r4, r0
 800c0d8:	b318      	cbz	r0, 800c122 <uxr_prepare_output_stream_fragmented+0x146>
 800c0da:	a907      	add	r1, sp, #28
 800c0dc:	4630      	mov	r0, r6
 800c0de:	f000 ff0d 	bl	800cefc <uxr_serialize_WRITE_DATA_Payload_Data>
 800c0e2:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800c0e6:	4630      	mov	r0, r6
 800c0e8:	1a52      	subs	r2, r2, r1
 800c0ea:	f7fe fabd 	bl	800a668 <ucdr_init_buffer>
 800c0ee:	9b05      	ldr	r3, [sp, #20]
 800c0f0:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800c0f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c0f6:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 800c0fa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c0fc:	491b      	ldr	r1, [pc, #108]	; (800c16c <uxr_prepare_output_stream_fragmented+0x190>)
 800c0fe:	f8c5 a0c4 	str.w	sl, [r5, #196]	; 0xc4
 800c102:	4630      	mov	r0, r6
 800c104:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 800c108:	462a      	mov	r2, r5
 800c10a:	f7fe fa81 	bl	800a610 <ucdr_set_on_full_buffer_callback>
 800c10e:	4620      	mov	r0, r4
 800c110:	b011      	add	sp, #68	; 0x44
 800c112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c116:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c118:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c11a:	4628      	mov	r0, r5
 800c11c:	4798      	blx	r3
 800c11e:	b920      	cbnz	r0, 800c12a <uxr_prepare_output_stream_fragmented+0x14e>
 800c120:	2400      	movs	r4, #0
 800c122:	4620      	mov	r0, r4
 800c124:	b011      	add	sp, #68	; 0x44
 800c126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c12a:	4620      	mov	r0, r4
 800c12c:	f003 ffb0 	bl	8010090 <get_available_free_slots>
 800c130:	2800      	cmp	r0, #0
 800c132:	f47f af6d 	bne.w	800c010 <uxr_prepare_output_stream_fragmented+0x34>
 800c136:	e7f3      	b.n	800c120 <uxr_prepare_output_stream_fragmented+0x144>
 800c138:	4638      	mov	r0, r7
 800c13a:	2101      	movs	r1, #1
 800c13c:	f004 f8be 	bl	80102bc <uxr_seq_num_add>
 800c140:	8921      	ldrh	r1, [r4, #8]
 800c142:	fbb0 f2f1 	udiv	r2, r0, r1
 800c146:	fb01 0912 	mls	r9, r1, r2, r0
 800c14a:	fa1f f289 	uxth.w	r2, r9
 800c14e:	6863      	ldr	r3, [r4, #4]
 800c150:	fbb3 f9f1 	udiv	r9, r3, r1
 800c154:	6823      	ldr	r3, [r4, #0]
 800c156:	fb02 f909 	mul.w	r9, r2, r9
 800c15a:	f109 0904 	add.w	r9, r9, #4
 800c15e:	4499      	add	r9, r3
 800c160:	4607      	mov	r7, r0
 800c162:	7b23      	ldrb	r3, [r4, #12]
 800c164:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800c168:	e76b      	b.n	800c042 <uxr_prepare_output_stream_fragmented+0x66>
 800c16a:	bf00      	nop
 800c16c:	0800be69 	.word	0x0800be69

0800c170 <uxr_serialize_message_header>:
 800c170:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c172:	b083      	sub	sp, #12
 800c174:	4616      	mov	r6, r2
 800c176:	4604      	mov	r4, r0
 800c178:	9301      	str	r3, [sp, #4]
 800c17a:	460d      	mov	r5, r1
 800c17c:	9f08      	ldr	r7, [sp, #32]
 800c17e:	f7fd fac7 	bl	8009710 <ucdr_serialize_uint8_t>
 800c182:	4631      	mov	r1, r6
 800c184:	4620      	mov	r0, r4
 800c186:	f7fd fac3 	bl	8009710 <ucdr_serialize_uint8_t>
 800c18a:	9a01      	ldr	r2, [sp, #4]
 800c18c:	2101      	movs	r1, #1
 800c18e:	4620      	mov	r0, r4
 800c190:	f7fd fb6a 	bl	8009868 <ucdr_serialize_endian_uint16_t>
 800c194:	062b      	lsls	r3, r5, #24
 800c196:	d501      	bpl.n	800c19c <uxr_serialize_message_header+0x2c>
 800c198:	b003      	add	sp, #12
 800c19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c19c:	2204      	movs	r2, #4
 800c19e:	4639      	mov	r1, r7
 800c1a0:	4620      	mov	r0, r4
 800c1a2:	b003      	add	sp, #12
 800c1a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c1a8:	f003 b850 	b.w	800f24c <ucdr_serialize_array_uint8_t>

0800c1ac <uxr_deserialize_message_header>:
 800c1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1ae:	b083      	sub	sp, #12
 800c1b0:	4616      	mov	r6, r2
 800c1b2:	4604      	mov	r4, r0
 800c1b4:	9301      	str	r3, [sp, #4]
 800c1b6:	460d      	mov	r5, r1
 800c1b8:	9f08      	ldr	r7, [sp, #32]
 800c1ba:	f7fd fabf 	bl	800973c <ucdr_deserialize_uint8_t>
 800c1be:	4631      	mov	r1, r6
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	f7fd fabb 	bl	800973c <ucdr_deserialize_uint8_t>
 800c1c6:	9a01      	ldr	r2, [sp, #4]
 800c1c8:	2101      	movs	r1, #1
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	f7fd fc40 	bl	8009a50 <ucdr_deserialize_endian_uint16_t>
 800c1d0:	f995 3000 	ldrsb.w	r3, [r5]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	da01      	bge.n	800c1dc <uxr_deserialize_message_header+0x30>
 800c1d8:	b003      	add	sp, #12
 800c1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1dc:	2204      	movs	r2, #4
 800c1de:	4639      	mov	r1, r7
 800c1e0:	4620      	mov	r0, r4
 800c1e2:	b003      	add	sp, #12
 800c1e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c1e8:	f003 b894 	b.w	800f314 <ucdr_deserialize_array_uint8_t>

0800c1ec <uxr_serialize_submessage_header>:
 800c1ec:	b530      	push	{r4, r5, lr}
 800c1ee:	b083      	sub	sp, #12
 800c1f0:	4615      	mov	r5, r2
 800c1f2:	4604      	mov	r4, r0
 800c1f4:	9301      	str	r3, [sp, #4]
 800c1f6:	f7fd fa8b 	bl	8009710 <ucdr_serialize_uint8_t>
 800c1fa:	4629      	mov	r1, r5
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	f7fd fa87 	bl	8009710 <ucdr_serialize_uint8_t>
 800c202:	9a01      	ldr	r2, [sp, #4]
 800c204:	2101      	movs	r1, #1
 800c206:	4620      	mov	r0, r4
 800c208:	b003      	add	sp, #12
 800c20a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c20e:	f7fd bb2b 	b.w	8009868 <ucdr_serialize_endian_uint16_t>
 800c212:	bf00      	nop

0800c214 <uxr_deserialize_submessage_header>:
 800c214:	b530      	push	{r4, r5, lr}
 800c216:	b083      	sub	sp, #12
 800c218:	4615      	mov	r5, r2
 800c21a:	4604      	mov	r4, r0
 800c21c:	9301      	str	r3, [sp, #4]
 800c21e:	f7fd fa8d 	bl	800973c <ucdr_deserialize_uint8_t>
 800c222:	4629      	mov	r1, r5
 800c224:	4620      	mov	r0, r4
 800c226:	f7fd fa89 	bl	800973c <ucdr_deserialize_uint8_t>
 800c22a:	9a01      	ldr	r2, [sp, #4]
 800c22c:	2101      	movs	r1, #1
 800c22e:	4620      	mov	r0, r4
 800c230:	b003      	add	sp, #12
 800c232:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c236:	f7fd bc0b 	b.w	8009a50 <ucdr_deserialize_endian_uint16_t>
 800c23a:	bf00      	nop

0800c23c <uxr_serialize_CLIENT_Representation>:
 800c23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c240:	2204      	movs	r2, #4
 800c242:	460e      	mov	r6, r1
 800c244:	4605      	mov	r5, r0
 800c246:	f003 f801 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800c24a:	2202      	movs	r2, #2
 800c24c:	4607      	mov	r7, r0
 800c24e:	1d31      	adds	r1, r6, #4
 800c250:	4628      	mov	r0, r5
 800c252:	f002 fffb 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800c256:	4038      	ands	r0, r7
 800c258:	2202      	movs	r2, #2
 800c25a:	1db1      	adds	r1, r6, #6
 800c25c:	b2c7      	uxtb	r7, r0
 800c25e:	4628      	mov	r0, r5
 800c260:	f002 fff4 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800c264:	2204      	movs	r2, #4
 800c266:	4007      	ands	r7, r0
 800c268:	f106 0108 	add.w	r1, r6, #8
 800c26c:	4628      	mov	r0, r5
 800c26e:	f002 ffed 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800c272:	7b31      	ldrb	r1, [r6, #12]
 800c274:	4007      	ands	r7, r0
 800c276:	4628      	mov	r0, r5
 800c278:	f7fd fa4a 	bl	8009710 <ucdr_serialize_uint8_t>
 800c27c:	7b71      	ldrb	r1, [r6, #13]
 800c27e:	4007      	ands	r7, r0
 800c280:	4628      	mov	r0, r5
 800c282:	f7fd fa17 	bl	80096b4 <ucdr_serialize_bool>
 800c286:	7b73      	ldrb	r3, [r6, #13]
 800c288:	ea07 0800 	and.w	r8, r7, r0
 800c28c:	b93b      	cbnz	r3, 800c29e <uxr_serialize_CLIENT_Representation+0x62>
 800c28e:	8bb1      	ldrh	r1, [r6, #28]
 800c290:	4628      	mov	r0, r5
 800c292:	f7fd fa69 	bl	8009768 <ucdr_serialize_uint16_t>
 800c296:	ea08 0000 	and.w	r0, r8, r0
 800c29a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c29e:	6931      	ldr	r1, [r6, #16]
 800c2a0:	4628      	mov	r0, r5
 800c2a2:	f7fd fc4b 	bl	8009b3c <ucdr_serialize_uint32_t>
 800c2a6:	6933      	ldr	r3, [r6, #16]
 800c2a8:	b1e3      	cbz	r3, 800c2e4 <uxr_serialize_CLIENT_Representation+0xa8>
 800c2aa:	b1c0      	cbz	r0, 800c2de <uxr_serialize_CLIENT_Representation+0xa2>
 800c2ac:	4637      	mov	r7, r6
 800c2ae:	f04f 0900 	mov.w	r9, #0
 800c2b2:	e001      	b.n	800c2b8 <uxr_serialize_CLIENT_Representation+0x7c>
 800c2b4:	3708      	adds	r7, #8
 800c2b6:	b194      	cbz	r4, 800c2de <uxr_serialize_CLIENT_Representation+0xa2>
 800c2b8:	6979      	ldr	r1, [r7, #20]
 800c2ba:	4628      	mov	r0, r5
 800c2bc:	f003 f8e6 	bl	800f48c <ucdr_serialize_string>
 800c2c0:	69b9      	ldr	r1, [r7, #24]
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	4628      	mov	r0, r5
 800c2c6:	f003 f8e1 	bl	800f48c <ucdr_serialize_string>
 800c2ca:	6933      	ldr	r3, [r6, #16]
 800c2cc:	f109 0901 	add.w	r9, r9, #1
 800c2d0:	4004      	ands	r4, r0
 800c2d2:	4599      	cmp	r9, r3
 800c2d4:	b2e4      	uxtb	r4, r4
 800c2d6:	d3ed      	bcc.n	800c2b4 <uxr_serialize_CLIENT_Representation+0x78>
 800c2d8:	ea08 0804 	and.w	r8, r8, r4
 800c2dc:	e7d7      	b.n	800c28e <uxr_serialize_CLIENT_Representation+0x52>
 800c2de:	f04f 0800 	mov.w	r8, #0
 800c2e2:	e7d4      	b.n	800c28e <uxr_serialize_CLIENT_Representation+0x52>
 800c2e4:	ea08 0800 	and.w	r8, r8, r0
 800c2e8:	e7d1      	b.n	800c28e <uxr_serialize_CLIENT_Representation+0x52>
 800c2ea:	bf00      	nop

0800c2ec <uxr_deserialize_CLIENT_Representation>:
 800c2ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2f0:	2204      	movs	r2, #4
 800c2f2:	460c      	mov	r4, r1
 800c2f4:	4605      	mov	r5, r0
 800c2f6:	f003 f80d 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800c2fa:	2202      	movs	r2, #2
 800c2fc:	4607      	mov	r7, r0
 800c2fe:	1d21      	adds	r1, r4, #4
 800c300:	4628      	mov	r0, r5
 800c302:	f003 f807 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800c306:	4038      	ands	r0, r7
 800c308:	2202      	movs	r2, #2
 800c30a:	1da1      	adds	r1, r4, #6
 800c30c:	b2c6      	uxtb	r6, r0
 800c30e:	4628      	mov	r0, r5
 800c310:	f003 f800 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800c314:	2204      	movs	r2, #4
 800c316:	4006      	ands	r6, r0
 800c318:	f104 0108 	add.w	r1, r4, #8
 800c31c:	4628      	mov	r0, r5
 800c31e:	f002 fff9 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800c322:	f104 010c 	add.w	r1, r4, #12
 800c326:	4006      	ands	r6, r0
 800c328:	4628      	mov	r0, r5
 800c32a:	f7fd fa07 	bl	800973c <ucdr_deserialize_uint8_t>
 800c32e:	f104 010d 	add.w	r1, r4, #13
 800c332:	ea06 0700 	and.w	r7, r6, r0
 800c336:	4628      	mov	r0, r5
 800c338:	f7fd f9d2 	bl	80096e0 <ucdr_deserialize_bool>
 800c33c:	7b63      	ldrb	r3, [r4, #13]
 800c33e:	4007      	ands	r7, r0
 800c340:	b93b      	cbnz	r3, 800c352 <uxr_deserialize_CLIENT_Representation+0x66>
 800c342:	f104 011c 	add.w	r1, r4, #28
 800c346:	4628      	mov	r0, r5
 800c348:	f7fd fb0e 	bl	8009968 <ucdr_deserialize_uint16_t>
 800c34c:	4038      	ands	r0, r7
 800c34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c352:	f104 0110 	add.w	r1, r4, #16
 800c356:	4628      	mov	r0, r5
 800c358:	f7fd fd20 	bl	8009d9c <ucdr_deserialize_uint32_t>
 800c35c:	6923      	ldr	r3, [r4, #16]
 800c35e:	2b01      	cmp	r3, #1
 800c360:	d903      	bls.n	800c36a <uxr_deserialize_CLIENT_Representation+0x7e>
 800c362:	2301      	movs	r3, #1
 800c364:	75ab      	strb	r3, [r5, #22]
 800c366:	2700      	movs	r7, #0
 800c368:	e7eb      	b.n	800c342 <uxr_deserialize_CLIENT_Representation+0x56>
 800c36a:	b30b      	cbz	r3, 800c3b0 <uxr_deserialize_CLIENT_Representation+0xc4>
 800c36c:	2800      	cmp	r0, #0
 800c36e:	d0fa      	beq.n	800c366 <uxr_deserialize_CLIENT_Representation+0x7a>
 800c370:	46a0      	mov	r8, r4
 800c372:	f04f 0900 	mov.w	r9, #0
 800c376:	e001      	b.n	800c37c <uxr_deserialize_CLIENT_Representation+0x90>
 800c378:	2e00      	cmp	r6, #0
 800c37a:	d0f4      	beq.n	800c366 <uxr_deserialize_CLIENT_Representation+0x7a>
 800c37c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800c380:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c384:	4628      	mov	r0, r5
 800c386:	f003 f891 	bl	800f4ac <ucdr_deserialize_string>
 800c38a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c38e:	4606      	mov	r6, r0
 800c390:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800c394:	4628      	mov	r0, r5
 800c396:	f003 f889 	bl	800f4ac <ucdr_deserialize_string>
 800c39a:	6923      	ldr	r3, [r4, #16]
 800c39c:	f109 0901 	add.w	r9, r9, #1
 800c3a0:	4006      	ands	r6, r0
 800c3a2:	4599      	cmp	r9, r3
 800c3a4:	f108 0808 	add.w	r8, r8, #8
 800c3a8:	b2f6      	uxtb	r6, r6
 800c3aa:	d3e5      	bcc.n	800c378 <uxr_deserialize_CLIENT_Representation+0x8c>
 800c3ac:	4037      	ands	r7, r6
 800c3ae:	e7c8      	b.n	800c342 <uxr_deserialize_CLIENT_Representation+0x56>
 800c3b0:	4007      	ands	r7, r0
 800c3b2:	e7c6      	b.n	800c342 <uxr_deserialize_CLIENT_Representation+0x56>

0800c3b4 <uxr_serialize_AGENT_Representation>:
 800c3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3b8:	2204      	movs	r2, #4
 800c3ba:	460f      	mov	r7, r1
 800c3bc:	4605      	mov	r5, r0
 800c3be:	f002 ff45 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800c3c2:	2202      	movs	r2, #2
 800c3c4:	4604      	mov	r4, r0
 800c3c6:	1d39      	adds	r1, r7, #4
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	f002 ff3f 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800c3ce:	4020      	ands	r0, r4
 800c3d0:	2202      	movs	r2, #2
 800c3d2:	1db9      	adds	r1, r7, #6
 800c3d4:	b2c4      	uxtb	r4, r0
 800c3d6:	4628      	mov	r0, r5
 800c3d8:	f002 ff38 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800c3dc:	7a39      	ldrb	r1, [r7, #8]
 800c3de:	4004      	ands	r4, r0
 800c3e0:	4628      	mov	r0, r5
 800c3e2:	f7fd f967 	bl	80096b4 <ucdr_serialize_bool>
 800c3e6:	7a3b      	ldrb	r3, [r7, #8]
 800c3e8:	ea00 0804 	and.w	r8, r0, r4
 800c3ec:	b913      	cbnz	r3, 800c3f4 <uxr_serialize_AGENT_Representation+0x40>
 800c3ee:	4640      	mov	r0, r8
 800c3f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3f4:	68f9      	ldr	r1, [r7, #12]
 800c3f6:	4628      	mov	r0, r5
 800c3f8:	f7fd fba0 	bl	8009b3c <ucdr_serialize_uint32_t>
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	b303      	cbz	r3, 800c442 <uxr_serialize_AGENT_Representation+0x8e>
 800c400:	b1d0      	cbz	r0, 800c438 <uxr_serialize_AGENT_Representation+0x84>
 800c402:	463e      	mov	r6, r7
 800c404:	f04f 0900 	mov.w	r9, #0
 800c408:	e001      	b.n	800c40e <uxr_serialize_AGENT_Representation+0x5a>
 800c40a:	3608      	adds	r6, #8
 800c40c:	b1a4      	cbz	r4, 800c438 <uxr_serialize_AGENT_Representation+0x84>
 800c40e:	6931      	ldr	r1, [r6, #16]
 800c410:	4628      	mov	r0, r5
 800c412:	f003 f83b 	bl	800f48c <ucdr_serialize_string>
 800c416:	6971      	ldr	r1, [r6, #20]
 800c418:	4604      	mov	r4, r0
 800c41a:	4628      	mov	r0, r5
 800c41c:	f003 f836 	bl	800f48c <ucdr_serialize_string>
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f109 0901 	add.w	r9, r9, #1
 800c426:	4004      	ands	r4, r0
 800c428:	4599      	cmp	r9, r3
 800c42a:	b2e4      	uxtb	r4, r4
 800c42c:	d3ed      	bcc.n	800c40a <uxr_serialize_AGENT_Representation+0x56>
 800c42e:	ea08 0804 	and.w	r8, r8, r4
 800c432:	4640      	mov	r0, r8
 800c434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c438:	f04f 0800 	mov.w	r8, #0
 800c43c:	4640      	mov	r0, r8
 800c43e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c442:	ea08 0800 	and.w	r8, r8, r0
 800c446:	e7d2      	b.n	800c3ee <uxr_serialize_AGENT_Representation+0x3a>

0800c448 <uxr_serialize_DATAWRITER_Representation>:
 800c448:	b570      	push	{r4, r5, r6, lr}
 800c44a:	460d      	mov	r5, r1
 800c44c:	7809      	ldrb	r1, [r1, #0]
 800c44e:	4606      	mov	r6, r0
 800c450:	f7fd f95e 	bl	8009710 <ucdr_serialize_uint8_t>
 800c454:	4604      	mov	r4, r0
 800c456:	b130      	cbz	r0, 800c466 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800c458:	782b      	ldrb	r3, [r5, #0]
 800c45a:	2b02      	cmp	r3, #2
 800c45c:	d00c      	beq.n	800c478 <uxr_serialize_DATAWRITER_Representation+0x30>
 800c45e:	2b03      	cmp	r3, #3
 800c460:	d010      	beq.n	800c484 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800c462:	2b01      	cmp	r3, #1
 800c464:	d008      	beq.n	800c478 <uxr_serialize_DATAWRITER_Representation+0x30>
 800c466:	2202      	movs	r2, #2
 800c468:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800c46c:	4630      	mov	r0, r6
 800c46e:	f002 feed 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800c472:	4020      	ands	r0, r4
 800c474:	b2c0      	uxtb	r0, r0
 800c476:	bd70      	pop	{r4, r5, r6, pc}
 800c478:	6869      	ldr	r1, [r5, #4]
 800c47a:	4630      	mov	r0, r6
 800c47c:	f003 f806 	bl	800f48c <ucdr_serialize_string>
 800c480:	4604      	mov	r4, r0
 800c482:	e7f0      	b.n	800c466 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800c484:	4629      	mov	r1, r5
 800c486:	4630      	mov	r0, r6
 800c488:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800c48c:	3104      	adds	r1, #4
 800c48e:	f002 ffd1 	bl	800f434 <ucdr_serialize_sequence_uint8_t>
 800c492:	4604      	mov	r4, r0
 800c494:	e7e7      	b.n	800c466 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800c496:	bf00      	nop

0800c498 <uxr_serialize_ObjectVariant.part.0>:
 800c498:	b570      	push	{r4, r5, r6, lr}
 800c49a:	780b      	ldrb	r3, [r1, #0]
 800c49c:	3b01      	subs	r3, #1
 800c49e:	460c      	mov	r4, r1
 800c4a0:	4605      	mov	r5, r0
 800c4a2:	2b0d      	cmp	r3, #13
 800c4a4:	d854      	bhi.n	800c550 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800c4a6:	e8df f003 	tbb	[pc, r3]
 800c4aa:	0730      	.short	0x0730
 800c4ac:	07071b1b 	.word	0x07071b1b
 800c4b0:	0c530707 	.word	0x0c530707
 800c4b4:	494e0c0c 	.word	0x494e0c0c
 800c4b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c4bc:	3104      	adds	r1, #4
 800c4be:	f7ff bfc3 	b.w	800c448 <uxr_serialize_DATAWRITER_Representation>
 800c4c2:	7909      	ldrb	r1, [r1, #4]
 800c4c4:	f7fd f924 	bl	8009710 <ucdr_serialize_uint8_t>
 800c4c8:	b1e8      	cbz	r0, 800c506 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800c4ca:	7923      	ldrb	r3, [r4, #4]
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d001      	beq.n	800c4d4 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800c4d0:	2b02      	cmp	r3, #2
 800c4d2:	d13d      	bne.n	800c550 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800c4d4:	68a1      	ldr	r1, [r4, #8]
 800c4d6:	4628      	mov	r0, r5
 800c4d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c4dc:	f002 bfd6 	b.w	800f48c <ucdr_serialize_string>
 800c4e0:	7909      	ldrb	r1, [r1, #4]
 800c4e2:	f7fd f915 	bl	8009710 <ucdr_serialize_uint8_t>
 800c4e6:	4606      	mov	r6, r0
 800c4e8:	b120      	cbz	r0, 800c4f4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800c4ea:	7923      	ldrb	r3, [r4, #4]
 800c4ec:	2b02      	cmp	r3, #2
 800c4ee:	d039      	beq.n	800c564 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800c4f0:	2b03      	cmp	r3, #3
 800c4f2:	d02f      	beq.n	800c554 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800c4f4:	2202      	movs	r2, #2
 800c4f6:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800c4fa:	4628      	mov	r0, r5
 800c4fc:	f002 fea6 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800c500:	4030      	ands	r0, r6
 800c502:	b2c0      	uxtb	r0, r0
 800c504:	bd70      	pop	{r4, r5, r6, pc}
 800c506:	2000      	movs	r0, #0
 800c508:	bd70      	pop	{r4, r5, r6, pc}
 800c50a:	7909      	ldrb	r1, [r1, #4]
 800c50c:	f7fd f900 	bl	8009710 <ucdr_serialize_uint8_t>
 800c510:	4606      	mov	r6, r0
 800c512:	b158      	cbz	r0, 800c52c <uxr_serialize_ObjectVariant.part.0+0x94>
 800c514:	7923      	ldrb	r3, [r4, #4]
 800c516:	2b02      	cmp	r3, #2
 800c518:	d003      	beq.n	800c522 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800c51a:	2b03      	cmp	r3, #3
 800c51c:	d028      	beq.n	800c570 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800c51e:	2b01      	cmp	r3, #1
 800c520:	d104      	bne.n	800c52c <uxr_serialize_ObjectVariant.part.0+0x94>
 800c522:	68a1      	ldr	r1, [r4, #8]
 800c524:	4628      	mov	r0, r5
 800c526:	f002 ffb1 	bl	800f48c <ucdr_serialize_string>
 800c52a:	4606      	mov	r6, r0
 800c52c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800c530:	4628      	mov	r0, r5
 800c532:	f7fd fe29 	bl	800a188 <ucdr_serialize_int16_t>
 800c536:	4030      	ands	r0, r6
 800c538:	b2c0      	uxtb	r0, r0
 800c53a:	bd70      	pop	{r4, r5, r6, pc}
 800c53c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c540:	3104      	adds	r1, #4
 800c542:	f7ff be7b 	b.w	800c23c <uxr_serialize_CLIENT_Representation>
 800c546:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c54a:	3104      	adds	r1, #4
 800c54c:	f7ff bf32 	b.w	800c3b4 <uxr_serialize_AGENT_Representation>
 800c550:	2001      	movs	r0, #1
 800c552:	bd70      	pop	{r4, r5, r6, pc}
 800c554:	68a2      	ldr	r2, [r4, #8]
 800c556:	f104 010c 	add.w	r1, r4, #12
 800c55a:	4628      	mov	r0, r5
 800c55c:	f002 ff6a 	bl	800f434 <ucdr_serialize_sequence_uint8_t>
 800c560:	4606      	mov	r6, r0
 800c562:	e7c7      	b.n	800c4f4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800c564:	68a1      	ldr	r1, [r4, #8]
 800c566:	4628      	mov	r0, r5
 800c568:	f002 ff90 	bl	800f48c <ucdr_serialize_string>
 800c56c:	4606      	mov	r6, r0
 800c56e:	e7c1      	b.n	800c4f4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800c570:	68a2      	ldr	r2, [r4, #8]
 800c572:	f104 010c 	add.w	r1, r4, #12
 800c576:	4628      	mov	r0, r5
 800c578:	f002 ff5c 	bl	800f434 <ucdr_serialize_sequence_uint8_t>
 800c57c:	4606      	mov	r6, r0
 800c57e:	e7d5      	b.n	800c52c <uxr_serialize_ObjectVariant.part.0+0x94>

0800c580 <uxr_deserialize_DATAWRITER_Representation>:
 800c580:	b570      	push	{r4, r5, r6, lr}
 800c582:	4606      	mov	r6, r0
 800c584:	460d      	mov	r5, r1
 800c586:	f7fd f8d9 	bl	800973c <ucdr_deserialize_uint8_t>
 800c58a:	4604      	mov	r4, r0
 800c58c:	b130      	cbz	r0, 800c59c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800c58e:	782b      	ldrb	r3, [r5, #0]
 800c590:	2b02      	cmp	r3, #2
 800c592:	d00c      	beq.n	800c5ae <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800c594:	2b03      	cmp	r3, #3
 800c596:	d012      	beq.n	800c5be <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800c598:	2b01      	cmp	r3, #1
 800c59a:	d008      	beq.n	800c5ae <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800c59c:	2202      	movs	r2, #2
 800c59e:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800c5a2:	4630      	mov	r0, r6
 800c5a4:	f002 feb6 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800c5a8:	4020      	ands	r0, r4
 800c5aa:	b2c0      	uxtb	r0, r0
 800c5ac:	bd70      	pop	{r4, r5, r6, pc}
 800c5ae:	6869      	ldr	r1, [r5, #4]
 800c5b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c5b4:	4630      	mov	r0, r6
 800c5b6:	f002 ff79 	bl	800f4ac <ucdr_deserialize_string>
 800c5ba:	4604      	mov	r4, r0
 800c5bc:	e7ee      	b.n	800c59c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800c5be:	1d2b      	adds	r3, r5, #4
 800c5c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c5c4:	f105 0108 	add.w	r1, r5, #8
 800c5c8:	4630      	mov	r0, r6
 800c5ca:	f002 ff45 	bl	800f458 <ucdr_deserialize_sequence_uint8_t>
 800c5ce:	4604      	mov	r4, r0
 800c5d0:	e7e4      	b.n	800c59c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800c5d2:	bf00      	nop

0800c5d4 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800c5d4:	b570      	push	{r4, r5, r6, lr}
 800c5d6:	460d      	mov	r5, r1
 800c5d8:	7809      	ldrb	r1, [r1, #0]
 800c5da:	4606      	mov	r6, r0
 800c5dc:	f7fd f86a 	bl	80096b4 <ucdr_serialize_bool>
 800c5e0:	782b      	ldrb	r3, [r5, #0]
 800c5e2:	4604      	mov	r4, r0
 800c5e4:	b94b      	cbnz	r3, 800c5fa <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800c5e6:	7a29      	ldrb	r1, [r5, #8]
 800c5e8:	4630      	mov	r0, r6
 800c5ea:	f7fd f863 	bl	80096b4 <ucdr_serialize_bool>
 800c5ee:	7a2b      	ldrb	r3, [r5, #8]
 800c5f0:	4004      	ands	r4, r0
 800c5f2:	b2e4      	uxtb	r4, r4
 800c5f4:	b943      	cbnz	r3, 800c608 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	bd70      	pop	{r4, r5, r6, pc}
 800c5fa:	6869      	ldr	r1, [r5, #4]
 800c5fc:	4630      	mov	r0, r6
 800c5fe:	f002 ff45 	bl	800f48c <ucdr_serialize_string>
 800c602:	4004      	ands	r4, r0
 800c604:	b2e4      	uxtb	r4, r4
 800c606:	e7ee      	b.n	800c5e6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800c608:	68e9      	ldr	r1, [r5, #12]
 800c60a:	4630      	mov	r0, r6
 800c60c:	f002 ff3e 	bl	800f48c <ucdr_serialize_string>
 800c610:	4004      	ands	r4, r0
 800c612:	4620      	mov	r0, r4
 800c614:	bd70      	pop	{r4, r5, r6, pc}
 800c616:	bf00      	nop

0800c618 <uxr_serialize_OBJK_Topic_Binary>:
 800c618:	b570      	push	{r4, r5, r6, lr}
 800c61a:	460d      	mov	r5, r1
 800c61c:	6809      	ldr	r1, [r1, #0]
 800c61e:	4606      	mov	r6, r0
 800c620:	f002 ff34 	bl	800f48c <ucdr_serialize_string>
 800c624:	7929      	ldrb	r1, [r5, #4]
 800c626:	4604      	mov	r4, r0
 800c628:	4630      	mov	r0, r6
 800c62a:	f7fd f843 	bl	80096b4 <ucdr_serialize_bool>
 800c62e:	792b      	ldrb	r3, [r5, #4]
 800c630:	4004      	ands	r4, r0
 800c632:	b2e4      	uxtb	r4, r4
 800c634:	b943      	cbnz	r3, 800c648 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800c636:	7b29      	ldrb	r1, [r5, #12]
 800c638:	4630      	mov	r0, r6
 800c63a:	f7fd f83b 	bl	80096b4 <ucdr_serialize_bool>
 800c63e:	7b2b      	ldrb	r3, [r5, #12]
 800c640:	4004      	ands	r4, r0
 800c642:	b93b      	cbnz	r3, 800c654 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800c644:	4620      	mov	r0, r4
 800c646:	bd70      	pop	{r4, r5, r6, pc}
 800c648:	68a9      	ldr	r1, [r5, #8]
 800c64a:	4630      	mov	r0, r6
 800c64c:	f002 ff1e 	bl	800f48c <ucdr_serialize_string>
 800c650:	4004      	ands	r4, r0
 800c652:	e7f0      	b.n	800c636 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800c654:	6929      	ldr	r1, [r5, #16]
 800c656:	4630      	mov	r0, r6
 800c658:	f002 ff18 	bl	800f48c <ucdr_serialize_string>
 800c65c:	4004      	ands	r4, r0
 800c65e:	b2e4      	uxtb	r4, r4
 800c660:	4620      	mov	r0, r4
 800c662:	bd70      	pop	{r4, r5, r6, pc}

0800c664 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800c664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c668:	460c      	mov	r4, r1
 800c66a:	7809      	ldrb	r1, [r1, #0]
 800c66c:	4606      	mov	r6, r0
 800c66e:	f7fd f821 	bl	80096b4 <ucdr_serialize_bool>
 800c672:	7823      	ldrb	r3, [r4, #0]
 800c674:	4605      	mov	r5, r0
 800c676:	b96b      	cbnz	r3, 800c694 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800c678:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800c67c:	4630      	mov	r0, r6
 800c67e:	f7fd f819 	bl	80096b4 <ucdr_serialize_bool>
 800c682:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c686:	4005      	ands	r5, r0
 800c688:	b2ed      	uxtb	r5, r5
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d169      	bne.n	800c762 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800c68e:	4628      	mov	r0, r5
 800c690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c694:	6861      	ldr	r1, [r4, #4]
 800c696:	4630      	mov	r0, r6
 800c698:	f7fd fa50 	bl	8009b3c <ucdr_serialize_uint32_t>
 800c69c:	6863      	ldr	r3, [r4, #4]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d06b      	beq.n	800c77a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	d067      	beq.n	800c776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c6a6:	68a1      	ldr	r1, [r4, #8]
 800c6a8:	4630      	mov	r0, r6
 800c6aa:	f002 feef 	bl	800f48c <ucdr_serialize_string>
 800c6ae:	6863      	ldr	r3, [r4, #4]
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d953      	bls.n	800c75c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c6b4:	2800      	cmp	r0, #0
 800c6b6:	d05e      	beq.n	800c776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c6b8:	68e1      	ldr	r1, [r4, #12]
 800c6ba:	4630      	mov	r0, r6
 800c6bc:	f002 fee6 	bl	800f48c <ucdr_serialize_string>
 800c6c0:	6863      	ldr	r3, [r4, #4]
 800c6c2:	2b02      	cmp	r3, #2
 800c6c4:	d94a      	bls.n	800c75c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	d055      	beq.n	800c776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c6ca:	6921      	ldr	r1, [r4, #16]
 800c6cc:	4630      	mov	r0, r6
 800c6ce:	f002 fedd 	bl	800f48c <ucdr_serialize_string>
 800c6d2:	6863      	ldr	r3, [r4, #4]
 800c6d4:	2b03      	cmp	r3, #3
 800c6d6:	d941      	bls.n	800c75c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	d04c      	beq.n	800c776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c6dc:	6961      	ldr	r1, [r4, #20]
 800c6de:	4630      	mov	r0, r6
 800c6e0:	f002 fed4 	bl	800f48c <ucdr_serialize_string>
 800c6e4:	6863      	ldr	r3, [r4, #4]
 800c6e6:	2b04      	cmp	r3, #4
 800c6e8:	d938      	bls.n	800c75c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c6ea:	2800      	cmp	r0, #0
 800c6ec:	d043      	beq.n	800c776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c6ee:	69a1      	ldr	r1, [r4, #24]
 800c6f0:	4630      	mov	r0, r6
 800c6f2:	f002 fecb 	bl	800f48c <ucdr_serialize_string>
 800c6f6:	6863      	ldr	r3, [r4, #4]
 800c6f8:	2b05      	cmp	r3, #5
 800c6fa:	d92f      	bls.n	800c75c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	d03a      	beq.n	800c776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c700:	69e1      	ldr	r1, [r4, #28]
 800c702:	4630      	mov	r0, r6
 800c704:	f002 fec2 	bl	800f48c <ucdr_serialize_string>
 800c708:	6863      	ldr	r3, [r4, #4]
 800c70a:	2b06      	cmp	r3, #6
 800c70c:	d926      	bls.n	800c75c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c70e:	b390      	cbz	r0, 800c776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c710:	6a21      	ldr	r1, [r4, #32]
 800c712:	4630      	mov	r0, r6
 800c714:	f002 feba 	bl	800f48c <ucdr_serialize_string>
 800c718:	6863      	ldr	r3, [r4, #4]
 800c71a:	2b07      	cmp	r3, #7
 800c71c:	d91e      	bls.n	800c75c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c71e:	b350      	cbz	r0, 800c776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c720:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c722:	4630      	mov	r0, r6
 800c724:	f002 feb2 	bl	800f48c <ucdr_serialize_string>
 800c728:	6863      	ldr	r3, [r4, #4]
 800c72a:	2b08      	cmp	r3, #8
 800c72c:	d916      	bls.n	800c75c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c72e:	b310      	cbz	r0, 800c776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c730:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800c732:	4630      	mov	r0, r6
 800c734:	f002 feaa 	bl	800f48c <ucdr_serialize_string>
 800c738:	6863      	ldr	r3, [r4, #4]
 800c73a:	2b09      	cmp	r3, #9
 800c73c:	d90e      	bls.n	800c75c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c73e:	b1d0      	cbz	r0, 800c776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c740:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800c744:	2709      	movs	r7, #9
 800c746:	e000      	b.n	800c74a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800c748:	b1a8      	cbz	r0, 800c776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c74a:	f858 1b04 	ldr.w	r1, [r8], #4
 800c74e:	4630      	mov	r0, r6
 800c750:	f002 fe9c 	bl	800f48c <ucdr_serialize_string>
 800c754:	6862      	ldr	r2, [r4, #4]
 800c756:	3701      	adds	r7, #1
 800c758:	4297      	cmp	r7, r2
 800c75a:	d3f5      	bcc.n	800c748 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800c75c:	4005      	ands	r5, r0
 800c75e:	b2ed      	uxtb	r5, r5
 800c760:	e78a      	b.n	800c678 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800c762:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c764:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800c768:	4630      	mov	r0, r6
 800c76a:	f002 fe63 	bl	800f434 <ucdr_serialize_sequence_uint8_t>
 800c76e:	4005      	ands	r5, r0
 800c770:	4628      	mov	r0, r5
 800c772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c776:	2500      	movs	r5, #0
 800c778:	e77e      	b.n	800c678 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800c77a:	4028      	ands	r0, r5
 800c77c:	b2c5      	uxtb	r5, r0
 800c77e:	e77b      	b.n	800c678 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800c780 <uxr_serialize_OBJK_Publisher_Binary>:
 800c780:	b570      	push	{r4, r5, r6, lr}
 800c782:	460d      	mov	r5, r1
 800c784:	7809      	ldrb	r1, [r1, #0]
 800c786:	4606      	mov	r6, r0
 800c788:	f7fc ff94 	bl	80096b4 <ucdr_serialize_bool>
 800c78c:	782b      	ldrb	r3, [r5, #0]
 800c78e:	4604      	mov	r4, r0
 800c790:	b94b      	cbnz	r3, 800c7a6 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800c792:	7a29      	ldrb	r1, [r5, #8]
 800c794:	4630      	mov	r0, r6
 800c796:	f7fc ff8d 	bl	80096b4 <ucdr_serialize_bool>
 800c79a:	7a2b      	ldrb	r3, [r5, #8]
 800c79c:	4004      	ands	r4, r0
 800c79e:	b2e4      	uxtb	r4, r4
 800c7a0:	b943      	cbnz	r3, 800c7b4 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800c7a2:	4620      	mov	r0, r4
 800c7a4:	bd70      	pop	{r4, r5, r6, pc}
 800c7a6:	6869      	ldr	r1, [r5, #4]
 800c7a8:	4630      	mov	r0, r6
 800c7aa:	f002 fe6f 	bl	800f48c <ucdr_serialize_string>
 800c7ae:	4004      	ands	r4, r0
 800c7b0:	b2e4      	uxtb	r4, r4
 800c7b2:	e7ee      	b.n	800c792 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800c7b4:	f105 010c 	add.w	r1, r5, #12
 800c7b8:	4630      	mov	r0, r6
 800c7ba:	f7ff ff53 	bl	800c664 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800c7be:	4004      	ands	r4, r0
 800c7c0:	4620      	mov	r0, r4
 800c7c2:	bd70      	pop	{r4, r5, r6, pc}

0800c7c4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800c7c4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800c7c8:	4688      	mov	r8, r1
 800c7ca:	8809      	ldrh	r1, [r1, #0]
 800c7cc:	4681      	mov	r9, r0
 800c7ce:	f7fc ffcb 	bl	8009768 <ucdr_serialize_uint16_t>
 800c7d2:	f898 1002 	ldrb.w	r1, [r8, #2]
 800c7d6:	4606      	mov	r6, r0
 800c7d8:	4648      	mov	r0, r9
 800c7da:	f7fc ff6b 	bl	80096b4 <ucdr_serialize_bool>
 800c7de:	f898 3002 	ldrb.w	r3, [r8, #2]
 800c7e2:	4006      	ands	r6, r0
 800c7e4:	b2f5      	uxtb	r5, r6
 800c7e6:	b9eb      	cbnz	r3, 800c824 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800c7e8:	f898 1006 	ldrb.w	r1, [r8, #6]
 800c7ec:	4648      	mov	r0, r9
 800c7ee:	f7fc ff61 	bl	80096b4 <ucdr_serialize_bool>
 800c7f2:	f898 3006 	ldrb.w	r3, [r8, #6]
 800c7f6:	4005      	ands	r5, r0
 800c7f8:	bb7b      	cbnz	r3, 800c85a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800c7fa:	f898 100c 	ldrb.w	r1, [r8, #12]
 800c7fe:	4648      	mov	r0, r9
 800c800:	f7fc ff58 	bl	80096b4 <ucdr_serialize_bool>
 800c804:	f898 300c 	ldrb.w	r3, [r8, #12]
 800c808:	4005      	ands	r5, r0
 800c80a:	b9f3      	cbnz	r3, 800c84a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800c80c:	f898 1014 	ldrb.w	r1, [r8, #20]
 800c810:	4648      	mov	r0, r9
 800c812:	f7fc ff4f 	bl	80096b4 <ucdr_serialize_bool>
 800c816:	f898 3014 	ldrb.w	r3, [r8, #20]
 800c81a:	4005      	ands	r5, r0
 800c81c:	b94b      	cbnz	r3, 800c832 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800c81e:	4628      	mov	r0, r5
 800c820:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800c824:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800c828:	4648      	mov	r0, r9
 800c82a:	f7fc ff9d 	bl	8009768 <ucdr_serialize_uint16_t>
 800c82e:	4005      	ands	r5, r0
 800c830:	e7da      	b.n	800c7e8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800c832:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800c836:	f108 011c 	add.w	r1, r8, #28
 800c83a:	4648      	mov	r0, r9
 800c83c:	f002 fdfa 	bl	800f434 <ucdr_serialize_sequence_uint8_t>
 800c840:	4028      	ands	r0, r5
 800c842:	b2c5      	uxtb	r5, r0
 800c844:	4628      	mov	r0, r5
 800c846:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800c84a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c84e:	4648      	mov	r0, r9
 800c850:	f7fd f974 	bl	8009b3c <ucdr_serialize_uint32_t>
 800c854:	4028      	ands	r0, r5
 800c856:	b2c5      	uxtb	r5, r0
 800c858:	e7d8      	b.n	800c80c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800c85a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800c85e:	4648      	mov	r0, r9
 800c860:	f7fd f96c 	bl	8009b3c <ucdr_serialize_uint32_t>
 800c864:	4028      	ands	r0, r5
 800c866:	b2c5      	uxtb	r5, r0
 800c868:	e7c7      	b.n	800c7fa <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800c86a:	bf00      	nop

0800c86c <uxr_serialize_OBJK_DataWriter_Binary>:
 800c86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c86e:	2202      	movs	r2, #2
 800c870:	460d      	mov	r5, r1
 800c872:	4606      	mov	r6, r0
 800c874:	f002 fcea 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800c878:	78a9      	ldrb	r1, [r5, #2]
 800c87a:	4604      	mov	r4, r0
 800c87c:	4630      	mov	r0, r6
 800c87e:	f7fc ff19 	bl	80096b4 <ucdr_serialize_bool>
 800c882:	78ab      	ldrb	r3, [r5, #2]
 800c884:	4004      	ands	r4, r0
 800c886:	b2e4      	uxtb	r4, r4
 800c888:	b90b      	cbnz	r3, 800c88e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800c88a:	4620      	mov	r0, r4
 800c88c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c88e:	f105 0108 	add.w	r1, r5, #8
 800c892:	4630      	mov	r0, r6
 800c894:	f7ff ff96 	bl	800c7c4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800c898:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 800c89c:	4607      	mov	r7, r0
 800c89e:	4630      	mov	r0, r6
 800c8a0:	f7fc ff08 	bl	80096b4 <ucdr_serialize_bool>
 800c8a4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800c8a8:	4038      	ands	r0, r7
 800c8aa:	b2c7      	uxtb	r7, r0
 800c8ac:	b913      	cbnz	r3, 800c8b4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800c8ae:	403c      	ands	r4, r7
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8b4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 800c8b8:	4630      	mov	r0, r6
 800c8ba:	f7fd fb95 	bl	8009fe8 <ucdr_serialize_uint64_t>
 800c8be:	4007      	ands	r7, r0
 800c8c0:	e7f5      	b.n	800c8ae <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800c8c2:	bf00      	nop

0800c8c4 <uxr_deserialize_ObjectVariant>:
 800c8c4:	b570      	push	{r4, r5, r6, lr}
 800c8c6:	4605      	mov	r5, r0
 800c8c8:	460e      	mov	r6, r1
 800c8ca:	f7fc ff37 	bl	800973c <ucdr_deserialize_uint8_t>
 800c8ce:	b168      	cbz	r0, 800c8ec <uxr_deserialize_ObjectVariant+0x28>
 800c8d0:	7833      	ldrb	r3, [r6, #0]
 800c8d2:	3b01      	subs	r3, #1
 800c8d4:	4604      	mov	r4, r0
 800c8d6:	2b0d      	cmp	r3, #13
 800c8d8:	d809      	bhi.n	800c8ee <uxr_deserialize_ObjectVariant+0x2a>
 800c8da:	e8df f003 	tbb	[pc, r3]
 800c8de:	0a41      	.short	0x0a41
 800c8e0:	0a0a2323 	.word	0x0a0a2323
 800c8e4:	10080a0a 	.word	0x10080a0a
 800c8e8:	565c1010 	.word	0x565c1010
 800c8ec:	2400      	movs	r4, #0
 800c8ee:	4620      	mov	r0, r4
 800c8f0:	bd70      	pop	{r4, r5, r6, pc}
 800c8f2:	1d31      	adds	r1, r6, #4
 800c8f4:	4628      	mov	r0, r5
 800c8f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c8fa:	f7ff be41 	b.w	800c580 <uxr_deserialize_DATAWRITER_Representation>
 800c8fe:	1d31      	adds	r1, r6, #4
 800c900:	4628      	mov	r0, r5
 800c902:	f7fc ff1b 	bl	800973c <ucdr_deserialize_uint8_t>
 800c906:	2800      	cmp	r0, #0
 800c908:	d0f0      	beq.n	800c8ec <uxr_deserialize_ObjectVariant+0x28>
 800c90a:	7933      	ldrb	r3, [r6, #4]
 800c90c:	2b01      	cmp	r3, #1
 800c90e:	d001      	beq.n	800c914 <uxr_deserialize_ObjectVariant+0x50>
 800c910:	2b02      	cmp	r3, #2
 800c912:	d1ec      	bne.n	800c8ee <uxr_deserialize_ObjectVariant+0x2a>
 800c914:	68b1      	ldr	r1, [r6, #8]
 800c916:	4628      	mov	r0, r5
 800c918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c91c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c920:	f002 bdc4 	b.w	800f4ac <ucdr_deserialize_string>
 800c924:	1d31      	adds	r1, r6, #4
 800c926:	4628      	mov	r0, r5
 800c928:	f7fc ff08 	bl	800973c <ucdr_deserialize_uint8_t>
 800c92c:	4604      	mov	r4, r0
 800c92e:	b170      	cbz	r0, 800c94e <uxr_deserialize_ObjectVariant+0x8a>
 800c930:	7933      	ldrb	r3, [r6, #4]
 800c932:	2b02      	cmp	r3, #2
 800c934:	d04c      	beq.n	800c9d0 <uxr_deserialize_ObjectVariant+0x10c>
 800c936:	2b03      	cmp	r3, #3
 800c938:	d109      	bne.n	800c94e <uxr_deserialize_ObjectVariant+0x8a>
 800c93a:	f106 0308 	add.w	r3, r6, #8
 800c93e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c942:	f106 010c 	add.w	r1, r6, #12
 800c946:	4628      	mov	r0, r5
 800c948:	f002 fd86 	bl	800f458 <ucdr_deserialize_sequence_uint8_t>
 800c94c:	4604      	mov	r4, r0
 800c94e:	2202      	movs	r2, #2
 800c950:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800c954:	4628      	mov	r0, r5
 800c956:	f002 fcdd 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800c95a:	4020      	ands	r0, r4
 800c95c:	b2c4      	uxtb	r4, r0
 800c95e:	e7c6      	b.n	800c8ee <uxr_deserialize_ObjectVariant+0x2a>
 800c960:	1d31      	adds	r1, r6, #4
 800c962:	4628      	mov	r0, r5
 800c964:	f7fc feea 	bl	800973c <ucdr_deserialize_uint8_t>
 800c968:	4604      	mov	r4, r0
 800c96a:	b130      	cbz	r0, 800c97a <uxr_deserialize_ObjectVariant+0xb6>
 800c96c:	7933      	ldrb	r3, [r6, #4]
 800c96e:	2b02      	cmp	r3, #2
 800c970:	d036      	beq.n	800c9e0 <uxr_deserialize_ObjectVariant+0x11c>
 800c972:	2b03      	cmp	r3, #3
 800c974:	d03c      	beq.n	800c9f0 <uxr_deserialize_ObjectVariant+0x12c>
 800c976:	2b01      	cmp	r3, #1
 800c978:	d032      	beq.n	800c9e0 <uxr_deserialize_ObjectVariant+0x11c>
 800c97a:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800c97e:	4628      	mov	r0, r5
 800c980:	f7fd fc82 	bl	800a288 <ucdr_deserialize_int16_t>
 800c984:	4020      	ands	r0, r4
 800c986:	b2c4      	uxtb	r4, r0
 800c988:	e7b1      	b.n	800c8ee <uxr_deserialize_ObjectVariant+0x2a>
 800c98a:	1d31      	adds	r1, r6, #4
 800c98c:	4628      	mov	r0, r5
 800c98e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c992:	f7ff bcab 	b.w	800c2ec <uxr_deserialize_CLIENT_Representation>
 800c996:	2204      	movs	r2, #4
 800c998:	18b1      	adds	r1, r6, r2
 800c99a:	4628      	mov	r0, r5
 800c99c:	f002 fcba 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800c9a0:	2202      	movs	r2, #2
 800c9a2:	f106 0108 	add.w	r1, r6, #8
 800c9a6:	4604      	mov	r4, r0
 800c9a8:	4628      	mov	r0, r5
 800c9aa:	f002 fcb3 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800c9ae:	2202      	movs	r2, #2
 800c9b0:	4004      	ands	r4, r0
 800c9b2:	f106 010a 	add.w	r1, r6, #10
 800c9b6:	4628      	mov	r0, r5
 800c9b8:	f002 fcac 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800c9bc:	b2e4      	uxtb	r4, r4
 800c9be:	4603      	mov	r3, r0
 800c9c0:	f106 010c 	add.w	r1, r6, #12
 800c9c4:	4628      	mov	r0, r5
 800c9c6:	401c      	ands	r4, r3
 800c9c8:	f7fc fe8a 	bl	80096e0 <ucdr_deserialize_bool>
 800c9cc:	4004      	ands	r4, r0
 800c9ce:	e78e      	b.n	800c8ee <uxr_deserialize_ObjectVariant+0x2a>
 800c9d0:	68b1      	ldr	r1, [r6, #8]
 800c9d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c9d6:	4628      	mov	r0, r5
 800c9d8:	f002 fd68 	bl	800f4ac <ucdr_deserialize_string>
 800c9dc:	4604      	mov	r4, r0
 800c9de:	e7b6      	b.n	800c94e <uxr_deserialize_ObjectVariant+0x8a>
 800c9e0:	68b1      	ldr	r1, [r6, #8]
 800c9e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c9e6:	4628      	mov	r0, r5
 800c9e8:	f002 fd60 	bl	800f4ac <ucdr_deserialize_string>
 800c9ec:	4604      	mov	r4, r0
 800c9ee:	e7c4      	b.n	800c97a <uxr_deserialize_ObjectVariant+0xb6>
 800c9f0:	f106 0308 	add.w	r3, r6, #8
 800c9f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c9f8:	f106 010c 	add.w	r1, r6, #12
 800c9fc:	4628      	mov	r0, r5
 800c9fe:	f002 fd2b 	bl	800f458 <ucdr_deserialize_sequence_uint8_t>
 800ca02:	4604      	mov	r4, r0
 800ca04:	e7b9      	b.n	800c97a <uxr_deserialize_ObjectVariant+0xb6>
 800ca06:	bf00      	nop

0800ca08 <uxr_deserialize_BaseObjectRequest>:
 800ca08:	b570      	push	{r4, r5, r6, lr}
 800ca0a:	2202      	movs	r2, #2
 800ca0c:	4605      	mov	r5, r0
 800ca0e:	460e      	mov	r6, r1
 800ca10:	f002 fc80 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800ca14:	2202      	movs	r2, #2
 800ca16:	4604      	mov	r4, r0
 800ca18:	18b1      	adds	r1, r6, r2
 800ca1a:	4628      	mov	r0, r5
 800ca1c:	f002 fc7a 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800ca20:	4020      	ands	r0, r4
 800ca22:	b2c0      	uxtb	r0, r0
 800ca24:	bd70      	pop	{r4, r5, r6, pc}
 800ca26:	bf00      	nop

0800ca28 <uxr_serialize_ActivityInfoVariant>:
 800ca28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca2c:	460d      	mov	r5, r1
 800ca2e:	7809      	ldrb	r1, [r1, #0]
 800ca30:	4607      	mov	r7, r0
 800ca32:	f7fc fe6d 	bl	8009710 <ucdr_serialize_uint8_t>
 800ca36:	4681      	mov	r9, r0
 800ca38:	b138      	cbz	r0, 800ca4a <uxr_serialize_ActivityInfoVariant+0x22>
 800ca3a:	782b      	ldrb	r3, [r5, #0]
 800ca3c:	2b06      	cmp	r3, #6
 800ca3e:	f000 8082 	beq.w	800cb46 <uxr_serialize_ActivityInfoVariant+0x11e>
 800ca42:	2b0d      	cmp	r3, #13
 800ca44:	d016      	beq.n	800ca74 <uxr_serialize_ActivityInfoVariant+0x4c>
 800ca46:	2b05      	cmp	r3, #5
 800ca48:	d002      	beq.n	800ca50 <uxr_serialize_ActivityInfoVariant+0x28>
 800ca4a:	4648      	mov	r0, r9
 800ca4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca50:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800ca54:	4638      	mov	r0, r7
 800ca56:	f7fd fb97 	bl	800a188 <ucdr_serialize_int16_t>
 800ca5a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800ca5e:	4681      	mov	r9, r0
 800ca60:	4638      	mov	r0, r7
 800ca62:	f7fd fac1 	bl	8009fe8 <ucdr_serialize_uint64_t>
 800ca66:	ea09 0000 	and.w	r0, r9, r0
 800ca6a:	fa5f f980 	uxtb.w	r9, r0
 800ca6e:	4648      	mov	r0, r9
 800ca70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca74:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800ca78:	4638      	mov	r0, r7
 800ca7a:	f7fd fb85 	bl	800a188 <ucdr_serialize_int16_t>
 800ca7e:	68e9      	ldr	r1, [r5, #12]
 800ca80:	4681      	mov	r9, r0
 800ca82:	4638      	mov	r0, r7
 800ca84:	f7fd f85a 	bl	8009b3c <ucdr_serialize_uint32_t>
 800ca88:	68eb      	ldr	r3, [r5, #12]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d0eb      	beq.n	800ca66 <uxr_serialize_ActivityInfoVariant+0x3e>
 800ca8e:	b320      	cbz	r0, 800cada <uxr_serialize_ActivityInfoVariant+0xb2>
 800ca90:	f105 080c 	add.w	r8, r5, #12
 800ca94:	2600      	movs	r6, #0
 800ca96:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800ca9a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800ca9e:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800caa2:	4638      	mov	r0, r7
 800caa4:	f7fc fe34 	bl	8009710 <ucdr_serialize_uint8_t>
 800caa8:	2800      	cmp	r0, #0
 800caaa:	d053      	beq.n	800cb54 <uxr_serialize_ActivityInfoVariant+0x12c>
 800caac:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800cab0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800cab4:	0074      	lsls	r4, r6, #1
 800cab6:	00c9      	lsls	r1, r1, #3
 800cab8:	2b03      	cmp	r3, #3
 800caba:	d854      	bhi.n	800cb66 <uxr_serialize_ActivityInfoVariant+0x13e>
 800cabc:	e8df f003 	tbb	[pc, r3]
 800cac0:	02102132 	.word	0x02102132
 800cac4:	4441      	add	r1, r8
 800cac6:	4638      	mov	r0, r7
 800cac8:	6889      	ldr	r1, [r1, #8]
 800caca:	f002 fcdf 	bl	800f48c <ucdr_serialize_string>
 800cace:	68ea      	ldr	r2, [r5, #12]
 800cad0:	3601      	adds	r6, #1
 800cad2:	4296      	cmp	r6, r2
 800cad4:	d242      	bcs.n	800cb5c <uxr_serialize_ActivityInfoVariant+0x134>
 800cad6:	2800      	cmp	r0, #0
 800cad8:	d1dd      	bne.n	800ca96 <uxr_serialize_ActivityInfoVariant+0x6e>
 800cada:	f04f 0900 	mov.w	r9, #0
 800cade:	e7b4      	b.n	800ca4a <uxr_serialize_ActivityInfoVariant+0x22>
 800cae0:	3108      	adds	r1, #8
 800cae2:	4441      	add	r1, r8
 800cae4:	2210      	movs	r2, #16
 800cae6:	4638      	mov	r0, r7
 800cae8:	f002 fbb0 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800caec:	4434      	add	r4, r6
 800caee:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800caf2:	4604      	mov	r4, r0
 800caf4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800caf6:	4638      	mov	r0, r7
 800caf8:	f7fd f820 	bl	8009b3c <ucdr_serialize_uint32_t>
 800cafc:	4020      	ands	r0, r4
 800cafe:	b2c0      	uxtb	r0, r0
 800cb00:	e7e5      	b.n	800cace <uxr_serialize_ActivityInfoVariant+0xa6>
 800cb02:	3108      	adds	r1, #8
 800cb04:	4441      	add	r1, r8
 800cb06:	2204      	movs	r2, #4
 800cb08:	4638      	mov	r0, r7
 800cb0a:	f002 fb9f 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800cb0e:	4434      	add	r4, r6
 800cb10:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800cb14:	4604      	mov	r4, r0
 800cb16:	8b19      	ldrh	r1, [r3, #24]
 800cb18:	4638      	mov	r0, r7
 800cb1a:	f7fc fe25 	bl	8009768 <ucdr_serialize_uint16_t>
 800cb1e:	4020      	ands	r0, r4
 800cb20:	b2c0      	uxtb	r0, r0
 800cb22:	e7d4      	b.n	800cace <uxr_serialize_ActivityInfoVariant+0xa6>
 800cb24:	3108      	adds	r1, #8
 800cb26:	4441      	add	r1, r8
 800cb28:	2202      	movs	r2, #2
 800cb2a:	4638      	mov	r0, r7
 800cb2c:	f002 fb8e 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800cb30:	4434      	add	r4, r6
 800cb32:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800cb36:	4604      	mov	r4, r0
 800cb38:	7d99      	ldrb	r1, [r3, #22]
 800cb3a:	4638      	mov	r0, r7
 800cb3c:	f7fc fde8 	bl	8009710 <ucdr_serialize_uint8_t>
 800cb40:	4020      	ands	r0, r4
 800cb42:	b2c0      	uxtb	r0, r0
 800cb44:	e7c3      	b.n	800cace <uxr_serialize_ActivityInfoVariant+0xa6>
 800cb46:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800cb4a:	4638      	mov	r0, r7
 800cb4c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb50:	f7fd bb1a 	b.w	800a188 <ucdr_serialize_int16_t>
 800cb54:	68ea      	ldr	r2, [r5, #12]
 800cb56:	3601      	adds	r6, #1
 800cb58:	42b2      	cmp	r2, r6
 800cb5a:	d8be      	bhi.n	800cada <uxr_serialize_ActivityInfoVariant+0xb2>
 800cb5c:	ea09 0900 	and.w	r9, r9, r0
 800cb60:	fa5f f989 	uxtb.w	r9, r9
 800cb64:	e771      	b.n	800ca4a <uxr_serialize_ActivityInfoVariant+0x22>
 800cb66:	68eb      	ldr	r3, [r5, #12]
 800cb68:	3601      	adds	r6, #1
 800cb6a:	429e      	cmp	r6, r3
 800cb6c:	f10a 0a18 	add.w	sl, sl, #24
 800cb70:	d395      	bcc.n	800ca9e <uxr_serialize_ActivityInfoVariant+0x76>
 800cb72:	e76a      	b.n	800ca4a <uxr_serialize_ActivityInfoVariant+0x22>

0800cb74 <uxr_deserialize_BaseObjectReply>:
 800cb74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb78:	2202      	movs	r2, #2
 800cb7a:	4606      	mov	r6, r0
 800cb7c:	460f      	mov	r7, r1
 800cb7e:	f002 fbc9 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800cb82:	2202      	movs	r2, #2
 800cb84:	18b9      	adds	r1, r7, r2
 800cb86:	4605      	mov	r5, r0
 800cb88:	4630      	mov	r0, r6
 800cb8a:	f002 fbc3 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800cb8e:	1d39      	adds	r1, r7, #4
 800cb90:	4680      	mov	r8, r0
 800cb92:	4630      	mov	r0, r6
 800cb94:	f7fc fdd2 	bl	800973c <ucdr_deserialize_uint8_t>
 800cb98:	1d79      	adds	r1, r7, #5
 800cb9a:	4604      	mov	r4, r0
 800cb9c:	4630      	mov	r0, r6
 800cb9e:	f7fc fdcd 	bl	800973c <ucdr_deserialize_uint8_t>
 800cba2:	ea05 0508 	and.w	r5, r5, r8
 800cba6:	402c      	ands	r4, r5
 800cba8:	4020      	ands	r0, r4
 800cbaa:	b2c0      	uxtb	r0, r0
 800cbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cbb0 <uxr_serialize_ReadSpecification>:
 800cbb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbb4:	460e      	mov	r6, r1
 800cbb6:	7809      	ldrb	r1, [r1, #0]
 800cbb8:	4607      	mov	r7, r0
 800cbba:	f7fc fda9 	bl	8009710 <ucdr_serialize_uint8_t>
 800cbbe:	7871      	ldrb	r1, [r6, #1]
 800cbc0:	4604      	mov	r4, r0
 800cbc2:	4638      	mov	r0, r7
 800cbc4:	f7fc fda4 	bl	8009710 <ucdr_serialize_uint8_t>
 800cbc8:	78b1      	ldrb	r1, [r6, #2]
 800cbca:	4004      	ands	r4, r0
 800cbcc:	4638      	mov	r0, r7
 800cbce:	f7fc fd71 	bl	80096b4 <ucdr_serialize_bool>
 800cbd2:	78b3      	ldrb	r3, [r6, #2]
 800cbd4:	b2e4      	uxtb	r4, r4
 800cbd6:	4004      	ands	r4, r0
 800cbd8:	b94b      	cbnz	r3, 800cbee <uxr_serialize_ReadSpecification+0x3e>
 800cbda:	7a31      	ldrb	r1, [r6, #8]
 800cbdc:	4638      	mov	r0, r7
 800cbde:	f7fc fd69 	bl	80096b4 <ucdr_serialize_bool>
 800cbe2:	7a33      	ldrb	r3, [r6, #8]
 800cbe4:	4004      	ands	r4, r0
 800cbe6:	b943      	cbnz	r3, 800cbfa <uxr_serialize_ReadSpecification+0x4a>
 800cbe8:	4620      	mov	r0, r4
 800cbea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbee:	6871      	ldr	r1, [r6, #4]
 800cbf0:	4638      	mov	r0, r7
 800cbf2:	f002 fc4b 	bl	800f48c <ucdr_serialize_string>
 800cbf6:	4004      	ands	r4, r0
 800cbf8:	e7ef      	b.n	800cbda <uxr_serialize_ReadSpecification+0x2a>
 800cbfa:	8971      	ldrh	r1, [r6, #10]
 800cbfc:	4638      	mov	r0, r7
 800cbfe:	f7fc fdb3 	bl	8009768 <ucdr_serialize_uint16_t>
 800cc02:	89b1      	ldrh	r1, [r6, #12]
 800cc04:	4605      	mov	r5, r0
 800cc06:	4638      	mov	r0, r7
 800cc08:	f7fc fdae 	bl	8009768 <ucdr_serialize_uint16_t>
 800cc0c:	89f1      	ldrh	r1, [r6, #14]
 800cc0e:	4005      	ands	r5, r0
 800cc10:	4638      	mov	r0, r7
 800cc12:	f7fc fda9 	bl	8009768 <ucdr_serialize_uint16_t>
 800cc16:	8a31      	ldrh	r1, [r6, #16]
 800cc18:	4680      	mov	r8, r0
 800cc1a:	4638      	mov	r0, r7
 800cc1c:	f7fc fda4 	bl	8009768 <ucdr_serialize_uint16_t>
 800cc20:	b2ed      	uxtb	r5, r5
 800cc22:	4025      	ands	r5, r4
 800cc24:	ea08 0505 	and.w	r5, r8, r5
 800cc28:	ea00 0405 	and.w	r4, r0, r5
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc32:	bf00      	nop

0800cc34 <uxr_serialize_CREATE_CLIENT_Payload>:
 800cc34:	f7ff bb02 	b.w	800c23c <uxr_serialize_CLIENT_Representation>

0800cc38 <uxr_serialize_CREATE_Payload>:
 800cc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc3a:	2202      	movs	r2, #2
 800cc3c:	4607      	mov	r7, r0
 800cc3e:	460e      	mov	r6, r1
 800cc40:	f002 fb04 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800cc44:	2202      	movs	r2, #2
 800cc46:	18b1      	adds	r1, r6, r2
 800cc48:	4605      	mov	r5, r0
 800cc4a:	4638      	mov	r0, r7
 800cc4c:	f002 fafe 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800cc50:	7931      	ldrb	r1, [r6, #4]
 800cc52:	4604      	mov	r4, r0
 800cc54:	4638      	mov	r0, r7
 800cc56:	f7fc fd5b 	bl	8009710 <ucdr_serialize_uint8_t>
 800cc5a:	b170      	cbz	r0, 800cc7a <uxr_serialize_CREATE_Payload+0x42>
 800cc5c:	7933      	ldrb	r3, [r6, #4]
 800cc5e:	402c      	ands	r4, r5
 800cc60:	3b01      	subs	r3, #1
 800cc62:	b2e4      	uxtb	r4, r4
 800cc64:	2b0d      	cmp	r3, #13
 800cc66:	d809      	bhi.n	800cc7c <uxr_serialize_CREATE_Payload+0x44>
 800cc68:	e8df f003 	tbb	[pc, r3]
 800cc6c:	23230a4c 	.word	0x23230a4c
 800cc70:	0a0a0a0a 	.word	0x0a0a0a0a
 800cc74:	12121208 	.word	0x12121208
 800cc78:	3e45      	.short	0x3e45
 800cc7a:	2400      	movs	r4, #0
 800cc7c:	4620      	mov	r0, r4
 800cc7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc80:	f106 0108 	add.w	r1, r6, #8
 800cc84:	4638      	mov	r0, r7
 800cc86:	f7ff fbdf 	bl	800c448 <uxr_serialize_DATAWRITER_Representation>
 800cc8a:	4004      	ands	r4, r0
 800cc8c:	4620      	mov	r0, r4
 800cc8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc90:	7a31      	ldrb	r1, [r6, #8]
 800cc92:	4638      	mov	r0, r7
 800cc94:	f7fc fd3c 	bl	8009710 <ucdr_serialize_uint8_t>
 800cc98:	2800      	cmp	r0, #0
 800cc9a:	d0ee      	beq.n	800cc7a <uxr_serialize_CREATE_Payload+0x42>
 800cc9c:	7a33      	ldrb	r3, [r6, #8]
 800cc9e:	2b01      	cmp	r3, #1
 800cca0:	d001      	beq.n	800cca6 <uxr_serialize_CREATE_Payload+0x6e>
 800cca2:	2b02      	cmp	r3, #2
 800cca4:	d1ea      	bne.n	800cc7c <uxr_serialize_CREATE_Payload+0x44>
 800cca6:	68f1      	ldr	r1, [r6, #12]
 800cca8:	4638      	mov	r0, r7
 800ccaa:	f002 fbef 	bl	800f48c <ucdr_serialize_string>
 800ccae:	4004      	ands	r4, r0
 800ccb0:	e7e4      	b.n	800cc7c <uxr_serialize_CREATE_Payload+0x44>
 800ccb2:	7a31      	ldrb	r1, [r6, #8]
 800ccb4:	4638      	mov	r0, r7
 800ccb6:	f7fc fd2b 	bl	8009710 <ucdr_serialize_uint8_t>
 800ccba:	4605      	mov	r5, r0
 800ccbc:	b158      	cbz	r0, 800ccd6 <uxr_serialize_CREATE_Payload+0x9e>
 800ccbe:	7a33      	ldrb	r3, [r6, #8]
 800ccc0:	2b02      	cmp	r3, #2
 800ccc2:	d034      	beq.n	800cd2e <uxr_serialize_CREATE_Payload+0xf6>
 800ccc4:	2b03      	cmp	r3, #3
 800ccc6:	d106      	bne.n	800ccd6 <uxr_serialize_CREATE_Payload+0x9e>
 800ccc8:	68f2      	ldr	r2, [r6, #12]
 800ccca:	f106 0110 	add.w	r1, r6, #16
 800ccce:	4638      	mov	r0, r7
 800ccd0:	f002 fbb0 	bl	800f434 <ucdr_serialize_sequence_uint8_t>
 800ccd4:	4605      	mov	r5, r0
 800ccd6:	2202      	movs	r2, #2
 800ccd8:	f506 7104 	add.w	r1, r6, #528	; 0x210
 800ccdc:	4638      	mov	r0, r7
 800ccde:	f002 fab5 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800cce2:	4028      	ands	r0, r5
 800cce4:	4004      	ands	r4, r0
 800cce6:	e7c9      	b.n	800cc7c <uxr_serialize_CREATE_Payload+0x44>
 800cce8:	f106 0108 	add.w	r1, r6, #8
 800ccec:	4638      	mov	r0, r7
 800ccee:	f7ff faa5 	bl	800c23c <uxr_serialize_CLIENT_Representation>
 800ccf2:	4004      	ands	r4, r0
 800ccf4:	e7c2      	b.n	800cc7c <uxr_serialize_CREATE_Payload+0x44>
 800ccf6:	f106 0108 	add.w	r1, r6, #8
 800ccfa:	4638      	mov	r0, r7
 800ccfc:	f7ff fb5a 	bl	800c3b4 <uxr_serialize_AGENT_Representation>
 800cd00:	4004      	ands	r4, r0
 800cd02:	e7bb      	b.n	800cc7c <uxr_serialize_CREATE_Payload+0x44>
 800cd04:	7a31      	ldrb	r1, [r6, #8]
 800cd06:	4638      	mov	r0, r7
 800cd08:	f7fc fd02 	bl	8009710 <ucdr_serialize_uint8_t>
 800cd0c:	4605      	mov	r5, r0
 800cd0e:	b130      	cbz	r0, 800cd1e <uxr_serialize_CREATE_Payload+0xe6>
 800cd10:	7a33      	ldrb	r3, [r6, #8]
 800cd12:	2b02      	cmp	r3, #2
 800cd14:	d011      	beq.n	800cd3a <uxr_serialize_CREATE_Payload+0x102>
 800cd16:	2b03      	cmp	r3, #3
 800cd18:	d015      	beq.n	800cd46 <uxr_serialize_CREATE_Payload+0x10e>
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	d00d      	beq.n	800cd3a <uxr_serialize_CREATE_Payload+0x102>
 800cd1e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 800cd22:	4638      	mov	r0, r7
 800cd24:	f7fd fa30 	bl	800a188 <ucdr_serialize_int16_t>
 800cd28:	4028      	ands	r0, r5
 800cd2a:	4004      	ands	r4, r0
 800cd2c:	e7a6      	b.n	800cc7c <uxr_serialize_CREATE_Payload+0x44>
 800cd2e:	68f1      	ldr	r1, [r6, #12]
 800cd30:	4638      	mov	r0, r7
 800cd32:	f002 fbab 	bl	800f48c <ucdr_serialize_string>
 800cd36:	4605      	mov	r5, r0
 800cd38:	e7cd      	b.n	800ccd6 <uxr_serialize_CREATE_Payload+0x9e>
 800cd3a:	68f1      	ldr	r1, [r6, #12]
 800cd3c:	4638      	mov	r0, r7
 800cd3e:	f002 fba5 	bl	800f48c <ucdr_serialize_string>
 800cd42:	4605      	mov	r5, r0
 800cd44:	e7eb      	b.n	800cd1e <uxr_serialize_CREATE_Payload+0xe6>
 800cd46:	68f2      	ldr	r2, [r6, #12]
 800cd48:	f106 0110 	add.w	r1, r6, #16
 800cd4c:	4638      	mov	r0, r7
 800cd4e:	f002 fb71 	bl	800f434 <ucdr_serialize_sequence_uint8_t>
 800cd52:	4605      	mov	r5, r0
 800cd54:	e7e3      	b.n	800cd1e <uxr_serialize_CREATE_Payload+0xe6>
 800cd56:	bf00      	nop

0800cd58 <uxr_deserialize_GET_INFO_Payload>:
 800cd58:	b570      	push	{r4, r5, r6, lr}
 800cd5a:	2202      	movs	r2, #2
 800cd5c:	4605      	mov	r5, r0
 800cd5e:	460e      	mov	r6, r1
 800cd60:	f002 fad8 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800cd64:	2202      	movs	r2, #2
 800cd66:	18b1      	adds	r1, r6, r2
 800cd68:	4604      	mov	r4, r0
 800cd6a:	4628      	mov	r0, r5
 800cd6c:	f002 fad2 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800cd70:	1d31      	adds	r1, r6, #4
 800cd72:	4004      	ands	r4, r0
 800cd74:	4628      	mov	r0, r5
 800cd76:	f7fd f811 	bl	8009d9c <ucdr_deserialize_uint32_t>
 800cd7a:	b2e4      	uxtb	r4, r4
 800cd7c:	4020      	ands	r0, r4
 800cd7e:	bd70      	pop	{r4, r5, r6, pc}

0800cd80 <uxr_serialize_DELETE_Payload>:
 800cd80:	b570      	push	{r4, r5, r6, lr}
 800cd82:	2202      	movs	r2, #2
 800cd84:	4605      	mov	r5, r0
 800cd86:	460e      	mov	r6, r1
 800cd88:	f002 fa60 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800cd8c:	2202      	movs	r2, #2
 800cd8e:	4604      	mov	r4, r0
 800cd90:	18b1      	adds	r1, r6, r2
 800cd92:	4628      	mov	r0, r5
 800cd94:	f002 fa5a 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800cd98:	4020      	ands	r0, r4
 800cd9a:	b2c0      	uxtb	r0, r0
 800cd9c:	bd70      	pop	{r4, r5, r6, pc}
 800cd9e:	bf00      	nop

0800cda0 <uxr_deserialize_STATUS_AGENT_Payload>:
 800cda0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cda4:	4605      	mov	r5, r0
 800cda6:	460e      	mov	r6, r1
 800cda8:	f7fc fcc8 	bl	800973c <ucdr_deserialize_uint8_t>
 800cdac:	1c71      	adds	r1, r6, #1
 800cdae:	4604      	mov	r4, r0
 800cdb0:	4628      	mov	r0, r5
 800cdb2:	f7fc fcc3 	bl	800973c <ucdr_deserialize_uint8_t>
 800cdb6:	2204      	movs	r2, #4
 800cdb8:	18b1      	adds	r1, r6, r2
 800cdba:	4680      	mov	r8, r0
 800cdbc:	4628      	mov	r0, r5
 800cdbe:	f002 faa9 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800cdc2:	f106 0108 	add.w	r1, r6, #8
 800cdc6:	4607      	mov	r7, r0
 800cdc8:	2202      	movs	r2, #2
 800cdca:	4628      	mov	r0, r5
 800cdcc:	f002 faa2 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800cdd0:	ea04 0308 	and.w	r3, r4, r8
 800cdd4:	b2db      	uxtb	r3, r3
 800cdd6:	ea03 0407 	and.w	r4, r3, r7
 800cdda:	2202      	movs	r2, #2
 800cddc:	4607      	mov	r7, r0
 800cdde:	f106 010a 	add.w	r1, r6, #10
 800cde2:	4628      	mov	r0, r5
 800cde4:	f002 fa96 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800cde8:	f106 010c 	add.w	r1, r6, #12
 800cdec:	4603      	mov	r3, r0
 800cdee:	4628      	mov	r0, r5
 800cdf0:	461d      	mov	r5, r3
 800cdf2:	f7fc fc75 	bl	80096e0 <ucdr_deserialize_bool>
 800cdf6:	403c      	ands	r4, r7
 800cdf8:	4025      	ands	r5, r4
 800cdfa:	4028      	ands	r0, r5
 800cdfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ce00 <uxr_deserialize_STATUS_Payload>:
 800ce00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce04:	2202      	movs	r2, #2
 800ce06:	4606      	mov	r6, r0
 800ce08:	460f      	mov	r7, r1
 800ce0a:	f002 fa83 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800ce0e:	2202      	movs	r2, #2
 800ce10:	18b9      	adds	r1, r7, r2
 800ce12:	4605      	mov	r5, r0
 800ce14:	4630      	mov	r0, r6
 800ce16:	f002 fa7d 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800ce1a:	1d39      	adds	r1, r7, #4
 800ce1c:	4680      	mov	r8, r0
 800ce1e:	4630      	mov	r0, r6
 800ce20:	f7fc fc8c 	bl	800973c <ucdr_deserialize_uint8_t>
 800ce24:	1d79      	adds	r1, r7, #5
 800ce26:	4604      	mov	r4, r0
 800ce28:	4630      	mov	r0, r6
 800ce2a:	f7fc fc87 	bl	800973c <ucdr_deserialize_uint8_t>
 800ce2e:	ea05 0508 	and.w	r5, r5, r8
 800ce32:	402c      	ands	r4, r5
 800ce34:	4020      	ands	r0, r4
 800ce36:	b2c0      	uxtb	r0, r0
 800ce38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ce3c <uxr_serialize_INFO_Payload>:
 800ce3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce40:	2202      	movs	r2, #2
 800ce42:	460c      	mov	r4, r1
 800ce44:	4605      	mov	r5, r0
 800ce46:	f002 fa01 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800ce4a:	2202      	movs	r2, #2
 800ce4c:	18a1      	adds	r1, r4, r2
 800ce4e:	4680      	mov	r8, r0
 800ce50:	4628      	mov	r0, r5
 800ce52:	f002 f9fb 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800ce56:	7921      	ldrb	r1, [r4, #4]
 800ce58:	4607      	mov	r7, r0
 800ce5a:	4628      	mov	r0, r5
 800ce5c:	f7fc fc58 	bl	8009710 <ucdr_serialize_uint8_t>
 800ce60:	7961      	ldrb	r1, [r4, #5]
 800ce62:	4606      	mov	r6, r0
 800ce64:	4628      	mov	r0, r5
 800ce66:	f7fc fc53 	bl	8009710 <ucdr_serialize_uint8_t>
 800ce6a:	ea08 0807 	and.w	r8, r8, r7
 800ce6e:	ea06 0608 	and.w	r6, r6, r8
 800ce72:	4006      	ands	r6, r0
 800ce74:	7a21      	ldrb	r1, [r4, #8]
 800ce76:	4628      	mov	r0, r5
 800ce78:	f7fc fc1c 	bl	80096b4 <ucdr_serialize_bool>
 800ce7c:	7a23      	ldrb	r3, [r4, #8]
 800ce7e:	b2f7      	uxtb	r7, r6
 800ce80:	4606      	mov	r6, r0
 800ce82:	b96b      	cbnz	r3, 800cea0 <uxr_serialize_INFO_Payload+0x64>
 800ce84:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 800ce88:	4628      	mov	r0, r5
 800ce8a:	f7fc fc13 	bl	80096b4 <ucdr_serialize_bool>
 800ce8e:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 800ce92:	4030      	ands	r0, r6
 800ce94:	b2c6      	uxtb	r6, r0
 800ce96:	b983      	cbnz	r3, 800ceba <uxr_serialize_INFO_Payload+0x7e>
 800ce98:	ea06 0007 	and.w	r0, r6, r7
 800ce9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cea0:	7b21      	ldrb	r1, [r4, #12]
 800cea2:	4628      	mov	r0, r5
 800cea4:	f7fc fc34 	bl	8009710 <ucdr_serialize_uint8_t>
 800cea8:	b188      	cbz	r0, 800cece <uxr_serialize_INFO_Payload+0x92>
 800ceaa:	f104 010c 	add.w	r1, r4, #12
 800ceae:	4628      	mov	r0, r5
 800ceb0:	f7ff faf2 	bl	800c498 <uxr_serialize_ObjectVariant.part.0>
 800ceb4:	4030      	ands	r0, r6
 800ceb6:	b2c6      	uxtb	r6, r0
 800ceb8:	e7e4      	b.n	800ce84 <uxr_serialize_INFO_Payload+0x48>
 800ceba:	f504 7108 	add.w	r1, r4, #544	; 0x220
 800cebe:	4628      	mov	r0, r5
 800cec0:	f7ff fdb2 	bl	800ca28 <uxr_serialize_ActivityInfoVariant>
 800cec4:	4006      	ands	r6, r0
 800cec6:	ea06 0007 	and.w	r0, r6, r7
 800ceca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cece:	4606      	mov	r6, r0
 800ced0:	e7d8      	b.n	800ce84 <uxr_serialize_INFO_Payload+0x48>
 800ced2:	bf00      	nop

0800ced4 <uxr_serialize_READ_DATA_Payload>:
 800ced4:	b570      	push	{r4, r5, r6, lr}
 800ced6:	2202      	movs	r2, #2
 800ced8:	4605      	mov	r5, r0
 800ceda:	460e      	mov	r6, r1
 800cedc:	f002 f9b6 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800cee0:	2202      	movs	r2, #2
 800cee2:	18b1      	adds	r1, r6, r2
 800cee4:	4604      	mov	r4, r0
 800cee6:	4628      	mov	r0, r5
 800cee8:	f002 f9b0 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800ceec:	1d31      	adds	r1, r6, #4
 800ceee:	4004      	ands	r4, r0
 800cef0:	4628      	mov	r0, r5
 800cef2:	f7ff fe5d 	bl	800cbb0 <uxr_serialize_ReadSpecification>
 800cef6:	b2e4      	uxtb	r4, r4
 800cef8:	4020      	ands	r0, r4
 800cefa:	bd70      	pop	{r4, r5, r6, pc}

0800cefc <uxr_serialize_WRITE_DATA_Payload_Data>:
 800cefc:	b570      	push	{r4, r5, r6, lr}
 800cefe:	2202      	movs	r2, #2
 800cf00:	4605      	mov	r5, r0
 800cf02:	460e      	mov	r6, r1
 800cf04:	f002 f9a2 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800cf08:	2202      	movs	r2, #2
 800cf0a:	4604      	mov	r4, r0
 800cf0c:	18b1      	adds	r1, r6, r2
 800cf0e:	4628      	mov	r0, r5
 800cf10:	f002 f99c 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800cf14:	4020      	ands	r0, r4
 800cf16:	b2c0      	uxtb	r0, r0
 800cf18:	bd70      	pop	{r4, r5, r6, pc}
 800cf1a:	bf00      	nop

0800cf1c <uxr_serialize_ACKNACK_Payload>:
 800cf1c:	b570      	push	{r4, r5, r6, lr}
 800cf1e:	460c      	mov	r4, r1
 800cf20:	460e      	mov	r6, r1
 800cf22:	f834 1b02 	ldrh.w	r1, [r4], #2
 800cf26:	4605      	mov	r5, r0
 800cf28:	f7fc fc1e 	bl	8009768 <ucdr_serialize_uint16_t>
 800cf2c:	2202      	movs	r2, #2
 800cf2e:	4621      	mov	r1, r4
 800cf30:	4604      	mov	r4, r0
 800cf32:	4628      	mov	r0, r5
 800cf34:	f002 f98a 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800cf38:	7931      	ldrb	r1, [r6, #4]
 800cf3a:	4004      	ands	r4, r0
 800cf3c:	4628      	mov	r0, r5
 800cf3e:	f7fc fbe7 	bl	8009710 <ucdr_serialize_uint8_t>
 800cf42:	b2e4      	uxtb	r4, r4
 800cf44:	4020      	ands	r0, r4
 800cf46:	bd70      	pop	{r4, r5, r6, pc}

0800cf48 <uxr_deserialize_ACKNACK_Payload>:
 800cf48:	b570      	push	{r4, r5, r6, lr}
 800cf4a:	4605      	mov	r5, r0
 800cf4c:	460e      	mov	r6, r1
 800cf4e:	f7fc fd0b 	bl	8009968 <ucdr_deserialize_uint16_t>
 800cf52:	2202      	movs	r2, #2
 800cf54:	18b1      	adds	r1, r6, r2
 800cf56:	4604      	mov	r4, r0
 800cf58:	4628      	mov	r0, r5
 800cf5a:	f002 f9db 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800cf5e:	1d31      	adds	r1, r6, #4
 800cf60:	4004      	ands	r4, r0
 800cf62:	4628      	mov	r0, r5
 800cf64:	f7fc fbea 	bl	800973c <ucdr_deserialize_uint8_t>
 800cf68:	b2e4      	uxtb	r4, r4
 800cf6a:	4020      	ands	r0, r4
 800cf6c:	bd70      	pop	{r4, r5, r6, pc}
 800cf6e:	bf00      	nop

0800cf70 <uxr_serialize_HEARTBEAT_Payload>:
 800cf70:	b570      	push	{r4, r5, r6, lr}
 800cf72:	460d      	mov	r5, r1
 800cf74:	8809      	ldrh	r1, [r1, #0]
 800cf76:	4606      	mov	r6, r0
 800cf78:	f7fc fbf6 	bl	8009768 <ucdr_serialize_uint16_t>
 800cf7c:	8869      	ldrh	r1, [r5, #2]
 800cf7e:	4604      	mov	r4, r0
 800cf80:	4630      	mov	r0, r6
 800cf82:	f7fc fbf1 	bl	8009768 <ucdr_serialize_uint16_t>
 800cf86:	7929      	ldrb	r1, [r5, #4]
 800cf88:	4004      	ands	r4, r0
 800cf8a:	4630      	mov	r0, r6
 800cf8c:	f7fc fbc0 	bl	8009710 <ucdr_serialize_uint8_t>
 800cf90:	b2e4      	uxtb	r4, r4
 800cf92:	4020      	ands	r0, r4
 800cf94:	bd70      	pop	{r4, r5, r6, pc}
 800cf96:	bf00      	nop

0800cf98 <uxr_deserialize_HEARTBEAT_Payload>:
 800cf98:	b570      	push	{r4, r5, r6, lr}
 800cf9a:	4605      	mov	r5, r0
 800cf9c:	460e      	mov	r6, r1
 800cf9e:	f7fc fce3 	bl	8009968 <ucdr_deserialize_uint16_t>
 800cfa2:	1cb1      	adds	r1, r6, #2
 800cfa4:	4604      	mov	r4, r0
 800cfa6:	4628      	mov	r0, r5
 800cfa8:	f7fc fcde 	bl	8009968 <ucdr_deserialize_uint16_t>
 800cfac:	1d31      	adds	r1, r6, #4
 800cfae:	4004      	ands	r4, r0
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	f7fc fbc3 	bl	800973c <ucdr_deserialize_uint8_t>
 800cfb6:	b2e4      	uxtb	r4, r4
 800cfb8:	4020      	ands	r0, r4
 800cfba:	bd70      	pop	{r4, r5, r6, pc}

0800cfbc <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800cfbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfc0:	4605      	mov	r5, r0
 800cfc2:	460e      	mov	r6, r1
 800cfc4:	f7fd fa6c 	bl	800a4a0 <ucdr_deserialize_int32_t>
 800cfc8:	1d31      	adds	r1, r6, #4
 800cfca:	4607      	mov	r7, r0
 800cfcc:	4628      	mov	r0, r5
 800cfce:	f7fc fee5 	bl	8009d9c <ucdr_deserialize_uint32_t>
 800cfd2:	f106 0108 	add.w	r1, r6, #8
 800cfd6:	4680      	mov	r8, r0
 800cfd8:	4628      	mov	r0, r5
 800cfda:	f7fd fa61 	bl	800a4a0 <ucdr_deserialize_int32_t>
 800cfde:	f106 010c 	add.w	r1, r6, #12
 800cfe2:	4604      	mov	r4, r0
 800cfe4:	4628      	mov	r0, r5
 800cfe6:	f7fc fed9 	bl	8009d9c <ucdr_deserialize_uint32_t>
 800cfea:	ea07 0708 	and.w	r7, r7, r8
 800cfee:	403c      	ands	r4, r7
 800cff0:	f106 0110 	add.w	r1, r6, #16
 800cff4:	4004      	ands	r4, r0
 800cff6:	4628      	mov	r0, r5
 800cff8:	f7fd fa52 	bl	800a4a0 <ucdr_deserialize_int32_t>
 800cffc:	f106 0114 	add.w	r1, r6, #20
 800d000:	4607      	mov	r7, r0
 800d002:	4628      	mov	r0, r5
 800d004:	f7fc feca 	bl	8009d9c <ucdr_deserialize_uint32_t>
 800d008:	b2e4      	uxtb	r4, r4
 800d00a:	403c      	ands	r4, r7
 800d00c:	4020      	ands	r0, r4
 800d00e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d012:	bf00      	nop

0800d014 <uxr_deserialize_SampleIdentity>:
 800d014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d018:	220c      	movs	r2, #12
 800d01a:	4604      	mov	r4, r0
 800d01c:	460d      	mov	r5, r1
 800d01e:	f002 f979 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800d022:	2203      	movs	r2, #3
 800d024:	f105 010c 	add.w	r1, r5, #12
 800d028:	4607      	mov	r7, r0
 800d02a:	4620      	mov	r0, r4
 800d02c:	f002 f972 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800d030:	f105 010f 	add.w	r1, r5, #15
 800d034:	4680      	mov	r8, r0
 800d036:	4620      	mov	r0, r4
 800d038:	f7fc fb80 	bl	800973c <ucdr_deserialize_uint8_t>
 800d03c:	f105 0110 	add.w	r1, r5, #16
 800d040:	4606      	mov	r6, r0
 800d042:	4620      	mov	r0, r4
 800d044:	f7fd fa2c 	bl	800a4a0 <ucdr_deserialize_int32_t>
 800d048:	f105 0114 	add.w	r1, r5, #20
 800d04c:	4603      	mov	r3, r0
 800d04e:	4620      	mov	r0, r4
 800d050:	ea07 0708 	and.w	r7, r7, r8
 800d054:	461c      	mov	r4, r3
 800d056:	f7fc fea1 	bl	8009d9c <ucdr_deserialize_uint32_t>
 800d05a:	403e      	ands	r6, r7
 800d05c:	4034      	ands	r4, r6
 800d05e:	4020      	ands	r0, r4
 800d060:	b2c0      	uxtb	r0, r0
 800d062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d066:	bf00      	nop

0800d068 <rcl_convert_rmw_ret_to_rcl_ret>:
 800d068:	280b      	cmp	r0, #11
 800d06a:	dc0d      	bgt.n	800d088 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800d06c:	2800      	cmp	r0, #0
 800d06e:	db09      	blt.n	800d084 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800d070:	280b      	cmp	r0, #11
 800d072:	d807      	bhi.n	800d084 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800d074:	e8df f000 	tbb	[pc, r0]
 800d078:	07060607 	.word	0x07060607
 800d07c:	06060606 	.word	0x06060606
 800d080:	07070606 	.word	0x07070606
 800d084:	2001      	movs	r0, #1
 800d086:	4770      	bx	lr
 800d088:	28cb      	cmp	r0, #203	; 0xcb
 800d08a:	bf18      	it	ne
 800d08c:	2001      	movne	r0, #1
 800d08e:	4770      	bx	lr

0800d090 <rcl_get_zero_initialized_context>:
 800d090:	4a03      	ldr	r2, [pc, #12]	; (800d0a0 <rcl_get_zero_initialized_context+0x10>)
 800d092:	4603      	mov	r3, r0
 800d094:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d098:	e883 0003 	stmia.w	r3, {r0, r1}
 800d09c:	4618      	mov	r0, r3
 800d09e:	4770      	bx	lr
 800d0a0:	08012fe4 	.word	0x08012fe4

0800d0a4 <rcl_context_is_valid>:
 800d0a4:	b118      	cbz	r0, 800d0ae <rcl_context_is_valid+0xa>
 800d0a6:	6840      	ldr	r0, [r0, #4]
 800d0a8:	3800      	subs	r0, #0
 800d0aa:	bf18      	it	ne
 800d0ac:	2001      	movne	r0, #1
 800d0ae:	4770      	bx	lr

0800d0b0 <__cleanup_context>:
 800d0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0b4:	4606      	mov	r6, r0
 800d0b6:	6800      	ldr	r0, [r0, #0]
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	6073      	str	r3, [r6, #4]
 800d0bc:	2800      	cmp	r0, #0
 800d0be:	d049      	beq.n	800d154 <__cleanup_context+0xa4>
 800d0c0:	6947      	ldr	r7, [r0, #20]
 800d0c2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800d0c6:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800d0ca:	b137      	cbz	r7, 800d0da <__cleanup_context+0x2a>
 800d0cc:	3014      	adds	r0, #20
 800d0ce:	f000 f9bb 	bl	800d448 <rcl_init_options_fini>
 800d0d2:	4607      	mov	r7, r0
 800d0d4:	2800      	cmp	r0, #0
 800d0d6:	d144      	bne.n	800d162 <__cleanup_context+0xb2>
 800d0d8:	6830      	ldr	r0, [r6, #0]
 800d0da:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d0dc:	b143      	cbz	r3, 800d0f0 <__cleanup_context+0x40>
 800d0de:	3028      	adds	r0, #40	; 0x28
 800d0e0:	f001 fd9a 	bl	800ec18 <rmw_context_fini>
 800d0e4:	b118      	cbz	r0, 800d0ee <__cleanup_context+0x3e>
 800d0e6:	2f00      	cmp	r7, #0
 800d0e8:	d03e      	beq.n	800d168 <__cleanup_context+0xb8>
 800d0ea:	f7fb fde5 	bl	8008cb8 <rcutils_reset_error>
 800d0ee:	6830      	ldr	r0, [r6, #0]
 800d0f0:	6a03      	ldr	r3, [r0, #32]
 800d0f2:	b1db      	cbz	r3, 800d12c <__cleanup_context+0x7c>
 800d0f4:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800d0f8:	2a01      	cmp	r2, #1
 800d0fa:	f17c 0100 	sbcs.w	r1, ip, #0
 800d0fe:	db11      	blt.n	800d124 <__cleanup_context+0x74>
 800d100:	2400      	movs	r4, #0
 800d102:	4625      	mov	r5, r4
 800d104:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d108:	4649      	mov	r1, r9
 800d10a:	b1b8      	cbz	r0, 800d13c <__cleanup_context+0x8c>
 800d10c:	47c0      	blx	r8
 800d10e:	6833      	ldr	r3, [r6, #0]
 800d110:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800d114:	3401      	adds	r4, #1
 800d116:	f145 0500 	adc.w	r5, r5, #0
 800d11a:	4294      	cmp	r4, r2
 800d11c:	eb75 010c 	sbcs.w	r1, r5, ip
 800d120:	6a1b      	ldr	r3, [r3, #32]
 800d122:	dbef      	blt.n	800d104 <__cleanup_context+0x54>
 800d124:	4618      	mov	r0, r3
 800d126:	4649      	mov	r1, r9
 800d128:	47c0      	blx	r8
 800d12a:	6830      	ldr	r0, [r6, #0]
 800d12c:	4649      	mov	r1, r9
 800d12e:	47c0      	blx	r8
 800d130:	2300      	movs	r3, #0
 800d132:	e9c6 3300 	strd	r3, r3, [r6]
 800d136:	4638      	mov	r0, r7
 800d138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d13c:	3401      	adds	r4, #1
 800d13e:	f145 0500 	adc.w	r5, r5, #0
 800d142:	4294      	cmp	r4, r2
 800d144:	eb75 010c 	sbcs.w	r1, r5, ip
 800d148:	dbdc      	blt.n	800d104 <__cleanup_context+0x54>
 800d14a:	4618      	mov	r0, r3
 800d14c:	4649      	mov	r1, r9
 800d14e:	47c0      	blx	r8
 800d150:	6830      	ldr	r0, [r6, #0]
 800d152:	e7eb      	b.n	800d12c <__cleanup_context+0x7c>
 800d154:	4607      	mov	r7, r0
 800d156:	2300      	movs	r3, #0
 800d158:	e9c6 3300 	strd	r3, r3, [r6]
 800d15c:	4638      	mov	r0, r7
 800d15e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d162:	f7fb fda9 	bl	8008cb8 <rcutils_reset_error>
 800d166:	e7b7      	b.n	800d0d8 <__cleanup_context+0x28>
 800d168:	f7ff ff7e 	bl	800d068 <rcl_convert_rmw_ret_to_rcl_ret>
 800d16c:	4607      	mov	r7, r0
 800d16e:	e7bc      	b.n	800d0ea <__cleanup_context+0x3a>

0800d170 <rcl_init>:
 800d170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d174:	1e05      	subs	r5, r0, #0
 800d176:	b09e      	sub	sp, #120	; 0x78
 800d178:	460e      	mov	r6, r1
 800d17a:	4690      	mov	r8, r2
 800d17c:	461f      	mov	r7, r3
 800d17e:	f340 809c 	ble.w	800d2ba <rcl_init+0x14a>
 800d182:	2900      	cmp	r1, #0
 800d184:	f000 809c 	beq.w	800d2c0 <rcl_init+0x150>
 800d188:	f1a1 0e04 	sub.w	lr, r1, #4
 800d18c:	f04f 0c00 	mov.w	ip, #0
 800d190:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800d194:	f10c 0c01 	add.w	ip, ip, #1
 800d198:	2c00      	cmp	r4, #0
 800d19a:	f000 8091 	beq.w	800d2c0 <rcl_init+0x150>
 800d19e:	4565      	cmp	r5, ip
 800d1a0:	d1f6      	bne.n	800d190 <rcl_init+0x20>
 800d1a2:	f1b8 0f00 	cmp.w	r8, #0
 800d1a6:	f000 808b 	beq.w	800d2c0 <rcl_init+0x150>
 800d1aa:	f8d8 4000 	ldr.w	r4, [r8]
 800d1ae:	2c00      	cmp	r4, #0
 800d1b0:	f000 8086 	beq.w	800d2c0 <rcl_init+0x150>
 800d1b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d1b6:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800d1ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d1be:	6823      	ldr	r3, [r4, #0]
 800d1c0:	f8cc 3000 	str.w	r3, [ip]
 800d1c4:	a819      	add	r0, sp, #100	; 0x64
 800d1c6:	f7fb fd53 	bl	8008c70 <rcutils_allocator_is_valid>
 800d1ca:	2800      	cmp	r0, #0
 800d1cc:	d078      	beq.n	800d2c0 <rcl_init+0x150>
 800d1ce:	2f00      	cmp	r7, #0
 800d1d0:	d076      	beq.n	800d2c0 <rcl_init+0x150>
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d178      	bne.n	800d2ca <rcl_init+0x15a>
 800d1d8:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800d1dc:	2178      	movs	r1, #120	; 0x78
 800d1de:	2001      	movs	r0, #1
 800d1e0:	4798      	blx	r3
 800d1e2:	4604      	mov	r4, r0
 800d1e4:	6038      	str	r0, [r7, #0]
 800d1e6:	2800      	cmp	r0, #0
 800d1e8:	f000 80b6 	beq.w	800d358 <rcl_init+0x1e8>
 800d1ec:	a802      	add	r0, sp, #8
 800d1ee:	f001 f957 	bl	800e4a0 <rmw_get_zero_initialized_context>
 800d1f2:	a902      	add	r1, sp, #8
 800d1f4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800d1f8:	2250      	movs	r2, #80	; 0x50
 800d1fa:	ac19      	add	r4, sp, #100	; 0x64
 800d1fc:	f004 fe5f 	bl	8011ebe <memcpy>
 800d200:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d202:	f8d7 e000 	ldr.w	lr, [r7]
 800d206:	46f4      	mov	ip, lr
 800d208:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d20c:	6823      	ldr	r3, [r4, #0]
 800d20e:	f8cc 3000 	str.w	r3, [ip]
 800d212:	f10e 0114 	add.w	r1, lr, #20
 800d216:	4640      	mov	r0, r8
 800d218:	f000 f940 	bl	800d49c <rcl_init_options_copy>
 800d21c:	4604      	mov	r4, r0
 800d21e:	2800      	cmp	r0, #0
 800d220:	d144      	bne.n	800d2ac <rcl_init+0x13c>
 800d222:	f8d7 9000 	ldr.w	r9, [r7]
 800d226:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800d22a:	f8c9 0020 	str.w	r0, [r9, #32]
 800d22e:	f8c9 5018 	str.w	r5, [r9, #24]
 800d232:	f8c9 801c 	str.w	r8, [r9, #28]
 800d236:	2d00      	cmp	r5, #0
 800d238:	d04e      	beq.n	800d2d8 <rcl_init+0x168>
 800d23a:	2e00      	cmp	r6, #0
 800d23c:	d04c      	beq.n	800d2d8 <rcl_init+0x168>
 800d23e:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800d242:	2104      	movs	r1, #4
 800d244:	4628      	mov	r0, r5
 800d246:	4798      	blx	r3
 800d248:	f8c9 0020 	str.w	r0, [r9, #32]
 800d24c:	f8d7 9000 	ldr.w	r9, [r7]
 800d250:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800d254:	46ca      	mov	sl, r9
 800d256:	b343      	cbz	r3, 800d2aa <rcl_init+0x13a>
 800d258:	2d01      	cmp	r5, #1
 800d25a:	f178 0300 	sbcs.w	r3, r8, #0
 800d25e:	db3b      	blt.n	800d2d8 <rcl_init+0x168>
 800d260:	2400      	movs	r4, #0
 800d262:	3e04      	subs	r6, #4
 800d264:	46a1      	mov	r9, r4
 800d266:	e00b      	b.n	800d280 <rcl_init+0x110>
 800d268:	6831      	ldr	r1, [r6, #0]
 800d26a:	f004 fe28 	bl	8011ebe <memcpy>
 800d26e:	3401      	adds	r4, #1
 800d270:	f149 0900 	adc.w	r9, r9, #0
 800d274:	45c8      	cmp	r8, r9
 800d276:	bf08      	it	eq
 800d278:	42a5      	cmpeq	r5, r4
 800d27a:	d02b      	beq.n	800d2d4 <rcl_init+0x164>
 800d27c:	f8d7 a000 	ldr.w	sl, [r7]
 800d280:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800d284:	f7f2 ffce 	bl	8000224 <strlen>
 800d288:	1c42      	adds	r2, r0, #1
 800d28a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d28c:	991d      	ldr	r1, [sp, #116]	; 0x74
 800d28e:	f8da a020 	ldr.w	sl, [sl, #32]
 800d292:	9201      	str	r2, [sp, #4]
 800d294:	4610      	mov	r0, r2
 800d296:	4798      	blx	r3
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800d29e:	6a1b      	ldr	r3, [r3, #32]
 800d2a0:	9a01      	ldr	r2, [sp, #4]
 800d2a2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d2a6:	2800      	cmp	r0, #0
 800d2a8:	d1de      	bne.n	800d268 <rcl_init+0xf8>
 800d2aa:	240a      	movs	r4, #10
 800d2ac:	4638      	mov	r0, r7
 800d2ae:	f7ff feff 	bl	800d0b0 <__cleanup_context>
 800d2b2:	4620      	mov	r0, r4
 800d2b4:	b01e      	add	sp, #120	; 0x78
 800d2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ba:	2900      	cmp	r1, #0
 800d2bc:	f43f af71 	beq.w	800d1a2 <rcl_init+0x32>
 800d2c0:	240b      	movs	r4, #11
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	b01e      	add	sp, #120	; 0x78
 800d2c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ca:	2464      	movs	r4, #100	; 0x64
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	b01e      	add	sp, #120	; 0x78
 800d2d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2d4:	f8d7 9000 	ldr.w	r9, [r7]
 800d2d8:	4926      	ldr	r1, [pc, #152]	; (800d374 <rcl_init+0x204>)
 800d2da:	680b      	ldr	r3, [r1, #0]
 800d2dc:	3301      	adds	r3, #1
 800d2de:	d036      	beq.n	800d34e <rcl_init+0x1de>
 800d2e0:	600b      	str	r3, [r1, #0]
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	2400      	movs	r4, #0
 800d2e6:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800d2ea:	607b      	str	r3, [r7, #4]
 800d2ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800d2f4:	d034      	beq.n	800d360 <rcl_init+0x1f0>
 800d2f6:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800d2fa:	b93b      	cbnz	r3, 800d30c <rcl_init+0x19c>
 800d2fc:	3030      	adds	r0, #48	; 0x30
 800d2fe:	f000 f939 	bl	800d574 <rcl_get_localhost_only>
 800d302:	4604      	mov	r4, r0
 800d304:	2800      	cmp	r0, #0
 800d306:	d1d1      	bne.n	800d2ac <rcl_init+0x13c>
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	6958      	ldr	r0, [r3, #20]
 800d30c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800d30e:	aa18      	add	r2, sp, #96	; 0x60
 800d310:	a917      	add	r1, sp, #92	; 0x5c
 800d312:	f000 fd81 	bl	800de18 <rcl_validate_enclave_name>
 800d316:	4604      	mov	r4, r0
 800d318:	2800      	cmp	r0, #0
 800d31a:	d1c7      	bne.n	800d2ac <rcl_init+0x13c>
 800d31c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d31e:	b9eb      	cbnz	r3, 800d35c <rcl_init+0x1ec>
 800d320:	6839      	ldr	r1, [r7, #0]
 800d322:	694b      	ldr	r3, [r1, #20]
 800d324:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d326:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800d32a:	f000 fc3d 	bl	800dba8 <rcl_get_security_options_from_environment>
 800d32e:	4604      	mov	r4, r0
 800d330:	2800      	cmp	r0, #0
 800d332:	d1bb      	bne.n	800d2ac <rcl_init+0x13c>
 800d334:	6839      	ldr	r1, [r7, #0]
 800d336:	6948      	ldr	r0, [r1, #20]
 800d338:	3128      	adds	r1, #40	; 0x28
 800d33a:	3018      	adds	r0, #24
 800d33c:	f001 fb36 	bl	800e9ac <rmw_init>
 800d340:	4604      	mov	r4, r0
 800d342:	2800      	cmp	r0, #0
 800d344:	d0bd      	beq.n	800d2c2 <rcl_init+0x152>
 800d346:	f7ff fe8f 	bl	800d068 <rcl_convert_rmw_ret_to_rcl_ret>
 800d34a:	4604      	mov	r4, r0
 800d34c:	e7ae      	b.n	800d2ac <rcl_init+0x13c>
 800d34e:	2201      	movs	r2, #1
 800d350:	461c      	mov	r4, r3
 800d352:	600a      	str	r2, [r1, #0]
 800d354:	4613      	mov	r3, r2
 800d356:	e7c6      	b.n	800d2e6 <rcl_init+0x176>
 800d358:	240a      	movs	r4, #10
 800d35a:	e7b2      	b.n	800d2c2 <rcl_init+0x152>
 800d35c:	2401      	movs	r4, #1
 800d35e:	e7a5      	b.n	800d2ac <rcl_init+0x13c>
 800d360:	3024      	adds	r0, #36	; 0x24
 800d362:	f003 fc5d 	bl	8010c20 <rcl_get_default_domain_id>
 800d366:	4604      	mov	r4, r0
 800d368:	2800      	cmp	r0, #0
 800d36a:	d19f      	bne.n	800d2ac <rcl_init+0x13c>
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	6958      	ldr	r0, [r3, #20]
 800d370:	e7c1      	b.n	800d2f6 <rcl_init+0x186>
 800d372:	bf00      	nop
 800d374:	2000df74 	.word	0x2000df74

0800d378 <rcl_get_zero_initialized_init_options>:
 800d378:	2000      	movs	r0, #0
 800d37a:	4770      	bx	lr

0800d37c <rcl_init_options_init>:
 800d37c:	b084      	sub	sp, #16
 800d37e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d380:	b097      	sub	sp, #92	; 0x5c
 800d382:	ae1d      	add	r6, sp, #116	; 0x74
 800d384:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800d388:	2800      	cmp	r0, #0
 800d38a:	d058      	beq.n	800d43e <rcl_init_options_init+0xc2>
 800d38c:	6803      	ldr	r3, [r0, #0]
 800d38e:	4605      	mov	r5, r0
 800d390:	b133      	cbz	r3, 800d3a0 <rcl_init_options_init+0x24>
 800d392:	2464      	movs	r4, #100	; 0x64
 800d394:	4620      	mov	r0, r4
 800d396:	b017      	add	sp, #92	; 0x5c
 800d398:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d39c:	b004      	add	sp, #16
 800d39e:	4770      	bx	lr
 800d3a0:	4630      	mov	r0, r6
 800d3a2:	f7fb fc65 	bl	8008c70 <rcutils_allocator_is_valid>
 800d3a6:	2800      	cmp	r0, #0
 800d3a8:	d049      	beq.n	800d43e <rcl_init_options_init+0xc2>
 800d3aa:	46b4      	mov	ip, r6
 800d3ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d3b0:	ac11      	add	r4, sp, #68	; 0x44
 800d3b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d3b4:	f8dc 3000 	ldr.w	r3, [ip]
 800d3b8:	6023      	str	r3, [r4, #0]
 800d3ba:	9921      	ldr	r1, [sp, #132]	; 0x84
 800d3bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d3be:	2050      	movs	r0, #80	; 0x50
 800d3c0:	4798      	blx	r3
 800d3c2:	4604      	mov	r4, r0
 800d3c4:	6028      	str	r0, [r5, #0]
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	d03b      	beq.n	800d442 <rcl_init_options_init+0xc6>
 800d3ca:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800d3ce:	4686      	mov	lr, r0
 800d3d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d3d4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d3d8:	f8dc 3000 	ldr.w	r3, [ip]
 800d3dc:	f8ce 3000 	str.w	r3, [lr]
 800d3e0:	a802      	add	r0, sp, #8
 800d3e2:	f001 f86d 	bl	800e4c0 <rmw_get_zero_initialized_init_options>
 800d3e6:	f10d 0e08 	add.w	lr, sp, #8
 800d3ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d3ee:	f104 0c18 	add.w	ip, r4, #24
 800d3f2:	682f      	ldr	r7, [r5, #0]
 800d3f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d3f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d3fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d400:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d404:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d408:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d40c:	ac20      	add	r4, sp, #128	; 0x80
 800d40e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d412:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d416:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d41a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800d41e:	f107 0018 	add.w	r0, r7, #24
 800d422:	f001 f9cb 	bl	800e7bc <rmw_init_options_init>
 800d426:	4604      	mov	r4, r0
 800d428:	2800      	cmp	r0, #0
 800d42a:	d0b3      	beq.n	800d394 <rcl_init_options_init+0x18>
 800d42c:	9921      	ldr	r1, [sp, #132]	; 0x84
 800d42e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d430:	6828      	ldr	r0, [r5, #0]
 800d432:	4798      	blx	r3
 800d434:	4620      	mov	r0, r4
 800d436:	f7ff fe17 	bl	800d068 <rcl_convert_rmw_ret_to_rcl_ret>
 800d43a:	4604      	mov	r4, r0
 800d43c:	e7aa      	b.n	800d394 <rcl_init_options_init+0x18>
 800d43e:	240b      	movs	r4, #11
 800d440:	e7a8      	b.n	800d394 <rcl_init_options_init+0x18>
 800d442:	240a      	movs	r4, #10
 800d444:	e7a6      	b.n	800d394 <rcl_init_options_init+0x18>
 800d446:	bf00      	nop

0800d448 <rcl_init_options_fini>:
 800d448:	b530      	push	{r4, r5, lr}
 800d44a:	b087      	sub	sp, #28
 800d44c:	b1f0      	cbz	r0, 800d48c <rcl_init_options_fini+0x44>
 800d44e:	6803      	ldr	r3, [r0, #0]
 800d450:	4604      	mov	r4, r0
 800d452:	b1db      	cbz	r3, 800d48c <rcl_init_options_fini+0x44>
 800d454:	469c      	mov	ip, r3
 800d456:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d45a:	f10d 0e04 	add.w	lr, sp, #4
 800d45e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d462:	f8dc 3000 	ldr.w	r3, [ip]
 800d466:	f8ce 3000 	str.w	r3, [lr]
 800d46a:	a801      	add	r0, sp, #4
 800d46c:	f7fb fc00 	bl	8008c70 <rcutils_allocator_is_valid>
 800d470:	b160      	cbz	r0, 800d48c <rcl_init_options_fini+0x44>
 800d472:	6820      	ldr	r0, [r4, #0]
 800d474:	3018      	adds	r0, #24
 800d476:	f001 fa51 	bl	800e91c <rmw_init_options_fini>
 800d47a:	4605      	mov	r5, r0
 800d47c:	b950      	cbnz	r0, 800d494 <rcl_init_options_fini+0x4c>
 800d47e:	6820      	ldr	r0, [r4, #0]
 800d480:	9b02      	ldr	r3, [sp, #8]
 800d482:	9905      	ldr	r1, [sp, #20]
 800d484:	4798      	blx	r3
 800d486:	4628      	mov	r0, r5
 800d488:	b007      	add	sp, #28
 800d48a:	bd30      	pop	{r4, r5, pc}
 800d48c:	250b      	movs	r5, #11
 800d48e:	4628      	mov	r0, r5
 800d490:	b007      	add	sp, #28
 800d492:	bd30      	pop	{r4, r5, pc}
 800d494:	f7ff fde8 	bl	800d068 <rcl_convert_rmw_ret_to_rcl_ret>
 800d498:	4605      	mov	r5, r0
 800d49a:	e7f8      	b.n	800d48e <rcl_init_options_fini+0x46>

0800d49c <rcl_init_options_copy>:
 800d49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4a0:	b094      	sub	sp, #80	; 0x50
 800d4a2:	2800      	cmp	r0, #0
 800d4a4:	d058      	beq.n	800d558 <rcl_init_options_copy+0xbc>
 800d4a6:	4604      	mov	r4, r0
 800d4a8:	6800      	ldr	r0, [r0, #0]
 800d4aa:	2800      	cmp	r0, #0
 800d4ac:	d054      	beq.n	800d558 <rcl_init_options_copy+0xbc>
 800d4ae:	460e      	mov	r6, r1
 800d4b0:	f7fb fbde 	bl	8008c70 <rcutils_allocator_is_valid>
 800d4b4:	2800      	cmp	r0, #0
 800d4b6:	d04f      	beq.n	800d558 <rcl_init_options_copy+0xbc>
 800d4b8:	2e00      	cmp	r6, #0
 800d4ba:	d04d      	beq.n	800d558 <rcl_init_options_copy+0xbc>
 800d4bc:	6833      	ldr	r3, [r6, #0]
 800d4be:	b123      	cbz	r3, 800d4ca <rcl_init_options_copy+0x2e>
 800d4c0:	2464      	movs	r4, #100	; 0x64
 800d4c2:	4620      	mov	r0, r4
 800d4c4:	b014      	add	sp, #80	; 0x50
 800d4c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4ca:	6827      	ldr	r7, [r4, #0]
 800d4cc:	46bc      	mov	ip, r7
 800d4ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d4d2:	ad0f      	add	r5, sp, #60	; 0x3c
 800d4d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d4d6:	f8dc 3000 	ldr.w	r3, [ip]
 800d4da:	f8d7 8000 	ldr.w	r8, [r7]
 800d4de:	602b      	str	r3, [r5, #0]
 800d4e0:	4619      	mov	r1, r3
 800d4e2:	2050      	movs	r0, #80	; 0x50
 800d4e4:	47c0      	blx	r8
 800d4e6:	4605      	mov	r5, r0
 800d4e8:	6030      	str	r0, [r6, #0]
 800d4ea:	b3d0      	cbz	r0, 800d562 <rcl_init_options_copy+0xc6>
 800d4ec:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 800d4f0:	4686      	mov	lr, r0
 800d4f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d4f6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d4fa:	f8dc 3000 	ldr.w	r3, [ip]
 800d4fe:	f8ce 3000 	str.w	r3, [lr]
 800d502:	4668      	mov	r0, sp
 800d504:	f000 ffdc 	bl	800e4c0 <rmw_get_zero_initialized_init_options>
 800d508:	46ee      	mov	lr, sp
 800d50a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d50e:	f105 0c18 	add.w	ip, r5, #24
 800d512:	6824      	ldr	r4, [r4, #0]
 800d514:	6835      	ldr	r5, [r6, #0]
 800d516:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d51a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d51e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d522:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d526:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d52a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d52e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d532:	f104 0018 	add.w	r0, r4, #24
 800d536:	f105 0118 	add.w	r1, r5, #24
 800d53a:	f001 f9a7 	bl	800e88c <rmw_init_options_copy>
 800d53e:	4604      	mov	r4, r0
 800d540:	2800      	cmp	r0, #0
 800d542:	d0be      	beq.n	800d4c2 <rcl_init_options_copy+0x26>
 800d544:	f7fb fba2 	bl	8008c8c <rcutils_get_error_string>
 800d548:	f7fb fbb6 	bl	8008cb8 <rcutils_reset_error>
 800d54c:	4630      	mov	r0, r6
 800d54e:	f7ff ff7b 	bl	800d448 <rcl_init_options_fini>
 800d552:	b140      	cbz	r0, 800d566 <rcl_init_options_copy+0xca>
 800d554:	4604      	mov	r4, r0
 800d556:	e7b4      	b.n	800d4c2 <rcl_init_options_copy+0x26>
 800d558:	240b      	movs	r4, #11
 800d55a:	4620      	mov	r0, r4
 800d55c:	b014      	add	sp, #80	; 0x50
 800d55e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d562:	240a      	movs	r4, #10
 800d564:	e7ad      	b.n	800d4c2 <rcl_init_options_copy+0x26>
 800d566:	4620      	mov	r0, r4
 800d568:	b014      	add	sp, #80	; 0x50
 800d56a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d56e:	f7ff bd7b 	b.w	800d068 <rcl_convert_rmw_ret_to_rcl_ret>
 800d572:	bf00      	nop

0800d574 <rcl_get_localhost_only>:
 800d574:	b510      	push	{r4, lr}
 800d576:	b082      	sub	sp, #8
 800d578:	2300      	movs	r3, #0
 800d57a:	9301      	str	r3, [sp, #4]
 800d57c:	b1b8      	cbz	r0, 800d5ae <rcl_get_localhost_only+0x3a>
 800d57e:	4604      	mov	r4, r0
 800d580:	a901      	add	r1, sp, #4
 800d582:	480c      	ldr	r0, [pc, #48]	; (800d5b4 <rcl_get_localhost_only+0x40>)
 800d584:	f000 fc90 	bl	800dea8 <rcutils_get_env>
 800d588:	b110      	cbz	r0, 800d590 <rcl_get_localhost_only+0x1c>
 800d58a:	2001      	movs	r0, #1
 800d58c:	b002      	add	sp, #8
 800d58e:	bd10      	pop	{r4, pc}
 800d590:	9b01      	ldr	r3, [sp, #4]
 800d592:	b113      	cbz	r3, 800d59a <rcl_get_localhost_only+0x26>
 800d594:	781a      	ldrb	r2, [r3, #0]
 800d596:	2a31      	cmp	r2, #49	; 0x31
 800d598:	d004      	beq.n	800d5a4 <rcl_get_localhost_only+0x30>
 800d59a:	2302      	movs	r3, #2
 800d59c:	2000      	movs	r0, #0
 800d59e:	7023      	strb	r3, [r4, #0]
 800d5a0:	b002      	add	sp, #8
 800d5a2:	bd10      	pop	{r4, pc}
 800d5a4:	785b      	ldrb	r3, [r3, #1]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d1f7      	bne.n	800d59a <rcl_get_localhost_only+0x26>
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e7f6      	b.n	800d59c <rcl_get_localhost_only+0x28>
 800d5ae:	200b      	movs	r0, #11
 800d5b0:	b002      	add	sp, #8
 800d5b2:	bd10      	pop	{r4, pc}
 800d5b4:	08012fec 	.word	0x08012fec

0800d5b8 <rcl_get_zero_initialized_node>:
 800d5b8:	4a03      	ldr	r2, [pc, #12]	; (800d5c8 <rcl_get_zero_initialized_node+0x10>)
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d5c0:	e883 0003 	stmia.w	r3, {r0, r1}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	4770      	bx	lr
 800d5c8:	08013014 	.word	0x08013014

0800d5cc <rcl_node_init>:
 800d5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5d0:	b0a9      	sub	sp, #164	; 0xa4
 800d5d2:	4604      	mov	r4, r0
 800d5d4:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 800d5d8:	a823      	add	r0, sp, #140	; 0x8c
 800d5da:	460e      	mov	r6, r1
 800d5dc:	4615      	mov	r5, r2
 800d5de:	461f      	mov	r7, r3
 800d5e0:	f003 fd46 	bl	8011070 <rcl_guard_condition_get_default_options>
 800d5e4:	f1b8 0f00 	cmp.w	r8, #0
 800d5e8:	f000 80e6 	beq.w	800d7b8 <rcl_node_init+0x1ec>
 800d5ec:	4640      	mov	r0, r8
 800d5ee:	f7fb fb3f 	bl	8008c70 <rcutils_allocator_is_valid>
 800d5f2:	2800      	cmp	r0, #0
 800d5f4:	f000 80e0 	beq.w	800d7b8 <rcl_node_init+0x1ec>
 800d5f8:	2e00      	cmp	r6, #0
 800d5fa:	f000 80dd 	beq.w	800d7b8 <rcl_node_init+0x1ec>
 800d5fe:	2d00      	cmp	r5, #0
 800d600:	f000 80da 	beq.w	800d7b8 <rcl_node_init+0x1ec>
 800d604:	2c00      	cmp	r4, #0
 800d606:	f000 80d7 	beq.w	800d7b8 <rcl_node_init+0x1ec>
 800d60a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800d60e:	f1b9 0f00 	cmp.w	r9, #0
 800d612:	f040 80fd 	bne.w	800d810 <rcl_node_init+0x244>
 800d616:	2f00      	cmp	r7, #0
 800d618:	f000 80ce 	beq.w	800d7b8 <rcl_node_init+0x1ec>
 800d61c:	4638      	mov	r0, r7
 800d61e:	f7ff fd41 	bl	800d0a4 <rcl_context_is_valid>
 800d622:	4682      	mov	sl, r0
 800d624:	2800      	cmp	r0, #0
 800d626:	f000 80cd 	beq.w	800d7c4 <rcl_node_init+0x1f8>
 800d62a:	464a      	mov	r2, r9
 800d62c:	a922      	add	r1, sp, #136	; 0x88
 800d62e:	4630      	mov	r0, r6
 800d630:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 800d634:	f001 f83a 	bl	800e6ac <rmw_validate_node_name>
 800d638:	4681      	mov	r9, r0
 800d63a:	2800      	cmp	r0, #0
 800d63c:	f040 80be 	bne.w	800d7bc <rcl_node_init+0x1f0>
 800d640:	9822      	ldr	r0, [sp, #136]	; 0x88
 800d642:	2800      	cmp	r0, #0
 800d644:	f040 80f0 	bne.w	800d828 <rcl_node_init+0x25c>
 800d648:	4628      	mov	r0, r5
 800d64a:	f7f2 fdeb 	bl	8000224 <strlen>
 800d64e:	2800      	cmp	r0, #0
 800d650:	f040 80bb 	bne.w	800d7ca <rcl_node_init+0x1fe>
 800d654:	4d7c      	ldr	r5, [pc, #496]	; (800d848 <rcl_node_init+0x27c>)
 800d656:	a922      	add	r1, sp, #136	; 0x88
 800d658:	2200      	movs	r2, #0
 800d65a:	4628      	mov	r0, r5
 800d65c:	f001 f808 	bl	800e670 <rmw_validate_namespace>
 800d660:	4681      	mov	r9, r0
 800d662:	2800      	cmp	r0, #0
 800d664:	f040 80aa 	bne.w	800d7bc <rcl_node_init+0x1f0>
 800d668:	4682      	mov	sl, r0
 800d66a:	9822      	ldr	r0, [sp, #136]	; 0x88
 800d66c:	2800      	cmp	r0, #0
 800d66e:	f040 80e0 	bne.w	800d832 <rcl_node_init+0x266>
 800d672:	f8d8 3000 	ldr.w	r3, [r8]
 800d676:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d67a:	2078      	movs	r0, #120	; 0x78
 800d67c:	4798      	blx	r3
 800d67e:	4681      	mov	r9, r0
 800d680:	6060      	str	r0, [r4, #4]
 800d682:	2800      	cmp	r0, #0
 800d684:	f000 80ca 	beq.w	800d81c <rcl_node_init+0x250>
 800d688:	2200      	movs	r2, #0
 800d68a:	2300      	movs	r3, #0
 800d68c:	e9c9 231a 	strd	r2, r3, [r9, #104]	; 0x68
 800d690:	e9c9 231c 	strd	r2, r3, [r9, #112]	; 0x70
 800d694:	a808      	add	r0, sp, #32
 800d696:	f000 f907 	bl	800d8a8 <rcl_node_get_default_options>
 800d69a:	a908      	add	r1, sp, #32
 800d69c:	4648      	mov	r0, r9
 800d69e:	2268      	movs	r2, #104	; 0x68
 800d6a0:	f004 fc0d 	bl	8011ebe <memcpy>
 800d6a4:	6861      	ldr	r1, [r4, #4]
 800d6a6:	6027      	str	r7, [r4, #0]
 800d6a8:	4640      	mov	r0, r8
 800d6aa:	f000 f90b 	bl	800d8c4 <rcl_node_options_copy>
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	d158      	bne.n	800d764 <rcl_node_init+0x198>
 800d6b2:	4628      	mov	r0, r5
 800d6b4:	f7f2 fdb6 	bl	8000224 <strlen>
 800d6b8:	4428      	add	r0, r5
 800d6ba:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800d6be:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800d6c2:	2b2f      	cmp	r3, #47	; 0x2f
 800d6c4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d6c8:	9300      	str	r3, [sp, #0]
 800d6ca:	bf0c      	ite	eq
 800d6cc:	4b5f      	ldreq	r3, [pc, #380]	; (800d84c <rcl_node_init+0x280>)
 800d6ce:	4b60      	ldrne	r3, [pc, #384]	; (800d850 <rcl_node_init+0x284>)
 800d6d0:	9302      	str	r3, [sp, #8]
 800d6d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d6d6:	9301      	str	r3, [sp, #4]
 800d6d8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800d6dc:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800d6e0:	f000 fc0a 	bl	800def8 <rcutils_format_string_limit>
 800d6e4:	6823      	ldr	r3, [r4, #0]
 800d6e6:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 800d6ea:	6818      	ldr	r0, [r3, #0]
 800d6ec:	4631      	mov	r1, r6
 800d6ee:	3028      	adds	r0, #40	; 0x28
 800d6f0:	462a      	mov	r2, r5
 800d6f2:	6866      	ldr	r6, [r4, #4]
 800d6f4:	f001 fbae 	bl	800ee54 <rmw_create_node>
 800d6f8:	6863      	ldr	r3, [r4, #4]
 800d6fa:	66b0      	str	r0, [r6, #104]	; 0x68
 800d6fc:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800d6fe:	2800      	cmp	r0, #0
 800d700:	d032      	beq.n	800d768 <rcl_node_init+0x19c>
 800d702:	f001 fc3b 	bl	800ef7c <rmw_node_get_graph_guard_condition>
 800d706:	4681      	mov	r9, r0
 800d708:	b360      	cbz	r0, 800d764 <rcl_node_init+0x198>
 800d70a:	f8d8 3000 	ldr.w	r3, [r8]
 800d70e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d712:	6866      	ldr	r6, [r4, #4]
 800d714:	2008      	movs	r0, #8
 800d716:	4798      	blx	r3
 800d718:	6863      	ldr	r3, [r4, #4]
 800d71a:	66f0      	str	r0, [r6, #108]	; 0x6c
 800d71c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 800d720:	f1bb 0f00 	cmp.w	fp, #0
 800d724:	d020      	beq.n	800d768 <rcl_node_init+0x19c>
 800d726:	a806      	add	r0, sp, #24
 800d728:	f003 fc12 	bl	8010f50 <rcl_get_zero_initialized_guard_condition>
 800d72c:	a806      	add	r0, sp, #24
 800d72e:	c803      	ldmia	r0, {r0, r1}
 800d730:	6863      	ldr	r3, [r4, #4]
 800d732:	46c4      	mov	ip, r8
 800d734:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 800d738:	e88b 0003 	stmia.w	fp, {r0, r1}
 800d73c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d740:	ae23      	add	r6, sp, #140	; 0x8c
 800d742:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d744:	f8dc 3000 	ldr.w	r3, [ip]
 800d748:	6033      	str	r3, [r6, #0]
 800d74a:	ab28      	add	r3, sp, #160	; 0xa0
 800d74c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800d750:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d754:	4649      	mov	r1, r9
 800d756:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d758:	463a      	mov	r2, r7
 800d75a:	4670      	mov	r0, lr
 800d75c:	f003 fc02 	bl	8010f64 <rcl_guard_condition_init_from_rmw>
 800d760:	4681      	mov	r9, r0
 800d762:	b328      	cbz	r0, 800d7b0 <rcl_node_init+0x1e4>
 800d764:	6863      	ldr	r3, [r4, #4]
 800d766:	b1f3      	cbz	r3, 800d7a6 <rcl_node_init+0x1da>
 800d768:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800d76a:	b128      	cbz	r0, 800d778 <rcl_node_init+0x1ac>
 800d76c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d770:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d774:	4798      	blx	r3
 800d776:	6863      	ldr	r3, [r4, #4]
 800d778:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800d77a:	b110      	cbz	r0, 800d782 <rcl_node_init+0x1b6>
 800d77c:	f001 fb82 	bl	800ee84 <rmw_destroy_node>
 800d780:	6863      	ldr	r3, [r4, #4]
 800d782:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800d784:	b148      	cbz	r0, 800d79a <rcl_node_init+0x1ce>
 800d786:	f003 fc4d 	bl	8011024 <rcl_guard_condition_fini>
 800d78a:	6863      	ldr	r3, [r4, #4]
 800d78c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d790:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800d792:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d796:	4798      	blx	r3
 800d798:	6863      	ldr	r3, [r4, #4]
 800d79a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d7a4:	4798      	blx	r3
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	e9c4 3300 	strd	r3, r3, [r4]
 800d7ac:	f04f 0901 	mov.w	r9, #1
 800d7b0:	f1ba 0f00 	cmp.w	sl, #0
 800d7b4:	d125      	bne.n	800d802 <rcl_node_init+0x236>
 800d7b6:	e001      	b.n	800d7bc <rcl_node_init+0x1f0>
 800d7b8:	f04f 090b 	mov.w	r9, #11
 800d7bc:	4648      	mov	r0, r9
 800d7be:	b029      	add	sp, #164	; 0xa4
 800d7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7c4:	f04f 0965 	mov.w	r9, #101	; 0x65
 800d7c8:	e7f8      	b.n	800d7bc <rcl_node_init+0x1f0>
 800d7ca:	782b      	ldrb	r3, [r5, #0]
 800d7cc:	2b2f      	cmp	r3, #47	; 0x2f
 800d7ce:	f43f af42 	beq.w	800d656 <rcl_node_init+0x8a>
 800d7d2:	9503      	str	r5, [sp, #12]
 800d7d4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d7d8:	9300      	str	r3, [sp, #0]
 800d7da:	4b1e      	ldr	r3, [pc, #120]	; (800d854 <rcl_node_init+0x288>)
 800d7dc:	9302      	str	r3, [sp, #8]
 800d7de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d7e2:	9301      	str	r3, [sp, #4]
 800d7e4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800d7e8:	f000 fb86 	bl	800def8 <rcutils_format_string_limit>
 800d7ec:	4605      	mov	r5, r0
 800d7ee:	b340      	cbz	r0, 800d842 <rcl_node_init+0x276>
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	a922      	add	r1, sp, #136	; 0x88
 800d7f4:	9222      	str	r2, [sp, #136]	; 0x88
 800d7f6:	f000 ff3b 	bl	800e670 <rmw_validate_namespace>
 800d7fa:	4681      	mov	r9, r0
 800d7fc:	2800      	cmp	r0, #0
 800d7fe:	f43f af34 	beq.w	800d66a <rcl_node_init+0x9e>
 800d802:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d806:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d80a:	4628      	mov	r0, r5
 800d80c:	4798      	blx	r3
 800d80e:	e7d5      	b.n	800d7bc <rcl_node_init+0x1f0>
 800d810:	f04f 0964 	mov.w	r9, #100	; 0x64
 800d814:	4648      	mov	r0, r9
 800d816:	b029      	add	sp, #164	; 0xa4
 800d818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d81c:	f04f 090a 	mov.w	r9, #10
 800d820:	f1ba 0f00 	cmp.w	sl, #0
 800d824:	d1ed      	bne.n	800d802 <rcl_node_init+0x236>
 800d826:	e7c9      	b.n	800d7bc <rcl_node_init+0x1f0>
 800d828:	f000 ff92 	bl	800e750 <rmw_node_name_validation_result_string>
 800d82c:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 800d830:	e7c4      	b.n	800d7bc <rcl_node_init+0x1f0>
 800d832:	f000 ff2f 	bl	800e694 <rmw_namespace_validation_result_string>
 800d836:	f04f 09ca 	mov.w	r9, #202	; 0xca
 800d83a:	f1ba 0f00 	cmp.w	sl, #0
 800d83e:	d1e0      	bne.n	800d802 <rcl_node_init+0x236>
 800d840:	e7bc      	b.n	800d7bc <rcl_node_init+0x1f0>
 800d842:	f04f 090a 	mov.w	r9, #10
 800d846:	e7b9      	b.n	800d7bc <rcl_node_init+0x1f0>
 800d848:	08013004 	.word	0x08013004
 800d84c:	08012e88 	.word	0x08012e88
 800d850:	0801300c 	.word	0x0801300c
 800d854:	08013008 	.word	0x08013008

0800d858 <rcl_node_is_valid>:
 800d858:	b130      	cbz	r0, 800d868 <rcl_node_is_valid+0x10>
 800d85a:	6843      	ldr	r3, [r0, #4]
 800d85c:	b123      	cbz	r3, 800d868 <rcl_node_is_valid+0x10>
 800d85e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d860:	b113      	cbz	r3, 800d868 <rcl_node_is_valid+0x10>
 800d862:	6800      	ldr	r0, [r0, #0]
 800d864:	f7ff bc1e 	b.w	800d0a4 <rcl_context_is_valid>
 800d868:	2000      	movs	r0, #0
 800d86a:	4770      	bx	lr

0800d86c <rcl_node_get_name>:
 800d86c:	b120      	cbz	r0, 800d878 <rcl_node_get_name+0xc>
 800d86e:	6840      	ldr	r0, [r0, #4]
 800d870:	b110      	cbz	r0, 800d878 <rcl_node_get_name+0xc>
 800d872:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800d874:	b100      	cbz	r0, 800d878 <rcl_node_get_name+0xc>
 800d876:	6880      	ldr	r0, [r0, #8]
 800d878:	4770      	bx	lr
 800d87a:	bf00      	nop

0800d87c <rcl_node_get_namespace>:
 800d87c:	b120      	cbz	r0, 800d888 <rcl_node_get_namespace+0xc>
 800d87e:	6840      	ldr	r0, [r0, #4]
 800d880:	b110      	cbz	r0, 800d888 <rcl_node_get_namespace+0xc>
 800d882:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800d884:	b100      	cbz	r0, 800d888 <rcl_node_get_namespace+0xc>
 800d886:	68c0      	ldr	r0, [r0, #12]
 800d888:	4770      	bx	lr
 800d88a:	bf00      	nop

0800d88c <rcl_node_get_options>:
 800d88c:	b128      	cbz	r0, 800d89a <rcl_node_get_options+0xe>
 800d88e:	6840      	ldr	r0, [r0, #4]
 800d890:	b118      	cbz	r0, 800d89a <rcl_node_get_options+0xe>
 800d892:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800d894:	2b00      	cmp	r3, #0
 800d896:	bf08      	it	eq
 800d898:	2000      	moveq	r0, #0
 800d89a:	4770      	bx	lr

0800d89c <rcl_node_get_rmw_handle>:
 800d89c:	b110      	cbz	r0, 800d8a4 <rcl_node_get_rmw_handle+0x8>
 800d89e:	6840      	ldr	r0, [r0, #4]
 800d8a0:	b100      	cbz	r0, 800d8a4 <rcl_node_get_rmw_handle+0x8>
 800d8a2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800d8a4:	4770      	bx	lr
 800d8a6:	bf00      	nop

0800d8a8 <rcl_node_get_default_options>:
 800d8a8:	b510      	push	{r4, lr}
 800d8aa:	2268      	movs	r2, #104	; 0x68
 800d8ac:	4604      	mov	r4, r0
 800d8ae:	2100      	movs	r1, #0
 800d8b0:	f004 f9e6 	bl	8011c80 <memset>
 800d8b4:	4620      	mov	r0, r4
 800d8b6:	f7fb f9cd 	bl	8008c54 <rcutils_get_default_allocator>
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	7523      	strb	r3, [r4, #20]
 800d8be:	4620      	mov	r0, r4
 800d8c0:	bd10      	pop	{r4, pc}
 800d8c2:	bf00      	nop

0800d8c4 <rcl_node_options_copy>:
 800d8c4:	b1d0      	cbz	r0, 800d8fc <rcl_node_options_copy+0x38>
 800d8c6:	b570      	push	{r4, r5, r6, lr}
 800d8c8:	460c      	mov	r4, r1
 800d8ca:	b1a9      	cbz	r1, 800d8f8 <rcl_node_options_copy+0x34>
 800d8cc:	4288      	cmp	r0, r1
 800d8ce:	4684      	mov	ip, r0
 800d8d0:	d012      	beq.n	800d8f8 <rcl_node_options_copy+0x34>
 800d8d2:	4605      	mov	r5, r0
 800d8d4:	8a86      	ldrh	r6, [r0, #20]
 800d8d6:	468e      	mov	lr, r1
 800d8d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d8da:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d8de:	682b      	ldr	r3, [r5, #0]
 800d8e0:	f8ce 3000 	str.w	r3, [lr]
 800d8e4:	f10c 0118 	add.w	r1, ip, #24
 800d8e8:	2250      	movs	r2, #80	; 0x50
 800d8ea:	82a6      	strh	r6, [r4, #20]
 800d8ec:	f104 0018 	add.w	r0, r4, #24
 800d8f0:	f004 fae5 	bl	8011ebe <memcpy>
 800d8f4:	2000      	movs	r0, #0
 800d8f6:	bd70      	pop	{r4, r5, r6, pc}
 800d8f8:	200b      	movs	r0, #11
 800d8fa:	bd70      	pop	{r4, r5, r6, pc}
 800d8fc:	200b      	movs	r0, #11
 800d8fe:	4770      	bx	lr

0800d900 <rcl_node_resolve_name>:
 800d900:	b082      	sub	sp, #8
 800d902:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d906:	b091      	sub	sp, #68	; 0x44
 800d908:	ac1a      	add	r4, sp, #104	; 0x68
 800d90a:	e884 000c 	stmia.w	r4, {r2, r3}
 800d90e:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 800d912:	2800      	cmp	r0, #0
 800d914:	d03b      	beq.n	800d98e <rcl_node_resolve_name+0x8e>
 800d916:	460c      	mov	r4, r1
 800d918:	4605      	mov	r5, r0
 800d91a:	f7ff ffb7 	bl	800d88c <rcl_node_get_options>
 800d91e:	2800      	cmp	r0, #0
 800d920:	d037      	beq.n	800d992 <rcl_node_resolve_name+0x92>
 800d922:	4628      	mov	r0, r5
 800d924:	f7ff ffa2 	bl	800d86c <rcl_node_get_name>
 800d928:	4606      	mov	r6, r0
 800d92a:	4628      	mov	r0, r5
 800d92c:	f7ff ffa6 	bl	800d87c <rcl_node_get_namespace>
 800d930:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 800d934:	4681      	mov	r9, r0
 800d936:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d93a:	ad0b      	add	r5, sp, #44	; 0x2c
 800d93c:	46ac      	mov	ip, r5
 800d93e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d942:	f8de 3000 	ldr.w	r3, [lr]
 800d946:	f8cc 3000 	str.w	r3, [ip]
 800d94a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d94c:	b1fb      	cbz	r3, 800d98e <rcl_node_resolve_name+0x8e>
 800d94e:	468a      	mov	sl, r1
 800d950:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 800d954:	f000 fc28 	bl	800e1a8 <rcutils_get_zero_initialized_string_map>
 800d958:	ab10      	add	r3, sp, #64	; 0x40
 800d95a:	9008      	str	r0, [sp, #32]
 800d95c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800d960:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d964:	2100      	movs	r1, #0
 800d966:	e895 000c 	ldmia.w	r5, {r2, r3}
 800d96a:	a808      	add	r0, sp, #32
 800d96c:	f000 fc94 	bl	800e298 <rcutils_string_map_init>
 800d970:	4607      	mov	r7, r0
 800d972:	b180      	cbz	r0, 800d996 <rcl_node_resolve_name+0x96>
 800d974:	f7fb f98a 	bl	8008c8c <rcutils_get_error_string>
 800d978:	f7fb f99e 	bl	8008cb8 <rcutils_reset_error>
 800d97c:	2f0a      	cmp	r7, #10
 800d97e:	bf18      	it	ne
 800d980:	2701      	movne	r7, #1
 800d982:	4638      	mov	r0, r7
 800d984:	b011      	add	sp, #68	; 0x44
 800d986:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d98a:	b002      	add	sp, #8
 800d98c:	4770      	bx	lr
 800d98e:	270b      	movs	r7, #11
 800d990:	e7f7      	b.n	800d982 <rcl_node_resolve_name+0x82>
 800d992:	2701      	movs	r7, #1
 800d994:	e7f5      	b.n	800d982 <rcl_node_resolve_name+0x82>
 800d996:	9009      	str	r0, [sp, #36]	; 0x24
 800d998:	9007      	str	r0, [sp, #28]
 800d99a:	a808      	add	r0, sp, #32
 800d99c:	f003 fad2 	bl	8010f44 <rcl_get_default_topic_name_substitutions>
 800d9a0:	4607      	mov	r7, r0
 800d9a2:	b1a8      	cbz	r0, 800d9d0 <rcl_node_resolve_name+0xd0>
 800d9a4:	280a      	cmp	r0, #10
 800d9a6:	9c07      	ldr	r4, [sp, #28]
 800d9a8:	d000      	beq.n	800d9ac <rcl_node_resolve_name+0xac>
 800d9aa:	2701      	movs	r7, #1
 800d9ac:	a808      	add	r0, sp, #32
 800d9ae:	f000 fcb3 	bl	800e318 <rcutils_string_map_fini>
 800d9b2:	2800      	cmp	r0, #0
 800d9b4:	d13d      	bne.n	800da32 <rcl_node_resolve_name+0x132>
 800d9b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9b8:	4659      	mov	r1, fp
 800d9ba:	47d0      	blx	sl
 800d9bc:	4659      	mov	r1, fp
 800d9be:	4620      	mov	r0, r4
 800d9c0:	47d0      	blx	sl
 800d9c2:	f1b8 0f00 	cmp.w	r8, #0
 800d9c6:	d0dc      	beq.n	800d982 <rcl_node_resolve_name+0x82>
 800d9c8:	2f67      	cmp	r7, #103	; 0x67
 800d9ca:	bf08      	it	eq
 800d9cc:	2768      	moveq	r7, #104	; 0x68
 800d9ce:	e7d8      	b.n	800d982 <rcl_node_resolve_name+0x82>
 800d9d0:	ab09      	add	r3, sp, #36	; 0x24
 800d9d2:	9305      	str	r3, [sp, #20]
 800d9d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d9d6:	46ec      	mov	ip, sp
 800d9d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d9dc:	682b      	ldr	r3, [r5, #0]
 800d9de:	f8cc 3000 	str.w	r3, [ip]
 800d9e2:	464a      	mov	r2, r9
 800d9e4:	4631      	mov	r1, r6
 800d9e6:	4620      	mov	r0, r4
 800d9e8:	ab08      	add	r3, sp, #32
 800d9ea:	f003 f94d 	bl	8010c88 <rcl_expand_topic_name>
 800d9ee:	4607      	mov	r7, r0
 800d9f0:	b9b8      	cbnz	r0, 800da22 <rcl_node_resolve_name+0x122>
 800d9f2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d9f4:	9009      	str	r0, [sp, #36]	; 0x24
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	a90a      	add	r1, sp, #40	; 0x28
 800d9fa:	4620      	mov	r0, r4
 800d9fc:	f000 fd74 	bl	800e4e8 <rmw_validate_full_topic_name>
 800da00:	b988      	cbnz	r0, 800da26 <rcl_node_resolve_name+0x126>
 800da02:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800da04:	b9d5      	cbnz	r5, 800da3c <rcl_node_resolve_name+0x13c>
 800da06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da08:	a808      	add	r0, sp, #32
 800da0a:	601c      	str	r4, [r3, #0]
 800da0c:	f000 fc84 	bl	800e318 <rcutils_string_map_fini>
 800da10:	4607      	mov	r7, r0
 800da12:	b1a8      	cbz	r0, 800da40 <rcl_node_resolve_name+0x140>
 800da14:	f7fb f93a 	bl	8008c8c <rcutils_get_error_string>
 800da18:	462c      	mov	r4, r5
 800da1a:	f7fb f94d 	bl	8008cb8 <rcutils_reset_error>
 800da1e:	2701      	movs	r7, #1
 800da20:	e7c9      	b.n	800d9b6 <rcl_node_resolve_name+0xb6>
 800da22:	9c07      	ldr	r4, [sp, #28]
 800da24:	e7c2      	b.n	800d9ac <rcl_node_resolve_name+0xac>
 800da26:	f7fb f931 	bl	8008c8c <rcutils_get_error_string>
 800da2a:	2701      	movs	r7, #1
 800da2c:	f7fb f944 	bl	8008cb8 <rcutils_reset_error>
 800da30:	e7bc      	b.n	800d9ac <rcl_node_resolve_name+0xac>
 800da32:	f7fb f92b 	bl	8008c8c <rcutils_get_error_string>
 800da36:	f7fb f93f 	bl	8008cb8 <rcutils_reset_error>
 800da3a:	e7bc      	b.n	800d9b6 <rcl_node_resolve_name+0xb6>
 800da3c:	2767      	movs	r7, #103	; 0x67
 800da3e:	e7b5      	b.n	800d9ac <rcl_node_resolve_name+0xac>
 800da40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da42:	4659      	mov	r1, fp
 800da44:	47d0      	blx	sl
 800da46:	4659      	mov	r1, fp
 800da48:	4638      	mov	r0, r7
 800da4a:	47d0      	blx	sl
 800da4c:	e799      	b.n	800d982 <rcl_node_resolve_name+0x82>
 800da4e:	bf00      	nop

0800da50 <exact_match_lookup>:
 800da50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da52:	f102 0708 	add.w	r7, r2, #8
 800da56:	460b      	mov	r3, r1
 800da58:	4614      	mov	r4, r2
 800da5a:	4606      	mov	r6, r0
 800da5c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800da60:	b085      	sub	sp, #20
 800da62:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800da66:	4618      	mov	r0, r3
 800da68:	4919      	ldr	r1, [pc, #100]	; (800dad0 <exact_match_lookup+0x80>)
 800da6a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800da6e:	f000 fa35 	bl	800dedc <rcutils_join_path>
 800da72:	7833      	ldrb	r3, [r6, #0]
 800da74:	2b2f      	cmp	r3, #47	; 0x2f
 800da76:	4605      	mov	r5, r0
 800da78:	d023      	beq.n	800dac2 <exact_match_lookup+0x72>
 800da7a:	f104 030c 	add.w	r3, r4, #12
 800da7e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800da82:	e88d 0003 	stmia.w	sp, {r0, r1}
 800da86:	1c70      	adds	r0, r6, #1
 800da88:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800da8c:	f000 fa2c 	bl	800dee8 <rcutils_to_native_path>
 800da90:	4606      	mov	r6, r0
 800da92:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800da96:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800da9a:	4631      	mov	r1, r6
 800da9c:	e894 000c 	ldmia.w	r4, {r2, r3}
 800daa0:	4628      	mov	r0, r5
 800daa2:	f000 fa1b 	bl	800dedc <rcutils_join_path>
 800daa6:	6862      	ldr	r2, [r4, #4]
 800daa8:	6921      	ldr	r1, [r4, #16]
 800daaa:	4603      	mov	r3, r0
 800daac:	4630      	mov	r0, r6
 800daae:	461e      	mov	r6, r3
 800dab0:	4790      	blx	r2
 800dab2:	4628      	mov	r0, r5
 800dab4:	6863      	ldr	r3, [r4, #4]
 800dab6:	6921      	ldr	r1, [r4, #16]
 800dab8:	4798      	blx	r3
 800daba:	4635      	mov	r5, r6
 800dabc:	4628      	mov	r0, r5
 800dabe:	b005      	add	sp, #20
 800dac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dac2:	7873      	ldrb	r3, [r6, #1]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d1d8      	bne.n	800da7a <exact_match_lookup+0x2a>
 800dac8:	4628      	mov	r0, r5
 800daca:	b005      	add	sp, #20
 800dacc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dace:	bf00      	nop
 800dad0:	08013058 	.word	0x08013058

0800dad4 <rcl_get_secure_root>:
 800dad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dad8:	b085      	sub	sp, #20
 800dada:	b168      	cbz	r0, 800daf8 <rcl_get_secure_root+0x24>
 800dadc:	4607      	mov	r7, r0
 800dade:	4608      	mov	r0, r1
 800dae0:	460c      	mov	r4, r1
 800dae2:	f7fb f8c5 	bl	8008c70 <rcutils_allocator_is_valid>
 800dae6:	b138      	cbz	r0, 800daf8 <rcl_get_secure_root+0x24>
 800dae8:	2300      	movs	r3, #0
 800daea:	482d      	ldr	r0, [pc, #180]	; (800dba0 <rcl_get_secure_root+0xcc>)
 800daec:	9303      	str	r3, [sp, #12]
 800daee:	a903      	add	r1, sp, #12
 800daf0:	f000 f9da 	bl	800dea8 <rcutils_get_env>
 800daf4:	4605      	mov	r5, r0
 800daf6:	b120      	cbz	r0, 800db02 <rcl_get_secure_root+0x2e>
 800daf8:	2500      	movs	r5, #0
 800dafa:	4628      	mov	r0, r5
 800dafc:	b005      	add	sp, #20
 800dafe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db02:	9b03      	ldr	r3, [sp, #12]
 800db04:	781a      	ldrb	r2, [r3, #0]
 800db06:	2a00      	cmp	r2, #0
 800db08:	d0f6      	beq.n	800daf8 <rcl_get_secure_root+0x24>
 800db0a:	f104 090c 	add.w	r9, r4, #12
 800db0e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800db12:	e88d 0003 	stmia.w	sp, {r0, r1}
 800db16:	4618      	mov	r0, r3
 800db18:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800db1c:	f000 fb06 	bl	800e12c <rcutils_strdup>
 800db20:	4680      	mov	r8, r0
 800db22:	2800      	cmp	r0, #0
 800db24:	d0e8      	beq.n	800daf8 <rcl_get_secure_root+0x24>
 800db26:	481f      	ldr	r0, [pc, #124]	; (800dba4 <rcl_get_secure_root+0xd0>)
 800db28:	9503      	str	r5, [sp, #12]
 800db2a:	a903      	add	r1, sp, #12
 800db2c:	f000 f9bc 	bl	800dea8 <rcutils_get_env>
 800db30:	b160      	cbz	r0, 800db4c <rcl_get_secure_root+0x78>
 800db32:	2600      	movs	r6, #0
 800db34:	6863      	ldr	r3, [r4, #4]
 800db36:	6921      	ldr	r1, [r4, #16]
 800db38:	4630      	mov	r0, r6
 800db3a:	4798      	blx	r3
 800db3c:	4640      	mov	r0, r8
 800db3e:	6863      	ldr	r3, [r4, #4]
 800db40:	6921      	ldr	r1, [r4, #16]
 800db42:	4798      	blx	r3
 800db44:	4628      	mov	r0, r5
 800db46:	b005      	add	sp, #20
 800db48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db4c:	9b03      	ldr	r3, [sp, #12]
 800db4e:	781e      	ldrb	r6, [r3, #0]
 800db50:	b1f6      	cbz	r6, 800db90 <rcl_get_secure_root+0xbc>
 800db52:	e899 0003 	ldmia.w	r9, {r0, r1}
 800db56:	e88d 0003 	stmia.w	sp, {r0, r1}
 800db5a:	4618      	mov	r0, r3
 800db5c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800db60:	f000 fae4 	bl	800e12c <rcutils_strdup>
 800db64:	4606      	mov	r6, r0
 800db66:	2800      	cmp	r0, #0
 800db68:	d0e3      	beq.n	800db32 <rcl_get_secure_root+0x5e>
 800db6a:	4622      	mov	r2, r4
 800db6c:	4641      	mov	r1, r8
 800db6e:	f7ff ff6f 	bl	800da50 <exact_match_lookup>
 800db72:	4605      	mov	r5, r0
 800db74:	2d00      	cmp	r5, #0
 800db76:	d0dd      	beq.n	800db34 <rcl_get_secure_root+0x60>
 800db78:	4628      	mov	r0, r5
 800db7a:	f000 f9ad 	bl	800ded8 <rcutils_is_directory>
 800db7e:	4603      	mov	r3, r0
 800db80:	2800      	cmp	r0, #0
 800db82:	d1d7      	bne.n	800db34 <rcl_get_secure_root+0x60>
 800db84:	4628      	mov	r0, r5
 800db86:	6921      	ldr	r1, [r4, #16]
 800db88:	461d      	mov	r5, r3
 800db8a:	6863      	ldr	r3, [r4, #4]
 800db8c:	4798      	blx	r3
 800db8e:	e7d1      	b.n	800db34 <rcl_get_secure_root+0x60>
 800db90:	4622      	mov	r2, r4
 800db92:	4638      	mov	r0, r7
 800db94:	4641      	mov	r1, r8
 800db96:	f7ff ff5b 	bl	800da50 <exact_match_lookup>
 800db9a:	4605      	mov	r5, r0
 800db9c:	e7ea      	b.n	800db74 <rcl_get_secure_root+0xa0>
 800db9e:	bf00      	nop
 800dba0:	08013064 	.word	0x08013064
 800dba4:	0801307c 	.word	0x0801307c

0800dba8 <rcl_get_security_options_from_environment>:
 800dba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbac:	b082      	sub	sp, #8
 800dbae:	2300      	movs	r3, #0
 800dbb0:	4606      	mov	r6, r0
 800dbb2:	460f      	mov	r7, r1
 800dbb4:	4820      	ldr	r0, [pc, #128]	; (800dc38 <rcl_get_security_options_from_environment+0x90>)
 800dbb6:	9301      	str	r3, [sp, #4]
 800dbb8:	a901      	add	r1, sp, #4
 800dbba:	4690      	mov	r8, r2
 800dbbc:	f000 f974 	bl	800dea8 <rcutils_get_env>
 800dbc0:	b120      	cbz	r0, 800dbcc <rcl_get_security_options_from_environment+0x24>
 800dbc2:	2501      	movs	r5, #1
 800dbc4:	4628      	mov	r0, r5
 800dbc6:	b002      	add	sp, #8
 800dbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbcc:	491b      	ldr	r1, [pc, #108]	; (800dc3c <rcl_get_security_options_from_environment+0x94>)
 800dbce:	4604      	mov	r4, r0
 800dbd0:	9801      	ldr	r0, [sp, #4]
 800dbd2:	f7f2 fb1d 	bl	8000210 <strcmp>
 800dbd6:	4605      	mov	r5, r0
 800dbd8:	b9e8      	cbnz	r0, 800dc16 <rcl_get_security_options_from_environment+0x6e>
 800dbda:	9001      	str	r0, [sp, #4]
 800dbdc:	f1b8 0f00 	cmp.w	r8, #0
 800dbe0:	d020      	beq.n	800dc24 <rcl_get_security_options_from_environment+0x7c>
 800dbe2:	4817      	ldr	r0, [pc, #92]	; (800dc40 <rcl_get_security_options_from_environment+0x98>)
 800dbe4:	a901      	add	r1, sp, #4
 800dbe6:	f000 f95f 	bl	800dea8 <rcutils_get_env>
 800dbea:	2800      	cmp	r0, #0
 800dbec:	d1e9      	bne.n	800dbc2 <rcl_get_security_options_from_environment+0x1a>
 800dbee:	4915      	ldr	r1, [pc, #84]	; (800dc44 <rcl_get_security_options_from_environment+0x9c>)
 800dbf0:	9801      	ldr	r0, [sp, #4]
 800dbf2:	f7f2 fb0d 	bl	8000210 <strcmp>
 800dbf6:	fab0 f080 	clz	r0, r0
 800dbfa:	0940      	lsrs	r0, r0, #5
 800dbfc:	f888 0000 	strb.w	r0, [r8]
 800dc00:	4639      	mov	r1, r7
 800dc02:	4630      	mov	r0, r6
 800dc04:	f7ff ff66 	bl	800dad4 <rcl_get_secure_root>
 800dc08:	b170      	cbz	r0, 800dc28 <rcl_get_security_options_from_environment+0x80>
 800dc0a:	f8c8 0004 	str.w	r0, [r8, #4]
 800dc0e:	4628      	mov	r0, r5
 800dc10:	b002      	add	sp, #8
 800dc12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc16:	4625      	mov	r5, r4
 800dc18:	4628      	mov	r0, r5
 800dc1a:	f888 4000 	strb.w	r4, [r8]
 800dc1e:	b002      	add	sp, #8
 800dc20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc24:	250b      	movs	r5, #11
 800dc26:	e7cd      	b.n	800dbc4 <rcl_get_security_options_from_environment+0x1c>
 800dc28:	f898 5000 	ldrb.w	r5, [r8]
 800dc2c:	f1a5 0501 	sub.w	r5, r5, #1
 800dc30:	fab5 f585 	clz	r5, r5
 800dc34:	096d      	lsrs	r5, r5, #5
 800dc36:	e7c5      	b.n	800dbc4 <rcl_get_security_options_from_environment+0x1c>
 800dc38:	0801301c 	.word	0x0801301c
 800dc3c:	08013030 	.word	0x08013030
 800dc40:	08013038 	.word	0x08013038
 800dc44:	08013050 	.word	0x08013050

0800dc48 <rcl_get_system_time>:
 800dc48:	4608      	mov	r0, r1
 800dc4a:	f000 bbd9 	b.w	800e400 <rcutils_system_time_now>
 800dc4e:	bf00      	nop

0800dc50 <rcl_get_steady_time>:
 800dc50:	4608      	mov	r0, r1
 800dc52:	f000 bbfd 	b.w	800e450 <rcutils_steady_time_now>
 800dc56:	bf00      	nop

0800dc58 <rcl_get_ros_time>:
 800dc58:	7a03      	ldrb	r3, [r0, #8]
 800dc5a:	b510      	push	{r4, lr}
 800dc5c:	460c      	mov	r4, r1
 800dc5e:	b133      	cbz	r3, 800dc6e <rcl_get_ros_time+0x16>
 800dc60:	2105      	movs	r1, #5
 800dc62:	f000 f8eb 	bl	800de3c <__atomic_load_8>
 800dc66:	e9c4 0100 	strd	r0, r1, [r4]
 800dc6a:	2000      	movs	r0, #0
 800dc6c:	bd10      	pop	{r4, pc}
 800dc6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc72:	4608      	mov	r0, r1
 800dc74:	f000 bbc4 	b.w	800e400 <rcutils_system_time_now>

0800dc78 <rcl_clock_init>:
 800dc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc7a:	4605      	mov	r5, r0
 800dc7c:	4610      	mov	r0, r2
 800dc7e:	4614      	mov	r4, r2
 800dc80:	460e      	mov	r6, r1
 800dc82:	f7fa fff5 	bl	8008c70 <rcutils_allocator_is_valid>
 800dc86:	b128      	cbz	r0, 800dc94 <rcl_clock_init+0x1c>
 800dc88:	2d03      	cmp	r5, #3
 800dc8a:	d803      	bhi.n	800dc94 <rcl_clock_init+0x1c>
 800dc8c:	e8df f005 	tbb	[pc, r5]
 800dc90:	06532e1d 	.word	0x06532e1d
 800dc94:	f04f 0c0b 	mov.w	ip, #11
 800dc98:	4660      	mov	r0, ip
 800dc9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc9c:	2e00      	cmp	r6, #0
 800dc9e:	d0f9      	beq.n	800dc94 <rcl_clock_init+0x1c>
 800dca0:	2c00      	cmp	r4, #0
 800dca2:	d0f7      	beq.n	800dc94 <rcl_clock_init+0x1c>
 800dca4:	2300      	movs	r3, #0
 800dca6:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800dcaa:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 800dd60 <rcl_clock_init+0xe8>
 800dcae:	6133      	str	r3, [r6, #16]
 800dcb0:	f106 0514 	add.w	r5, r6, #20
 800dcb4:	469c      	mov	ip, r3
 800dcb6:	2703      	movs	r7, #3
 800dcb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dcba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dcbc:	6823      	ldr	r3, [r4, #0]
 800dcbe:	602b      	str	r3, [r5, #0]
 800dcc0:	7037      	strb	r7, [r6, #0]
 800dcc2:	f8c6 e00c 	str.w	lr, [r6, #12]
 800dcc6:	4660      	mov	r0, ip
 800dcc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcca:	2e00      	cmp	r6, #0
 800dccc:	d0e2      	beq.n	800dc94 <rcl_clock_init+0x1c>
 800dcce:	2300      	movs	r3, #0
 800dcd0:	7033      	strb	r3, [r6, #0]
 800dcd2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800dcd6:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800dcda:	469c      	mov	ip, r3
 800dcdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dcde:	f106 0514 	add.w	r5, r6, #20
 800dce2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dce4:	6823      	ldr	r3, [r4, #0]
 800dce6:	602b      	str	r3, [r5, #0]
 800dce8:	4660      	mov	r0, ip
 800dcea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcec:	2e00      	cmp	r6, #0
 800dcee:	d0d1      	beq.n	800dc94 <rcl_clock_init+0x1c>
 800dcf0:	2c00      	cmp	r4, #0
 800dcf2:	d0cf      	beq.n	800dc94 <rcl_clock_init+0x1c>
 800dcf4:	2700      	movs	r7, #0
 800dcf6:	7037      	strb	r7, [r6, #0]
 800dcf8:	46a4      	mov	ip, r4
 800dcfa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dcfe:	f106 0514 	add.w	r5, r6, #20
 800dd02:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800dd06:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800dd0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dd0c:	f8dc 3000 	ldr.w	r3, [ip]
 800dd10:	602b      	str	r3, [r5, #0]
 800dd12:	6921      	ldr	r1, [r4, #16]
 800dd14:	6823      	ldr	r3, [r4, #0]
 800dd16:	2010      	movs	r0, #16
 800dd18:	4798      	blx	r3
 800dd1a:	6130      	str	r0, [r6, #16]
 800dd1c:	b1d0      	cbz	r0, 800dd54 <rcl_clock_init+0xdc>
 800dd1e:	2200      	movs	r2, #0
 800dd20:	2300      	movs	r3, #0
 800dd22:	e9c0 2300 	strd	r2, r3, [r0]
 800dd26:	2301      	movs	r3, #1
 800dd28:	7207      	strb	r7, [r0, #8]
 800dd2a:	4a0c      	ldr	r2, [pc, #48]	; (800dd5c <rcl_clock_init+0xe4>)
 800dd2c:	7033      	strb	r3, [r6, #0]
 800dd2e:	46bc      	mov	ip, r7
 800dd30:	60f2      	str	r2, [r6, #12]
 800dd32:	4660      	mov	r0, ip
 800dd34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd36:	2e00      	cmp	r6, #0
 800dd38:	d0ac      	beq.n	800dc94 <rcl_clock_init+0x1c>
 800dd3a:	2c00      	cmp	r4, #0
 800dd3c:	d0aa      	beq.n	800dc94 <rcl_clock_init+0x1c>
 800dd3e:	2300      	movs	r3, #0
 800dd40:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800dd44:	f8df e01c 	ldr.w	lr, [pc, #28]	; 800dd64 <rcl_clock_init+0xec>
 800dd48:	6133      	str	r3, [r6, #16]
 800dd4a:	f106 0514 	add.w	r5, r6, #20
 800dd4e:	469c      	mov	ip, r3
 800dd50:	2702      	movs	r7, #2
 800dd52:	e7b1      	b.n	800dcb8 <rcl_clock_init+0x40>
 800dd54:	f04f 0c0a 	mov.w	ip, #10
 800dd58:	e79e      	b.n	800dc98 <rcl_clock_init+0x20>
 800dd5a:	bf00      	nop
 800dd5c:	0800dc59 	.word	0x0800dc59
 800dd60:	0800dc51 	.word	0x0800dc51
 800dd64:	0800dc49 	.word	0x0800dc49

0800dd68 <rcl_validate_enclave_name_with_size>:
 800dd68:	b378      	cbz	r0, 800ddca <rcl_validate_enclave_name_with_size+0x62>
 800dd6a:	b570      	push	{r4, r5, r6, lr}
 800dd6c:	4615      	mov	r5, r2
 800dd6e:	b0c2      	sub	sp, #264	; 0x108
 800dd70:	b302      	cbz	r2, 800ddb4 <rcl_validate_enclave_name_with_size+0x4c>
 800dd72:	461e      	mov	r6, r3
 800dd74:	466a      	mov	r2, sp
 800dd76:	ab01      	add	r3, sp, #4
 800dd78:	460c      	mov	r4, r1
 800dd7a:	f000 fc2b 	bl	800e5d4 <rmw_validate_namespace_with_size>
 800dd7e:	4684      	mov	ip, r0
 800dd80:	b9e8      	cbnz	r0, 800ddbe <rcl_validate_enclave_name_with_size+0x56>
 800dd82:	9b00      	ldr	r3, [sp, #0]
 800dd84:	b923      	cbnz	r3, 800dd90 <rcl_validate_enclave_name_with_size+0x28>
 800dd86:	2300      	movs	r3, #0
 800dd88:	602b      	str	r3, [r5, #0]
 800dd8a:	4660      	mov	r0, ip
 800dd8c:	b042      	add	sp, #264	; 0x108
 800dd8e:	bd70      	pop	{r4, r5, r6, pc}
 800dd90:	2b07      	cmp	r3, #7
 800dd92:	d007      	beq.n	800dda4 <rcl_validate_enclave_name_with_size+0x3c>
 800dd94:	1e5a      	subs	r2, r3, #1
 800dd96:	2a05      	cmp	r2, #5
 800dd98:	d833      	bhi.n	800de02 <rcl_validate_enclave_name_with_size+0x9a>
 800dd9a:	e8df f002 	tbb	[pc, r2]
 800dd9e:	2c2f      	.short	0x2c2f
 800dda0:	1a232629 	.word	0x1a232629
 800dda4:	2cff      	cmp	r4, #255	; 0xff
 800dda6:	d9ee      	bls.n	800dd86 <rcl_validate_enclave_name_with_size+0x1e>
 800dda8:	602b      	str	r3, [r5, #0]
 800ddaa:	2e00      	cmp	r6, #0
 800ddac:	d0ed      	beq.n	800dd8a <rcl_validate_enclave_name_with_size+0x22>
 800ddae:	23fe      	movs	r3, #254	; 0xfe
 800ddb0:	6033      	str	r3, [r6, #0]
 800ddb2:	e7ea      	b.n	800dd8a <rcl_validate_enclave_name_with_size+0x22>
 800ddb4:	f04f 0c0b 	mov.w	ip, #11
 800ddb8:	4660      	mov	r0, ip
 800ddba:	b042      	add	sp, #264	; 0x108
 800ddbc:	bd70      	pop	{r4, r5, r6, pc}
 800ddbe:	f7ff f953 	bl	800d068 <rcl_convert_rmw_ret_to_rcl_ret>
 800ddc2:	4684      	mov	ip, r0
 800ddc4:	4660      	mov	r0, ip
 800ddc6:	b042      	add	sp, #264	; 0x108
 800ddc8:	bd70      	pop	{r4, r5, r6, pc}
 800ddca:	f04f 0c0b 	mov.w	ip, #11
 800ddce:	4660      	mov	r0, ip
 800ddd0:	4770      	bx	lr
 800ddd2:	2306      	movs	r3, #6
 800ddd4:	602b      	str	r3, [r5, #0]
 800ddd6:	2e00      	cmp	r6, #0
 800ddd8:	d0d7      	beq.n	800dd8a <rcl_validate_enclave_name_with_size+0x22>
 800ddda:	9b01      	ldr	r3, [sp, #4]
 800dddc:	6033      	str	r3, [r6, #0]
 800ddde:	4660      	mov	r0, ip
 800dde0:	b042      	add	sp, #264	; 0x108
 800dde2:	bd70      	pop	{r4, r5, r6, pc}
 800dde4:	2305      	movs	r3, #5
 800dde6:	602b      	str	r3, [r5, #0]
 800dde8:	e7f5      	b.n	800ddd6 <rcl_validate_enclave_name_with_size+0x6e>
 800ddea:	2304      	movs	r3, #4
 800ddec:	602b      	str	r3, [r5, #0]
 800ddee:	e7f2      	b.n	800ddd6 <rcl_validate_enclave_name_with_size+0x6e>
 800ddf0:	2303      	movs	r3, #3
 800ddf2:	602b      	str	r3, [r5, #0]
 800ddf4:	e7ef      	b.n	800ddd6 <rcl_validate_enclave_name_with_size+0x6e>
 800ddf6:	2302      	movs	r3, #2
 800ddf8:	602b      	str	r3, [r5, #0]
 800ddfa:	e7ec      	b.n	800ddd6 <rcl_validate_enclave_name_with_size+0x6e>
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	602b      	str	r3, [r5, #0]
 800de00:	e7e9      	b.n	800ddd6 <rcl_validate_enclave_name_with_size+0x6e>
 800de02:	4a04      	ldr	r2, [pc, #16]	; (800de14 <rcl_validate_enclave_name_with_size+0xac>)
 800de04:	f44f 7180 	mov.w	r1, #256	; 0x100
 800de08:	a802      	add	r0, sp, #8
 800de0a:	f000 f963 	bl	800e0d4 <rcutils_snprintf>
 800de0e:	f04f 0c01 	mov.w	ip, #1
 800de12:	e7ba      	b.n	800dd8a <rcl_validate_enclave_name_with_size+0x22>
 800de14:	0801309c 	.word	0x0801309c

0800de18 <rcl_validate_enclave_name>:
 800de18:	b168      	cbz	r0, 800de36 <rcl_validate_enclave_name+0x1e>
 800de1a:	b570      	push	{r4, r5, r6, lr}
 800de1c:	460d      	mov	r5, r1
 800de1e:	4616      	mov	r6, r2
 800de20:	4604      	mov	r4, r0
 800de22:	f7f2 f9ff 	bl	8000224 <strlen>
 800de26:	4633      	mov	r3, r6
 800de28:	4601      	mov	r1, r0
 800de2a:	462a      	mov	r2, r5
 800de2c:	4620      	mov	r0, r4
 800de2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de32:	f7ff bf99 	b.w	800dd68 <rcl_validate_enclave_name_with_size>
 800de36:	200b      	movs	r0, #11
 800de38:	4770      	bx	lr
 800de3a:	bf00      	nop

0800de3c <__atomic_load_8>:
 800de3c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800de40:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 800de44:	4a15      	ldr	r2, [pc, #84]	; (800de9c <__atomic_load_8+0x60>)
 800de46:	4b16      	ldr	r3, [pc, #88]	; (800dea0 <__atomic_load_8+0x64>)
 800de48:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800de4c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800de50:	fb02 f101 	mul.w	r1, r2, r1
 800de54:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800de58:	fba3 2301 	umull	r2, r3, r3, r1
 800de5c:	091b      	lsrs	r3, r3, #4
 800de5e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800de62:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800de66:	b4d0      	push	{r4, r6, r7}
 800de68:	4c0e      	ldr	r4, [pc, #56]	; (800dea4 <__atomic_load_8+0x68>)
 800de6a:	1ac9      	subs	r1, r1, r3
 800de6c:	1862      	adds	r2, r4, r1
 800de6e:	f04f 0c01 	mov.w	ip, #1
 800de72:	e8d2 3f4f 	ldrexb	r3, [r2]
 800de76:	e8c2 cf46 	strexb	r6, ip, [r2]
 800de7a:	2e00      	cmp	r6, #0
 800de7c:	d1f9      	bne.n	800de72 <__atomic_load_8+0x36>
 800de7e:	f3bf 8f5b 	dmb	ish
 800de82:	b2db      	uxtb	r3, r3
 800de84:	2b00      	cmp	r3, #0
 800de86:	d1f4      	bne.n	800de72 <__atomic_load_8+0x36>
 800de88:	e9d0 6700 	ldrd	r6, r7, [r0]
 800de8c:	f3bf 8f5b 	dmb	ish
 800de90:	5463      	strb	r3, [r4, r1]
 800de92:	4630      	mov	r0, r6
 800de94:	4639      	mov	r1, r7
 800de96:	bcd0      	pop	{r4, r6, r7}
 800de98:	4770      	bx	lr
 800de9a:	bf00      	nop
 800de9c:	27d4eb2d 	.word	0x27d4eb2d
 800dea0:	b21642c9 	.word	0xb21642c9
 800dea4:	2000df78 	.word	0x2000df78

0800dea8 <rcutils_get_env>:
 800dea8:	b168      	cbz	r0, 800dec6 <rcutils_get_env+0x1e>
 800deaa:	b510      	push	{r4, lr}
 800deac:	460c      	mov	r4, r1
 800deae:	b129      	cbz	r1, 800debc <rcutils_get_env+0x14>
 800deb0:	f003 fb3e 	bl	8011530 <getenv>
 800deb4:	b120      	cbz	r0, 800dec0 <rcutils_get_env+0x18>
 800deb6:	6020      	str	r0, [r4, #0]
 800deb8:	2000      	movs	r0, #0
 800deba:	bd10      	pop	{r4, pc}
 800debc:	4803      	ldr	r0, [pc, #12]	; (800decc <rcutils_get_env+0x24>)
 800debe:	bd10      	pop	{r4, pc}
 800dec0:	4b03      	ldr	r3, [pc, #12]	; (800ded0 <rcutils_get_env+0x28>)
 800dec2:	6023      	str	r3, [r4, #0]
 800dec4:	bd10      	pop	{r4, pc}
 800dec6:	4803      	ldr	r0, [pc, #12]	; (800ded4 <rcutils_get_env+0x2c>)
 800dec8:	4770      	bx	lr
 800deca:	bf00      	nop
 800decc:	08013118 	.word	0x08013118
 800ded0:	0801323c 	.word	0x0801323c
 800ded4:	080130fc 	.word	0x080130fc

0800ded8 <rcutils_is_directory>:
 800ded8:	2000      	movs	r0, #0
 800deda:	4770      	bx	lr

0800dedc <rcutils_join_path>:
 800dedc:	b082      	sub	sp, #8
 800dede:	e88d 000c 	stmia.w	sp, {r2, r3}
 800dee2:	2000      	movs	r0, #0
 800dee4:	b002      	add	sp, #8
 800dee6:	4770      	bx	lr

0800dee8 <rcutils_to_native_path>:
 800dee8:	b084      	sub	sp, #16
 800deea:	a801      	add	r0, sp, #4
 800deec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800def0:	b004      	add	sp, #16
 800def2:	2000      	movs	r0, #0
 800def4:	4770      	bx	lr
 800def6:	bf00      	nop

0800def8 <rcutils_format_string_limit>:
 800def8:	b40f      	push	{r0, r1, r2, r3}
 800defa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800defc:	b083      	sub	sp, #12
 800defe:	ac08      	add	r4, sp, #32
 800df00:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800df02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800df06:	b34e      	cbz	r6, 800df5c <rcutils_format_string_limit+0x64>
 800df08:	a808      	add	r0, sp, #32
 800df0a:	f7fa feb1 	bl	8008c70 <rcutils_allocator_is_valid>
 800df0e:	b328      	cbz	r0, 800df5c <rcutils_format_string_limit+0x64>
 800df10:	2100      	movs	r1, #0
 800df12:	ab0f      	add	r3, sp, #60	; 0x3c
 800df14:	4632      	mov	r2, r6
 800df16:	4608      	mov	r0, r1
 800df18:	e9cd 3300 	strd	r3, r3, [sp]
 800df1c:	f000 f8f4 	bl	800e108 <rcutils_vsnprintf>
 800df20:	1c43      	adds	r3, r0, #1
 800df22:	4605      	mov	r5, r0
 800df24:	d01a      	beq.n	800df5c <rcutils_format_string_limit+0x64>
 800df26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df28:	990c      	ldr	r1, [sp, #48]	; 0x30
 800df2a:	1c47      	adds	r7, r0, #1
 800df2c:	429f      	cmp	r7, r3
 800df2e:	bf84      	itt	hi
 800df30:	461f      	movhi	r7, r3
 800df32:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 800df36:	4638      	mov	r0, r7
 800df38:	9b08      	ldr	r3, [sp, #32]
 800df3a:	4798      	blx	r3
 800df3c:	4604      	mov	r4, r0
 800df3e:	b168      	cbz	r0, 800df5c <rcutils_format_string_limit+0x64>
 800df40:	9b01      	ldr	r3, [sp, #4]
 800df42:	4632      	mov	r2, r6
 800df44:	4639      	mov	r1, r7
 800df46:	f000 f8df 	bl	800e108 <rcutils_vsnprintf>
 800df4a:	2800      	cmp	r0, #0
 800df4c:	db02      	blt.n	800df54 <rcutils_format_string_limit+0x5c>
 800df4e:	2300      	movs	r3, #0
 800df50:	5563      	strb	r3, [r4, r5]
 800df52:	e004      	b.n	800df5e <rcutils_format_string_limit+0x66>
 800df54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df56:	990c      	ldr	r1, [sp, #48]	; 0x30
 800df58:	4620      	mov	r0, r4
 800df5a:	4798      	blx	r3
 800df5c:	2400      	movs	r4, #0
 800df5e:	4620      	mov	r0, r4
 800df60:	b003      	add	sp, #12
 800df62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800df66:	b004      	add	sp, #16
 800df68:	4770      	bx	lr
 800df6a:	bf00      	nop

0800df6c <rcutils_repl_str>:
 800df6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df70:	ed2d 8b02 	vpush	{d8}
 800df74:	b087      	sub	sp, #28
 800df76:	4680      	mov	r8, r0
 800df78:	4608      	mov	r0, r1
 800df7a:	f8cd 8004 	str.w	r8, [sp, #4]
 800df7e:	ee08 2a10 	vmov	s16, r2
 800df82:	468a      	mov	sl, r1
 800df84:	4699      	mov	r9, r3
 800df86:	f7f2 f94d 	bl	8000224 <strlen>
 800df8a:	2600      	movs	r6, #0
 800df8c:	4647      	mov	r7, r8
 800df8e:	9002      	str	r0, [sp, #8]
 800df90:	46b3      	mov	fp, r6
 800df92:	2510      	movs	r5, #16
 800df94:	46b0      	mov	r8, r6
 800df96:	e01d      	b.n	800dfd4 <rcutils_repl_str+0x68>
 800df98:	f10b 0b01 	add.w	fp, fp, #1
 800df9c:	455e      	cmp	r6, fp
 800df9e:	d211      	bcs.n	800dfc4 <rcutils_repl_str+0x58>
 800dfa0:	442e      	add	r6, r5
 800dfa2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800dfa6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800dfaa:	00b1      	lsls	r1, r6, #2
 800dfac:	4798      	blx	r3
 800dfae:	2800      	cmp	r0, #0
 800dfb0:	f000 8088 	beq.w	800e0c4 <rcutils_repl_str+0x158>
 800dfb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dfb8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800dfbc:	4680      	mov	r8, r0
 800dfbe:	bf28      	it	cs
 800dfc0:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 800dfc4:	9a01      	ldr	r2, [sp, #4]
 800dfc6:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800dfca:	1aa2      	subs	r2, r4, r2
 800dfcc:	f843 2c04 	str.w	r2, [r3, #-4]
 800dfd0:	9b02      	ldr	r3, [sp, #8]
 800dfd2:	18e7      	adds	r7, r4, r3
 800dfd4:	4651      	mov	r1, sl
 800dfd6:	4638      	mov	r0, r7
 800dfd8:	f003 fe79 	bl	8011cce <strstr>
 800dfdc:	4604      	mov	r4, r0
 800dfde:	4640      	mov	r0, r8
 800dfe0:	2c00      	cmp	r4, #0
 800dfe2:	d1d9      	bne.n	800df98 <rcutils_repl_str+0x2c>
 800dfe4:	46b8      	mov	r8, r7
 800dfe6:	4607      	mov	r7, r0
 800dfe8:	4640      	mov	r0, r8
 800dfea:	f7f2 f91b 	bl	8000224 <strlen>
 800dfee:	9b01      	ldr	r3, [sp, #4]
 800dff0:	eba8 0303 	sub.w	r3, r8, r3
 800dff4:	181c      	adds	r4, r3, r0
 800dff6:	9404      	str	r4, [sp, #16]
 800dff8:	f1bb 0f00 	cmp.w	fp, #0
 800dffc:	d04a      	beq.n	800e094 <rcutils_repl_str+0x128>
 800dffe:	ee18 0a10 	vmov	r0, s16
 800e002:	f7f2 f90f 	bl	8000224 <strlen>
 800e006:	9b02      	ldr	r3, [sp, #8]
 800e008:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e00c:	1ac3      	subs	r3, r0, r3
 800e00e:	fb0b 4303 	mla	r3, fp, r3, r4
 800e012:	461a      	mov	r2, r3
 800e014:	9305      	str	r3, [sp, #20]
 800e016:	4606      	mov	r6, r0
 800e018:	f8d9 3000 	ldr.w	r3, [r9]
 800e01c:	1c50      	adds	r0, r2, #1
 800e01e:	4798      	blx	r3
 800e020:	9003      	str	r0, [sp, #12]
 800e022:	2800      	cmp	r0, #0
 800e024:	d04f      	beq.n	800e0c6 <rcutils_repl_str+0x15a>
 800e026:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e02a:	683a      	ldr	r2, [r7, #0]
 800e02c:	4641      	mov	r1, r8
 800e02e:	f003 ff46 	bl	8011ebe <memcpy>
 800e032:	683d      	ldr	r5, [r7, #0]
 800e034:	9b03      	ldr	r3, [sp, #12]
 800e036:	9701      	str	r7, [sp, #4]
 800e038:	46ba      	mov	sl, r7
 800e03a:	441d      	add	r5, r3
 800e03c:	9f02      	ldr	r7, [sp, #8]
 800e03e:	f8cd 9008 	str.w	r9, [sp, #8]
 800e042:	2401      	movs	r4, #1
 800e044:	46d1      	mov	r9, sl
 800e046:	ee18 aa10 	vmov	sl, s16
 800e04a:	e00a      	b.n	800e062 <rcutils_repl_str+0xf6>
 800e04c:	f8d9 5000 	ldr.w	r5, [r9]
 800e050:	1aaa      	subs	r2, r5, r2
 800e052:	1885      	adds	r5, r0, r2
 800e054:	f003 ff33 	bl	8011ebe <memcpy>
 800e058:	45a3      	cmp	fp, r4
 800e05a:	f104 0201 	add.w	r2, r4, #1
 800e05e:	d935      	bls.n	800e0cc <rcutils_repl_str+0x160>
 800e060:	4614      	mov	r4, r2
 800e062:	4632      	mov	r2, r6
 800e064:	4651      	mov	r1, sl
 800e066:	4628      	mov	r0, r5
 800e068:	f003 ff29 	bl	8011ebe <memcpy>
 800e06c:	f859 2b04 	ldr.w	r2, [r9], #4
 800e070:	45a3      	cmp	fp, r4
 800e072:	443a      	add	r2, r7
 800e074:	eb05 0006 	add.w	r0, r5, r6
 800e078:	eb08 0102 	add.w	r1, r8, r2
 800e07c:	d1e6      	bne.n	800e04c <rcutils_repl_str+0xe0>
 800e07e:	9b04      	ldr	r3, [sp, #16]
 800e080:	1a9a      	subs	r2, r3, r2
 800e082:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800e086:	f003 ff1a 	bl	8011ebe <memcpy>
 800e08a:	9a03      	ldr	r2, [sp, #12]
 800e08c:	9905      	ldr	r1, [sp, #20]
 800e08e:	2300      	movs	r3, #0
 800e090:	5453      	strb	r3, [r2, r1]
 800e092:	e00b      	b.n	800e0ac <rcutils_repl_str+0x140>
 800e094:	4620      	mov	r0, r4
 800e096:	f8d9 3000 	ldr.w	r3, [r9]
 800e09a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e09e:	3001      	adds	r0, #1
 800e0a0:	4798      	blx	r3
 800e0a2:	9003      	str	r0, [sp, #12]
 800e0a4:	b110      	cbz	r0, 800e0ac <rcutils_repl_str+0x140>
 800e0a6:	9901      	ldr	r1, [sp, #4]
 800e0a8:	f003 ff01 	bl	8011eae <strcpy>
 800e0ac:	4638      	mov	r0, r7
 800e0ae:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e0b2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e0b6:	4798      	blx	r3
 800e0b8:	9803      	ldr	r0, [sp, #12]
 800e0ba:	b007      	add	sp, #28
 800e0bc:	ecbd 8b02 	vpop	{d8}
 800e0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0c4:	4647      	mov	r7, r8
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	9303      	str	r3, [sp, #12]
 800e0ca:	e7ef      	b.n	800e0ac <rcutils_repl_str+0x140>
 800e0cc:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800e0d0:	e7db      	b.n	800e08a <rcutils_repl_str+0x11e>
 800e0d2:	bf00      	nop

0800e0d4 <rcutils_snprintf>:
 800e0d4:	b40c      	push	{r2, r3}
 800e0d6:	b530      	push	{r4, r5, lr}
 800e0d8:	b083      	sub	sp, #12
 800e0da:	ab06      	add	r3, sp, #24
 800e0dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0e0:	9301      	str	r3, [sp, #4]
 800e0e2:	b152      	cbz	r2, 800e0fa <rcutils_snprintf+0x26>
 800e0e4:	b138      	cbz	r0, 800e0f6 <rcutils_snprintf+0x22>
 800e0e6:	b141      	cbz	r1, 800e0fa <rcutils_snprintf+0x26>
 800e0e8:	f003 fdbc 	bl	8011c64 <vsniprintf>
 800e0ec:	b003      	add	sp, #12
 800e0ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e0f2:	b002      	add	sp, #8
 800e0f4:	4770      	bx	lr
 800e0f6:	2900      	cmp	r1, #0
 800e0f8:	d0f6      	beq.n	800e0e8 <rcutils_snprintf+0x14>
 800e0fa:	f003 feab 	bl	8011e54 <__errno>
 800e0fe:	2316      	movs	r3, #22
 800e100:	6003      	str	r3, [r0, #0]
 800e102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e106:	e7f1      	b.n	800e0ec <rcutils_snprintf+0x18>

0800e108 <rcutils_vsnprintf>:
 800e108:	b570      	push	{r4, r5, r6, lr}
 800e10a:	b13a      	cbz	r2, 800e11c <rcutils_vsnprintf+0x14>
 800e10c:	b120      	cbz	r0, 800e118 <rcutils_vsnprintf+0x10>
 800e10e:	b129      	cbz	r1, 800e11c <rcutils_vsnprintf+0x14>
 800e110:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e114:	f003 bda6 	b.w	8011c64 <vsniprintf>
 800e118:	2900      	cmp	r1, #0
 800e11a:	d0f9      	beq.n	800e110 <rcutils_vsnprintf+0x8>
 800e11c:	f003 fe9a 	bl	8011e54 <__errno>
 800e120:	2316      	movs	r3, #22
 800e122:	6003      	str	r3, [r0, #0]
 800e124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e128:	bd70      	pop	{r4, r5, r6, pc}
 800e12a:	bf00      	nop

0800e12c <rcutils_strdup>:
 800e12c:	b084      	sub	sp, #16
 800e12e:	b570      	push	{r4, r5, r6, lr}
 800e130:	b082      	sub	sp, #8
 800e132:	ac07      	add	r4, sp, #28
 800e134:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800e138:	4605      	mov	r5, r0
 800e13a:	b1b0      	cbz	r0, 800e16a <rcutils_strdup+0x3e>
 800e13c:	f7f2 f872 	bl	8000224 <strlen>
 800e140:	1c42      	adds	r2, r0, #1
 800e142:	9b07      	ldr	r3, [sp, #28]
 800e144:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e146:	9201      	str	r2, [sp, #4]
 800e148:	4606      	mov	r6, r0
 800e14a:	4610      	mov	r0, r2
 800e14c:	4798      	blx	r3
 800e14e:	4604      	mov	r4, r0
 800e150:	b128      	cbz	r0, 800e15e <rcutils_strdup+0x32>
 800e152:	9a01      	ldr	r2, [sp, #4]
 800e154:	4629      	mov	r1, r5
 800e156:	f003 feb2 	bl	8011ebe <memcpy>
 800e15a:	2300      	movs	r3, #0
 800e15c:	55a3      	strb	r3, [r4, r6]
 800e15e:	4620      	mov	r0, r4
 800e160:	b002      	add	sp, #8
 800e162:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e166:	b004      	add	sp, #16
 800e168:	4770      	bx	lr
 800e16a:	4604      	mov	r4, r0
 800e16c:	e7f7      	b.n	800e15e <rcutils_strdup+0x32>
 800e16e:	bf00      	nop

0800e170 <rcutils_strndup>:
 800e170:	b082      	sub	sp, #8
 800e172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e174:	ac06      	add	r4, sp, #24
 800e176:	e884 000c 	stmia.w	r4, {r2, r3}
 800e17a:	4605      	mov	r5, r0
 800e17c:	b188      	cbz	r0, 800e1a2 <rcutils_strndup+0x32>
 800e17e:	1c4f      	adds	r7, r1, #1
 800e180:	460e      	mov	r6, r1
 800e182:	4638      	mov	r0, r7
 800e184:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e186:	4790      	blx	r2
 800e188:	4604      	mov	r4, r0
 800e18a:	b128      	cbz	r0, 800e198 <rcutils_strndup+0x28>
 800e18c:	463a      	mov	r2, r7
 800e18e:	4629      	mov	r1, r5
 800e190:	f003 fe95 	bl	8011ebe <memcpy>
 800e194:	2300      	movs	r3, #0
 800e196:	55a3      	strb	r3, [r4, r6]
 800e198:	4620      	mov	r0, r4
 800e19a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e19e:	b002      	add	sp, #8
 800e1a0:	4770      	bx	lr
 800e1a2:	4604      	mov	r4, r0
 800e1a4:	e7f8      	b.n	800e198 <rcutils_strndup+0x28>
 800e1a6:	bf00      	nop

0800e1a8 <rcutils_get_zero_initialized_string_map>:
 800e1a8:	4b01      	ldr	r3, [pc, #4]	; (800e1b0 <rcutils_get_zero_initialized_string_map+0x8>)
 800e1aa:	2000      	movs	r0, #0
 800e1ac:	6018      	str	r0, [r3, #0]
 800e1ae:	4770      	bx	lr
 800e1b0:	2000df90 	.word	0x2000df90

0800e1b4 <rcutils_string_map_reserve>:
 800e1b4:	2800      	cmp	r0, #0
 800e1b6:	d05f      	beq.n	800e278 <rcutils_string_map_reserve+0xc4>
 800e1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1bc:	460c      	mov	r4, r1
 800e1be:	6801      	ldr	r1, [r0, #0]
 800e1c0:	b082      	sub	sp, #8
 800e1c2:	4605      	mov	r5, r0
 800e1c4:	b129      	cbz	r1, 800e1d2 <rcutils_string_map_reserve+0x1e>
 800e1c6:	68cb      	ldr	r3, [r1, #12]
 800e1c8:	42a3      	cmp	r3, r4
 800e1ca:	d906      	bls.n	800e1da <rcutils_string_map_reserve+0x26>
 800e1cc:	461c      	mov	r4, r3
 800e1ce:	2900      	cmp	r1, #0
 800e1d0:	d1f9      	bne.n	800e1c6 <rcutils_string_map_reserve+0x12>
 800e1d2:	201f      	movs	r0, #31
 800e1d4:	b002      	add	sp, #8
 800e1d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1da:	688b      	ldr	r3, [r1, #8]
 800e1dc:	42a3      	cmp	r3, r4
 800e1de:	d047      	beq.n	800e270 <rcutils_string_map_reserve+0xbc>
 800e1e0:	6a0e      	ldr	r6, [r1, #32]
 800e1e2:	2c00      	cmp	r4, #0
 800e1e4:	d034      	beq.n	800e250 <rcutils_string_map_reserve+0x9c>
 800e1e6:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800e1ea:	d243      	bcs.n	800e274 <rcutils_string_map_reserve+0xc0>
 800e1ec:	00a7      	lsls	r7, r4, #2
 800e1ee:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800e1f2:	6808      	ldr	r0, [r1, #0]
 800e1f4:	4632      	mov	r2, r6
 800e1f6:	4639      	mov	r1, r7
 800e1f8:	47c0      	blx	r8
 800e1fa:	2800      	cmp	r0, #0
 800e1fc:	d03a      	beq.n	800e274 <rcutils_string_map_reserve+0xc0>
 800e1fe:	682b      	ldr	r3, [r5, #0]
 800e200:	4632      	mov	r2, r6
 800e202:	6018      	str	r0, [r3, #0]
 800e204:	4639      	mov	r1, r7
 800e206:	6858      	ldr	r0, [r3, #4]
 800e208:	47c0      	blx	r8
 800e20a:	2800      	cmp	r0, #0
 800e20c:	d032      	beq.n	800e274 <rcutils_string_map_reserve+0xc0>
 800e20e:	682d      	ldr	r5, [r5, #0]
 800e210:	68ab      	ldr	r3, [r5, #8]
 800e212:	6068      	str	r0, [r5, #4]
 800e214:	42a3      	cmp	r3, r4
 800e216:	d226      	bcs.n	800e266 <rcutils_string_map_reserve+0xb2>
 800e218:	682a      	ldr	r2, [r5, #0]
 800e21a:	eb00 0c07 	add.w	ip, r0, r7
 800e21e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 800e222:	45e6      	cmp	lr, ip
 800e224:	ea4f 0183 	mov.w	r1, r3, lsl #2
 800e228:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800e22c:	d203      	bcs.n	800e236 <rcutils_string_map_reserve+0x82>
 800e22e:	eb02 0c07 	add.w	ip, r2, r7
 800e232:	4566      	cmp	r6, ip
 800e234:	d322      	bcc.n	800e27c <rcutils_string_map_reserve+0xc8>
 800e236:	1ae3      	subs	r3, r4, r3
 800e238:	009a      	lsls	r2, r3, #2
 800e23a:	4670      	mov	r0, lr
 800e23c:	2100      	movs	r1, #0
 800e23e:	9201      	str	r2, [sp, #4]
 800e240:	f003 fd1e 	bl	8011c80 <memset>
 800e244:	9a01      	ldr	r2, [sp, #4]
 800e246:	2100      	movs	r1, #0
 800e248:	4630      	mov	r0, r6
 800e24a:	f003 fd19 	bl	8011c80 <memset>
 800e24e:	e00a      	b.n	800e266 <rcutils_string_map_reserve+0xb2>
 800e250:	694f      	ldr	r7, [r1, #20]
 800e252:	6808      	ldr	r0, [r1, #0]
 800e254:	4631      	mov	r1, r6
 800e256:	47b8      	blx	r7
 800e258:	682b      	ldr	r3, [r5, #0]
 800e25a:	4631      	mov	r1, r6
 800e25c:	6858      	ldr	r0, [r3, #4]
 800e25e:	601c      	str	r4, [r3, #0]
 800e260:	47b8      	blx	r7
 800e262:	682d      	ldr	r5, [r5, #0]
 800e264:	606c      	str	r4, [r5, #4]
 800e266:	2000      	movs	r0, #0
 800e268:	60ac      	str	r4, [r5, #8]
 800e26a:	b002      	add	sp, #8
 800e26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e270:	2000      	movs	r0, #0
 800e272:	e7af      	b.n	800e1d4 <rcutils_string_map_reserve+0x20>
 800e274:	200a      	movs	r0, #10
 800e276:	e7ad      	b.n	800e1d4 <rcutils_string_map_reserve+0x20>
 800e278:	200b      	movs	r0, #11
 800e27a:	4770      	bx	lr
 800e27c:	1f0b      	subs	r3, r1, #4
 800e27e:	4418      	add	r0, r3
 800e280:	4413      	add	r3, r2
 800e282:	3a04      	subs	r2, #4
 800e284:	4417      	add	r7, r2
 800e286:	2200      	movs	r2, #0
 800e288:	f843 2f04 	str.w	r2, [r3, #4]!
 800e28c:	42bb      	cmp	r3, r7
 800e28e:	f840 2f04 	str.w	r2, [r0, #4]!
 800e292:	d1f9      	bne.n	800e288 <rcutils_string_map_reserve+0xd4>
 800e294:	e7e7      	b.n	800e266 <rcutils_string_map_reserve+0xb2>
 800e296:	bf00      	nop

0800e298 <rcutils_string_map_init>:
 800e298:	b082      	sub	sp, #8
 800e29a:	b570      	push	{r4, r5, r6, lr}
 800e29c:	ac04      	add	r4, sp, #16
 800e29e:	e884 000c 	stmia.w	r4, {r2, r3}
 800e2a2:	b380      	cbz	r0, 800e306 <rcutils_string_map_init+0x6e>
 800e2a4:	6806      	ldr	r6, [r0, #0]
 800e2a6:	4604      	mov	r4, r0
 800e2a8:	b12e      	cbz	r6, 800e2b6 <rcutils_string_map_init+0x1e>
 800e2aa:	251e      	movs	r5, #30
 800e2ac:	4628      	mov	r0, r5
 800e2ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e2b2:	b002      	add	sp, #8
 800e2b4:	4770      	bx	lr
 800e2b6:	a804      	add	r0, sp, #16
 800e2b8:	460d      	mov	r5, r1
 800e2ba:	f7fa fcd9 	bl	8008c70 <rcutils_allocator_is_valid>
 800e2be:	b310      	cbz	r0, 800e306 <rcutils_string_map_init+0x6e>
 800e2c0:	9b04      	ldr	r3, [sp, #16]
 800e2c2:	9908      	ldr	r1, [sp, #32]
 800e2c4:	2024      	movs	r0, #36	; 0x24
 800e2c6:	4798      	blx	r3
 800e2c8:	6020      	str	r0, [r4, #0]
 800e2ca:	b310      	cbz	r0, 800e312 <rcutils_string_map_init+0x7a>
 800e2cc:	f10d 0e10 	add.w	lr, sp, #16
 800e2d0:	e9c0 6600 	strd	r6, r6, [r0]
 800e2d4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800e2d8:	f100 0c10 	add.w	ip, r0, #16
 800e2dc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e2e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e2e4:	f8de 3000 	ldr.w	r3, [lr]
 800e2e8:	f8cc 3000 	str.w	r3, [ip]
 800e2ec:	4629      	mov	r1, r5
 800e2ee:	4620      	mov	r0, r4
 800e2f0:	f7ff ff60 	bl	800e1b4 <rcutils_string_map_reserve>
 800e2f4:	4605      	mov	r5, r0
 800e2f6:	2800      	cmp	r0, #0
 800e2f8:	d0d8      	beq.n	800e2ac <rcutils_string_map_init+0x14>
 800e2fa:	9b05      	ldr	r3, [sp, #20]
 800e2fc:	9908      	ldr	r1, [sp, #32]
 800e2fe:	6820      	ldr	r0, [r4, #0]
 800e300:	4798      	blx	r3
 800e302:	6026      	str	r6, [r4, #0]
 800e304:	e7d2      	b.n	800e2ac <rcutils_string_map_init+0x14>
 800e306:	250b      	movs	r5, #11
 800e308:	4628      	mov	r0, r5
 800e30a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e30e:	b002      	add	sp, #8
 800e310:	4770      	bx	lr
 800e312:	250a      	movs	r5, #10
 800e314:	e7ca      	b.n	800e2ac <rcutils_string_map_init+0x14>
 800e316:	bf00      	nop

0800e318 <rcutils_string_map_fini>:
 800e318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e31c:	b082      	sub	sp, #8
 800e31e:	2800      	cmp	r0, #0
 800e320:	d03a      	beq.n	800e398 <rcutils_string_map_fini+0x80>
 800e322:	6804      	ldr	r4, [r0, #0]
 800e324:	4606      	mov	r6, r0
 800e326:	2c00      	cmp	r4, #0
 800e328:	d032      	beq.n	800e390 <rcutils_string_map_fini+0x78>
 800e32a:	68a3      	ldr	r3, [r4, #8]
 800e32c:	b32b      	cbz	r3, 800e37a <rcutils_string_map_fini+0x62>
 800e32e:	2500      	movs	r5, #0
 800e330:	6822      	ldr	r2, [r4, #0]
 800e332:	462f      	mov	r7, r5
 800e334:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800e338:	b1e0      	cbz	r0, 800e374 <rcutils_string_map_fini+0x5c>
 800e33a:	6a21      	ldr	r1, [r4, #32]
 800e33c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800e340:	9101      	str	r1, [sp, #4]
 800e342:	47c0      	blx	r8
 800e344:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e348:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800e34c:	9901      	ldr	r1, [sp, #4]
 800e34e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e352:	47c0      	blx	r8
 800e354:	68e3      	ldr	r3, [r4, #12]
 800e356:	6862      	ldr	r2, [r4, #4]
 800e358:	3b01      	subs	r3, #1
 800e35a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800e35e:	60e3      	str	r3, [r4, #12]
 800e360:	6834      	ldr	r4, [r6, #0]
 800e362:	68a3      	ldr	r3, [r4, #8]
 800e364:	3501      	adds	r5, #1
 800e366:	429d      	cmp	r5, r3
 800e368:	d207      	bcs.n	800e37a <rcutils_string_map_fini+0x62>
 800e36a:	6822      	ldr	r2, [r4, #0]
 800e36c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800e370:	2800      	cmp	r0, #0
 800e372:	d1e2      	bne.n	800e33a <rcutils_string_map_fini+0x22>
 800e374:	3501      	adds	r5, #1
 800e376:	429d      	cmp	r5, r3
 800e378:	d3dc      	bcc.n	800e334 <rcutils_string_map_fini+0x1c>
 800e37a:	2100      	movs	r1, #0
 800e37c:	4630      	mov	r0, r6
 800e37e:	f7ff ff19 	bl	800e1b4 <rcutils_string_map_reserve>
 800e382:	4604      	mov	r4, r0
 800e384:	b920      	cbnz	r0, 800e390 <rcutils_string_map_fini+0x78>
 800e386:	6830      	ldr	r0, [r6, #0]
 800e388:	6943      	ldr	r3, [r0, #20]
 800e38a:	6a01      	ldr	r1, [r0, #32]
 800e38c:	4798      	blx	r3
 800e38e:	6034      	str	r4, [r6, #0]
 800e390:	4620      	mov	r0, r4
 800e392:	b002      	add	sp, #8
 800e394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e398:	240b      	movs	r4, #11
 800e39a:	4620      	mov	r0, r4
 800e39c:	b002      	add	sp, #8
 800e39e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3a2:	bf00      	nop

0800e3a4 <rcutils_string_map_getn>:
 800e3a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3a8:	b300      	cbz	r0, 800e3ec <rcutils_string_map_getn+0x48>
 800e3aa:	6807      	ldr	r7, [r0, #0]
 800e3ac:	b1ff      	cbz	r7, 800e3ee <rcutils_string_map_getn+0x4a>
 800e3ae:	4688      	mov	r8, r1
 800e3b0:	b1e1      	cbz	r1, 800e3ec <rcutils_string_map_getn+0x48>
 800e3b2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800e3b6:	683e      	ldr	r6, [r7, #0]
 800e3b8:	f1ba 0f00 	cmp.w	sl, #0
 800e3bc:	d016      	beq.n	800e3ec <rcutils_string_map_getn+0x48>
 800e3be:	4691      	mov	r9, r2
 800e3c0:	3e04      	subs	r6, #4
 800e3c2:	2400      	movs	r4, #0
 800e3c4:	f856 5f04 	ldr.w	r5, [r6, #4]!
 800e3c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e3cc:	4628      	mov	r0, r5
 800e3ce:	3401      	adds	r4, #1
 800e3d0:	b155      	cbz	r5, 800e3e8 <rcutils_string_map_getn+0x44>
 800e3d2:	f7f1 ff27 	bl	8000224 <strlen>
 800e3d6:	4548      	cmp	r0, r9
 800e3d8:	4602      	mov	r2, r0
 800e3da:	4629      	mov	r1, r5
 800e3dc:	bf38      	it	cc
 800e3de:	464a      	movcc	r2, r9
 800e3e0:	4640      	mov	r0, r8
 800e3e2:	f003 fc62 	bl	8011caa <strncmp>
 800e3e6:	b128      	cbz	r0, 800e3f4 <rcutils_string_map_getn+0x50>
 800e3e8:	45a2      	cmp	sl, r4
 800e3ea:	d1eb      	bne.n	800e3c4 <rcutils_string_map_getn+0x20>
 800e3ec:	2700      	movs	r7, #0
 800e3ee:	4638      	mov	r0, r7
 800e3f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f853 700b 	ldr.w	r7, [r3, fp]
 800e3fa:	4638      	mov	r0, r7
 800e3fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e400 <rcutils_system_time_now>:
 800e400:	b308      	cbz	r0, 800e446 <rcutils_system_time_now+0x46>
 800e402:	b570      	push	{r4, r5, r6, lr}
 800e404:	b084      	sub	sp, #16
 800e406:	4604      	mov	r4, r0
 800e408:	4669      	mov	r1, sp
 800e40a:	2001      	movs	r0, #1
 800e40c:	f7f2 ff70 	bl	80012f0 <clock_gettime>
 800e410:	e9dd 3500 	ldrd	r3, r5, [sp]
 800e414:	2d00      	cmp	r5, #0
 800e416:	db13      	blt.n	800e440 <rcutils_system_time_now+0x40>
 800e418:	9902      	ldr	r1, [sp, #8]
 800e41a:	2900      	cmp	r1, #0
 800e41c:	db0d      	blt.n	800e43a <rcutils_system_time_now+0x3a>
 800e41e:	4e0b      	ldr	r6, [pc, #44]	; (800e44c <rcutils_system_time_now+0x4c>)
 800e420:	fba3 3206 	umull	r3, r2, r3, r6
 800e424:	185b      	adds	r3, r3, r1
 800e426:	fb06 2205 	mla	r2, r6, r5, r2
 800e42a:	f04f 0000 	mov.w	r0, #0
 800e42e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800e432:	e9c4 3200 	strd	r3, r2, [r4]
 800e436:	b004      	add	sp, #16
 800e438:	bd70      	pop	{r4, r5, r6, pc}
 800e43a:	ea53 0205 	orrs.w	r2, r3, r5
 800e43e:	d1ee      	bne.n	800e41e <rcutils_system_time_now+0x1e>
 800e440:	2002      	movs	r0, #2
 800e442:	b004      	add	sp, #16
 800e444:	bd70      	pop	{r4, r5, r6, pc}
 800e446:	200b      	movs	r0, #11
 800e448:	4770      	bx	lr
 800e44a:	bf00      	nop
 800e44c:	3b9aca00 	.word	0x3b9aca00

0800e450 <rcutils_steady_time_now>:
 800e450:	b308      	cbz	r0, 800e496 <rcutils_steady_time_now+0x46>
 800e452:	b570      	push	{r4, r5, r6, lr}
 800e454:	b084      	sub	sp, #16
 800e456:	4604      	mov	r4, r0
 800e458:	4669      	mov	r1, sp
 800e45a:	2000      	movs	r0, #0
 800e45c:	f7f2 ff48 	bl	80012f0 <clock_gettime>
 800e460:	e9dd 3500 	ldrd	r3, r5, [sp]
 800e464:	2d00      	cmp	r5, #0
 800e466:	db13      	blt.n	800e490 <rcutils_steady_time_now+0x40>
 800e468:	9902      	ldr	r1, [sp, #8]
 800e46a:	2900      	cmp	r1, #0
 800e46c:	db0d      	blt.n	800e48a <rcutils_steady_time_now+0x3a>
 800e46e:	4e0b      	ldr	r6, [pc, #44]	; (800e49c <rcutils_steady_time_now+0x4c>)
 800e470:	fba3 3206 	umull	r3, r2, r3, r6
 800e474:	185b      	adds	r3, r3, r1
 800e476:	fb06 2205 	mla	r2, r6, r5, r2
 800e47a:	f04f 0000 	mov.w	r0, #0
 800e47e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800e482:	e9c4 3200 	strd	r3, r2, [r4]
 800e486:	b004      	add	sp, #16
 800e488:	bd70      	pop	{r4, r5, r6, pc}
 800e48a:	ea53 0205 	orrs.w	r2, r3, r5
 800e48e:	d1ee      	bne.n	800e46e <rcutils_steady_time_now+0x1e>
 800e490:	2002      	movs	r0, #2
 800e492:	b004      	add	sp, #16
 800e494:	bd70      	pop	{r4, r5, r6, pc}
 800e496:	200b      	movs	r0, #11
 800e498:	4770      	bx	lr
 800e49a:	bf00      	nop
 800e49c:	3b9aca00 	.word	0x3b9aca00

0800e4a0 <rmw_get_zero_initialized_context>:
 800e4a0:	b510      	push	{r4, lr}
 800e4a2:	4604      	mov	r4, r0
 800e4a4:	3010      	adds	r0, #16
 800e4a6:	f000 f80b 	bl	800e4c0 <rmw_get_zero_initialized_init_options>
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	2000      	movs	r0, #0
 800e4ae:	2100      	movs	r1, #0
 800e4b0:	e9c4 0100 	strd	r0, r1, [r4]
 800e4b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e4b8:	60a3      	str	r3, [r4, #8]
 800e4ba:	4620      	mov	r0, r4
 800e4bc:	bd10      	pop	{r4, pc}
 800e4be:	bf00      	nop

0800e4c0 <rmw_get_zero_initialized_init_options>:
 800e4c0:	b510      	push	{r4, lr}
 800e4c2:	2238      	movs	r2, #56	; 0x38
 800e4c4:	4604      	mov	r4, r0
 800e4c6:	2100      	movs	r1, #0
 800e4c8:	f003 fbda 	bl	8011c80 <memset>
 800e4cc:	f104 0010 	add.w	r0, r4, #16
 800e4d0:	f000 f806 	bl	800e4e0 <rmw_get_default_security_options>
 800e4d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4d8:	60e3      	str	r3, [r4, #12]
 800e4da:	4620      	mov	r0, r4
 800e4dc:	bd10      	pop	{r4, pc}
 800e4de:	bf00      	nop

0800e4e0 <rmw_get_default_security_options>:
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	7002      	strb	r2, [r0, #0]
 800e4e4:	6042      	str	r2, [r0, #4]
 800e4e6:	4770      	bx	lr

0800e4e8 <rmw_validate_full_topic_name>:
 800e4e8:	2800      	cmp	r0, #0
 800e4ea:	d057      	beq.n	800e59c <rmw_validate_full_topic_name+0xb4>
 800e4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4f0:	460d      	mov	r5, r1
 800e4f2:	2900      	cmp	r1, #0
 800e4f4:	d054      	beq.n	800e5a0 <rmw_validate_full_topic_name+0xb8>
 800e4f6:	4616      	mov	r6, r2
 800e4f8:	4604      	mov	r4, r0
 800e4fa:	f7f1 fe93 	bl	8000224 <strlen>
 800e4fe:	b148      	cbz	r0, 800e514 <rmw_validate_full_topic_name+0x2c>
 800e500:	7823      	ldrb	r3, [r4, #0]
 800e502:	2b2f      	cmp	r3, #47	; 0x2f
 800e504:	d00d      	beq.n	800e522 <rmw_validate_full_topic_name+0x3a>
 800e506:	2302      	movs	r3, #2
 800e508:	602b      	str	r3, [r5, #0]
 800e50a:	b13e      	cbz	r6, 800e51c <rmw_validate_full_topic_name+0x34>
 800e50c:	2000      	movs	r0, #0
 800e50e:	6030      	str	r0, [r6, #0]
 800e510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e514:	2301      	movs	r3, #1
 800e516:	602b      	str	r3, [r5, #0]
 800e518:	2e00      	cmp	r6, #0
 800e51a:	d1f7      	bne.n	800e50c <rmw_validate_full_topic_name+0x24>
 800e51c:	2000      	movs	r0, #0
 800e51e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e522:	1e43      	subs	r3, r0, #1
 800e524:	5ce2      	ldrb	r2, [r4, r3]
 800e526:	2a2f      	cmp	r2, #47	; 0x2f
 800e528:	d03c      	beq.n	800e5a4 <rmw_validate_full_topic_name+0xbc>
 800e52a:	1e63      	subs	r3, r4, #1
 800e52c:	eb03 0800 	add.w	r8, r3, r0
 800e530:	f1c4 0e01 	rsb	lr, r4, #1
 800e534:	eb0e 0703 	add.w	r7, lr, r3
 800e538:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800e53c:	f021 0220 	bic.w	r2, r1, #32
 800e540:	3a41      	subs	r2, #65	; 0x41
 800e542:	2a19      	cmp	r2, #25
 800e544:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800e548:	d90b      	bls.n	800e562 <rmw_validate_full_topic_name+0x7a>
 800e54a:	295f      	cmp	r1, #95	; 0x5f
 800e54c:	d009      	beq.n	800e562 <rmw_validate_full_topic_name+0x7a>
 800e54e:	f1bc 0f0a 	cmp.w	ip, #10
 800e552:	d906      	bls.n	800e562 <rmw_validate_full_topic_name+0x7a>
 800e554:	2304      	movs	r3, #4
 800e556:	602b      	str	r3, [r5, #0]
 800e558:	2e00      	cmp	r6, #0
 800e55a:	d0df      	beq.n	800e51c <rmw_validate_full_topic_name+0x34>
 800e55c:	6037      	str	r7, [r6, #0]
 800e55e:	2000      	movs	r0, #0
 800e560:	e7d6      	b.n	800e510 <rmw_validate_full_topic_name+0x28>
 800e562:	4543      	cmp	r3, r8
 800e564:	d1e6      	bne.n	800e534 <rmw_validate_full_topic_name+0x4c>
 800e566:	4f1a      	ldr	r7, [pc, #104]	; (800e5d0 <rmw_validate_full_topic_name+0xe8>)
 800e568:	2301      	movs	r3, #1
 800e56a:	e004      	b.n	800e576 <rmw_validate_full_topic_name+0x8e>
 800e56c:	4298      	cmp	r0, r3
 800e56e:	f104 0401 	add.w	r4, r4, #1
 800e572:	d91c      	bls.n	800e5ae <rmw_validate_full_topic_name+0xc6>
 800e574:	4613      	mov	r3, r2
 800e576:	4298      	cmp	r0, r3
 800e578:	f103 0201 	add.w	r2, r3, #1
 800e57c:	d0f6      	beq.n	800e56c <rmw_validate_full_topic_name+0x84>
 800e57e:	7821      	ldrb	r1, [r4, #0]
 800e580:	292f      	cmp	r1, #47	; 0x2f
 800e582:	d1f3      	bne.n	800e56c <rmw_validate_full_topic_name+0x84>
 800e584:	7861      	ldrb	r1, [r4, #1]
 800e586:	292f      	cmp	r1, #47	; 0x2f
 800e588:	d01c      	beq.n	800e5c4 <rmw_validate_full_topic_name+0xdc>
 800e58a:	5dc9      	ldrb	r1, [r1, r7]
 800e58c:	0749      	lsls	r1, r1, #29
 800e58e:	d5ed      	bpl.n	800e56c <rmw_validate_full_topic_name+0x84>
 800e590:	2206      	movs	r2, #6
 800e592:	602a      	str	r2, [r5, #0]
 800e594:	2e00      	cmp	r6, #0
 800e596:	d0c1      	beq.n	800e51c <rmw_validate_full_topic_name+0x34>
 800e598:	6033      	str	r3, [r6, #0]
 800e59a:	e7bf      	b.n	800e51c <rmw_validate_full_topic_name+0x34>
 800e59c:	200b      	movs	r0, #11
 800e59e:	4770      	bx	lr
 800e5a0:	200b      	movs	r0, #11
 800e5a2:	e7b5      	b.n	800e510 <rmw_validate_full_topic_name+0x28>
 800e5a4:	2203      	movs	r2, #3
 800e5a6:	602a      	str	r2, [r5, #0]
 800e5a8:	2e00      	cmp	r6, #0
 800e5aa:	d1f5      	bne.n	800e598 <rmw_validate_full_topic_name+0xb0>
 800e5ac:	e7b6      	b.n	800e51c <rmw_validate_full_topic_name+0x34>
 800e5ae:	28f7      	cmp	r0, #247	; 0xf7
 800e5b0:	d802      	bhi.n	800e5b8 <rmw_validate_full_topic_name+0xd0>
 800e5b2:	2000      	movs	r0, #0
 800e5b4:	6028      	str	r0, [r5, #0]
 800e5b6:	e7ab      	b.n	800e510 <rmw_validate_full_topic_name+0x28>
 800e5b8:	2307      	movs	r3, #7
 800e5ba:	602b      	str	r3, [r5, #0]
 800e5bc:	2e00      	cmp	r6, #0
 800e5be:	d0ad      	beq.n	800e51c <rmw_validate_full_topic_name+0x34>
 800e5c0:	23f6      	movs	r3, #246	; 0xf6
 800e5c2:	e7e9      	b.n	800e598 <rmw_validate_full_topic_name+0xb0>
 800e5c4:	2205      	movs	r2, #5
 800e5c6:	602a      	str	r2, [r5, #0]
 800e5c8:	2e00      	cmp	r6, #0
 800e5ca:	d1e5      	bne.n	800e598 <rmw_validate_full_topic_name+0xb0>
 800e5cc:	e7a6      	b.n	800e51c <rmw_validate_full_topic_name+0x34>
 800e5ce:	bf00      	nop
 800e5d0:	0801372c 	.word	0x0801372c

0800e5d4 <rmw_validate_namespace_with_size>:
 800e5d4:	b340      	cbz	r0, 800e628 <rmw_validate_namespace_with_size+0x54>
 800e5d6:	b570      	push	{r4, r5, r6, lr}
 800e5d8:	4614      	mov	r4, r2
 800e5da:	b0c2      	sub	sp, #264	; 0x108
 800e5dc:	b332      	cbz	r2, 800e62c <rmw_validate_namespace_with_size+0x58>
 800e5de:	2901      	cmp	r1, #1
 800e5e0:	460d      	mov	r5, r1
 800e5e2:	461e      	mov	r6, r3
 800e5e4:	d102      	bne.n	800e5ec <rmw_validate_namespace_with_size+0x18>
 800e5e6:	7803      	ldrb	r3, [r0, #0]
 800e5e8:	2b2f      	cmp	r3, #47	; 0x2f
 800e5ea:	d012      	beq.n	800e612 <rmw_validate_namespace_with_size+0x3e>
 800e5ec:	aa01      	add	r2, sp, #4
 800e5ee:	4669      	mov	r1, sp
 800e5f0:	f7ff ff7a 	bl	800e4e8 <rmw_validate_full_topic_name>
 800e5f4:	b978      	cbnz	r0, 800e616 <rmw_validate_namespace_with_size+0x42>
 800e5f6:	9b00      	ldr	r3, [sp, #0]
 800e5f8:	b14b      	cbz	r3, 800e60e <rmw_validate_namespace_with_size+0x3a>
 800e5fa:	2b07      	cmp	r3, #7
 800e5fc:	d007      	beq.n	800e60e <rmw_validate_namespace_with_size+0x3a>
 800e5fe:	1e5a      	subs	r2, r3, #1
 800e600:	2a05      	cmp	r2, #5
 800e602:	d82b      	bhi.n	800e65c <rmw_validate_namespace_with_size+0x88>
 800e604:	e8df f002 	tbb	[pc, r2]
 800e608:	1e212427 	.word	0x1e212427
 800e60c:	141b      	.short	0x141b
 800e60e:	2df5      	cmp	r5, #245	; 0xf5
 800e610:	d803      	bhi.n	800e61a <rmw_validate_namespace_with_size+0x46>
 800e612:	2000      	movs	r0, #0
 800e614:	6020      	str	r0, [r4, #0]
 800e616:	b042      	add	sp, #264	; 0x108
 800e618:	bd70      	pop	{r4, r5, r6, pc}
 800e61a:	2307      	movs	r3, #7
 800e61c:	6023      	str	r3, [r4, #0]
 800e61e:	2e00      	cmp	r6, #0
 800e620:	d0f9      	beq.n	800e616 <rmw_validate_namespace_with_size+0x42>
 800e622:	23f4      	movs	r3, #244	; 0xf4
 800e624:	6033      	str	r3, [r6, #0]
 800e626:	e7f6      	b.n	800e616 <rmw_validate_namespace_with_size+0x42>
 800e628:	200b      	movs	r0, #11
 800e62a:	4770      	bx	lr
 800e62c:	200b      	movs	r0, #11
 800e62e:	e7f2      	b.n	800e616 <rmw_validate_namespace_with_size+0x42>
 800e630:	2306      	movs	r3, #6
 800e632:	6023      	str	r3, [r4, #0]
 800e634:	2e00      	cmp	r6, #0
 800e636:	d0ee      	beq.n	800e616 <rmw_validate_namespace_with_size+0x42>
 800e638:	9b01      	ldr	r3, [sp, #4]
 800e63a:	6033      	str	r3, [r6, #0]
 800e63c:	e7eb      	b.n	800e616 <rmw_validate_namespace_with_size+0x42>
 800e63e:	2305      	movs	r3, #5
 800e640:	6023      	str	r3, [r4, #0]
 800e642:	e7f7      	b.n	800e634 <rmw_validate_namespace_with_size+0x60>
 800e644:	2304      	movs	r3, #4
 800e646:	6023      	str	r3, [r4, #0]
 800e648:	e7f4      	b.n	800e634 <rmw_validate_namespace_with_size+0x60>
 800e64a:	2303      	movs	r3, #3
 800e64c:	6023      	str	r3, [r4, #0]
 800e64e:	e7f1      	b.n	800e634 <rmw_validate_namespace_with_size+0x60>
 800e650:	2302      	movs	r3, #2
 800e652:	6023      	str	r3, [r4, #0]
 800e654:	e7ee      	b.n	800e634 <rmw_validate_namespace_with_size+0x60>
 800e656:	2301      	movs	r3, #1
 800e658:	6023      	str	r3, [r4, #0]
 800e65a:	e7eb      	b.n	800e634 <rmw_validate_namespace_with_size+0x60>
 800e65c:	4a03      	ldr	r2, [pc, #12]	; (800e66c <rmw_validate_namespace_with_size+0x98>)
 800e65e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e662:	a802      	add	r0, sp, #8
 800e664:	f7ff fd36 	bl	800e0d4 <rcutils_snprintf>
 800e668:	2001      	movs	r0, #1
 800e66a:	e7d4      	b.n	800e616 <rmw_validate_namespace_with_size+0x42>
 800e66c:	08013134 	.word	0x08013134

0800e670 <rmw_validate_namespace>:
 800e670:	b168      	cbz	r0, 800e68e <rmw_validate_namespace+0x1e>
 800e672:	b570      	push	{r4, r5, r6, lr}
 800e674:	460d      	mov	r5, r1
 800e676:	4616      	mov	r6, r2
 800e678:	4604      	mov	r4, r0
 800e67a:	f7f1 fdd3 	bl	8000224 <strlen>
 800e67e:	4633      	mov	r3, r6
 800e680:	4601      	mov	r1, r0
 800e682:	462a      	mov	r2, r5
 800e684:	4620      	mov	r0, r4
 800e686:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e68a:	f7ff bfa3 	b.w	800e5d4 <rmw_validate_namespace_with_size>
 800e68e:	200b      	movs	r0, #11
 800e690:	4770      	bx	lr
 800e692:	bf00      	nop

0800e694 <rmw_namespace_validation_result_string>:
 800e694:	2807      	cmp	r0, #7
 800e696:	bf9a      	itte	ls
 800e698:	4b02      	ldrls	r3, [pc, #8]	; (800e6a4 <rmw_namespace_validation_result_string+0x10>)
 800e69a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800e69e:	4802      	ldrhi	r0, [pc, #8]	; (800e6a8 <rmw_namespace_validation_result_string+0x14>)
 800e6a0:	4770      	bx	lr
 800e6a2:	bf00      	nop
 800e6a4:	0801332c 	.word	0x0801332c
 800e6a8:	08013184 	.word	0x08013184

0800e6ac <rmw_validate_node_name>:
 800e6ac:	2800      	cmp	r0, #0
 800e6ae:	d03b      	beq.n	800e728 <rmw_validate_node_name+0x7c>
 800e6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6b4:	460d      	mov	r5, r1
 800e6b6:	2900      	cmp	r1, #0
 800e6b8:	d038      	beq.n	800e72c <rmw_validate_node_name+0x80>
 800e6ba:	4616      	mov	r6, r2
 800e6bc:	4604      	mov	r4, r0
 800e6be:	f7f1 fdb1 	bl	8000224 <strlen>
 800e6c2:	b1e0      	cbz	r0, 800e6fe <rmw_validate_node_name+0x52>
 800e6c4:	1e63      	subs	r3, r4, #1
 800e6c6:	eb03 0800 	add.w	r8, r3, r0
 800e6ca:	f1c4 0101 	rsb	r1, r4, #1
 800e6ce:	18cf      	adds	r7, r1, r3
 800e6d0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800e6d4:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 800e6d8:	f02e 0c20 	bic.w	ip, lr, #32
 800e6dc:	2a09      	cmp	r2, #9
 800e6de:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 800e6e2:	d914      	bls.n	800e70e <rmw_validate_node_name+0x62>
 800e6e4:	f1bc 0f19 	cmp.w	ip, #25
 800e6e8:	d911      	bls.n	800e70e <rmw_validate_node_name+0x62>
 800e6ea:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800e6ee:	d00e      	beq.n	800e70e <rmw_validate_node_name+0x62>
 800e6f0:	2302      	movs	r3, #2
 800e6f2:	602b      	str	r3, [r5, #0]
 800e6f4:	b106      	cbz	r6, 800e6f8 <rmw_validate_node_name+0x4c>
 800e6f6:	6037      	str	r7, [r6, #0]
 800e6f8:	2000      	movs	r0, #0
 800e6fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6fe:	2301      	movs	r3, #1
 800e700:	602b      	str	r3, [r5, #0]
 800e702:	2e00      	cmp	r6, #0
 800e704:	d0f8      	beq.n	800e6f8 <rmw_validate_node_name+0x4c>
 800e706:	2000      	movs	r0, #0
 800e708:	6030      	str	r0, [r6, #0]
 800e70a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e70e:	4543      	cmp	r3, r8
 800e710:	d1dd      	bne.n	800e6ce <rmw_validate_node_name+0x22>
 800e712:	7822      	ldrb	r2, [r4, #0]
 800e714:	4b0d      	ldr	r3, [pc, #52]	; (800e74c <rmw_validate_node_name+0xa0>)
 800e716:	5cd3      	ldrb	r3, [r2, r3]
 800e718:	f013 0304 	ands.w	r3, r3, #4
 800e71c:	d110      	bne.n	800e740 <rmw_validate_node_name+0x94>
 800e71e:	28ff      	cmp	r0, #255	; 0xff
 800e720:	d806      	bhi.n	800e730 <rmw_validate_node_name+0x84>
 800e722:	602b      	str	r3, [r5, #0]
 800e724:	4618      	mov	r0, r3
 800e726:	e7e8      	b.n	800e6fa <rmw_validate_node_name+0x4e>
 800e728:	200b      	movs	r0, #11
 800e72a:	4770      	bx	lr
 800e72c:	200b      	movs	r0, #11
 800e72e:	e7e4      	b.n	800e6fa <rmw_validate_node_name+0x4e>
 800e730:	2204      	movs	r2, #4
 800e732:	602a      	str	r2, [r5, #0]
 800e734:	2e00      	cmp	r6, #0
 800e736:	d0df      	beq.n	800e6f8 <rmw_validate_node_name+0x4c>
 800e738:	22fe      	movs	r2, #254	; 0xfe
 800e73a:	6032      	str	r2, [r6, #0]
 800e73c:	4618      	mov	r0, r3
 800e73e:	e7dc      	b.n	800e6fa <rmw_validate_node_name+0x4e>
 800e740:	2303      	movs	r3, #3
 800e742:	602b      	str	r3, [r5, #0]
 800e744:	2e00      	cmp	r6, #0
 800e746:	d1de      	bne.n	800e706 <rmw_validate_node_name+0x5a>
 800e748:	e7d6      	b.n	800e6f8 <rmw_validate_node_name+0x4c>
 800e74a:	bf00      	nop
 800e74c:	0801372c 	.word	0x0801372c

0800e750 <rmw_node_name_validation_result_string>:
 800e750:	2804      	cmp	r0, #4
 800e752:	bf9a      	itte	ls
 800e754:	4b02      	ldrls	r3, [pc, #8]	; (800e760 <rmw_node_name_validation_result_string+0x10>)
 800e756:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800e75a:	4802      	ldrhi	r0, [pc, #8]	; (800e764 <rmw_node_name_validation_result_string+0x14>)
 800e75c:	4770      	bx	lr
 800e75e:	bf00      	nop
 800e760:	08013438 	.word	0x08013438
 800e764:	0801334c 	.word	0x0801334c

0800e768 <get_memory>:
 800e768:	4603      	mov	r3, r0
 800e76a:	6840      	ldr	r0, [r0, #4]
 800e76c:	b158      	cbz	r0, 800e786 <get_memory+0x1e>
 800e76e:	6842      	ldr	r2, [r0, #4]
 800e770:	605a      	str	r2, [r3, #4]
 800e772:	b10a      	cbz	r2, 800e778 <get_memory+0x10>
 800e774:	2100      	movs	r1, #0
 800e776:	6011      	str	r1, [r2, #0]
 800e778:	681a      	ldr	r2, [r3, #0]
 800e77a:	6042      	str	r2, [r0, #4]
 800e77c:	b102      	cbz	r2, 800e780 <get_memory+0x18>
 800e77e:	6010      	str	r0, [r2, #0]
 800e780:	2200      	movs	r2, #0
 800e782:	6002      	str	r2, [r0, #0]
 800e784:	6018      	str	r0, [r3, #0]
 800e786:	4770      	bx	lr

0800e788 <put_memory>:
 800e788:	680b      	ldr	r3, [r1, #0]
 800e78a:	b10b      	cbz	r3, 800e790 <put_memory+0x8>
 800e78c:	684a      	ldr	r2, [r1, #4]
 800e78e:	605a      	str	r2, [r3, #4]
 800e790:	684a      	ldr	r2, [r1, #4]
 800e792:	b102      	cbz	r2, 800e796 <put_memory+0xe>
 800e794:	6013      	str	r3, [r2, #0]
 800e796:	6803      	ldr	r3, [r0, #0]
 800e798:	428b      	cmp	r3, r1
 800e79a:	6843      	ldr	r3, [r0, #4]
 800e79c:	bf08      	it	eq
 800e79e:	6002      	streq	r2, [r0, #0]
 800e7a0:	604b      	str	r3, [r1, #4]
 800e7a2:	b103      	cbz	r3, 800e7a6 <put_memory+0x1e>
 800e7a4:	6019      	str	r1, [r3, #0]
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	600b      	str	r3, [r1, #0]
 800e7aa:	6041      	str	r1, [r0, #4]
 800e7ac:	4770      	bx	lr
 800e7ae:	bf00      	nop

0800e7b0 <rmw_get_implementation_identifier>:
 800e7b0:	4b01      	ldr	r3, [pc, #4]	; (800e7b8 <rmw_get_implementation_identifier+0x8>)
 800e7b2:	6818      	ldr	r0, [r3, #0]
 800e7b4:	4770      	bx	lr
 800e7b6:	bf00      	nop
 800e7b8:	08013464 	.word	0x08013464

0800e7bc <rmw_init_options_init>:
 800e7bc:	b084      	sub	sp, #16
 800e7be:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7c0:	b083      	sub	sp, #12
 800e7c2:	ad09      	add	r5, sp, #36	; 0x24
 800e7c4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800e7c8:	b130      	cbz	r0, 800e7d8 <rmw_init_options_init+0x1c>
 800e7ca:	4604      	mov	r4, r0
 800e7cc:	4628      	mov	r0, r5
 800e7ce:	f7fa fa4f 	bl	8008c70 <rcutils_allocator_is_valid>
 800e7d2:	b108      	cbz	r0, 800e7d8 <rmw_init_options_init+0x1c>
 800e7d4:	68a6      	ldr	r6, [r4, #8]
 800e7d6:	b12e      	cbz	r6, 800e7e4 <rmw_init_options_init+0x28>
 800e7d8:	200b      	movs	r0, #11
 800e7da:	b003      	add	sp, #12
 800e7dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e7e0:	b004      	add	sp, #16
 800e7e2:	4770      	bx	lr
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	e9c4 2300 	strd	r2, r3, [r4]
 800e7ec:	4b22      	ldr	r3, [pc, #136]	; (800e878 <rmw_init_options_init+0xbc>)
 800e7ee:	f8df e098 	ldr.w	lr, [pc, #152]	; 800e888 <rmw_init_options_init+0xcc>
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	60a3      	str	r3, [r4, #8]
 800e7f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7f8:	f104 0c20 	add.w	ip, r4, #32
 800e7fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e800:	466f      	mov	r7, sp
 800e802:	682b      	ldr	r3, [r5, #0]
 800e804:	f8cc 3000 	str.w	r3, [ip]
 800e808:	4638      	mov	r0, r7
 800e80a:	f8c4 e01c 	str.w	lr, [r4, #28]
 800e80e:	60e6      	str	r6, [r4, #12]
 800e810:	f7ff fe66 	bl	800e4e0 <rmw_get_default_security_options>
 800e814:	e897 0003 	ldmia.w	r7, {r0, r1}
 800e818:	f104 0310 	add.w	r3, r4, #16
 800e81c:	e883 0003 	stmia.w	r3, {r0, r1}
 800e820:	2203      	movs	r2, #3
 800e822:	4816      	ldr	r0, [pc, #88]	; (800e87c <rmw_init_options_init+0xc0>)
 800e824:	4916      	ldr	r1, [pc, #88]	; (800e880 <rmw_init_options_init+0xc4>)
 800e826:	7626      	strb	r6, [r4, #24]
 800e828:	f7fa fd20 	bl	800926c <rmw_uxrce_init_init_options_impl_memory>
 800e82c:	4813      	ldr	r0, [pc, #76]	; (800e87c <rmw_init_options_init+0xc0>)
 800e82e:	f7ff ff9b 	bl	800e768 <get_memory>
 800e832:	b1f0      	cbz	r0, 800e872 <rmw_init_options_init+0xb6>
 800e834:	4a13      	ldr	r2, [pc, #76]	; (800e884 <rmw_init_options_init+0xc8>)
 800e836:	6883      	ldr	r3, [r0, #8]
 800e838:	6851      	ldr	r1, [r2, #4]
 800e83a:	7810      	ldrb	r0, [r2, #0]
 800e83c:	6363      	str	r3, [r4, #52]	; 0x34
 800e83e:	7418      	strb	r0, [r3, #16]
 800e840:	6159      	str	r1, [r3, #20]
 800e842:	68d1      	ldr	r1, [r2, #12]
 800e844:	61d9      	str	r1, [r3, #28]
 800e846:	6911      	ldr	r1, [r2, #16]
 800e848:	6219      	str	r1, [r3, #32]
 800e84a:	6951      	ldr	r1, [r2, #20]
 800e84c:	6892      	ldr	r2, [r2, #8]
 800e84e:	619a      	str	r2, [r3, #24]
 800e850:	6259      	str	r1, [r3, #36]	; 0x24
 800e852:	f7fd faf3 	bl	800be3c <uxr_nanos>
 800e856:	f002 ff6f 	bl	8011738 <srand>
 800e85a:	f002 ff9b 	bl	8011794 <rand>
 800e85e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e860:	6298      	str	r0, [r3, #40]	; 0x28
 800e862:	2800      	cmp	r0, #0
 800e864:	d0f9      	beq.n	800e85a <rmw_init_options_init+0x9e>
 800e866:	2000      	movs	r0, #0
 800e868:	b003      	add	sp, #12
 800e86a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e86e:	b004      	add	sp, #16
 800e870:	4770      	bx	lr
 800e872:	2001      	movs	r0, #1
 800e874:	e7b1      	b.n	800e7da <rmw_init_options_init+0x1e>
 800e876:	bf00      	nop
 800e878:	08013464 	.word	0x08013464
 800e87c:	2000dee4 	.word	0x2000dee4
 800e880:	20009780 	.word	0x20009780
 800e884:	2000960c 	.word	0x2000960c
 800e888:	08013004 	.word	0x08013004

0800e88c <rmw_init_options_copy>:
 800e88c:	b570      	push	{r4, r5, r6, lr}
 800e88e:	b158      	cbz	r0, 800e8a8 <rmw_init_options_copy+0x1c>
 800e890:	460d      	mov	r5, r1
 800e892:	b149      	cbz	r1, 800e8a8 <rmw_init_options_copy+0x1c>
 800e894:	4604      	mov	r4, r0
 800e896:	6880      	ldr	r0, [r0, #8]
 800e898:	b120      	cbz	r0, 800e8a4 <rmw_init_options_copy+0x18>
 800e89a:	4b1e      	ldr	r3, [pc, #120]	; (800e914 <rmw_init_options_copy+0x88>)
 800e89c:	6819      	ldr	r1, [r3, #0]
 800e89e:	f7f1 fcb7 	bl	8000210 <strcmp>
 800e8a2:	bb90      	cbnz	r0, 800e90a <rmw_init_options_copy+0x7e>
 800e8a4:	68ab      	ldr	r3, [r5, #8]
 800e8a6:	b113      	cbz	r3, 800e8ae <rmw_init_options_copy+0x22>
 800e8a8:	250b      	movs	r5, #11
 800e8aa:	4628      	mov	r0, r5
 800e8ac:	bd70      	pop	{r4, r5, r6, pc}
 800e8ae:	4623      	mov	r3, r4
 800e8b0:	462a      	mov	r2, r5
 800e8b2:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800e8b6:	f8d3 c000 	ldr.w	ip, [r3]
 800e8ba:	6858      	ldr	r0, [r3, #4]
 800e8bc:	6899      	ldr	r1, [r3, #8]
 800e8be:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800e8c2:	f8c2 e00c 	str.w	lr, [r2, #12]
 800e8c6:	3310      	adds	r3, #16
 800e8c8:	42b3      	cmp	r3, r6
 800e8ca:	f8c2 c000 	str.w	ip, [r2]
 800e8ce:	6050      	str	r0, [r2, #4]
 800e8d0:	6091      	str	r1, [r2, #8]
 800e8d2:	f102 0210 	add.w	r2, r2, #16
 800e8d6:	d1ee      	bne.n	800e8b6 <rmw_init_options_copy+0x2a>
 800e8d8:	6819      	ldr	r1, [r3, #0]
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	480e      	ldr	r0, [pc, #56]	; (800e918 <rmw_init_options_copy+0x8c>)
 800e8de:	6053      	str	r3, [r2, #4]
 800e8e0:	6011      	str	r1, [r2, #0]
 800e8e2:	f7ff ff41 	bl	800e768 <get_memory>
 800e8e6:	b198      	cbz	r0, 800e910 <rmw_init_options_copy+0x84>
 800e8e8:	6883      	ldr	r3, [r0, #8]
 800e8ea:	636b      	str	r3, [r5, #52]	; 0x34
 800e8ec:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e8ee:	f102 0c10 	add.w	ip, r2, #16
 800e8f2:	f103 0410 	add.w	r4, r3, #16
 800e8f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e8fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e8fc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800e900:	2500      	movs	r5, #0
 800e902:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e906:	4628      	mov	r0, r5
 800e908:	bd70      	pop	{r4, r5, r6, pc}
 800e90a:	250c      	movs	r5, #12
 800e90c:	4628      	mov	r0, r5
 800e90e:	bd70      	pop	{r4, r5, r6, pc}
 800e910:	2501      	movs	r5, #1
 800e912:	e7ca      	b.n	800e8aa <rmw_init_options_copy+0x1e>
 800e914:	08013464 	.word	0x08013464
 800e918:	2000dee4 	.word	0x2000dee4

0800e91c <rmw_init_options_fini>:
 800e91c:	2800      	cmp	r0, #0
 800e91e:	d03d      	beq.n	800e99c <rmw_init_options_fini+0x80>
 800e920:	b510      	push	{r4, lr}
 800e922:	4604      	mov	r4, r0
 800e924:	b08e      	sub	sp, #56	; 0x38
 800e926:	3020      	adds	r0, #32
 800e928:	f7fa f9a2 	bl	8008c70 <rcutils_allocator_is_valid>
 800e92c:	b360      	cbz	r0, 800e988 <rmw_init_options_fini+0x6c>
 800e92e:	68a0      	ldr	r0, [r4, #8]
 800e930:	b120      	cbz	r0, 800e93c <rmw_init_options_fini+0x20>
 800e932:	4b1c      	ldr	r3, [pc, #112]	; (800e9a4 <rmw_init_options_fini+0x88>)
 800e934:	6819      	ldr	r1, [r3, #0]
 800e936:	f7f1 fc6b 	bl	8000210 <strcmp>
 800e93a:	bb68      	cbnz	r0, 800e998 <rmw_init_options_fini+0x7c>
 800e93c:	4b1a      	ldr	r3, [pc, #104]	; (800e9a8 <rmw_init_options_fini+0x8c>)
 800e93e:	6819      	ldr	r1, [r3, #0]
 800e940:	b331      	cbz	r1, 800e990 <rmw_init_options_fini+0x74>
 800e942:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e944:	e001      	b.n	800e94a <rmw_init_options_fini+0x2e>
 800e946:	6849      	ldr	r1, [r1, #4]
 800e948:	b311      	cbz	r1, 800e990 <rmw_init_options_fini+0x74>
 800e94a:	688b      	ldr	r3, [r1, #8]
 800e94c:	429a      	cmp	r2, r3
 800e94e:	d1fa      	bne.n	800e946 <rmw_init_options_fini+0x2a>
 800e950:	4815      	ldr	r0, [pc, #84]	; (800e9a8 <rmw_init_options_fini+0x8c>)
 800e952:	f7ff ff19 	bl	800e788 <put_memory>
 800e956:	4668      	mov	r0, sp
 800e958:	f7ff fdb2 	bl	800e4c0 <rmw_get_zero_initialized_init_options>
 800e95c:	46ee      	mov	lr, sp
 800e95e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e962:	46a4      	mov	ip, r4
 800e964:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e968:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e96c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e970:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e974:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e978:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e97c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e980:	2300      	movs	r3, #0
 800e982:	4618      	mov	r0, r3
 800e984:	b00e      	add	sp, #56	; 0x38
 800e986:	bd10      	pop	{r4, pc}
 800e988:	230b      	movs	r3, #11
 800e98a:	4618      	mov	r0, r3
 800e98c:	b00e      	add	sp, #56	; 0x38
 800e98e:	bd10      	pop	{r4, pc}
 800e990:	2301      	movs	r3, #1
 800e992:	4618      	mov	r0, r3
 800e994:	b00e      	add	sp, #56	; 0x38
 800e996:	bd10      	pop	{r4, pc}
 800e998:	230c      	movs	r3, #12
 800e99a:	e7f2      	b.n	800e982 <rmw_init_options_fini+0x66>
 800e99c:	230b      	movs	r3, #11
 800e99e:	4618      	mov	r0, r3
 800e9a0:	4770      	bx	lr
 800e9a2:	bf00      	nop
 800e9a4:	08013464 	.word	0x08013464
 800e9a8:	2000dee4 	.word	0x2000dee4

0800e9ac <rmw_init>:
 800e9ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e9b0:	b083      	sub	sp, #12
 800e9b2:	2800      	cmp	r0, #0
 800e9b4:	f000 80d3 	beq.w	800eb5e <rmw_init+0x1b2>
 800e9b8:	460e      	mov	r6, r1
 800e9ba:	2900      	cmp	r1, #0
 800e9bc:	f000 80cf 	beq.w	800eb5e <rmw_init+0x1b2>
 800e9c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e9c2:	4605      	mov	r5, r0
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	f000 80ca 	beq.w	800eb5e <rmw_init+0x1b2>
 800e9ca:	4b78      	ldr	r3, [pc, #480]	; (800ebac <rmw_init+0x200>)
 800e9cc:	6880      	ldr	r0, [r0, #8]
 800e9ce:	681f      	ldr	r7, [r3, #0]
 800e9d0:	b128      	cbz	r0, 800e9de <rmw_init+0x32>
 800e9d2:	4639      	mov	r1, r7
 800e9d4:	f7f1 fc1c 	bl	8000210 <strcmp>
 800e9d8:	2800      	cmp	r0, #0
 800e9da:	f040 80ca 	bne.w	800eb72 <rmw_init+0x1c6>
 800e9de:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e9e2:	4c73      	ldr	r4, [pc, #460]	; (800ebb0 <rmw_init+0x204>)
 800e9e4:	4973      	ldr	r1, [pc, #460]	; (800ebb4 <rmw_init+0x208>)
 800e9e6:	4874      	ldr	r0, [pc, #464]	; (800ebb8 <rmw_init+0x20c>)
 800e9e8:	60b7      	str	r7, [r6, #8]
 800e9ea:	e9c6 2300 	strd	r2, r3, [r6]
 800e9ee:	68eb      	ldr	r3, [r5, #12]
 800e9f0:	64b3      	str	r3, [r6, #72]	; 0x48
 800e9f2:	2201      	movs	r2, #1
 800e9f4:	f7fa fbda 	bl	80091ac <rmw_uxrce_init_session_memory>
 800e9f8:	4620      	mov	r0, r4
 800e9fa:	4970      	ldr	r1, [pc, #448]	; (800ebbc <rmw_init+0x210>)
 800e9fc:	2204      	movs	r2, #4
 800e9fe:	f7fa fc15 	bl	800922c <rmw_uxrce_init_static_input_buffer_memory>
 800ea02:	f04f 0800 	mov.w	r8, #0
 800ea06:	486c      	ldr	r0, [pc, #432]	; (800ebb8 <rmw_init+0x20c>)
 800ea08:	f884 800d 	strb.w	r8, [r4, #13]
 800ea0c:	f7ff feac 	bl	800e768 <get_memory>
 800ea10:	2800      	cmp	r0, #0
 800ea12:	f000 80a9 	beq.w	800eb68 <rmw_init+0x1bc>
 800ea16:	6884      	ldr	r4, [r0, #8]
 800ea18:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800ea1a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800ea1c:	f890 c010 	ldrb.w	ip, [r0, #16]
 800ea20:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800ea24:	9101      	str	r1, [sp, #4]
 800ea26:	6a00      	ldr	r0, [r0, #32]
 800ea28:	9000      	str	r0, [sp, #0]
 800ea2a:	f104 0910 	add.w	r9, r4, #16
 800ea2e:	4661      	mov	r1, ip
 800ea30:	4648      	mov	r0, r9
 800ea32:	f000 fdbf 	bl	800f5b4 <uxr_set_custom_transport_callbacks>
 800ea36:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800ea3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ea3e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 800ea42:	f504 725e 	add.w	r2, r4, #888	; 0x378
 800ea46:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 800ea4a:	495d      	ldr	r1, [pc, #372]	; (800ebc0 <rmw_init+0x214>)
 800ea4c:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 800ea50:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 800ea54:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 800ea58:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 800ea5c:	4859      	ldr	r0, [pc, #356]	; (800ebc4 <rmw_init+0x218>)
 800ea5e:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 800ea62:	2201      	movs	r2, #1
 800ea64:	64f4      	str	r4, [r6, #76]	; 0x4c
 800ea66:	f7fa fb81 	bl	800916c <rmw_uxrce_init_node_memory>
 800ea6a:	4957      	ldr	r1, [pc, #348]	; (800ebc8 <rmw_init+0x21c>)
 800ea6c:	4857      	ldr	r0, [pc, #348]	; (800ebcc <rmw_init+0x220>)
 800ea6e:	2205      	movs	r2, #5
 800ea70:	f7fa fb5c 	bl	800912c <rmw_uxrce_init_subscription_memory>
 800ea74:	4956      	ldr	r1, [pc, #344]	; (800ebd0 <rmw_init+0x224>)
 800ea76:	4857      	ldr	r0, [pc, #348]	; (800ebd4 <rmw_init+0x228>)
 800ea78:	220a      	movs	r2, #10
 800ea7a:	f7fa fb37 	bl	80090ec <rmw_uxrce_init_publisher_memory>
 800ea7e:	4956      	ldr	r1, [pc, #344]	; (800ebd8 <rmw_init+0x22c>)
 800ea80:	4856      	ldr	r0, [pc, #344]	; (800ebdc <rmw_init+0x230>)
 800ea82:	2201      	movs	r2, #1
 800ea84:	f7fa faf2 	bl	800906c <rmw_uxrce_init_service_memory>
 800ea88:	4955      	ldr	r1, [pc, #340]	; (800ebe0 <rmw_init+0x234>)
 800ea8a:	4856      	ldr	r0, [pc, #344]	; (800ebe4 <rmw_init+0x238>)
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	f7fa fb0d 	bl	80090ac <rmw_uxrce_init_client_memory>
 800ea92:	4955      	ldr	r1, [pc, #340]	; (800ebe8 <rmw_init+0x23c>)
 800ea94:	4855      	ldr	r0, [pc, #340]	; (800ebec <rmw_init+0x240>)
 800ea96:	220f      	movs	r2, #15
 800ea98:	f7fa fba8 	bl	80091ec <rmw_uxrce_init_topic_memory>
 800ea9c:	4954      	ldr	r1, [pc, #336]	; (800ebf0 <rmw_init+0x244>)
 800ea9e:	4855      	ldr	r0, [pc, #340]	; (800ebf4 <rmw_init+0x248>)
 800eaa0:	2203      	movs	r2, #3
 800eaa2:	f7fa fbe3 	bl	800926c <rmw_uxrce_init_init_options_impl_memory>
 800eaa6:	4954      	ldr	r1, [pc, #336]	; (800ebf8 <rmw_init+0x24c>)
 800eaa8:	4854      	ldr	r0, [pc, #336]	; (800ebfc <rmw_init+0x250>)
 800eaaa:	2204      	movs	r2, #4
 800eaac:	f7fa fbfe 	bl	80092ac <rmw_uxrce_init_wait_set_memory>
 800eab0:	4953      	ldr	r1, [pc, #332]	; (800ec00 <rmw_init+0x254>)
 800eab2:	4854      	ldr	r0, [pc, #336]	; (800ec04 <rmw_init+0x258>)
 800eab4:	2204      	movs	r2, #4
 800eab6:	f7fa fc19 	bl	80092ec <rmw_uxrce_init_guard_condition_memory>
 800eaba:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800eabc:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 800eabe:	4642      	mov	r2, r8
 800eac0:	f000 fb06 	bl	800f0d0 <rmw_uxrce_transport_init>
 800eac4:	4607      	mov	r7, r0
 800eac6:	2800      	cmp	r0, #0
 800eac8:	d158      	bne.n	800eb7c <rmw_init+0x1d0>
 800eaca:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800eacc:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 800ead0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ead2:	f504 7122 	add.w	r1, r4, #648	; 0x288
 800ead6:	4628      	mov	r0, r5
 800ead8:	f7fc f84e 	bl	800ab78 <uxr_init_session>
 800eadc:	494a      	ldr	r1, [pc, #296]	; (800ec08 <rmw_init+0x25c>)
 800eade:	4622      	mov	r2, r4
 800eae0:	4628      	mov	r0, r5
 800eae2:	f7fc f86d 	bl	800abc0 <uxr_set_topic_callback>
 800eae6:	4949      	ldr	r1, [pc, #292]	; (800ec0c <rmw_init+0x260>)
 800eae8:	463a      	mov	r2, r7
 800eaea:	4628      	mov	r0, r5
 800eaec:	f7fc f864 	bl	800abb8 <uxr_set_status_callback>
 800eaf0:	4947      	ldr	r1, [pc, #284]	; (800ec10 <rmw_init+0x264>)
 800eaf2:	463a      	mov	r2, r7
 800eaf4:	4628      	mov	r0, r5
 800eaf6:	f7fc f867 	bl	800abc8 <uxr_set_request_callback>
 800eafa:	4946      	ldr	r1, [pc, #280]	; (800ec14 <rmw_init+0x268>)
 800eafc:	463a      	mov	r2, r7
 800eafe:	4628      	mov	r0, r5
 800eb00:	f7fc f866 	bl	800abd0 <uxr_set_reply_callback>
 800eb04:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800eb08:	2304      	movs	r3, #4
 800eb0a:	0092      	lsls	r2, r2, #2
 800eb0c:	f504 7165 	add.w	r1, r4, #916	; 0x394
 800eb10:	4628      	mov	r0, r5
 800eb12:	f7fc f89b 	bl	800ac4c <uxr_create_input_reliable_stream>
 800eb16:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800eb1a:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 800eb1e:	0092      	lsls	r2, r2, #2
 800eb20:	2304      	movs	r3, #4
 800eb22:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 800eb26:	4628      	mov	r0, r5
 800eb28:	f7fc f868 	bl	800abfc <uxr_create_output_reliable_stream>
 800eb2c:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 800eb30:	4628      	mov	r0, r5
 800eb32:	f7fc f885 	bl	800ac40 <uxr_create_input_best_effort_stream>
 800eb36:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 800eb3a:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 800eb3e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800eb42:	3114      	adds	r1, #20
 800eb44:	4628      	mov	r0, r5
 800eb46:	f7fc f847 	bl	800abd8 <uxr_create_output_best_effort_stream>
 800eb4a:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 800eb4e:	4628      	mov	r0, r5
 800eb50:	f7fc fd98 	bl	800b684 <uxr_create_session>
 800eb54:	b1f8      	cbz	r0, 800eb96 <rmw_init+0x1ea>
 800eb56:	4638      	mov	r0, r7
 800eb58:	b003      	add	sp, #12
 800eb5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb5e:	270b      	movs	r7, #11
 800eb60:	4638      	mov	r0, r7
 800eb62:	b003      	add	sp, #12
 800eb64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb68:	2701      	movs	r7, #1
 800eb6a:	4638      	mov	r0, r7
 800eb6c:	b003      	add	sp, #12
 800eb6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb72:	270c      	movs	r7, #12
 800eb74:	4638      	mov	r0, r7
 800eb76:	b003      	add	sp, #12
 800eb78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb7c:	4648      	mov	r0, r9
 800eb7e:	f000 fd5b 	bl	800f638 <uxr_close_custom_transport>
 800eb82:	480d      	ldr	r0, [pc, #52]	; (800ebb8 <rmw_init+0x20c>)
 800eb84:	4621      	mov	r1, r4
 800eb86:	f7ff fdff 	bl	800e788 <put_memory>
 800eb8a:	4638      	mov	r0, r7
 800eb8c:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 800eb90:	b003      	add	sp, #12
 800eb92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb96:	4648      	mov	r0, r9
 800eb98:	f000 fd4e 	bl	800f638 <uxr_close_custom_transport>
 800eb9c:	4806      	ldr	r0, [pc, #24]	; (800ebb8 <rmw_init+0x20c>)
 800eb9e:	4621      	mov	r1, r4
 800eba0:	f7ff fdf2 	bl	800e788 <put_memory>
 800eba4:	64f7      	str	r7, [r6, #76]	; 0x4c
 800eba6:	2701      	movs	r7, #1
 800eba8:	e7d5      	b.n	800eb56 <rmw_init+0x1aa>
 800ebaa:	bf00      	nop
 800ebac:	08013464 	.word	0x08013464
 800ebb0:	2000df34 	.word	0x2000df34
 800ebb4:	2000a1e0 	.word	0x2000a1e0
 800ebb8:	2000df24 	.word	0x2000df24
 800ebbc:	2000b788 	.word	0x2000b788
 800ebc0:	20009804 	.word	0x20009804
 800ebc4:	2000def4 	.word	0x2000def4
 800ebc8:	2000d888 	.word	0x2000d888
 800ebcc:	2000df44 	.word	0x2000df44
 800ebd0:	200098a8 	.word	0x200098a8
 800ebd4:	2000df04 	.word	0x2000df04
 800ebd8:	2000a118 	.word	0x2000a118
 800ebdc:	2000df14 	.word	0x2000df14
 800ebe0:	20009638 	.word	0x20009638
 800ebe4:	20009628 	.word	0x20009628
 800ebe8:	2000dcc0 	.word	0x2000dcc0
 800ebec:	2000df54 	.word	0x2000df54
 800ebf0:	20009780 	.word	0x20009780
 800ebf4:	2000dee4 	.word	0x2000dee4
 800ebf8:	2000de64 	.word	0x2000de64
 800ebfc:	2000df64 	.word	0x2000df64
 800ec00:	20009700 	.word	0x20009700
 800ec04:	2000ded4 	.word	0x2000ded4
 800ec08:	08011255 	.word	0x08011255
 800ec0c:	0801124d 	.word	0x0801124d
 800ec10:	080112ed 	.word	0x080112ed
 800ec14:	08011389 	.word	0x08011389

0800ec18 <rmw_context_fini>:
 800ec18:	4b17      	ldr	r3, [pc, #92]	; (800ec78 <rmw_context_fini+0x60>)
 800ec1a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800ec1c:	b570      	push	{r4, r5, r6, lr}
 800ec1e:	681c      	ldr	r4, [r3, #0]
 800ec20:	4605      	mov	r5, r0
 800ec22:	b334      	cbz	r4, 800ec72 <rmw_context_fini+0x5a>
 800ec24:	2600      	movs	r6, #0
 800ec26:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800ec2a:	6902      	ldr	r2, [r0, #16]
 800ec2c:	428a      	cmp	r2, r1
 800ec2e:	d018      	beq.n	800ec62 <rmw_context_fini+0x4a>
 800ec30:	2c00      	cmp	r4, #0
 800ec32:	d1f8      	bne.n	800ec26 <rmw_context_fini+0xe>
 800ec34:	b189      	cbz	r1, 800ec5a <rmw_context_fini+0x42>
 800ec36:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 800ec3a:	789b      	ldrb	r3, [r3, #2]
 800ec3c:	2b01      	cmp	r3, #1
 800ec3e:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 800ec42:	bf14      	ite	ne
 800ec44:	210a      	movne	r1, #10
 800ec46:	2100      	moveq	r1, #0
 800ec48:	f7fc fcf4 	bl	800b634 <uxr_delete_session_retries>
 800ec4c:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800ec4e:	f7fa fb6d 	bl	800932c <rmw_uxrce_fini_session_memory>
 800ec52:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800ec54:	3010      	adds	r0, #16
 800ec56:	f000 fcef 	bl	800f638 <uxr_close_custom_transport>
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	64eb      	str	r3, [r5, #76]	; 0x4c
 800ec5e:	4630      	mov	r0, r6
 800ec60:	bd70      	pop	{r4, r5, r6, pc}
 800ec62:	3018      	adds	r0, #24
 800ec64:	f000 f90e 	bl	800ee84 <rmw_destroy_node>
 800ec68:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800ec6a:	4606      	mov	r6, r0
 800ec6c:	2c00      	cmp	r4, #0
 800ec6e:	d1da      	bne.n	800ec26 <rmw_context_fini+0xe>
 800ec70:	e7e0      	b.n	800ec34 <rmw_context_fini+0x1c>
 800ec72:	4626      	mov	r6, r4
 800ec74:	e7de      	b.n	800ec34 <rmw_context_fini+0x1c>
 800ec76:	bf00      	nop
 800ec78:	2000def4 	.word	0x2000def4

0800ec7c <create_topic>:
 800ec7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec80:	4605      	mov	r5, r0
 800ec82:	b084      	sub	sp, #16
 800ec84:	4822      	ldr	r0, [pc, #136]	; (800ed10 <create_topic+0x94>)
 800ec86:	460f      	mov	r7, r1
 800ec88:	4616      	mov	r6, r2
 800ec8a:	f7ff fd6d 	bl	800e768 <get_memory>
 800ec8e:	4604      	mov	r4, r0
 800ec90:	2800      	cmp	r0, #0
 800ec92:	d039      	beq.n	800ed08 <create_topic+0x8c>
 800ec94:	692b      	ldr	r3, [r5, #16]
 800ec96:	6884      	ldr	r4, [r0, #8]
 800ec98:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800ed18 <create_topic+0x9c>
 800ec9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eca0:	e9c4 6505 	strd	r6, r5, [r4, #20]
 800eca4:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 800eca8:	1c42      	adds	r2, r0, #1
 800ecaa:	2102      	movs	r1, #2
 800ecac:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 800ecb0:	f7fb fea4 	bl	800a9fc <uxr_object_id>
 800ecb4:	223c      	movs	r2, #60	; 0x3c
 800ecb6:	6120      	str	r0, [r4, #16]
 800ecb8:	4641      	mov	r1, r8
 800ecba:	4638      	mov	r0, r7
 800ecbc:	f7fa fc6e 	bl	800959c <generate_topic_name>
 800ecc0:	b1f0      	cbz	r0, 800ed00 <create_topic+0x84>
 800ecc2:	4f14      	ldr	r7, [pc, #80]	; (800ed14 <create_topic+0x98>)
 800ecc4:	4630      	mov	r0, r6
 800ecc6:	2264      	movs	r2, #100	; 0x64
 800ecc8:	4639      	mov	r1, r7
 800ecca:	f7fa fc37 	bl	800953c <generate_type_name>
 800ecce:	b1b8      	cbz	r0, 800ed00 <create_topic+0x84>
 800ecd0:	6928      	ldr	r0, [r5, #16]
 800ecd2:	2306      	movs	r3, #6
 800ecd4:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800ecd8:	f8cd 8000 	str.w	r8, [sp]
 800ecdc:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800ece0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ece4:	6811      	ldr	r1, [r2, #0]
 800ece6:	696b      	ldr	r3, [r5, #20]
 800ece8:	6922      	ldr	r2, [r4, #16]
 800ecea:	f7fb fdab 	bl	800a844 <uxr_buffer_create_topic_bin>
 800ecee:	4602      	mov	r2, r0
 800ecf0:	6928      	ldr	r0, [r5, #16]
 800ecf2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800ecf6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800ecfa:	f7fa fbe9 	bl	80094d0 <run_xrce_session>
 800ecfe:	b918      	cbnz	r0, 800ed08 <create_topic+0x8c>
 800ed00:	4620      	mov	r0, r4
 800ed02:	f7fa fb89 	bl	8009418 <rmw_uxrce_fini_topic_memory>
 800ed06:	2400      	movs	r4, #0
 800ed08:	4620      	mov	r0, r4
 800ed0a:	b004      	add	sp, #16
 800ed0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed10:	2000df54 	.word	0x2000df54
 800ed14:	2000dfd0 	.word	0x2000dfd0
 800ed18:	2000df94 	.word	0x2000df94

0800ed1c <destroy_topic>:
 800ed1c:	b538      	push	{r3, r4, r5, lr}
 800ed1e:	6985      	ldr	r5, [r0, #24]
 800ed20:	b1d5      	cbz	r5, 800ed58 <destroy_topic+0x3c>
 800ed22:	4604      	mov	r4, r0
 800ed24:	6928      	ldr	r0, [r5, #16]
 800ed26:	6922      	ldr	r2, [r4, #16]
 800ed28:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800ed2c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ed30:	6819      	ldr	r1, [r3, #0]
 800ed32:	f7fb fd09 	bl	800a748 <uxr_buffer_delete_entity>
 800ed36:	4602      	mov	r2, r0
 800ed38:	6928      	ldr	r0, [r5, #16]
 800ed3a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800ed3e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800ed42:	f7fa fbc5 	bl	80094d0 <run_xrce_session>
 800ed46:	2800      	cmp	r0, #0
 800ed48:	4620      	mov	r0, r4
 800ed4a:	bf14      	ite	ne
 800ed4c:	2400      	movne	r4, #0
 800ed4e:	2402      	moveq	r4, #2
 800ed50:	f7fa fb62 	bl	8009418 <rmw_uxrce_fini_topic_memory>
 800ed54:	4620      	mov	r0, r4
 800ed56:	bd38      	pop	{r3, r4, r5, pc}
 800ed58:	2401      	movs	r4, #1
 800ed5a:	4620      	mov	r0, r4
 800ed5c:	bd38      	pop	{r3, r4, r5, pc}
 800ed5e:	bf00      	nop

0800ed60 <create_node>:
 800ed60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed64:	b083      	sub	sp, #12
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d05f      	beq.n	800ee2a <create_node+0xca>
 800ed6a:	4606      	mov	r6, r0
 800ed6c:	4835      	ldr	r0, [pc, #212]	; (800ee44 <create_node+0xe4>)
 800ed6e:	460f      	mov	r7, r1
 800ed70:	4690      	mov	r8, r2
 800ed72:	461d      	mov	r5, r3
 800ed74:	f7ff fcf8 	bl	800e768 <get_memory>
 800ed78:	2800      	cmp	r0, #0
 800ed7a:	d056      	beq.n	800ee2a <create_node+0xca>
 800ed7c:	6884      	ldr	r4, [r0, #8]
 800ed7e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800ed80:	6123      	str	r3, [r4, #16]
 800ed82:	f7ff fd15 	bl	800e7b0 <rmw_get_implementation_identifier>
 800ed86:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800ed8a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800ed8e:	f8c4 9020 	str.w	r9, [r4, #32]
 800ed92:	4630      	mov	r0, r6
 800ed94:	f7f1 fa46 	bl	8000224 <strlen>
 800ed98:	1c42      	adds	r2, r0, #1
 800ed9a:	2a3c      	cmp	r2, #60	; 0x3c
 800ed9c:	f104 0518 	add.w	r5, r4, #24
 800eda0:	d840      	bhi.n	800ee24 <create_node+0xc4>
 800eda2:	4648      	mov	r0, r9
 800eda4:	4631      	mov	r1, r6
 800eda6:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800edaa:	f003 f888 	bl	8011ebe <memcpy>
 800edae:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800edb2:	4638      	mov	r0, r7
 800edb4:	f7f1 fa36 	bl	8000224 <strlen>
 800edb8:	1c42      	adds	r2, r0, #1
 800edba:	2a3c      	cmp	r2, #60	; 0x3c
 800edbc:	d832      	bhi.n	800ee24 <create_node+0xc4>
 800edbe:	4639      	mov	r1, r7
 800edc0:	4648      	mov	r0, r9
 800edc2:	f003 f87c 	bl	8011ebe <memcpy>
 800edc6:	6923      	ldr	r3, [r4, #16]
 800edc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800edcc:	2101      	movs	r1, #1
 800edce:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 800edd2:	1842      	adds	r2, r0, r1
 800edd4:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 800edd8:	f7fb fe10 	bl	800a9fc <uxr_object_id>
 800eddc:	6160      	str	r0, [r4, #20]
 800edde:	783b      	ldrb	r3, [r7, #0]
 800ede0:	2b2f      	cmp	r3, #47	; 0x2f
 800ede2:	d127      	bne.n	800ee34 <create_node+0xd4>
 800ede4:	787b      	ldrb	r3, [r7, #1]
 800ede6:	bb2b      	cbnz	r3, 800ee34 <create_node+0xd4>
 800ede8:	4a17      	ldr	r2, [pc, #92]	; (800ee48 <create_node+0xe8>)
 800edea:	4818      	ldr	r0, [pc, #96]	; (800ee4c <create_node+0xec>)
 800edec:	4633      	mov	r3, r6
 800edee:	213c      	movs	r1, #60	; 0x3c
 800edf0:	f002 fe96 	bl	8011b20 <sniprintf>
 800edf4:	6920      	ldr	r0, [r4, #16]
 800edf6:	4915      	ldr	r1, [pc, #84]	; (800ee4c <create_node+0xec>)
 800edf8:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800edfc:	9100      	str	r1, [sp, #0]
 800edfe:	2106      	movs	r1, #6
 800ee00:	9101      	str	r1, [sp, #4]
 800ee02:	6811      	ldr	r1, [r2, #0]
 800ee04:	6962      	ldr	r2, [r4, #20]
 800ee06:	fa1f f388 	uxth.w	r3, r8
 800ee0a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ee0e:	f7fb fce7 	bl	800a7e0 <uxr_buffer_create_participant_bin>
 800ee12:	4602      	mov	r2, r0
 800ee14:	6920      	ldr	r0, [r4, #16]
 800ee16:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800ee1a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800ee1e:	f7fa fb57 	bl	80094d0 <run_xrce_session>
 800ee22:	b918      	cbnz	r0, 800ee2c <create_node+0xcc>
 800ee24:	4628      	mov	r0, r5
 800ee26:	f7fa fa87 	bl	8009338 <rmw_uxrce_fini_node_memory>
 800ee2a:	2500      	movs	r5, #0
 800ee2c:	4628      	mov	r0, r5
 800ee2e:	b003      	add	sp, #12
 800ee30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee34:	4a06      	ldr	r2, [pc, #24]	; (800ee50 <create_node+0xf0>)
 800ee36:	9600      	str	r6, [sp, #0]
 800ee38:	463b      	mov	r3, r7
 800ee3a:	213c      	movs	r1, #60	; 0x3c
 800ee3c:	4803      	ldr	r0, [pc, #12]	; (800ee4c <create_node+0xec>)
 800ee3e:	f002 fe6f 	bl	8011b20 <sniprintf>
 800ee42:	e7d7      	b.n	800edf4 <create_node+0x94>
 800ee44:	2000def4 	.word	0x2000def4
 800ee48:	08012e7c 	.word	0x08012e7c
 800ee4c:	2000e034 	.word	0x2000e034
 800ee50:	0801300c 	.word	0x0801300c

0800ee54 <rmw_create_node>:
 800ee54:	b199      	cbz	r1, 800ee7e <rmw_create_node+0x2a>
 800ee56:	780b      	ldrb	r3, [r1, #0]
 800ee58:	468c      	mov	ip, r1
 800ee5a:	b183      	cbz	r3, 800ee7e <rmw_create_node+0x2a>
 800ee5c:	b410      	push	{r4}
 800ee5e:	4614      	mov	r4, r2
 800ee60:	b14a      	cbz	r2, 800ee76 <rmw_create_node+0x22>
 800ee62:	7813      	ldrb	r3, [r2, #0]
 800ee64:	b13b      	cbz	r3, 800ee76 <rmw_create_node+0x22>
 800ee66:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800ee68:	4603      	mov	r3, r0
 800ee6a:	4621      	mov	r1, r4
 800ee6c:	4660      	mov	r0, ip
 800ee6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee72:	f7ff bf75 	b.w	800ed60 <create_node>
 800ee76:	2000      	movs	r0, #0
 800ee78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee7c:	4770      	bx	lr
 800ee7e:	2000      	movs	r0, #0
 800ee80:	4770      	bx	lr
 800ee82:	bf00      	nop

0800ee84 <rmw_destroy_node>:
 800ee84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee86:	b328      	cbz	r0, 800eed4 <rmw_destroy_node+0x50>
 800ee88:	4607      	mov	r7, r0
 800ee8a:	6800      	ldr	r0, [r0, #0]
 800ee8c:	b120      	cbz	r0, 800ee98 <rmw_destroy_node+0x14>
 800ee8e:	4b36      	ldr	r3, [pc, #216]	; (800ef68 <rmw_destroy_node+0xe4>)
 800ee90:	6819      	ldr	r1, [r3, #0]
 800ee92:	f7f1 f9bd 	bl	8000210 <strcmp>
 800ee96:	b9e8      	cbnz	r0, 800eed4 <rmw_destroy_node+0x50>
 800ee98:	687d      	ldr	r5, [r7, #4]
 800ee9a:	b1dd      	cbz	r5, 800eed4 <rmw_destroy_node+0x50>
 800ee9c:	4b33      	ldr	r3, [pc, #204]	; (800ef6c <rmw_destroy_node+0xe8>)
 800ee9e:	681c      	ldr	r4, [r3, #0]
 800eea0:	2c00      	cmp	r4, #0
 800eea2:	d05f      	beq.n	800ef64 <rmw_destroy_node+0xe0>
 800eea4:	2600      	movs	r6, #0
 800eea6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800eeaa:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800eeae:	429d      	cmp	r5, r3
 800eeb0:	d013      	beq.n	800eeda <rmw_destroy_node+0x56>
 800eeb2:	2c00      	cmp	r4, #0
 800eeb4:	d1f7      	bne.n	800eea6 <rmw_destroy_node+0x22>
 800eeb6:	4b2e      	ldr	r3, [pc, #184]	; (800ef70 <rmw_destroy_node+0xec>)
 800eeb8:	681c      	ldr	r4, [r3, #0]
 800eeba:	b1c4      	cbz	r4, 800eeee <rmw_destroy_node+0x6a>
 800eebc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800eec0:	6a0b      	ldr	r3, [r1, #32]
 800eec2:	429d      	cmp	r5, r3
 800eec4:	d1f9      	bne.n	800eeba <rmw_destroy_node+0x36>
 800eec6:	317c      	adds	r1, #124	; 0x7c
 800eec8:	4638      	mov	r0, r7
 800eeca:	f000 f8a1 	bl	800f010 <rmw_destroy_subscription>
 800eece:	2801      	cmp	r0, #1
 800eed0:	4606      	mov	r6, r0
 800eed2:	d1f2      	bne.n	800eeba <rmw_destroy_node+0x36>
 800eed4:	2601      	movs	r6, #1
 800eed6:	4630      	mov	r0, r6
 800eed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eeda:	3184      	adds	r1, #132	; 0x84
 800eedc:	4638      	mov	r0, r7
 800eede:	f7fa f873 	bl	8008fc8 <rmw_destroy_publisher>
 800eee2:	2801      	cmp	r0, #1
 800eee4:	4606      	mov	r6, r0
 800eee6:	d0f5      	beq.n	800eed4 <rmw_destroy_node+0x50>
 800eee8:	2c00      	cmp	r4, #0
 800eeea:	d1dc      	bne.n	800eea6 <rmw_destroy_node+0x22>
 800eeec:	e7e3      	b.n	800eeb6 <rmw_destroy_node+0x32>
 800eeee:	4b21      	ldr	r3, [pc, #132]	; (800ef74 <rmw_destroy_node+0xf0>)
 800eef0:	681c      	ldr	r4, [r3, #0]
 800eef2:	b16c      	cbz	r4, 800ef10 <rmw_destroy_node+0x8c>
 800eef4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800eef8:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800eefa:	429d      	cmp	r5, r3
 800eefc:	d1f9      	bne.n	800eef2 <rmw_destroy_node+0x6e>
 800eefe:	317c      	adds	r1, #124	; 0x7c
 800ef00:	4638      	mov	r0, r7
 800ef02:	f000 f841 	bl	800ef88 <rmw_destroy_service>
 800ef06:	2801      	cmp	r0, #1
 800ef08:	4606      	mov	r6, r0
 800ef0a:	d0e3      	beq.n	800eed4 <rmw_destroy_node+0x50>
 800ef0c:	2c00      	cmp	r4, #0
 800ef0e:	d1f1      	bne.n	800eef4 <rmw_destroy_node+0x70>
 800ef10:	4b19      	ldr	r3, [pc, #100]	; (800ef78 <rmw_destroy_node+0xf4>)
 800ef12:	681c      	ldr	r4, [r3, #0]
 800ef14:	b16c      	cbz	r4, 800ef32 <rmw_destroy_node+0xae>
 800ef16:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800ef1a:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800ef1c:	429d      	cmp	r5, r3
 800ef1e:	d1f9      	bne.n	800ef14 <rmw_destroy_node+0x90>
 800ef20:	317c      	adds	r1, #124	; 0x7c
 800ef22:	4638      	mov	r0, r7
 800ef24:	f002 fa7a 	bl	801141c <rmw_destroy_client>
 800ef28:	2801      	cmp	r0, #1
 800ef2a:	4606      	mov	r6, r0
 800ef2c:	d0d2      	beq.n	800eed4 <rmw_destroy_node+0x50>
 800ef2e:	2c00      	cmp	r4, #0
 800ef30:	d1f1      	bne.n	800ef16 <rmw_destroy_node+0x92>
 800ef32:	6928      	ldr	r0, [r5, #16]
 800ef34:	696a      	ldr	r2, [r5, #20]
 800ef36:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800ef3a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ef3e:	6819      	ldr	r1, [r3, #0]
 800ef40:	f7fb fc02 	bl	800a748 <uxr_buffer_delete_entity>
 800ef44:	4602      	mov	r2, r0
 800ef46:	6928      	ldr	r0, [r5, #16]
 800ef48:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800ef4c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800ef50:	f7fa fabe 	bl	80094d0 <run_xrce_session>
 800ef54:	2800      	cmp	r0, #0
 800ef56:	bf08      	it	eq
 800ef58:	2602      	moveq	r6, #2
 800ef5a:	4638      	mov	r0, r7
 800ef5c:	f7fa f9ec 	bl	8009338 <rmw_uxrce_fini_node_memory>
 800ef60:	4630      	mov	r0, r6
 800ef62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef64:	4626      	mov	r6, r4
 800ef66:	e7a6      	b.n	800eeb6 <rmw_destroy_node+0x32>
 800ef68:	08013464 	.word	0x08013464
 800ef6c:	2000df04 	.word	0x2000df04
 800ef70:	2000df44 	.word	0x2000df44
 800ef74:	2000df14 	.word	0x2000df14
 800ef78:	20009628 	.word	0x20009628

0800ef7c <rmw_node_get_graph_guard_condition>:
 800ef7c:	6843      	ldr	r3, [r0, #4]
 800ef7e:	6918      	ldr	r0, [r3, #16]
 800ef80:	f500 705a 	add.w	r0, r0, #872	; 0x368
 800ef84:	4770      	bx	lr
 800ef86:	bf00      	nop

0800ef88 <rmw_destroy_service>:
 800ef88:	b570      	push	{r4, r5, r6, lr}
 800ef8a:	b128      	cbz	r0, 800ef98 <rmw_destroy_service+0x10>
 800ef8c:	4604      	mov	r4, r0
 800ef8e:	6800      	ldr	r0, [r0, #0]
 800ef90:	460d      	mov	r5, r1
 800ef92:	f7fa fb1d 	bl	80095d0 <is_uxrce_rmw_identifier_valid>
 800ef96:	b910      	cbnz	r0, 800ef9e <rmw_destroy_service+0x16>
 800ef98:	2401      	movs	r4, #1
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	bd70      	pop	{r4, r5, r6, pc}
 800ef9e:	6863      	ldr	r3, [r4, #4]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d0f9      	beq.n	800ef98 <rmw_destroy_service+0x10>
 800efa4:	2d00      	cmp	r5, #0
 800efa6:	d0f7      	beq.n	800ef98 <rmw_destroy_service+0x10>
 800efa8:	6828      	ldr	r0, [r5, #0]
 800efaa:	f7fa fb11 	bl	80095d0 <is_uxrce_rmw_identifier_valid>
 800efae:	2800      	cmp	r0, #0
 800efb0:	d0f2      	beq.n	800ef98 <rmw_destroy_service+0x10>
 800efb2:	686e      	ldr	r6, [r5, #4]
 800efb4:	2e00      	cmp	r6, #0
 800efb6:	d0ef      	beq.n	800ef98 <rmw_destroy_service+0x10>
 800efb8:	6864      	ldr	r4, [r4, #4]
 800efba:	6932      	ldr	r2, [r6, #16]
 800efbc:	6920      	ldr	r0, [r4, #16]
 800efbe:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800efc2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800efc6:	6819      	ldr	r1, [r3, #0]
 800efc8:	f001 f882 	bl	80100d0 <uxr_buffer_cancel_data>
 800efcc:	4602      	mov	r2, r0
 800efce:	6920      	ldr	r0, [r4, #16]
 800efd0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800efd4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800efd8:	f7fa fa7a 	bl	80094d0 <run_xrce_session>
 800efdc:	6920      	ldr	r0, [r4, #16]
 800efde:	6932      	ldr	r2, [r6, #16]
 800efe0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800efe4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800efe8:	6819      	ldr	r1, [r3, #0]
 800efea:	f7fb fbad 	bl	800a748 <uxr_buffer_delete_entity>
 800efee:	4602      	mov	r2, r0
 800eff0:	6920      	ldr	r0, [r4, #16]
 800eff2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800eff6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800effa:	f7fa fa69 	bl	80094d0 <run_xrce_session>
 800effe:	2800      	cmp	r0, #0
 800f000:	4628      	mov	r0, r5
 800f002:	bf14      	ite	ne
 800f004:	2400      	movne	r4, #0
 800f006:	2402      	moveq	r4, #2
 800f008:	f7fa f9da 	bl	80093c0 <rmw_uxrce_fini_service_memory>
 800f00c:	e7c5      	b.n	800ef9a <rmw_destroy_service+0x12>
 800f00e:	bf00      	nop

0800f010 <rmw_destroy_subscription>:
 800f010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f012:	b128      	cbz	r0, 800f020 <rmw_destroy_subscription+0x10>
 800f014:	4604      	mov	r4, r0
 800f016:	6800      	ldr	r0, [r0, #0]
 800f018:	460d      	mov	r5, r1
 800f01a:	f7fa fad9 	bl	80095d0 <is_uxrce_rmw_identifier_valid>
 800f01e:	b910      	cbnz	r0, 800f026 <rmw_destroy_subscription+0x16>
 800f020:	2401      	movs	r4, #1
 800f022:	4620      	mov	r0, r4
 800f024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f026:	6863      	ldr	r3, [r4, #4]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d0f9      	beq.n	800f020 <rmw_destroy_subscription+0x10>
 800f02c:	2d00      	cmp	r5, #0
 800f02e:	d0f7      	beq.n	800f020 <rmw_destroy_subscription+0x10>
 800f030:	6828      	ldr	r0, [r5, #0]
 800f032:	f7fa facd 	bl	80095d0 <is_uxrce_rmw_identifier_valid>
 800f036:	2800      	cmp	r0, #0
 800f038:	d0f2      	beq.n	800f020 <rmw_destroy_subscription+0x10>
 800f03a:	686c      	ldr	r4, [r5, #4]
 800f03c:	2c00      	cmp	r4, #0
 800f03e:	d0ef      	beq.n	800f020 <rmw_destroy_subscription+0x10>
 800f040:	6a26      	ldr	r6, [r4, #32]
 800f042:	6962      	ldr	r2, [r4, #20]
 800f044:	6930      	ldr	r0, [r6, #16]
 800f046:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f04a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f04e:	6819      	ldr	r1, [r3, #0]
 800f050:	f001 f83e 	bl	80100d0 <uxr_buffer_cancel_data>
 800f054:	4602      	mov	r2, r0
 800f056:	6930      	ldr	r0, [r6, #16]
 800f058:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f05c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f060:	f7fa fa36 	bl	80094d0 <run_xrce_session>
 800f064:	69e0      	ldr	r0, [r4, #28]
 800f066:	f7ff fe59 	bl	800ed1c <destroy_topic>
 800f06a:	6a23      	ldr	r3, [r4, #32]
 800f06c:	6962      	ldr	r2, [r4, #20]
 800f06e:	6918      	ldr	r0, [r3, #16]
 800f070:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f074:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f078:	6819      	ldr	r1, [r3, #0]
 800f07a:	f7fb fb65 	bl	800a748 <uxr_buffer_delete_entity>
 800f07e:	6a23      	ldr	r3, [r4, #32]
 800f080:	6922      	ldr	r2, [r4, #16]
 800f082:	691b      	ldr	r3, [r3, #16]
 800f084:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800f088:	4604      	mov	r4, r0
 800f08a:	6809      	ldr	r1, [r1, #0]
 800f08c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800f090:	f7fb fb5a 	bl	800a748 <uxr_buffer_delete_entity>
 800f094:	6937      	ldr	r7, [r6, #16]
 800f096:	4622      	mov	r2, r4
 800f098:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800f09c:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 800f0a0:	4604      	mov	r4, r0
 800f0a2:	4638      	mov	r0, r7
 800f0a4:	f7fa fa14 	bl	80094d0 <run_xrce_session>
 800f0a8:	6936      	ldr	r6, [r6, #16]
 800f0aa:	4622      	mov	r2, r4
 800f0ac:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800f0b0:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800f0b4:	4604      	mov	r4, r0
 800f0b6:	4630      	mov	r0, r6
 800f0b8:	f7fa fa0a 	bl	80094d0 <run_xrce_session>
 800f0bc:	b12c      	cbz	r4, 800f0ca <rmw_destroy_subscription+0xba>
 800f0be:	b120      	cbz	r0, 800f0ca <rmw_destroy_subscription+0xba>
 800f0c0:	2400      	movs	r4, #0
 800f0c2:	4628      	mov	r0, r5
 800f0c4:	f7fa f966 	bl	8009394 <rmw_uxrce_fini_subscription_memory>
 800f0c8:	e7ab      	b.n	800f022 <rmw_destroy_subscription+0x12>
 800f0ca:	2402      	movs	r4, #2
 800f0cc:	e7f9      	b.n	800f0c2 <rmw_destroy_subscription+0xb2>
 800f0ce:	bf00      	nop

0800f0d0 <rmw_uxrce_transport_init>:
 800f0d0:	b508      	push	{r3, lr}
 800f0d2:	b108      	cbz	r0, 800f0d8 <rmw_uxrce_transport_init+0x8>
 800f0d4:	f100 0210 	add.w	r2, r0, #16
 800f0d8:	b139      	cbz	r1, 800f0ea <rmw_uxrce_transport_init+0x1a>
 800f0da:	6949      	ldr	r1, [r1, #20]
 800f0dc:	4610      	mov	r0, r2
 800f0de:	f000 fa77 	bl	800f5d0 <uxr_init_custom_transport>
 800f0e2:	f080 0001 	eor.w	r0, r0, #1
 800f0e6:	b2c0      	uxtb	r0, r0
 800f0e8:	bd08      	pop	{r3, pc}
 800f0ea:	4b04      	ldr	r3, [pc, #16]	; (800f0fc <rmw_uxrce_transport_init+0x2c>)
 800f0ec:	4610      	mov	r0, r2
 800f0ee:	6859      	ldr	r1, [r3, #4]
 800f0f0:	f000 fa6e 	bl	800f5d0 <uxr_init_custom_transport>
 800f0f4:	f080 0001 	eor.w	r0, r0, #1
 800f0f8:	b2c0      	uxtb	r0, r0
 800f0fa:	bd08      	pop	{r3, pc}
 800f0fc:	2000960c 	.word	0x2000960c

0800f100 <rmw_uros_epoch_nanos>:
 800f100:	4b05      	ldr	r3, [pc, #20]	; (800f118 <rmw_uros_epoch_nanos+0x18>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	b123      	cbz	r3, 800f110 <rmw_uros_epoch_nanos+0x10>
 800f106:	6898      	ldr	r0, [r3, #8]
 800f108:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f10c:	f7fb bdba 	b.w	800ac84 <uxr_epoch_nanos>
 800f110:	2000      	movs	r0, #0
 800f112:	2100      	movs	r1, #0
 800f114:	4770      	bx	lr
 800f116:	bf00      	nop
 800f118:	2000df24 	.word	0x2000df24

0800f11c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800f11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f120:	6805      	ldr	r5, [r0, #0]
 800f122:	4604      	mov	r4, r0
 800f124:	4628      	mov	r0, r5
 800f126:	460e      	mov	r6, r1
 800f128:	f7f1 f872 	bl	8000210 <strcmp>
 800f12c:	b1c8      	cbz	r0, 800f162 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800f12e:	4b11      	ldr	r3, [pc, #68]	; (800f174 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	429d      	cmp	r5, r3
 800f134:	d112      	bne.n	800f15c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800f136:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f13a:	f8d8 4000 	ldr.w	r4, [r8]
 800f13e:	b16c      	cbz	r4, 800f15c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800f140:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f144:	2700      	movs	r7, #0
 800f146:	3d04      	subs	r5, #4
 800f148:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800f14c:	4631      	mov	r1, r6
 800f14e:	f7f1 f85f 	bl	8000210 <strcmp>
 800f152:	00bb      	lsls	r3, r7, #2
 800f154:	b140      	cbz	r0, 800f168 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800f156:	3701      	adds	r7, #1
 800f158:	42bc      	cmp	r4, r7
 800f15a:	d1f5      	bne.n	800f148 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800f15c:	2000      	movs	r0, #0
 800f15e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f162:	4620      	mov	r0, r4
 800f164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f168:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f16c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f170:	58d3      	ldr	r3, [r2, r3]
 800f172:	4718      	bx	r3
 800f174:	200000ac 	.word	0x200000ac

0800f178 <std_msgs__msg__Int32__init>:
 800f178:	3800      	subs	r0, #0
 800f17a:	bf18      	it	ne
 800f17c:	2001      	movne	r0, #1
 800f17e:	4770      	bx	lr

0800f180 <std_msgs__msg__Int32__fini>:
 800f180:	4770      	bx	lr
 800f182:	bf00      	nop

0800f184 <ucdr_serialize_endian_array_char>:
 800f184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f188:	4619      	mov	r1, r3
 800f18a:	461f      	mov	r7, r3
 800f18c:	4605      	mov	r5, r0
 800f18e:	4690      	mov	r8, r2
 800f190:	f7fb fa16 	bl	800a5c0 <ucdr_check_buffer_available_for>
 800f194:	b9e0      	cbnz	r0, 800f1d0 <ucdr_serialize_endian_array_char+0x4c>
 800f196:	463e      	mov	r6, r7
 800f198:	e009      	b.n	800f1ae <ucdr_serialize_endian_array_char+0x2a>
 800f19a:	68a8      	ldr	r0, [r5, #8]
 800f19c:	f002 fe8f 	bl	8011ebe <memcpy>
 800f1a0:	68ab      	ldr	r3, [r5, #8]
 800f1a2:	6928      	ldr	r0, [r5, #16]
 800f1a4:	4423      	add	r3, r4
 800f1a6:	4420      	add	r0, r4
 800f1a8:	1b36      	subs	r6, r6, r4
 800f1aa:	60ab      	str	r3, [r5, #8]
 800f1ac:	6128      	str	r0, [r5, #16]
 800f1ae:	4631      	mov	r1, r6
 800f1b0:	2201      	movs	r2, #1
 800f1b2:	4628      	mov	r0, r5
 800f1b4:	f7fb fa8c 	bl	800a6d0 <ucdr_check_final_buffer_behavior_array>
 800f1b8:	1bb9      	subs	r1, r7, r6
 800f1ba:	4441      	add	r1, r8
 800f1bc:	4604      	mov	r4, r0
 800f1be:	4602      	mov	r2, r0
 800f1c0:	2800      	cmp	r0, #0
 800f1c2:	d1ea      	bne.n	800f19a <ucdr_serialize_endian_array_char+0x16>
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	7da8      	ldrb	r0, [r5, #22]
 800f1c8:	756b      	strb	r3, [r5, #21]
 800f1ca:	4058      	eors	r0, r3
 800f1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1d0:	463a      	mov	r2, r7
 800f1d2:	68a8      	ldr	r0, [r5, #8]
 800f1d4:	4641      	mov	r1, r8
 800f1d6:	f002 fe72 	bl	8011ebe <memcpy>
 800f1da:	68aa      	ldr	r2, [r5, #8]
 800f1dc:	692b      	ldr	r3, [r5, #16]
 800f1de:	443a      	add	r2, r7
 800f1e0:	443b      	add	r3, r7
 800f1e2:	60aa      	str	r2, [r5, #8]
 800f1e4:	612b      	str	r3, [r5, #16]
 800f1e6:	e7ed      	b.n	800f1c4 <ucdr_serialize_endian_array_char+0x40>

0800f1e8 <ucdr_deserialize_endian_array_char>:
 800f1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1ec:	4619      	mov	r1, r3
 800f1ee:	461f      	mov	r7, r3
 800f1f0:	4605      	mov	r5, r0
 800f1f2:	4690      	mov	r8, r2
 800f1f4:	f7fb f9e4 	bl	800a5c0 <ucdr_check_buffer_available_for>
 800f1f8:	b9e0      	cbnz	r0, 800f234 <ucdr_deserialize_endian_array_char+0x4c>
 800f1fa:	463e      	mov	r6, r7
 800f1fc:	e009      	b.n	800f212 <ucdr_deserialize_endian_array_char+0x2a>
 800f1fe:	68a9      	ldr	r1, [r5, #8]
 800f200:	f002 fe5d 	bl	8011ebe <memcpy>
 800f204:	68ab      	ldr	r3, [r5, #8]
 800f206:	6928      	ldr	r0, [r5, #16]
 800f208:	4423      	add	r3, r4
 800f20a:	4420      	add	r0, r4
 800f20c:	1b36      	subs	r6, r6, r4
 800f20e:	60ab      	str	r3, [r5, #8]
 800f210:	6128      	str	r0, [r5, #16]
 800f212:	2201      	movs	r2, #1
 800f214:	4631      	mov	r1, r6
 800f216:	4628      	mov	r0, r5
 800f218:	f7fb fa5a 	bl	800a6d0 <ucdr_check_final_buffer_behavior_array>
 800f21c:	4604      	mov	r4, r0
 800f21e:	1bb8      	subs	r0, r7, r6
 800f220:	4440      	add	r0, r8
 800f222:	4622      	mov	r2, r4
 800f224:	2c00      	cmp	r4, #0
 800f226:	d1ea      	bne.n	800f1fe <ucdr_deserialize_endian_array_char+0x16>
 800f228:	2301      	movs	r3, #1
 800f22a:	7da8      	ldrb	r0, [r5, #22]
 800f22c:	756b      	strb	r3, [r5, #21]
 800f22e:	4058      	eors	r0, r3
 800f230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f234:	463a      	mov	r2, r7
 800f236:	68a9      	ldr	r1, [r5, #8]
 800f238:	4640      	mov	r0, r8
 800f23a:	f002 fe40 	bl	8011ebe <memcpy>
 800f23e:	68aa      	ldr	r2, [r5, #8]
 800f240:	692b      	ldr	r3, [r5, #16]
 800f242:	443a      	add	r2, r7
 800f244:	443b      	add	r3, r7
 800f246:	60aa      	str	r2, [r5, #8]
 800f248:	612b      	str	r3, [r5, #16]
 800f24a:	e7ed      	b.n	800f228 <ucdr_deserialize_endian_array_char+0x40>

0800f24c <ucdr_serialize_array_uint8_t>:
 800f24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f250:	4688      	mov	r8, r1
 800f252:	4611      	mov	r1, r2
 800f254:	4617      	mov	r7, r2
 800f256:	4605      	mov	r5, r0
 800f258:	f7fb f9b2 	bl	800a5c0 <ucdr_check_buffer_available_for>
 800f25c:	b9e0      	cbnz	r0, 800f298 <ucdr_serialize_array_uint8_t+0x4c>
 800f25e:	463e      	mov	r6, r7
 800f260:	e009      	b.n	800f276 <ucdr_serialize_array_uint8_t+0x2a>
 800f262:	68a8      	ldr	r0, [r5, #8]
 800f264:	f002 fe2b 	bl	8011ebe <memcpy>
 800f268:	68aa      	ldr	r2, [r5, #8]
 800f26a:	692b      	ldr	r3, [r5, #16]
 800f26c:	4422      	add	r2, r4
 800f26e:	4423      	add	r3, r4
 800f270:	1b36      	subs	r6, r6, r4
 800f272:	60aa      	str	r2, [r5, #8]
 800f274:	612b      	str	r3, [r5, #16]
 800f276:	4631      	mov	r1, r6
 800f278:	2201      	movs	r2, #1
 800f27a:	4628      	mov	r0, r5
 800f27c:	f7fb fa28 	bl	800a6d0 <ucdr_check_final_buffer_behavior_array>
 800f280:	1bb9      	subs	r1, r7, r6
 800f282:	4441      	add	r1, r8
 800f284:	4604      	mov	r4, r0
 800f286:	4602      	mov	r2, r0
 800f288:	2800      	cmp	r0, #0
 800f28a:	d1ea      	bne.n	800f262 <ucdr_serialize_array_uint8_t+0x16>
 800f28c:	2301      	movs	r3, #1
 800f28e:	7da8      	ldrb	r0, [r5, #22]
 800f290:	756b      	strb	r3, [r5, #21]
 800f292:	4058      	eors	r0, r3
 800f294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f298:	463a      	mov	r2, r7
 800f29a:	68a8      	ldr	r0, [r5, #8]
 800f29c:	4641      	mov	r1, r8
 800f29e:	f002 fe0e 	bl	8011ebe <memcpy>
 800f2a2:	68aa      	ldr	r2, [r5, #8]
 800f2a4:	692b      	ldr	r3, [r5, #16]
 800f2a6:	443a      	add	r2, r7
 800f2a8:	443b      	add	r3, r7
 800f2aa:	60aa      	str	r2, [r5, #8]
 800f2ac:	612b      	str	r3, [r5, #16]
 800f2ae:	e7ed      	b.n	800f28c <ucdr_serialize_array_uint8_t+0x40>

0800f2b0 <ucdr_serialize_endian_array_uint8_t>:
 800f2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2b4:	4619      	mov	r1, r3
 800f2b6:	461f      	mov	r7, r3
 800f2b8:	4605      	mov	r5, r0
 800f2ba:	4690      	mov	r8, r2
 800f2bc:	f7fb f980 	bl	800a5c0 <ucdr_check_buffer_available_for>
 800f2c0:	b9e0      	cbnz	r0, 800f2fc <ucdr_serialize_endian_array_uint8_t+0x4c>
 800f2c2:	463e      	mov	r6, r7
 800f2c4:	e009      	b.n	800f2da <ucdr_serialize_endian_array_uint8_t+0x2a>
 800f2c6:	68a8      	ldr	r0, [r5, #8]
 800f2c8:	f002 fdf9 	bl	8011ebe <memcpy>
 800f2cc:	68ab      	ldr	r3, [r5, #8]
 800f2ce:	6928      	ldr	r0, [r5, #16]
 800f2d0:	4423      	add	r3, r4
 800f2d2:	4420      	add	r0, r4
 800f2d4:	1b36      	subs	r6, r6, r4
 800f2d6:	60ab      	str	r3, [r5, #8]
 800f2d8:	6128      	str	r0, [r5, #16]
 800f2da:	4631      	mov	r1, r6
 800f2dc:	2201      	movs	r2, #1
 800f2de:	4628      	mov	r0, r5
 800f2e0:	f7fb f9f6 	bl	800a6d0 <ucdr_check_final_buffer_behavior_array>
 800f2e4:	1bb9      	subs	r1, r7, r6
 800f2e6:	4441      	add	r1, r8
 800f2e8:	4604      	mov	r4, r0
 800f2ea:	4602      	mov	r2, r0
 800f2ec:	2800      	cmp	r0, #0
 800f2ee:	d1ea      	bne.n	800f2c6 <ucdr_serialize_endian_array_uint8_t+0x16>
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	7da8      	ldrb	r0, [r5, #22]
 800f2f4:	756b      	strb	r3, [r5, #21]
 800f2f6:	4058      	eors	r0, r3
 800f2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2fc:	463a      	mov	r2, r7
 800f2fe:	68a8      	ldr	r0, [r5, #8]
 800f300:	4641      	mov	r1, r8
 800f302:	f002 fddc 	bl	8011ebe <memcpy>
 800f306:	68aa      	ldr	r2, [r5, #8]
 800f308:	692b      	ldr	r3, [r5, #16]
 800f30a:	443a      	add	r2, r7
 800f30c:	443b      	add	r3, r7
 800f30e:	60aa      	str	r2, [r5, #8]
 800f310:	612b      	str	r3, [r5, #16]
 800f312:	e7ed      	b.n	800f2f0 <ucdr_serialize_endian_array_uint8_t+0x40>

0800f314 <ucdr_deserialize_array_uint8_t>:
 800f314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f318:	4688      	mov	r8, r1
 800f31a:	4611      	mov	r1, r2
 800f31c:	4617      	mov	r7, r2
 800f31e:	4605      	mov	r5, r0
 800f320:	f7fb f94e 	bl	800a5c0 <ucdr_check_buffer_available_for>
 800f324:	b9e0      	cbnz	r0, 800f360 <ucdr_deserialize_array_uint8_t+0x4c>
 800f326:	463e      	mov	r6, r7
 800f328:	e009      	b.n	800f33e <ucdr_deserialize_array_uint8_t+0x2a>
 800f32a:	68a9      	ldr	r1, [r5, #8]
 800f32c:	f002 fdc7 	bl	8011ebe <memcpy>
 800f330:	68aa      	ldr	r2, [r5, #8]
 800f332:	692b      	ldr	r3, [r5, #16]
 800f334:	4422      	add	r2, r4
 800f336:	4423      	add	r3, r4
 800f338:	1b36      	subs	r6, r6, r4
 800f33a:	60aa      	str	r2, [r5, #8]
 800f33c:	612b      	str	r3, [r5, #16]
 800f33e:	2201      	movs	r2, #1
 800f340:	4631      	mov	r1, r6
 800f342:	4628      	mov	r0, r5
 800f344:	f7fb f9c4 	bl	800a6d0 <ucdr_check_final_buffer_behavior_array>
 800f348:	4604      	mov	r4, r0
 800f34a:	1bb8      	subs	r0, r7, r6
 800f34c:	4440      	add	r0, r8
 800f34e:	4622      	mov	r2, r4
 800f350:	2c00      	cmp	r4, #0
 800f352:	d1ea      	bne.n	800f32a <ucdr_deserialize_array_uint8_t+0x16>
 800f354:	2301      	movs	r3, #1
 800f356:	7da8      	ldrb	r0, [r5, #22]
 800f358:	756b      	strb	r3, [r5, #21]
 800f35a:	4058      	eors	r0, r3
 800f35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f360:	463a      	mov	r2, r7
 800f362:	68a9      	ldr	r1, [r5, #8]
 800f364:	4640      	mov	r0, r8
 800f366:	f002 fdaa 	bl	8011ebe <memcpy>
 800f36a:	68aa      	ldr	r2, [r5, #8]
 800f36c:	692b      	ldr	r3, [r5, #16]
 800f36e:	443a      	add	r2, r7
 800f370:	443b      	add	r3, r7
 800f372:	60aa      	str	r2, [r5, #8]
 800f374:	612b      	str	r3, [r5, #16]
 800f376:	e7ed      	b.n	800f354 <ucdr_deserialize_array_uint8_t+0x40>

0800f378 <ucdr_deserialize_endian_array_uint8_t>:
 800f378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f37c:	4619      	mov	r1, r3
 800f37e:	461f      	mov	r7, r3
 800f380:	4605      	mov	r5, r0
 800f382:	4690      	mov	r8, r2
 800f384:	f7fb f91c 	bl	800a5c0 <ucdr_check_buffer_available_for>
 800f388:	b9e0      	cbnz	r0, 800f3c4 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800f38a:	463e      	mov	r6, r7
 800f38c:	e009      	b.n	800f3a2 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800f38e:	68a9      	ldr	r1, [r5, #8]
 800f390:	f002 fd95 	bl	8011ebe <memcpy>
 800f394:	68ab      	ldr	r3, [r5, #8]
 800f396:	6928      	ldr	r0, [r5, #16]
 800f398:	4423      	add	r3, r4
 800f39a:	4420      	add	r0, r4
 800f39c:	1b36      	subs	r6, r6, r4
 800f39e:	60ab      	str	r3, [r5, #8]
 800f3a0:	6128      	str	r0, [r5, #16]
 800f3a2:	2201      	movs	r2, #1
 800f3a4:	4631      	mov	r1, r6
 800f3a6:	4628      	mov	r0, r5
 800f3a8:	f7fb f992 	bl	800a6d0 <ucdr_check_final_buffer_behavior_array>
 800f3ac:	4604      	mov	r4, r0
 800f3ae:	1bb8      	subs	r0, r7, r6
 800f3b0:	4440      	add	r0, r8
 800f3b2:	4622      	mov	r2, r4
 800f3b4:	2c00      	cmp	r4, #0
 800f3b6:	d1ea      	bne.n	800f38e <ucdr_deserialize_endian_array_uint8_t+0x16>
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	7da8      	ldrb	r0, [r5, #22]
 800f3bc:	756b      	strb	r3, [r5, #21]
 800f3be:	4058      	eors	r0, r3
 800f3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3c4:	463a      	mov	r2, r7
 800f3c6:	68a9      	ldr	r1, [r5, #8]
 800f3c8:	4640      	mov	r0, r8
 800f3ca:	f002 fd78 	bl	8011ebe <memcpy>
 800f3ce:	68aa      	ldr	r2, [r5, #8]
 800f3d0:	692b      	ldr	r3, [r5, #16]
 800f3d2:	443a      	add	r2, r7
 800f3d4:	443b      	add	r3, r7
 800f3d6:	60aa      	str	r2, [r5, #8]
 800f3d8:	612b      	str	r3, [r5, #16]
 800f3da:	e7ed      	b.n	800f3b8 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800f3dc <ucdr_serialize_sequence_char>:
 800f3dc:	b570      	push	{r4, r5, r6, lr}
 800f3de:	4615      	mov	r5, r2
 800f3e0:	460e      	mov	r6, r1
 800f3e2:	7d01      	ldrb	r1, [r0, #20]
 800f3e4:	4604      	mov	r4, r0
 800f3e6:	f7fa fc41 	bl	8009c6c <ucdr_serialize_endian_uint32_t>
 800f3ea:	b90d      	cbnz	r5, 800f3f0 <ucdr_serialize_sequence_char+0x14>
 800f3ec:	2001      	movs	r0, #1
 800f3ee:	bd70      	pop	{r4, r5, r6, pc}
 800f3f0:	7d21      	ldrb	r1, [r4, #20]
 800f3f2:	462b      	mov	r3, r5
 800f3f4:	4632      	mov	r2, r6
 800f3f6:	4620      	mov	r0, r4
 800f3f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3fc:	f7ff bec2 	b.w	800f184 <ucdr_serialize_endian_array_char>

0800f400 <ucdr_deserialize_sequence_char>:
 800f400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f404:	461d      	mov	r5, r3
 800f406:	4616      	mov	r6, r2
 800f408:	460f      	mov	r7, r1
 800f40a:	461a      	mov	r2, r3
 800f40c:	7d01      	ldrb	r1, [r0, #20]
 800f40e:	4604      	mov	r4, r0
 800f410:	f7fa fd54 	bl	8009ebc <ucdr_deserialize_endian_uint32_t>
 800f414:	682b      	ldr	r3, [r5, #0]
 800f416:	429e      	cmp	r6, r3
 800f418:	bf3c      	itt	cc
 800f41a:	2201      	movcc	r2, #1
 800f41c:	75a2      	strbcc	r2, [r4, #22]
 800f41e:	b913      	cbnz	r3, 800f426 <ucdr_deserialize_sequence_char+0x26>
 800f420:	2001      	movs	r0, #1
 800f422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f426:	7d21      	ldrb	r1, [r4, #20]
 800f428:	463a      	mov	r2, r7
 800f42a:	4620      	mov	r0, r4
 800f42c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f430:	f7ff beda 	b.w	800f1e8 <ucdr_deserialize_endian_array_char>

0800f434 <ucdr_serialize_sequence_uint8_t>:
 800f434:	b570      	push	{r4, r5, r6, lr}
 800f436:	4615      	mov	r5, r2
 800f438:	460e      	mov	r6, r1
 800f43a:	7d01      	ldrb	r1, [r0, #20]
 800f43c:	4604      	mov	r4, r0
 800f43e:	f7fa fc15 	bl	8009c6c <ucdr_serialize_endian_uint32_t>
 800f442:	b90d      	cbnz	r5, 800f448 <ucdr_serialize_sequence_uint8_t+0x14>
 800f444:	2001      	movs	r0, #1
 800f446:	bd70      	pop	{r4, r5, r6, pc}
 800f448:	7d21      	ldrb	r1, [r4, #20]
 800f44a:	462b      	mov	r3, r5
 800f44c:	4632      	mov	r2, r6
 800f44e:	4620      	mov	r0, r4
 800f450:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f454:	f7ff bf2c 	b.w	800f2b0 <ucdr_serialize_endian_array_uint8_t>

0800f458 <ucdr_deserialize_sequence_uint8_t>:
 800f458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f45c:	461d      	mov	r5, r3
 800f45e:	4616      	mov	r6, r2
 800f460:	460f      	mov	r7, r1
 800f462:	461a      	mov	r2, r3
 800f464:	7d01      	ldrb	r1, [r0, #20]
 800f466:	4604      	mov	r4, r0
 800f468:	f7fa fd28 	bl	8009ebc <ucdr_deserialize_endian_uint32_t>
 800f46c:	682b      	ldr	r3, [r5, #0]
 800f46e:	429e      	cmp	r6, r3
 800f470:	bf3c      	itt	cc
 800f472:	2201      	movcc	r2, #1
 800f474:	75a2      	strbcc	r2, [r4, #22]
 800f476:	b913      	cbnz	r3, 800f47e <ucdr_deserialize_sequence_uint8_t+0x26>
 800f478:	2001      	movs	r0, #1
 800f47a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f47e:	7d21      	ldrb	r1, [r4, #20]
 800f480:	463a      	mov	r2, r7
 800f482:	4620      	mov	r0, r4
 800f484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f488:	f7ff bf76 	b.w	800f378 <ucdr_deserialize_endian_array_uint8_t>

0800f48c <ucdr_serialize_string>:
 800f48c:	b510      	push	{r4, lr}
 800f48e:	b082      	sub	sp, #8
 800f490:	4604      	mov	r4, r0
 800f492:	4608      	mov	r0, r1
 800f494:	9101      	str	r1, [sp, #4]
 800f496:	f7f0 fec5 	bl	8000224 <strlen>
 800f49a:	9901      	ldr	r1, [sp, #4]
 800f49c:	1c42      	adds	r2, r0, #1
 800f49e:	4620      	mov	r0, r4
 800f4a0:	b002      	add	sp, #8
 800f4a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4a6:	f7ff bf99 	b.w	800f3dc <ucdr_serialize_sequence_char>
 800f4aa:	bf00      	nop

0800f4ac <ucdr_deserialize_string>:
 800f4ac:	b500      	push	{lr}
 800f4ae:	b083      	sub	sp, #12
 800f4b0:	ab01      	add	r3, sp, #4
 800f4b2:	f7ff ffa5 	bl	800f400 <ucdr_deserialize_sequence_char>
 800f4b6:	b003      	add	sp, #12
 800f4b8:	f85d fb04 	ldr.w	pc, [sp], #4

0800f4bc <get_custom_error>:
 800f4bc:	4b01      	ldr	r3, [pc, #4]	; (800f4c4 <get_custom_error+0x8>)
 800f4be:	7818      	ldrb	r0, [r3, #0]
 800f4c0:	4770      	bx	lr
 800f4c2:	bf00      	nop
 800f4c4:	2000e070 	.word	0x2000e070

0800f4c8 <recv_custom_msg>:
 800f4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4cc:	4693      	mov	fp, r2
 800f4ce:	b089      	sub	sp, #36	; 0x24
 800f4d0:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 800f4d4:	9305      	str	r3, [sp, #20]
 800f4d6:	468a      	mov	sl, r1
 800f4d8:	2100      	movs	r1, #0
 800f4da:	4604      	mov	r4, r0
 800f4dc:	f88d 101e 	strb.w	r1, [sp, #30]
 800f4e0:	b322      	cbz	r2, 800f52c <recv_custom_msg+0x64>
 800f4e2:	f200 2902 	addw	r9, r0, #514	; 0x202
 800f4e6:	f10d 081f 	add.w	r8, sp, #31
 800f4ea:	af05      	add	r7, sp, #20
 800f4ec:	f10d 061e 	add.w	r6, sp, #30
 800f4f0:	f44f 7500 	mov.w	r5, #512	; 0x200
 800f4f4:	e002      	b.n	800f4fc <recv_custom_msg+0x34>
 800f4f6:	9b05      	ldr	r3, [sp, #20]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	dd0f      	ble.n	800f51c <recv_custom_msg+0x54>
 800f4fc:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 800f500:	4623      	mov	r3, r4
 800f502:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800f506:	e9cd 5600 	strd	r5, r6, [sp]
 800f50a:	4622      	mov	r2, r4
 800f50c:	4648      	mov	r0, r9
 800f50e:	f001 f8f3 	bl	80106f8 <uxr_read_framed_msg>
 800f512:	2800      	cmp	r0, #0
 800f514:	d0ef      	beq.n	800f4f6 <recv_custom_msg+0x2e>
 800f516:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800f51a:	b1b3      	cbz	r3, 800f54a <recv_custom_msg+0x82>
 800f51c:	4b0f      	ldr	r3, [pc, #60]	; (800f55c <recv_custom_msg+0x94>)
 800f51e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800f522:	701a      	strb	r2, [r3, #0]
 800f524:	2000      	movs	r0, #0
 800f526:	b009      	add	sp, #36	; 0x24
 800f528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f52c:	f10d 021f 	add.w	r2, sp, #31
 800f530:	9200      	str	r2, [sp, #0]
 800f532:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 800f536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f53a:	4601      	mov	r1, r0
 800f53c:	47a8      	blx	r5
 800f53e:	2800      	cmp	r0, #0
 800f540:	d0ec      	beq.n	800f51c <recv_custom_msg+0x54>
 800f542:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d1e8      	bne.n	800f51c <recv_custom_msg+0x54>
 800f54a:	f8cb 0000 	str.w	r0, [fp]
 800f54e:	2001      	movs	r0, #1
 800f550:	f8ca 4000 	str.w	r4, [sl]
 800f554:	b009      	add	sp, #36	; 0x24
 800f556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f55a:	bf00      	nop
 800f55c:	2000e070 	.word	0x2000e070

0800f560 <send_custom_msg>:
 800f560:	b530      	push	{r4, r5, lr}
 800f562:	f890 4200 	ldrb.w	r4, [r0, #512]	; 0x200
 800f566:	b087      	sub	sp, #28
 800f568:	4615      	mov	r5, r2
 800f56a:	b974      	cbnz	r4, 800f58a <send_custom_msg+0x2a>
 800f56c:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 800f570:	f10d 0317 	add.w	r3, sp, #23
 800f574:	47a0      	blx	r4
 800f576:	b108      	cbz	r0, 800f57c <send_custom_msg+0x1c>
 800f578:	42a8      	cmp	r0, r5
 800f57a:	d015      	beq.n	800f5a8 <send_custom_msg+0x48>
 800f57c:	4b0c      	ldr	r3, [pc, #48]	; (800f5b0 <send_custom_msg+0x50>)
 800f57e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800f582:	701a      	strb	r2, [r3, #0]
 800f584:	2000      	movs	r0, #0
 800f586:	b007      	add	sp, #28
 800f588:	bd30      	pop	{r4, r5, pc}
 800f58a:	460b      	mov	r3, r1
 800f58c:	2200      	movs	r2, #0
 800f58e:	f10d 0117 	add.w	r1, sp, #23
 800f592:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800f596:	4602      	mov	r2, r0
 800f598:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 800f59c:	9500      	str	r5, [sp, #0]
 800f59e:	f200 2002 	addw	r0, r0, #514	; 0x202
 800f5a2:	f000 feb1 	bl	8010308 <uxr_write_framed_msg>
 800f5a6:	e7e6      	b.n	800f576 <send_custom_msg+0x16>
 800f5a8:	2001      	movs	r0, #1
 800f5aa:	b007      	add	sp, #28
 800f5ac:	bd30      	pop	{r4, r5, pc}
 800f5ae:	bf00      	nop
 800f5b0:	2000e070 	.word	0x2000e070

0800f5b4 <uxr_set_custom_transport_callbacks>:
 800f5b4:	b410      	push	{r4}
 800f5b6:	9c01      	ldr	r4, [sp, #4]
 800f5b8:	f8c0 4270 	str.w	r4, [r0, #624]	; 0x270
 800f5bc:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 800f5c0:	9b02      	ldr	r3, [sp, #8]
 800f5c2:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 800f5c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5ca:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
 800f5ce:	4770      	bx	lr

0800f5d0 <uxr_init_custom_transport>:
 800f5d0:	b538      	push	{r3, r4, r5, lr}
 800f5d2:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 800f5d6:	b303      	cbz	r3, 800f61a <uxr_init_custom_transport+0x4a>
 800f5d8:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800f5dc:	4604      	mov	r4, r0
 800f5de:	b1e2      	cbz	r2, 800f61a <uxr_init_custom_transport+0x4a>
 800f5e0:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 800f5e4:	b1ca      	cbz	r2, 800f61a <uxr_init_custom_transport+0x4a>
 800f5e6:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 800f5ea:	b1b2      	cbz	r2, 800f61a <uxr_init_custom_transport+0x4a>
 800f5ec:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 800f5f0:	4798      	blx	r3
 800f5f2:	4605      	mov	r5, r0
 800f5f4:	b188      	cbz	r0, 800f61a <uxr_init_custom_transport+0x4a>
 800f5f6:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800f5fa:	b98b      	cbnz	r3, 800f620 <uxr_init_custom_transport+0x50>
 800f5fc:	490b      	ldr	r1, [pc, #44]	; (800f62c <uxr_init_custom_transport+0x5c>)
 800f5fe:	4b0c      	ldr	r3, [pc, #48]	; (800f630 <uxr_init_custom_transport+0x60>)
 800f600:	4a0c      	ldr	r2, [pc, #48]	; (800f634 <uxr_init_custom_transport+0x64>)
 800f602:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 800f606:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f60a:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 800f60e:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 800f612:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 800f616:	4628      	mov	r0, r5
 800f618:	bd38      	pop	{r3, r4, r5, pc}
 800f61a:	2500      	movs	r5, #0
 800f61c:	4628      	mov	r0, r5
 800f61e:	bd38      	pop	{r3, r4, r5, pc}
 800f620:	2100      	movs	r1, #0
 800f622:	f204 2002 	addw	r0, r4, #514	; 0x202
 800f626:	f000 fe69 	bl	80102fc <uxr_init_framing_io>
 800f62a:	e7e7      	b.n	800f5fc <uxr_init_custom_transport+0x2c>
 800f62c:	0800f561 	.word	0x0800f561
 800f630:	0800f4c9 	.word	0x0800f4c9
 800f634:	0800f4bd 	.word	0x0800f4bd

0800f638 <uxr_close_custom_transport>:
 800f638:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800f63c:	4718      	bx	r3
 800f63e:	bf00      	nop

0800f640 <uxr_init_input_best_effort_stream>:
 800f640:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f644:	8003      	strh	r3, [r0, #0]
 800f646:	4770      	bx	lr

0800f648 <uxr_reset_input_best_effort_stream>:
 800f648:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f64c:	8003      	strh	r3, [r0, #0]
 800f64e:	4770      	bx	lr

0800f650 <uxr_receive_best_effort_message>:
 800f650:	b538      	push	{r3, r4, r5, lr}
 800f652:	4604      	mov	r4, r0
 800f654:	8800      	ldrh	r0, [r0, #0]
 800f656:	460d      	mov	r5, r1
 800f658:	f000 fe38 	bl	80102cc <uxr_seq_num_cmp>
 800f65c:	4603      	mov	r3, r0
 800f65e:	2b00      	cmp	r3, #0
 800f660:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 800f664:	bfb8      	it	lt
 800f666:	8025      	strhlt	r5, [r4, #0]
 800f668:	bd38      	pop	{r3, r4, r5, pc}
 800f66a:	bf00      	nop

0800f66c <on_full_input_buffer>:
 800f66c:	b570      	push	{r4, r5, r6, lr}
 800f66e:	4605      	mov	r5, r0
 800f670:	460c      	mov	r4, r1
 800f672:	682b      	ldr	r3, [r5, #0]
 800f674:	6809      	ldr	r1, [r1, #0]
 800f676:	8920      	ldrh	r0, [r4, #8]
 800f678:	6862      	ldr	r2, [r4, #4]
 800f67a:	fbb2 f2f0 	udiv	r2, r2, r0
 800f67e:	eba3 0c01 	sub.w	ip, r3, r1
 800f682:	fbbc fcf2 	udiv	ip, ip, r2
 800f686:	f10c 0c01 	add.w	ip, ip, #1
 800f68a:	fa1f f38c 	uxth.w	r3, ip
 800f68e:	fbb3 f6f0 	udiv	r6, r3, r0
 800f692:	fb00 3316 	mls	r3, r0, r6, r3
 800f696:	b29b      	uxth	r3, r3
 800f698:	fb02 f303 	mul.w	r3, r2, r3
 800f69c:	1d18      	adds	r0, r3, #4
 800f69e:	4408      	add	r0, r1
 800f6a0:	7d26      	ldrb	r6, [r4, #20]
 800f6a2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800f6a6:	b116      	cbz	r6, 800f6ae <on_full_input_buffer+0x42>
 800f6a8:	2600      	movs	r6, #0
 800f6aa:	f840 6c04 	str.w	r6, [r0, #-4]
 800f6ae:	2a03      	cmp	r2, #3
 800f6b0:	d801      	bhi.n	800f6b6 <on_full_input_buffer+0x4a>
 800f6b2:	2001      	movs	r0, #1
 800f6b4:	bd70      	pop	{r4, r5, r6, pc}
 800f6b6:	3308      	adds	r3, #8
 800f6b8:	4419      	add	r1, r3
 800f6ba:	4628      	mov	r0, r5
 800f6bc:	692b      	ldr	r3, [r5, #16]
 800f6be:	3a04      	subs	r2, #4
 800f6c0:	f7fa ffca 	bl	800a658 <ucdr_init_buffer_origin>
 800f6c4:	4628      	mov	r0, r5
 800f6c6:	4903      	ldr	r1, [pc, #12]	; (800f6d4 <on_full_input_buffer+0x68>)
 800f6c8:	4622      	mov	r2, r4
 800f6ca:	f7fa ffa1 	bl	800a610 <ucdr_set_on_full_buffer_callback>
 800f6ce:	2000      	movs	r0, #0
 800f6d0:	bd70      	pop	{r4, r5, r6, pc}
 800f6d2:	bf00      	nop
 800f6d4:	0800f66d 	.word	0x0800f66d

0800f6d8 <uxr_init_input_reliable_stream>:
 800f6d8:	b500      	push	{lr}
 800f6da:	e9c0 1200 	strd	r1, r2, [r0]
 800f6de:	f04f 0e00 	mov.w	lr, #0
 800f6e2:	9a01      	ldr	r2, [sp, #4]
 800f6e4:	8103      	strh	r3, [r0, #8]
 800f6e6:	6102      	str	r2, [r0, #16]
 800f6e8:	f880 e014 	strb.w	lr, [r0, #20]
 800f6ec:	b1d3      	cbz	r3, 800f724 <uxr_init_input_reliable_stream+0x4c>
 800f6ee:	f8c1 e000 	str.w	lr, [r1]
 800f6f2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800f6f6:	f1bc 0f01 	cmp.w	ip, #1
 800f6fa:	d913      	bls.n	800f724 <uxr_init_input_reliable_stream+0x4c>
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	fbb3 f1fc 	udiv	r1, r3, ip
 800f702:	fb0c 3111 	mls	r1, ip, r1, r3
 800f706:	b289      	uxth	r1, r1
 800f708:	6842      	ldr	r2, [r0, #4]
 800f70a:	fbb2 f2fc 	udiv	r2, r2, ip
 800f70e:	fb01 f202 	mul.w	r2, r1, r2
 800f712:	6801      	ldr	r1, [r0, #0]
 800f714:	f841 e002 	str.w	lr, [r1, r2]
 800f718:	3301      	adds	r3, #1
 800f71a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800f71e:	b29b      	uxth	r3, r3
 800f720:	459c      	cmp	ip, r3
 800f722:	d8ec      	bhi.n	800f6fe <uxr_init_input_reliable_stream+0x26>
 800f724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f728:	60c3      	str	r3, [r0, #12]
 800f72a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f72e:	bf00      	nop

0800f730 <uxr_reset_input_reliable_stream>:
 800f730:	8901      	ldrh	r1, [r0, #8]
 800f732:	b1e9      	cbz	r1, 800f770 <uxr_reset_input_reliable_stream+0x40>
 800f734:	f04f 0c00 	mov.w	ip, #0
 800f738:	b500      	push	{lr}
 800f73a:	4663      	mov	r3, ip
 800f73c:	46e6      	mov	lr, ip
 800f73e:	fbb3 f2f1 	udiv	r2, r3, r1
 800f742:	fb01 3312 	mls	r3, r1, r2, r3
 800f746:	b29b      	uxth	r3, r3
 800f748:	6842      	ldr	r2, [r0, #4]
 800f74a:	fbb2 f2f1 	udiv	r2, r2, r1
 800f74e:	fb02 f303 	mul.w	r3, r2, r3
 800f752:	6802      	ldr	r2, [r0, #0]
 800f754:	f842 e003 	str.w	lr, [r2, r3]
 800f758:	f10c 0c01 	add.w	ip, ip, #1
 800f75c:	8901      	ldrh	r1, [r0, #8]
 800f75e:	fa1f f38c 	uxth.w	r3, ip
 800f762:	4299      	cmp	r1, r3
 800f764:	d8eb      	bhi.n	800f73e <uxr_reset_input_reliable_stream+0xe>
 800f766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f76a:	60c3      	str	r3, [r0, #12]
 800f76c:	f85d fb04 	ldr.w	pc, [sp], #4
 800f770:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f774:	60c3      	str	r3, [r0, #12]
 800f776:	4770      	bx	lr

0800f778 <uxr_receive_reliable_message>:
 800f778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f77c:	4604      	mov	r4, r0
 800f77e:	460d      	mov	r5, r1
 800f780:	8901      	ldrh	r1, [r0, #8]
 800f782:	8980      	ldrh	r0, [r0, #12]
 800f784:	4690      	mov	r8, r2
 800f786:	461f      	mov	r7, r3
 800f788:	f000 fd98 	bl	80102bc <uxr_seq_num_add>
 800f78c:	4629      	mov	r1, r5
 800f78e:	4606      	mov	r6, r0
 800f790:	89a0      	ldrh	r0, [r4, #12]
 800f792:	f000 fd9b 	bl	80102cc <uxr_seq_num_cmp>
 800f796:	2800      	cmp	r0, #0
 800f798:	db0a      	blt.n	800f7b0 <uxr_receive_reliable_message+0x38>
 800f79a:	2600      	movs	r6, #0
 800f79c:	89e0      	ldrh	r0, [r4, #14]
 800f79e:	4629      	mov	r1, r5
 800f7a0:	f000 fd94 	bl	80102cc <uxr_seq_num_cmp>
 800f7a4:	2800      	cmp	r0, #0
 800f7a6:	da00      	bge.n	800f7aa <uxr_receive_reliable_message+0x32>
 800f7a8:	81e5      	strh	r5, [r4, #14]
 800f7aa:	4630      	mov	r0, r6
 800f7ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7b0:	4630      	mov	r0, r6
 800f7b2:	4629      	mov	r1, r5
 800f7b4:	f000 fd8a 	bl	80102cc <uxr_seq_num_cmp>
 800f7b8:	2800      	cmp	r0, #0
 800f7ba:	dbee      	blt.n	800f79a <uxr_receive_reliable_message+0x22>
 800f7bc:	6923      	ldr	r3, [r4, #16]
 800f7be:	4640      	mov	r0, r8
 800f7c0:	4798      	blx	r3
 800f7c2:	2101      	movs	r1, #1
 800f7c4:	4681      	mov	r9, r0
 800f7c6:	89a0      	ldrh	r0, [r4, #12]
 800f7c8:	f000 fd78 	bl	80102bc <uxr_seq_num_add>
 800f7cc:	f1b9 0f00 	cmp.w	r9, #0
 800f7d0:	d101      	bne.n	800f7d6 <uxr_receive_reliable_message+0x5e>
 800f7d2:	4285      	cmp	r5, r0
 800f7d4:	d047      	beq.n	800f866 <uxr_receive_reliable_message+0xee>
 800f7d6:	8922      	ldrh	r2, [r4, #8]
 800f7d8:	fbb5 f0f2 	udiv	r0, r5, r2
 800f7dc:	fb02 5010 	mls	r0, r2, r0, r5
 800f7e0:	b280      	uxth	r0, r0
 800f7e2:	6863      	ldr	r3, [r4, #4]
 800f7e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f7e8:	fb00 f303 	mul.w	r3, r0, r3
 800f7ec:	6820      	ldr	r0, [r4, #0]
 800f7ee:	3304      	adds	r3, #4
 800f7f0:	4418      	add	r0, r3
 800f7f2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d1cf      	bne.n	800f79a <uxr_receive_reliable_message+0x22>
 800f7fa:	4641      	mov	r1, r8
 800f7fc:	463a      	mov	r2, r7
 800f7fe:	f002 fb5e 	bl	8011ebe <memcpy>
 800f802:	8921      	ldrh	r1, [r4, #8]
 800f804:	fbb5 f2f1 	udiv	r2, r5, r1
 800f808:	fb01 5212 	mls	r2, r1, r2, r5
 800f80c:	b292      	uxth	r2, r2
 800f80e:	6863      	ldr	r3, [r4, #4]
 800f810:	fbb3 f3f1 	udiv	r3, r3, r1
 800f814:	fb02 f303 	mul.w	r3, r2, r3
 800f818:	6822      	ldr	r2, [r4, #0]
 800f81a:	50d7      	str	r7, [r2, r3]
 800f81c:	9a08      	ldr	r2, [sp, #32]
 800f81e:	2301      	movs	r3, #1
 800f820:	7013      	strb	r3, [r2, #0]
 800f822:	f1b9 0f00 	cmp.w	r9, #0
 800f826:	d0b8      	beq.n	800f79a <uxr_receive_reliable_message+0x22>
 800f828:	89a6      	ldrh	r6, [r4, #12]
 800f82a:	4630      	mov	r0, r6
 800f82c:	2101      	movs	r1, #1
 800f82e:	f000 fd45 	bl	80102bc <uxr_seq_num_add>
 800f832:	8922      	ldrh	r2, [r4, #8]
 800f834:	6863      	ldr	r3, [r4, #4]
 800f836:	fbb3 f3f2 	udiv	r3, r3, r2
 800f83a:	4606      	mov	r6, r0
 800f83c:	fbb0 f0f2 	udiv	r0, r0, r2
 800f840:	fb02 6010 	mls	r0, r2, r0, r6
 800f844:	b280      	uxth	r0, r0
 800f846:	fb00 f303 	mul.w	r3, r0, r3
 800f84a:	6820      	ldr	r0, [r4, #0]
 800f84c:	3304      	adds	r3, #4
 800f84e:	4418      	add	r0, r3
 800f850:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d0a0      	beq.n	800f79a <uxr_receive_reliable_message+0x22>
 800f858:	6923      	ldr	r3, [r4, #16]
 800f85a:	4798      	blx	r3
 800f85c:	2802      	cmp	r0, #2
 800f85e:	d008      	beq.n	800f872 <uxr_receive_reliable_message+0xfa>
 800f860:	2801      	cmp	r0, #1
 800f862:	d0e2      	beq.n	800f82a <uxr_receive_reliable_message+0xb2>
 800f864:	e799      	b.n	800f79a <uxr_receive_reliable_message+0x22>
 800f866:	9b08      	ldr	r3, [sp, #32]
 800f868:	81a5      	strh	r5, [r4, #12]
 800f86a:	2601      	movs	r6, #1
 800f86c:	f883 9000 	strb.w	r9, [r3]
 800f870:	e794      	b.n	800f79c <uxr_receive_reliable_message+0x24>
 800f872:	2601      	movs	r6, #1
 800f874:	e792      	b.n	800f79c <uxr_receive_reliable_message+0x24>
 800f876:	bf00      	nop

0800f878 <uxr_next_input_reliable_buffer_available>:
 800f878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f87c:	4604      	mov	r4, r0
 800f87e:	460f      	mov	r7, r1
 800f880:	8980      	ldrh	r0, [r0, #12]
 800f882:	2101      	movs	r1, #1
 800f884:	4690      	mov	r8, r2
 800f886:	f000 fd19 	bl	80102bc <uxr_seq_num_add>
 800f88a:	8922      	ldrh	r2, [r4, #8]
 800f88c:	fbb0 f6f2 	udiv	r6, r0, r2
 800f890:	fb02 0616 	mls	r6, r2, r6, r0
 800f894:	b2b6      	uxth	r6, r6
 800f896:	6863      	ldr	r3, [r4, #4]
 800f898:	fbb3 f3f2 	udiv	r3, r3, r2
 800f89c:	fb06 f303 	mul.w	r3, r6, r3
 800f8a0:	6826      	ldr	r6, [r4, #0]
 800f8a2:	3304      	adds	r3, #4
 800f8a4:	441e      	add	r6, r3
 800f8a6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 800f8aa:	f1b9 0f00 	cmp.w	r9, #0
 800f8ae:	d023      	beq.n	800f8f8 <uxr_next_input_reliable_buffer_available+0x80>
 800f8b0:	6923      	ldr	r3, [r4, #16]
 800f8b2:	4605      	mov	r5, r0
 800f8b4:	4630      	mov	r0, r6
 800f8b6:	4798      	blx	r3
 800f8b8:	4682      	mov	sl, r0
 800f8ba:	b300      	cbz	r0, 800f8fe <uxr_next_input_reliable_buffer_available+0x86>
 800f8bc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 800f8c0:	2101      	movs	r1, #1
 800f8c2:	4650      	mov	r0, sl
 800f8c4:	f000 fcfa 	bl	80102bc <uxr_seq_num_add>
 800f8c8:	8921      	ldrh	r1, [r4, #8]
 800f8ca:	fbb0 f2f1 	udiv	r2, r0, r1
 800f8ce:	4682      	mov	sl, r0
 800f8d0:	fb01 0212 	mls	r2, r1, r2, r0
 800f8d4:	e9d4 0300 	ldrd	r0, r3, [r4]
 800f8d8:	b292      	uxth	r2, r2
 800f8da:	fbb3 f3f1 	udiv	r3, r3, r1
 800f8de:	fb02 f303 	mul.w	r3, r2, r3
 800f8e2:	3304      	adds	r3, #4
 800f8e4:	4418      	add	r0, r3
 800f8e6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f8ea:	b12b      	cbz	r3, 800f8f8 <uxr_next_input_reliable_buffer_available+0x80>
 800f8ec:	6923      	ldr	r3, [r4, #16]
 800f8ee:	4798      	blx	r3
 800f8f0:	2802      	cmp	r0, #2
 800f8f2:	d01b      	beq.n	800f92c <uxr_next_input_reliable_buffer_available+0xb4>
 800f8f4:	2801      	cmp	r0, #1
 800f8f6:	d0e3      	beq.n	800f8c0 <uxr_next_input_reliable_buffer_available+0x48>
 800f8f8:	2000      	movs	r0, #0
 800f8fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8fe:	464a      	mov	r2, r9
 800f900:	4631      	mov	r1, r6
 800f902:	4638      	mov	r0, r7
 800f904:	f7fa feb0 	bl	800a668 <ucdr_init_buffer>
 800f908:	8921      	ldrh	r1, [r4, #8]
 800f90a:	fbb5 f2f1 	udiv	r2, r5, r1
 800f90e:	fb01 5212 	mls	r2, r1, r2, r5
 800f912:	b292      	uxth	r2, r2
 800f914:	6863      	ldr	r3, [r4, #4]
 800f916:	fbb3 f3f1 	udiv	r3, r3, r1
 800f91a:	fb02 f303 	mul.w	r3, r2, r3
 800f91e:	6822      	ldr	r2, [r4, #0]
 800f920:	f842 a003 	str.w	sl, [r2, r3]
 800f924:	2001      	movs	r0, #1
 800f926:	81a5      	strh	r5, [r4, #12]
 800f928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f92c:	8920      	ldrh	r0, [r4, #8]
 800f92e:	fbb5 f3f0 	udiv	r3, r5, r0
 800f932:	fb00 5513 	mls	r5, r0, r3, r5
 800f936:	b2ad      	uxth	r5, r5
 800f938:	6863      	ldr	r3, [r4, #4]
 800f93a:	fbb3 f3f0 	udiv	r3, r3, r0
 800f93e:	fb03 f505 	mul.w	r5, r3, r5
 800f942:	6823      	ldr	r3, [r4, #0]
 800f944:	2000      	movs	r0, #0
 800f946:	5158      	str	r0, [r3, r5]
 800f948:	eb06 0108 	add.w	r1, r6, r8
 800f94c:	eba9 0208 	sub.w	r2, r9, r8
 800f950:	4638      	mov	r0, r7
 800f952:	f7fa fe89 	bl	800a668 <ucdr_init_buffer>
 800f956:	4638      	mov	r0, r7
 800f958:	4903      	ldr	r1, [pc, #12]	; (800f968 <uxr_next_input_reliable_buffer_available+0xf0>)
 800f95a:	4622      	mov	r2, r4
 800f95c:	f7fa fe58 	bl	800a610 <ucdr_set_on_full_buffer_callback>
 800f960:	f8a4 a00c 	strh.w	sl, [r4, #12]
 800f964:	2001      	movs	r0, #1
 800f966:	e7c8      	b.n	800f8fa <uxr_next_input_reliable_buffer_available+0x82>
 800f968:	0800f66d 	.word	0x0800f66d

0800f96c <uxr_process_heartbeat>:
 800f96c:	b538      	push	{r3, r4, r5, lr}
 800f96e:	4611      	mov	r1, r2
 800f970:	4604      	mov	r4, r0
 800f972:	89c0      	ldrh	r0, [r0, #14]
 800f974:	4615      	mov	r5, r2
 800f976:	f000 fca9 	bl	80102cc <uxr_seq_num_cmp>
 800f97a:	2800      	cmp	r0, #0
 800f97c:	bfb8      	it	lt
 800f97e:	81e5      	strhlt	r5, [r4, #14]
 800f980:	bd38      	pop	{r3, r4, r5, pc}
 800f982:	bf00      	nop

0800f984 <uxr_compute_acknack>:
 800f984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f988:	8903      	ldrh	r3, [r0, #8]
 800f98a:	8985      	ldrh	r5, [r0, #12]
 800f98c:	4604      	mov	r4, r0
 800f98e:	460e      	mov	r6, r1
 800f990:	b1d3      	cbz	r3, 800f9c8 <uxr_compute_acknack+0x44>
 800f992:	4628      	mov	r0, r5
 800f994:	2701      	movs	r7, #1
 800f996:	e003      	b.n	800f9a0 <uxr_compute_acknack+0x1c>
 800f998:	4567      	cmp	r7, ip
 800f99a:	d215      	bcs.n	800f9c8 <uxr_compute_acknack+0x44>
 800f99c:	89a0      	ldrh	r0, [r4, #12]
 800f99e:	3701      	adds	r7, #1
 800f9a0:	b2b9      	uxth	r1, r7
 800f9a2:	f000 fc8b 	bl	80102bc <uxr_seq_num_add>
 800f9a6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800f9aa:	fbb0 f3fc 	udiv	r3, r0, ip
 800f9ae:	fb0c 0313 	mls	r3, ip, r3, r0
 800f9b2:	b29a      	uxth	r2, r3
 800f9b4:	e9d4 1300 	ldrd	r1, r3, [r4]
 800f9b8:	fbb3 f3fc 	udiv	r3, r3, ip
 800f9bc:	fb02 f303 	mul.w	r3, r2, r3
 800f9c0:	58cb      	ldr	r3, [r1, r3]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d1e8      	bne.n	800f998 <uxr_compute_acknack+0x14>
 800f9c6:	4605      	mov	r5, r0
 800f9c8:	8035      	strh	r5, [r6, #0]
 800f9ca:	2101      	movs	r1, #1
 800f9cc:	4628      	mov	r0, r5
 800f9ce:	89e7      	ldrh	r7, [r4, #14]
 800f9d0:	f000 fc78 	bl	80102c4 <uxr_seq_num_sub>
 800f9d4:	4601      	mov	r1, r0
 800f9d6:	4638      	mov	r0, r7
 800f9d8:	f000 fc74 	bl	80102c4 <uxr_seq_num_sub>
 800f9dc:	4605      	mov	r5, r0
 800f9de:	b318      	cbz	r0, 800fa28 <uxr_compute_acknack+0xa4>
 800f9e0:	f04f 0900 	mov.w	r9, #0
 800f9e4:	464f      	mov	r7, r9
 800f9e6:	f04f 0801 	mov.w	r8, #1
 800f9ea:	fa1f f189 	uxth.w	r1, r9
 800f9ee:	8830      	ldrh	r0, [r6, #0]
 800f9f0:	f000 fc64 	bl	80102bc <uxr_seq_num_add>
 800f9f4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800f9f8:	fbb0 f3fc 	udiv	r3, r0, ip
 800f9fc:	e9d4 1200 	ldrd	r1, r2, [r4]
 800fa00:	fb03 001c 	mls	r0, r3, ip, r0
 800fa04:	b283      	uxth	r3, r0
 800fa06:	fbb2 f2fc 	udiv	r2, r2, ip
 800fa0a:	fb02 f303 	mul.w	r3, r2, r3
 800fa0e:	fa08 f209 	lsl.w	r2, r8, r9
 800fa12:	58cb      	ldr	r3, [r1, r3]
 800fa14:	f109 0901 	add.w	r9, r9, #1
 800fa18:	b90b      	cbnz	r3, 800fa1e <uxr_compute_acknack+0x9a>
 800fa1a:	4317      	orrs	r7, r2
 800fa1c:	b2bf      	uxth	r7, r7
 800fa1e:	454d      	cmp	r5, r9
 800fa20:	d1e3      	bne.n	800f9ea <uxr_compute_acknack+0x66>
 800fa22:	4638      	mov	r0, r7
 800fa24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa28:	4607      	mov	r7, r0
 800fa2a:	4638      	mov	r0, r7
 800fa2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800fa30 <uxr_init_output_best_effort_stream>:
 800fa30:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800fa34:	e9c0 3201 	strd	r3, r2, [r0, #4]
 800fa38:	6001      	str	r1, [r0, #0]
 800fa3a:	7303      	strb	r3, [r0, #12]
 800fa3c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 800fa40:	4770      	bx	lr
 800fa42:	bf00      	nop

0800fa44 <uxr_reset_output_best_effort_stream>:
 800fa44:	7b02      	ldrb	r2, [r0, #12]
 800fa46:	6042      	str	r2, [r0, #4]
 800fa48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fa4c:	81c3      	strh	r3, [r0, #14]
 800fa4e:	4770      	bx	lr

0800fa50 <uxr_prepare_best_effort_buffer_to_write>:
 800fa50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa52:	4604      	mov	r4, r0
 800fa54:	b083      	sub	sp, #12
 800fa56:	6840      	ldr	r0, [r0, #4]
 800fa58:	460d      	mov	r5, r1
 800fa5a:	4616      	mov	r6, r2
 800fa5c:	f7fc f9ce 	bl	800bdfc <uxr_submessage_padding>
 800fa60:	6863      	ldr	r3, [r4, #4]
 800fa62:	4418      	add	r0, r3
 800fa64:	68a3      	ldr	r3, [r4, #8]
 800fa66:	1942      	adds	r2, r0, r5
 800fa68:	4293      	cmp	r3, r2
 800fa6a:	bf2c      	ite	cs
 800fa6c:	2701      	movcs	r7, #1
 800fa6e:	2700      	movcc	r7, #0
 800fa70:	d202      	bcs.n	800fa78 <uxr_prepare_best_effort_buffer_to_write+0x28>
 800fa72:	4638      	mov	r0, r7
 800fa74:	b003      	add	sp, #12
 800fa76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa78:	9000      	str	r0, [sp, #0]
 800fa7a:	6821      	ldr	r1, [r4, #0]
 800fa7c:	4630      	mov	r0, r6
 800fa7e:	2300      	movs	r3, #0
 800fa80:	f7fa fde0 	bl	800a644 <ucdr_init_buffer_origin_offset>
 800fa84:	6861      	ldr	r1, [r4, #4]
 800fa86:	4638      	mov	r0, r7
 800fa88:	4429      	add	r1, r5
 800fa8a:	6061      	str	r1, [r4, #4]
 800fa8c:	b003      	add	sp, #12
 800fa8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fa90 <uxr_prepare_best_effort_buffer_to_send>:
 800fa90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa94:	4604      	mov	r4, r0
 800fa96:	461d      	mov	r5, r3
 800fa98:	6840      	ldr	r0, [r0, #4]
 800fa9a:	7b23      	ldrb	r3, [r4, #12]
 800fa9c:	4298      	cmp	r0, r3
 800fa9e:	bf8c      	ite	hi
 800faa0:	2601      	movhi	r6, #1
 800faa2:	2600      	movls	r6, #0
 800faa4:	d802      	bhi.n	800faac <uxr_prepare_best_effort_buffer_to_send+0x1c>
 800faa6:	4630      	mov	r0, r6
 800faa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faac:	4688      	mov	r8, r1
 800faae:	89e0      	ldrh	r0, [r4, #14]
 800fab0:	2101      	movs	r1, #1
 800fab2:	4617      	mov	r7, r2
 800fab4:	f000 fc02 	bl	80102bc <uxr_seq_num_add>
 800fab8:	6823      	ldr	r3, [r4, #0]
 800faba:	81e0      	strh	r0, [r4, #14]
 800fabc:	8028      	strh	r0, [r5, #0]
 800fabe:	f8c8 3000 	str.w	r3, [r8]
 800fac2:	6863      	ldr	r3, [r4, #4]
 800fac4:	603b      	str	r3, [r7, #0]
 800fac6:	7b23      	ldrb	r3, [r4, #12]
 800fac8:	6063      	str	r3, [r4, #4]
 800faca:	4630      	mov	r0, r6
 800facc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fad0 <on_full_output_buffer>:
 800fad0:	b538      	push	{r3, r4, r5, lr}
 800fad2:	6802      	ldr	r2, [r0, #0]
 800fad4:	460c      	mov	r4, r1
 800fad6:	6809      	ldr	r1, [r1, #0]
 800fad8:	8923      	ldrh	r3, [r4, #8]
 800fada:	eba2 0c01 	sub.w	ip, r2, r1
 800fade:	6862      	ldr	r2, [r4, #4]
 800fae0:	fbb2 f2f3 	udiv	r2, r2, r3
 800fae4:	fbbc fcf2 	udiv	ip, ip, r2
 800fae8:	f10c 0c01 	add.w	ip, ip, #1
 800faec:	fa1f fc8c 	uxth.w	ip, ip
 800faf0:	fbbc fef3 	udiv	lr, ip, r3
 800faf4:	fb03 c31e 	mls	r3, r3, lr, ip
 800faf8:	b29b      	uxth	r3, r3
 800fafa:	fb02 f303 	mul.w	r3, r2, r3
 800fafe:	f894 c00c 	ldrb.w	ip, [r4, #12]
 800fb02:	58ca      	ldr	r2, [r1, r3]
 800fb04:	4463      	add	r3, ip
 800fb06:	eba2 020c 	sub.w	r2, r2, ip
 800fb0a:	3308      	adds	r3, #8
 800fb0c:	4605      	mov	r5, r0
 800fb0e:	4419      	add	r1, r3
 800fb10:	3a04      	subs	r2, #4
 800fb12:	6903      	ldr	r3, [r0, #16]
 800fb14:	f7fa fda0 	bl	800a658 <ucdr_init_buffer_origin>
 800fb18:	4628      	mov	r0, r5
 800fb1a:	4903      	ldr	r1, [pc, #12]	; (800fb28 <on_full_output_buffer+0x58>)
 800fb1c:	4622      	mov	r2, r4
 800fb1e:	f7fa fd77 	bl	800a610 <ucdr_set_on_full_buffer_callback>
 800fb22:	2000      	movs	r0, #0
 800fb24:	bd38      	pop	{r3, r4, r5, pc}
 800fb26:	bf00      	nop
 800fb28:	0800fad1 	.word	0x0800fad1

0800fb2c <uxr_init_output_reliable_stream>:
 800fb2c:	b410      	push	{r4}
 800fb2e:	f89d c004 	ldrb.w	ip, [sp, #4]
 800fb32:	8103      	strh	r3, [r0, #8]
 800fb34:	e9c0 1200 	strd	r1, r2, [r0]
 800fb38:	f880 c00c 	strb.w	ip, [r0, #12]
 800fb3c:	b1d3      	cbz	r3, 800fb74 <uxr_init_output_reliable_stream+0x48>
 800fb3e:	f8c1 c000 	str.w	ip, [r1]
 800fb42:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800fb46:	f1bc 0f01 	cmp.w	ip, #1
 800fb4a:	d913      	bls.n	800fb74 <uxr_init_output_reliable_stream+0x48>
 800fb4c:	2301      	movs	r3, #1
 800fb4e:	fbb3 f1fc 	udiv	r1, r3, ip
 800fb52:	fb0c 3111 	mls	r1, ip, r1, r3
 800fb56:	b289      	uxth	r1, r1
 800fb58:	6842      	ldr	r2, [r0, #4]
 800fb5a:	6804      	ldr	r4, [r0, #0]
 800fb5c:	fbb2 f2fc 	udiv	r2, r2, ip
 800fb60:	fb01 f202 	mul.w	r2, r1, r2
 800fb64:	7b01      	ldrb	r1, [r0, #12]
 800fb66:	50a1      	str	r1, [r4, r2]
 800fb68:	3301      	adds	r3, #1
 800fb6a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800fb6e:	b29b      	uxth	r3, r3
 800fb70:	459c      	cmp	ip, r3
 800fb72:	d8ec      	bhi.n	800fb4e <uxr_init_output_reliable_stream+0x22>
 800fb74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fb78:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fb7c:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800fb80:	4905      	ldr	r1, [pc, #20]	; (800fb98 <uxr_init_output_reliable_stream+0x6c>)
 800fb82:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb86:	f8c0 100e 	str.w	r1, [r0, #14]
 800fb8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb8e:	2300      	movs	r3, #0
 800fb90:	8242      	strh	r2, [r0, #18]
 800fb92:	8403      	strh	r3, [r0, #32]
 800fb94:	4770      	bx	lr
 800fb96:	bf00      	nop
 800fb98:	ffff0000 	.word	0xffff0000

0800fb9c <uxr_reset_output_reliable_stream>:
 800fb9c:	8901      	ldrh	r1, [r0, #8]
 800fb9e:	b1b1      	cbz	r1, 800fbce <uxr_reset_output_reliable_stream+0x32>
 800fba0:	f04f 0c00 	mov.w	ip, #0
 800fba4:	4663      	mov	r3, ip
 800fba6:	fbb3 f2f1 	udiv	r2, r3, r1
 800fbaa:	fb01 3312 	mls	r3, r1, r2, r3
 800fbae:	b29b      	uxth	r3, r3
 800fbb0:	6842      	ldr	r2, [r0, #4]
 800fbb2:	fbb2 f2f1 	udiv	r2, r2, r1
 800fbb6:	6801      	ldr	r1, [r0, #0]
 800fbb8:	fb02 f303 	mul.w	r3, r2, r3
 800fbbc:	7b02      	ldrb	r2, [r0, #12]
 800fbbe:	50ca      	str	r2, [r1, r3]
 800fbc0:	f10c 0c01 	add.w	ip, ip, #1
 800fbc4:	8901      	ldrh	r1, [r0, #8]
 800fbc6:	fa1f f38c 	uxth.w	r3, ip
 800fbca:	4299      	cmp	r1, r3
 800fbcc:	d8eb      	bhi.n	800fba6 <uxr_reset_output_reliable_stream+0xa>
 800fbce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fbd2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fbd6:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800fbda:	4904      	ldr	r1, [pc, #16]	; (800fbec <uxr_reset_output_reliable_stream+0x50>)
 800fbdc:	f8c0 100e 	str.w	r1, [r0, #14]
 800fbe0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	8242      	strh	r2, [r0, #18]
 800fbe8:	8403      	strh	r3, [r0, #32]
 800fbea:	4770      	bx	lr
 800fbec:	ffff0000 	.word	0xffff0000

0800fbf0 <uxr_prepare_reliable_buffer_to_write>:
 800fbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbf4:	4604      	mov	r4, r0
 800fbf6:	b091      	sub	sp, #68	; 0x44
 800fbf8:	8900      	ldrh	r0, [r0, #8]
 800fbfa:	89e6      	ldrh	r6, [r4, #14]
 800fbfc:	6823      	ldr	r3, [r4, #0]
 800fbfe:	9204      	str	r2, [sp, #16]
 800fc00:	fbb6 f2f0 	udiv	r2, r6, r0
 800fc04:	fb00 6212 	mls	r2, r0, r2, r6
 800fc08:	b292      	uxth	r2, r2
 800fc0a:	6865      	ldr	r5, [r4, #4]
 800fc0c:	fbb5 f5f0 	udiv	r5, r5, r0
 800fc10:	fb05 3202 	mla	r2, r5, r2, r3
 800fc14:	3204      	adds	r2, #4
 800fc16:	f852 8c04 	ldr.w	r8, [r2, #-4]
 800fc1a:	f894 900c 	ldrb.w	r9, [r4, #12]
 800fc1e:	9203      	str	r2, [sp, #12]
 800fc20:	468b      	mov	fp, r1
 800fc22:	1f2f      	subs	r7, r5, #4
 800fc24:	2800      	cmp	r0, #0
 800fc26:	f000 814c 	beq.w	800fec2 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 800fc2a:	f04f 0c00 	mov.w	ip, #0
 800fc2e:	46e2      	mov	sl, ip
 800fc30:	4661      	mov	r1, ip
 800fc32:	fbb1 f2f0 	udiv	r2, r1, r0
 800fc36:	fb00 1212 	mls	r2, r0, r2, r1
 800fc3a:	b292      	uxth	r2, r2
 800fc3c:	fb05 f202 	mul.w	r2, r5, r2
 800fc40:	f10c 0c01 	add.w	ip, ip, #1
 800fc44:	589a      	ldr	r2, [r3, r2]
 800fc46:	454a      	cmp	r2, r9
 800fc48:	bf08      	it	eq
 800fc4a:	f10a 0a01 	addeq.w	sl, sl, #1
 800fc4e:	fa1f f18c 	uxth.w	r1, ip
 800fc52:	bf08      	it	eq
 800fc54:	fa1f fa8a 	uxtheq.w	sl, sl
 800fc58:	4281      	cmp	r1, r0
 800fc5a:	d3ea      	bcc.n	800fc32 <uxr_prepare_reliable_buffer_to_write+0x42>
 800fc5c:	4640      	mov	r0, r8
 800fc5e:	2104      	movs	r1, #4
 800fc60:	f8cd a014 	str.w	sl, [sp, #20]
 800fc64:	f7fa fd04 	bl	800a670 <ucdr_alignment>
 800fc68:	4480      	add	r8, r0
 800fc6a:	eb08 020b 	add.w	r2, r8, fp
 800fc6e:	42ba      	cmp	r2, r7
 800fc70:	f240 80cd 	bls.w	800fe0e <uxr_prepare_reliable_buffer_to_write+0x21e>
 800fc74:	7b22      	ldrb	r2, [r4, #12]
 800fc76:	445a      	add	r2, fp
 800fc78:	42ba      	cmp	r2, r7
 800fc7a:	f240 80b5 	bls.w	800fde8 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 800fc7e:	f5c9 437f 	rsb	r3, r9, #65280	; 0xff00
 800fc82:	33fc      	adds	r3, #252	; 0xfc
 800fc84:	b2ba      	uxth	r2, r7
 800fc86:	4413      	add	r3, r2
 800fc88:	b29b      	uxth	r3, r3
 800fc8a:	fb0a f903 	mul.w	r9, sl, r3
 800fc8e:	45d9      	cmp	r9, fp
 800fc90:	9305      	str	r3, [sp, #20]
 800fc92:	9306      	str	r3, [sp, #24]
 800fc94:	f0c0 80b7 	bcc.w	800fe06 <uxr_prepare_reliable_buffer_to_write+0x216>
 800fc98:	f108 0304 	add.w	r3, r8, #4
 800fc9c:	42bb      	cmp	r3, r7
 800fc9e:	f080 80db 	bcs.w	800fe58 <uxr_prepare_reliable_buffer_to_write+0x268>
 800fca2:	f1a2 0904 	sub.w	r9, r2, #4
 800fca6:	eba9 0908 	sub.w	r9, r9, r8
 800fcaa:	9b05      	ldr	r3, [sp, #20]
 800fcac:	fa1f f989 	uxth.w	r9, r9
 800fcb0:	ebab 0b09 	sub.w	fp, fp, r9
 800fcb4:	fbbb f2f3 	udiv	r2, fp, r3
 800fcb8:	fb03 b312 	mls	r3, r3, r2, fp
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	f000 80c8 	beq.w	800fe52 <uxr_prepare_reliable_buffer_to_write+0x262>
 800fcc2:	3201      	adds	r2, #1
 800fcc4:	b292      	uxth	r2, r2
 800fcc6:	9306      	str	r3, [sp, #24]
 800fcc8:	4552      	cmp	r2, sl
 800fcca:	f200 809c 	bhi.w	800fe06 <uxr_prepare_reliable_buffer_to_write+0x216>
 800fcce:	f10d 0b20 	add.w	fp, sp, #32
 800fcd2:	2a00      	cmp	r2, #0
 800fcd4:	d042      	beq.n	800fd5c <uxr_prepare_reliable_buffer_to_write+0x16c>
 800fcd6:	f8cd 801c 	str.w	r8, [sp, #28]
 800fcda:	f04f 0a00 	mov.w	sl, #0
 800fcde:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800fce2:	9505      	str	r5, [sp, #20]
 800fce4:	f10d 0b20 	add.w	fp, sp, #32
 800fce8:	4615      	mov	r5, r2
 800fcea:	e000      	b.n	800fcee <uxr_prepare_reliable_buffer_to_write+0xfe>
 800fcec:	46c1      	mov	r9, r8
 800fcee:	8920      	ldrh	r0, [r4, #8]
 800fcf0:	fbb6 f2f0 	udiv	r2, r6, r0
 800fcf4:	fb00 6112 	mls	r1, r0, r2, r6
 800fcf8:	b28a      	uxth	r2, r1
 800fcfa:	6863      	ldr	r3, [r4, #4]
 800fcfc:	fbb3 f1f0 	udiv	r1, r3, r0
 800fd00:	6823      	ldr	r3, [r4, #0]
 800fd02:	fb02 f101 	mul.w	r1, r2, r1
 800fd06:	3104      	adds	r1, #4
 800fd08:	4419      	add	r1, r3
 800fd0a:	4658      	mov	r0, fp
 800fd0c:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800fd10:	9200      	str	r2, [sp, #0]
 800fd12:	2300      	movs	r3, #0
 800fd14:	463a      	mov	r2, r7
 800fd16:	f7fa fc95 	bl	800a644 <ucdr_init_buffer_origin_offset>
 800fd1a:	464a      	mov	r2, r9
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	210d      	movs	r1, #13
 800fd20:	4658      	mov	r0, fp
 800fd22:	f7fc f82b 	bl	800bd7c <uxr_buffer_submessage_header>
 800fd26:	8921      	ldrh	r1, [r4, #8]
 800fd28:	fbb6 f2f1 	udiv	r2, r6, r1
 800fd2c:	fb01 6212 	mls	r2, r1, r2, r6
 800fd30:	b292      	uxth	r2, r2
 800fd32:	6863      	ldr	r3, [r4, #4]
 800fd34:	fbb3 f3f1 	udiv	r3, r3, r1
 800fd38:	fb02 f303 	mul.w	r3, r2, r3
 800fd3c:	6822      	ldr	r2, [r4, #0]
 800fd3e:	4630      	mov	r0, r6
 800fd40:	50d7      	str	r7, [r2, r3]
 800fd42:	2101      	movs	r1, #1
 800fd44:	f000 faba 	bl	80102bc <uxr_seq_num_add>
 800fd48:	f10a 0a01 	add.w	sl, sl, #1
 800fd4c:	fa1f f38a 	uxth.w	r3, sl
 800fd50:	429d      	cmp	r5, r3
 800fd52:	4606      	mov	r6, r0
 800fd54:	d8ca      	bhi.n	800fcec <uxr_prepare_reliable_buffer_to_write+0xfc>
 800fd56:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800fd5a:	9d05      	ldr	r5, [sp, #20]
 800fd5c:	8920      	ldrh	r0, [r4, #8]
 800fd5e:	fbb6 f3f0 	udiv	r3, r6, r0
 800fd62:	fb00 6313 	mls	r3, r0, r3, r6
 800fd66:	b299      	uxth	r1, r3
 800fd68:	6863      	ldr	r3, [r4, #4]
 800fd6a:	fbb3 f3f0 	udiv	r3, r3, r0
 800fd6e:	fb01 f303 	mul.w	r3, r1, r3
 800fd72:	6821      	ldr	r1, [r4, #0]
 800fd74:	3304      	adds	r3, #4
 800fd76:	4419      	add	r1, r3
 800fd78:	463a      	mov	r2, r7
 800fd7a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800fd7e:	9000      	str	r0, [sp, #0]
 800fd80:	2300      	movs	r3, #0
 800fd82:	4658      	mov	r0, fp
 800fd84:	f7fa fc5e 	bl	800a644 <ucdr_init_buffer_origin_offset>
 800fd88:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800fd8c:	4658      	mov	r0, fp
 800fd8e:	fa1f f289 	uxth.w	r2, r9
 800fd92:	2302      	movs	r3, #2
 800fd94:	210d      	movs	r1, #13
 800fd96:	f7fb fff1 	bl	800bd7c <uxr_buffer_submessage_header>
 800fd9a:	9b03      	ldr	r3, [sp, #12]
 800fd9c:	8927      	ldrh	r7, [r4, #8]
 800fd9e:	7b20      	ldrb	r0, [r4, #12]
 800fda0:	f108 0104 	add.w	r1, r8, #4
 800fda4:	440b      	add	r3, r1
 800fda6:	4619      	mov	r1, r3
 800fda8:	fbb6 f3f7 	udiv	r3, r6, r7
 800fdac:	fb07 6313 	mls	r3, r7, r3, r6
 800fdb0:	f1a5 0208 	sub.w	r2, r5, #8
 800fdb4:	b29d      	uxth	r5, r3
 800fdb6:	3004      	adds	r0, #4
 800fdb8:	6863      	ldr	r3, [r4, #4]
 800fdba:	fbb3 f3f7 	udiv	r3, r3, r7
 800fdbe:	fb05 f303 	mul.w	r3, r5, r3
 800fdc2:	6825      	ldr	r5, [r4, #0]
 800fdc4:	4448      	add	r0, r9
 800fdc6:	50e8      	str	r0, [r5, r3]
 800fdc8:	9d04      	ldr	r5, [sp, #16]
 800fdca:	eba2 0208 	sub.w	r2, r2, r8
 800fdce:	4628      	mov	r0, r5
 800fdd0:	f7fa fc4a 	bl	800a668 <ucdr_init_buffer>
 800fdd4:	4628      	mov	r0, r5
 800fdd6:	493c      	ldr	r1, [pc, #240]	; (800fec8 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 800fdd8:	4622      	mov	r2, r4
 800fdda:	f7fa fc19 	bl	800a610 <ucdr_set_on_full_buffer_callback>
 800fdde:	2001      	movs	r0, #1
 800fde0:	81e6      	strh	r6, [r4, #14]
 800fde2:	b011      	add	sp, #68	; 0x44
 800fde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fde8:	2101      	movs	r1, #1
 800fdea:	89e0      	ldrh	r0, [r4, #14]
 800fdec:	f000 fa66 	bl	80102bc <uxr_seq_num_add>
 800fdf0:	8921      	ldrh	r1, [r4, #8]
 800fdf2:	4605      	mov	r5, r0
 800fdf4:	8a60      	ldrh	r0, [r4, #18]
 800fdf6:	f000 fa61 	bl	80102bc <uxr_seq_num_add>
 800fdfa:	4601      	mov	r1, r0
 800fdfc:	4628      	mov	r0, r5
 800fdfe:	f000 fa65 	bl	80102cc <uxr_seq_num_cmp>
 800fe02:	2800      	cmp	r0, #0
 800fe04:	dd42      	ble.n	800fe8c <uxr_prepare_reliable_buffer_to_write+0x29c>
 800fe06:	2000      	movs	r0, #0
 800fe08:	b011      	add	sp, #68	; 0x44
 800fe0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe0e:	8921      	ldrh	r1, [r4, #8]
 800fe10:	8a60      	ldrh	r0, [r4, #18]
 800fe12:	9205      	str	r2, [sp, #20]
 800fe14:	f000 fa52 	bl	80102bc <uxr_seq_num_add>
 800fe18:	4601      	mov	r1, r0
 800fe1a:	4630      	mov	r0, r6
 800fe1c:	f000 fa56 	bl	80102cc <uxr_seq_num_cmp>
 800fe20:	2800      	cmp	r0, #0
 800fe22:	9a05      	ldr	r2, [sp, #20]
 800fe24:	dcef      	bgt.n	800fe06 <uxr_prepare_reliable_buffer_to_write+0x216>
 800fe26:	8927      	ldrh	r7, [r4, #8]
 800fe28:	fbb6 f3f7 	udiv	r3, r6, r7
 800fe2c:	fb07 6313 	mls	r3, r7, r3, r6
 800fe30:	b29d      	uxth	r5, r3
 800fe32:	6863      	ldr	r3, [r4, #4]
 800fe34:	6824      	ldr	r4, [r4, #0]
 800fe36:	fbb3 f3f7 	udiv	r3, r3, r7
 800fe3a:	fb05 f303 	mul.w	r3, r5, r3
 800fe3e:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 800fe42:	50e2      	str	r2, [r4, r3]
 800fe44:	2300      	movs	r3, #0
 800fe46:	f8cd 8000 	str.w	r8, [sp]
 800fe4a:	f7fa fbfb 	bl	800a644 <ucdr_init_buffer_origin_offset>
 800fe4e:	2001      	movs	r0, #1
 800fe50:	e7da      	b.n	800fe08 <uxr_prepare_reliable_buffer_to_write+0x218>
 800fe52:	b293      	uxth	r3, r2
 800fe54:	461a      	mov	r2, r3
 800fe56:	e737      	b.n	800fcc8 <uxr_prepare_reliable_buffer_to_write+0xd8>
 800fe58:	4630      	mov	r0, r6
 800fe5a:	2101      	movs	r1, #1
 800fe5c:	9207      	str	r2, [sp, #28]
 800fe5e:	f000 fa2d 	bl	80102bc <uxr_seq_num_add>
 800fe62:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800fe66:	fbb0 f1fc 	udiv	r1, r0, ip
 800fe6a:	fb0c 0111 	mls	r1, ip, r1, r0
 800fe6e:	4606      	mov	r6, r0
 800fe70:	b288      	uxth	r0, r1
 800fe72:	6863      	ldr	r3, [r4, #4]
 800fe74:	fbb3 f1fc 	udiv	r1, r3, ip
 800fe78:	6823      	ldr	r3, [r4, #0]
 800fe7a:	9a07      	ldr	r2, [sp, #28]
 800fe7c:	fb00 f101 	mul.w	r1, r0, r1
 800fe80:	3104      	adds	r1, #4
 800fe82:	440b      	add	r3, r1
 800fe84:	9303      	str	r3, [sp, #12]
 800fe86:	f853 8c04 	ldr.w	r8, [r3, #-4]
 800fe8a:	e70a      	b.n	800fca2 <uxr_prepare_reliable_buffer_to_write+0xb2>
 800fe8c:	8921      	ldrh	r1, [r4, #8]
 800fe8e:	fbb5 f3f1 	udiv	r3, r5, r1
 800fe92:	fb01 5313 	mls	r3, r1, r3, r5
 800fe96:	b29a      	uxth	r2, r3
 800fe98:	6863      	ldr	r3, [r4, #4]
 800fe9a:	fbb3 f3f1 	udiv	r3, r3, r1
 800fe9e:	6821      	ldr	r1, [r4, #0]
 800fea0:	9804      	ldr	r0, [sp, #16]
 800fea2:	fb02 f303 	mul.w	r3, r2, r3
 800fea6:	3304      	adds	r3, #4
 800fea8:	7b22      	ldrb	r2, [r4, #12]
 800feaa:	4419      	add	r1, r3
 800feac:	445a      	add	r2, fp
 800feae:	f841 2c04 	str.w	r2, [r1, #-4]
 800feb2:	7b23      	ldrb	r3, [r4, #12]
 800feb4:	9300      	str	r3, [sp, #0]
 800feb6:	2300      	movs	r3, #0
 800feb8:	f7fa fbc4 	bl	800a644 <ucdr_init_buffer_origin_offset>
 800febc:	81e5      	strh	r5, [r4, #14]
 800febe:	2001      	movs	r0, #1
 800fec0:	e7a2      	b.n	800fe08 <uxr_prepare_reliable_buffer_to_write+0x218>
 800fec2:	4682      	mov	sl, r0
 800fec4:	e6ca      	b.n	800fc5c <uxr_prepare_reliable_buffer_to_write+0x6c>
 800fec6:	bf00      	nop
 800fec8:	0800fad1 	.word	0x0800fad1

0800fecc <uxr_prepare_next_reliable_buffer_to_send>:
 800fecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fece:	4604      	mov	r4, r0
 800fed0:	460f      	mov	r7, r1
 800fed2:	8a00      	ldrh	r0, [r0, #16]
 800fed4:	2101      	movs	r1, #1
 800fed6:	4616      	mov	r6, r2
 800fed8:	461d      	mov	r5, r3
 800feda:	f000 f9ef 	bl	80102bc <uxr_seq_num_add>
 800fede:	8028      	strh	r0, [r5, #0]
 800fee0:	8922      	ldrh	r2, [r4, #8]
 800fee2:	fbb0 f3f2 	udiv	r3, r0, r2
 800fee6:	fb02 0c13 	mls	ip, r2, r3, r0
 800feea:	fa1f fc8c 	uxth.w	ip, ip
 800feee:	6863      	ldr	r3, [r4, #4]
 800fef0:	fbb3 f3f2 	udiv	r3, r3, r2
 800fef4:	fb0c fc03 	mul.w	ip, ip, r3
 800fef8:	6823      	ldr	r3, [r4, #0]
 800fefa:	89e1      	ldrh	r1, [r4, #14]
 800fefc:	f10c 0c04 	add.w	ip, ip, #4
 800ff00:	4463      	add	r3, ip
 800ff02:	603b      	str	r3, [r7, #0]
 800ff04:	6823      	ldr	r3, [r4, #0]
 800ff06:	449c      	add	ip, r3
 800ff08:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 800ff0c:	6033      	str	r3, [r6, #0]
 800ff0e:	f000 f9dd 	bl	80102cc <uxr_seq_num_cmp>
 800ff12:	2800      	cmp	r0, #0
 800ff14:	dd01      	ble.n	800ff1a <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 800ff16:	2000      	movs	r0, #0
 800ff18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff1a:	7b23      	ldrb	r3, [r4, #12]
 800ff1c:	6832      	ldr	r2, [r6, #0]
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	d9f9      	bls.n	800ff16 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 800ff22:	8a61      	ldrh	r1, [r4, #18]
 800ff24:	8a20      	ldrh	r0, [r4, #16]
 800ff26:	f000 f9cd 	bl	80102c4 <uxr_seq_num_sub>
 800ff2a:	8923      	ldrh	r3, [r4, #8]
 800ff2c:	4283      	cmp	r3, r0
 800ff2e:	d0f2      	beq.n	800ff16 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 800ff30:	8828      	ldrh	r0, [r5, #0]
 800ff32:	89e3      	ldrh	r3, [r4, #14]
 800ff34:	8220      	strh	r0, [r4, #16]
 800ff36:	4298      	cmp	r0, r3
 800ff38:	d001      	beq.n	800ff3e <uxr_prepare_next_reliable_buffer_to_send+0x72>
 800ff3a:	2001      	movs	r0, #1
 800ff3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff3e:	2101      	movs	r1, #1
 800ff40:	f000 f9bc 	bl	80102bc <uxr_seq_num_add>
 800ff44:	81e0      	strh	r0, [r4, #14]
 800ff46:	2001      	movs	r0, #1
 800ff48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff4a:	bf00      	nop

0800ff4c <uxr_update_output_stream_heartbeat_timestamp>:
 800ff4c:	b570      	push	{r4, r5, r6, lr}
 800ff4e:	8a01      	ldrh	r1, [r0, #16]
 800ff50:	4604      	mov	r4, r0
 800ff52:	8a40      	ldrh	r0, [r0, #18]
 800ff54:	4615      	mov	r5, r2
 800ff56:	461e      	mov	r6, r3
 800ff58:	f000 f9b8 	bl	80102cc <uxr_seq_num_cmp>
 800ff5c:	2800      	cmp	r0, #0
 800ff5e:	db07      	blt.n	800ff70 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 800ff60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff64:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ff68:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800ff6c:	2000      	movs	r0, #0
 800ff6e:	bd70      	pop	{r4, r5, r6, pc}
 800ff70:	f894 0020 	ldrb.w	r0, [r4, #32]
 800ff74:	b940      	cbnz	r0, 800ff88 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 800ff76:	2301      	movs	r3, #1
 800ff78:	f884 3020 	strb.w	r3, [r4, #32]
 800ff7c:	3564      	adds	r5, #100	; 0x64
 800ff7e:	f146 0600 	adc.w	r6, r6, #0
 800ff82:	e9c4 5606 	strd	r5, r6, [r4, #24]
 800ff86:	bd70      	pop	{r4, r5, r6, pc}
 800ff88:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800ff8c:	4295      	cmp	r5, r2
 800ff8e:	eb76 0303 	sbcs.w	r3, r6, r3
 800ff92:	bfa5      	ittet	ge
 800ff94:	3001      	addge	r0, #1
 800ff96:	f884 0020 	strbge.w	r0, [r4, #32]
 800ff9a:	2000      	movlt	r0, #0
 800ff9c:	2001      	movge	r0, #1
 800ff9e:	e7ed      	b.n	800ff7c <uxr_update_output_stream_heartbeat_timestamp+0x30>

0800ffa0 <uxr_begin_output_nack_buffer_it>:
 800ffa0:	8a40      	ldrh	r0, [r0, #18]
 800ffa2:	4770      	bx	lr

0800ffa4 <uxr_next_reliable_nack_buffer_to_send>:
 800ffa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffa8:	f890 8021 	ldrb.w	r8, [r0, #33]	; 0x21
 800ffac:	b082      	sub	sp, #8
 800ffae:	f1b8 0f00 	cmp.w	r8, #0
 800ffb2:	d011      	beq.n	800ffd8 <uxr_next_reliable_nack_buffer_to_send+0x34>
 800ffb4:	4604      	mov	r4, r0
 800ffb6:	8818      	ldrh	r0, [r3, #0]
 800ffb8:	460e      	mov	r6, r1
 800ffba:	4617      	mov	r7, r2
 800ffbc:	461d      	mov	r5, r3
 800ffbe:	2101      	movs	r1, #1
 800ffc0:	f000 f97c 	bl	80102bc <uxr_seq_num_add>
 800ffc4:	8028      	strh	r0, [r5, #0]
 800ffc6:	8a21      	ldrh	r1, [r4, #16]
 800ffc8:	f000 f980 	bl	80102cc <uxr_seq_num_cmp>
 800ffcc:	2800      	cmp	r0, #0
 800ffce:	dd07      	ble.n	800ffe0 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 800ffd0:	f04f 0800 	mov.w	r8, #0
 800ffd4:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
 800ffd8:	4640      	mov	r0, r8
 800ffda:	b002      	add	sp, #8
 800ffdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffe0:	8921      	ldrh	r1, [r4, #8]
 800ffe2:	8828      	ldrh	r0, [r5, #0]
 800ffe4:	6823      	ldr	r3, [r4, #0]
 800ffe6:	fbb0 f2f1 	udiv	r2, r0, r1
 800ffea:	fb01 0c12 	mls	ip, r1, r2, r0
 800ffee:	fa1f f28c 	uxth.w	r2, ip
 800fff2:	9301      	str	r3, [sp, #4]
 800fff4:	6863      	ldr	r3, [r4, #4]
 800fff6:	fbb3 fcf1 	udiv	ip, r3, r1
 800fffa:	9b01      	ldr	r3, [sp, #4]
 800fffc:	fb02 fc0c 	mul.w	ip, r2, ip
 8010000:	f10c 0c04 	add.w	ip, ip, #4
 8010004:	4463      	add	r3, ip
 8010006:	6033      	str	r3, [r6, #0]
 8010008:	6823      	ldr	r3, [r4, #0]
 801000a:	4463      	add	r3, ip
 801000c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010010:	603b      	str	r3, [r7, #0]
 8010012:	7b22      	ldrb	r2, [r4, #12]
 8010014:	429a      	cmp	r2, r3
 8010016:	d0d2      	beq.n	800ffbe <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8010018:	4640      	mov	r0, r8
 801001a:	b002      	add	sp, #8
 801001c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010020 <uxr_process_acknack>:
 8010020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010022:	4604      	mov	r4, r0
 8010024:	460e      	mov	r6, r1
 8010026:	4610      	mov	r0, r2
 8010028:	2101      	movs	r1, #1
 801002a:	f000 f94b 	bl	80102c4 <uxr_seq_num_sub>
 801002e:	8a61      	ldrh	r1, [r4, #18]
 8010030:	f000 f948 	bl	80102c4 <uxr_seq_num_sub>
 8010034:	b1c0      	cbz	r0, 8010068 <uxr_process_acknack+0x48>
 8010036:	4605      	mov	r5, r0
 8010038:	2700      	movs	r7, #0
 801003a:	2101      	movs	r1, #1
 801003c:	8a60      	ldrh	r0, [r4, #18]
 801003e:	f000 f93d 	bl	80102bc <uxr_seq_num_add>
 8010042:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8010046:	fbb0 f1fc 	udiv	r1, r0, ip
 801004a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801004e:	fb0c 0111 	mls	r1, ip, r1, r0
 8010052:	b289      	uxth	r1, r1
 8010054:	3701      	adds	r7, #1
 8010056:	fbb3 f3fc 	udiv	r3, r3, ip
 801005a:	fb01 f303 	mul.w	r3, r1, r3
 801005e:	42bd      	cmp	r5, r7
 8010060:	7b21      	ldrb	r1, [r4, #12]
 8010062:	8260      	strh	r0, [r4, #18]
 8010064:	50d1      	str	r1, [r2, r3]
 8010066:	d1e8      	bne.n	801003a <uxr_process_acknack+0x1a>
 8010068:	3e00      	subs	r6, #0
 801006a:	f04f 0300 	mov.w	r3, #0
 801006e:	bf18      	it	ne
 8010070:	2601      	movne	r6, #1
 8010072:	f884 3020 	strb.w	r3, [r4, #32]
 8010076:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801007a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801007c <uxr_is_output_up_to_date>:
 801007c:	8a01      	ldrh	r1, [r0, #16]
 801007e:	8a40      	ldrh	r0, [r0, #18]
 8010080:	b508      	push	{r3, lr}
 8010082:	f000 f923 	bl	80102cc <uxr_seq_num_cmp>
 8010086:	fab0 f080 	clz	r0, r0
 801008a:	0940      	lsrs	r0, r0, #5
 801008c:	bd08      	pop	{r3, pc}
 801008e:	bf00      	nop

08010090 <get_available_free_slots>:
 8010090:	8902      	ldrh	r2, [r0, #8]
 8010092:	b1da      	cbz	r2, 80100cc <get_available_free_slots+0x3c>
 8010094:	b530      	push	{r4, r5, lr}
 8010096:	2100      	movs	r1, #0
 8010098:	6843      	ldr	r3, [r0, #4]
 801009a:	6805      	ldr	r5, [r0, #0]
 801009c:	7b04      	ldrb	r4, [r0, #12]
 801009e:	fbb3 fef2 	udiv	lr, r3, r2
 80100a2:	4608      	mov	r0, r1
 80100a4:	460b      	mov	r3, r1
 80100a6:	fbb3 fcf2 	udiv	ip, r3, r2
 80100aa:	fb02 331c 	mls	r3, r2, ip, r3
 80100ae:	b29b      	uxth	r3, r3
 80100b0:	fb0e f303 	mul.w	r3, lr, r3
 80100b4:	3101      	adds	r1, #1
 80100b6:	f855 c003 	ldr.w	ip, [r5, r3]
 80100ba:	4564      	cmp	r4, ip
 80100bc:	bf08      	it	eq
 80100be:	3001      	addeq	r0, #1
 80100c0:	b28b      	uxth	r3, r1
 80100c2:	bf08      	it	eq
 80100c4:	b280      	uxtheq	r0, r0
 80100c6:	4293      	cmp	r3, r2
 80100c8:	d3ed      	bcc.n	80100a6 <get_available_free_slots+0x16>
 80100ca:	bd30      	pop	{r4, r5, pc}
 80100cc:	4610      	mov	r0, r2
 80100ce:	4770      	bx	lr

080100d0 <uxr_buffer_cancel_data>:
 80100d0:	b510      	push	{r4, lr}
 80100d2:	b094      	sub	sp, #80	; 0x50
 80100d4:	2300      	movs	r3, #0
 80100d6:	9202      	str	r2, [sp, #8]
 80100d8:	9205      	str	r2, [sp, #20]
 80100da:	9301      	str	r3, [sp, #4]
 80100dc:	2201      	movs	r2, #1
 80100de:	f8ad 301c 	strh.w	r3, [sp, #28]
 80100e2:	f88d 301e 	strb.w	r3, [sp, #30]
 80100e6:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 80100ea:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 80100ee:	2308      	movs	r3, #8
 80100f0:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 80100f4:	9300      	str	r3, [sp, #0]
 80100f6:	2210      	movs	r2, #16
 80100f8:	ab0c      	add	r3, sp, #48	; 0x30
 80100fa:	4604      	mov	r4, r0
 80100fc:	9103      	str	r1, [sp, #12]
 80100fe:	f7fb fb9f 	bl	800b840 <uxr_prepare_stream_to_write_submessage>
 8010102:	b918      	cbnz	r0, 801010c <uxr_buffer_cancel_data+0x3c>
 8010104:	4604      	mov	r4, r0
 8010106:	4620      	mov	r0, r4
 8010108:	b014      	add	sp, #80	; 0x50
 801010a:	bd10      	pop	{r4, pc}
 801010c:	9905      	ldr	r1, [sp, #20]
 801010e:	aa06      	add	r2, sp, #24
 8010110:	4620      	mov	r0, r4
 8010112:	f7fb fccb 	bl	800baac <uxr_init_base_object_request>
 8010116:	a906      	add	r1, sp, #24
 8010118:	4604      	mov	r4, r0
 801011a:	a80c      	add	r0, sp, #48	; 0x30
 801011c:	f7fc feda 	bl	800ced4 <uxr_serialize_READ_DATA_Payload>
 8010120:	4620      	mov	r0, r4
 8010122:	b014      	add	sp, #80	; 0x50
 8010124:	bd10      	pop	{r4, pc}
 8010126:	bf00      	nop

08010128 <read_submessage_format>:
 8010128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801012c:	b095      	sub	sp, #84	; 0x54
 801012e:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 8010132:	b113      	cbz	r3, 801013a <read_submessage_format+0x12>
 8010134:	b015      	add	sp, #84	; 0x54
 8010136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801013a:	460c      	mov	r4, r1
 801013c:	4615      	mov	r5, r2
 801013e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8010142:	4607      	mov	r7, r0
 8010144:	981c      	ldr	r0, [sp, #112]	; 0x70
 8010146:	9004      	str	r0, [sp, #16]
 8010148:	981d      	ldr	r0, [sp, #116]	; 0x74
 801014a:	9005      	str	r0, [sp, #20]
 801014c:	1a52      	subs	r2, r2, r1
 801014e:	a80c      	add	r0, sp, #48	; 0x30
 8010150:	4699      	mov	r9, r3
 8010152:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8010156:	f7fa fa87 	bl	800a668 <ucdr_init_buffer>
 801015a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801015e:	a80c      	add	r0, sp, #48	; 0x30
 8010160:	f7fa fa56 	bl	800a610 <ucdr_set_on_full_buffer_callback>
 8010164:	69e2      	ldr	r2, [r4, #28]
 8010166:	b19a      	cbz	r2, 8010190 <read_submessage_format+0x68>
 8010168:	f1b8 0f07 	cmp.w	r8, #7
 801016c:	f882 9014 	strb.w	r9, [r2, #20]
 8010170:	d040      	beq.n	80101f4 <read_submessage_format+0xcc>
 8010172:	f1b8 0f08 	cmp.w	r8, #8
 8010176:	d02e      	beq.n	80101d6 <read_submessage_format+0xae>
 8010178:	f1b8 0f06 	cmp.w	r8, #6
 801017c:	d011      	beq.n	80101a2 <read_submessage_format+0x7a>
 801017e:	2301      	movs	r3, #1
 8010180:	7513      	strb	r3, [r2, #20]
 8010182:	4629      	mov	r1, r5
 8010184:	4620      	mov	r0, r4
 8010186:	f7fa fabf 	bl	800a708 <ucdr_advance_buffer>
 801018a:	b015      	add	sp, #84	; 0x54
 801018c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010190:	f1b8 0f07 	cmp.w	r8, #7
 8010194:	d02e      	beq.n	80101f4 <read_submessage_format+0xcc>
 8010196:	f1b8 0f08 	cmp.w	r8, #8
 801019a:	d01c      	beq.n	80101d6 <read_submessage_format+0xae>
 801019c:	f1b8 0f06 	cmp.w	r8, #6
 80101a0:	d1ef      	bne.n	8010182 <read_submessage_format+0x5a>
 80101a2:	f8d7 8088 	ldr.w	r8, [r7, #136]	; 0x88
 80101a6:	f1b8 0f00 	cmp.w	r8, #0
 80101aa:	d011      	beq.n	80101d0 <read_submessage_format+0xa8>
 80101ac:	ab0c      	add	r3, sp, #48	; 0x30
 80101ae:	e9cd 3500 	strd	r3, r5, [sp]
 80101b2:	2306      	movs	r3, #6
 80101b4:	f88d 3016 	strb.w	r3, [sp, #22]
 80101b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80101bc:	9302      	str	r3, [sp, #8]
 80101be:	4632      	mov	r2, r6
 80101c0:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80101c4:	4638      	mov	r0, r7
 80101c6:	47c0      	blx	r8
 80101c8:	2301      	movs	r3, #1
 80101ca:	69e2      	ldr	r2, [r4, #28]
 80101cc:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80101d0:	2a00      	cmp	r2, #0
 80101d2:	d1d4      	bne.n	801017e <read_submessage_format+0x56>
 80101d4:	e7d5      	b.n	8010182 <read_submessage_format+0x5a>
 80101d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d0f8      	beq.n	80101d0 <read_submessage_format+0xa8>
 80101de:	a906      	add	r1, sp, #24
 80101e0:	a80c      	add	r0, sp, #48	; 0x30
 80101e2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80101e6:	f7fc ff15 	bl	800d014 <uxr_deserialize_SampleIdentity>
 80101ea:	b9a0      	cbnz	r0, 8010216 <read_submessage_format+0xee>
 80101ec:	69e2      	ldr	r2, [r4, #28]
 80101ee:	2a00      	cmp	r2, #0
 80101f0:	d1c5      	bne.n	801017e <read_submessage_format+0x56>
 80101f2:	e7c6      	b.n	8010182 <read_submessage_format+0x5a>
 80101f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80101f8:	b13b      	cbz	r3, 801020a <read_submessage_format+0xe2>
 80101fa:	a906      	add	r1, sp, #24
 80101fc:	a80c      	add	r0, sp, #48	; 0x30
 80101fe:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8010202:	f7fc fc01 	bl	800ca08 <uxr_deserialize_BaseObjectRequest>
 8010206:	bb60      	cbnz	r0, 8010262 <read_submessage_format+0x13a>
 8010208:	69e2      	ldr	r2, [r4, #28]
 801020a:	68a3      	ldr	r3, [r4, #8]
 801020c:	442b      	add	r3, r5
 801020e:	60a3      	str	r3, [r4, #8]
 8010210:	2a00      	cmp	r2, #0
 8010212:	d1b4      	bne.n	801017e <read_submessage_format+0x56>
 8010214:	e7b5      	b.n	8010182 <read_submessage_format+0x5a>
 8010216:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801021a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801021c:	1a52      	subs	r2, r2, r1
 801021e:	eba8 0803 	sub.w	r8, r8, r3
 8010222:	a80c      	add	r0, sp, #48	; 0x30
 8010224:	f7fa fa20 	bl	800a668 <ucdr_init_buffer>
 8010228:	44a8      	add	r8, r5
 801022a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801022e:	a80c      	add	r0, sp, #48	; 0x30
 8010230:	f7fa f9ee 	bl	800a610 <ucdr_set_on_full_buffer_callback>
 8010234:	fa1f f888 	uxth.w	r8, r8
 8010238:	ab0c      	add	r3, sp, #48	; 0x30
 801023a:	9300      	str	r3, [sp, #0]
 801023c:	f8cd 8004 	str.w	r8, [sp, #4]
 8010240:	2108      	movs	r1, #8
 8010242:	f88d 1016 	strb.w	r1, [sp, #22]
 8010246:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 801024a:	9102      	str	r1, [sp, #8]
 801024c:	ab06      	add	r3, sp, #24
 801024e:	4632      	mov	r2, r6
 8010250:	9905      	ldr	r1, [sp, #20]
 8010252:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 8010256:	4638      	mov	r0, r7
 8010258:	47b0      	blx	r6
 801025a:	2301      	movs	r3, #1
 801025c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8010260:	e7c4      	b.n	80101ec <read_submessage_format+0xc4>
 8010262:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8010266:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010268:	1a52      	subs	r2, r2, r1
 801026a:	a80c      	add	r0, sp, #48	; 0x30
 801026c:	eba8 0803 	sub.w	r8, r8, r3
 8010270:	f7fa f9fa 	bl	800a668 <ucdr_init_buffer>
 8010274:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010278:	a80c      	add	r0, sp, #48	; 0x30
 801027a:	f7fa f9c9 	bl	800a610 <ucdr_set_on_full_buffer_callback>
 801027e:	ab0c      	add	r3, sp, #48	; 0x30
 8010280:	9300      	str	r3, [sp, #0]
 8010282:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8010286:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801028a:	44a8      	add	r8, r5
 801028c:	fa1f f888 	uxth.w	r8, r8
 8010290:	f8cd 8004 	str.w	r8, [sp, #4]
 8010294:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010298:	2107      	movs	r1, #7
 801029a:	f88d 1016 	strb.w	r1, [sp, #22]
 801029e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80102a2:	9102      	str	r1, [sp, #8]
 80102a4:	4632      	mov	r2, r6
 80102a6:	b29b      	uxth	r3, r3
 80102a8:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 80102ac:	9905      	ldr	r1, [sp, #20]
 80102ae:	4638      	mov	r0, r7
 80102b0:	47b0      	blx	r6
 80102b2:	2301      	movs	r3, #1
 80102b4:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80102b8:	e7a6      	b.n	8010208 <read_submessage_format+0xe0>
 80102ba:	bf00      	nop

080102bc <uxr_seq_num_add>:
 80102bc:	4408      	add	r0, r1
 80102be:	b280      	uxth	r0, r0
 80102c0:	4770      	bx	lr
 80102c2:	bf00      	nop

080102c4 <uxr_seq_num_sub>:
 80102c4:	1a40      	subs	r0, r0, r1
 80102c6:	b280      	uxth	r0, r0
 80102c8:	4770      	bx	lr
 80102ca:	bf00      	nop

080102cc <uxr_seq_num_cmp>:
 80102cc:	4288      	cmp	r0, r1
 80102ce:	d011      	beq.n	80102f4 <uxr_seq_num_cmp+0x28>
 80102d0:	d309      	bcc.n	80102e6 <uxr_seq_num_cmp+0x1a>
 80102d2:	4288      	cmp	r0, r1
 80102d4:	d910      	bls.n	80102f8 <uxr_seq_num_cmp+0x2c>
 80102d6:	1a40      	subs	r0, r0, r1
 80102d8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80102dc:	bfd4      	ite	le
 80102de:	2001      	movle	r0, #1
 80102e0:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 80102e4:	4770      	bx	lr
 80102e6:	1a0b      	subs	r3, r1, r0
 80102e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80102ec:	daf1      	bge.n	80102d2 <uxr_seq_num_cmp+0x6>
 80102ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80102f2:	4770      	bx	lr
 80102f4:	2000      	movs	r0, #0
 80102f6:	4770      	bx	lr
 80102f8:	2001      	movs	r0, #1
 80102fa:	4770      	bx	lr

080102fc <uxr_init_framing_io>:
 80102fc:	2300      	movs	r3, #0
 80102fe:	7041      	strb	r1, [r0, #1]
 8010300:	7003      	strb	r3, [r0, #0]
 8010302:	8583      	strh	r3, [r0, #44]	; 0x2c
 8010304:	4770      	bx	lr
 8010306:	bf00      	nop

08010308 <uxr_write_framed_msg>:
 8010308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801030c:	4617      	mov	r7, r2
 801030e:	7842      	ldrb	r2, [r0, #1]
 8010310:	b083      	sub	sp, #12
 8010312:	460e      	mov	r6, r1
 8010314:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8010318:	469a      	mov	sl, r3
 801031a:	2901      	cmp	r1, #1
 801031c:	f04f 037e 	mov.w	r3, #126	; 0x7e
 8010320:	4604      	mov	r4, r0
 8010322:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8010326:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 801032a:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801032e:	f240 8137 	bls.w	80105a0 <uxr_write_framed_msg+0x298>
 8010332:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8010336:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 801033a:	2901      	cmp	r1, #1
 801033c:	f04f 0202 	mov.w	r2, #2
 8010340:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010344:	f240 808f 	bls.w	8010466 <uxr_write_framed_msg+0x15e>
 8010348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801034a:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 801034e:	b2dd      	uxtb	r5, r3
 8010350:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8010354:	2203      	movs	r2, #3
 8010356:	2901      	cmp	r1, #1
 8010358:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801035c:	f240 809a 	bls.w	8010494 <uxr_write_framed_msg+0x18c>
 8010360:	18a1      	adds	r1, r4, r2
 8010362:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010364:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
 8010368:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801036c:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8010370:	3201      	adds	r2, #1
 8010372:	2801      	cmp	r0, #1
 8010374:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010378:	f240 80a0 	bls.w	80104bc <uxr_write_framed_msg+0x1b4>
 801037c:	18a0      	adds	r0, r4, r2
 801037e:	3201      	adds	r2, #1
 8010380:	b2d2      	uxtb	r2, r2
 8010382:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8010386:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801038a:	2b00      	cmp	r3, #0
 801038c:	f000 80a9 	beq.w	80104e2 <uxr_write_framed_msg+0x1da>
 8010390:	f04f 0900 	mov.w	r9, #0
 8010394:	46c8      	mov	r8, r9
 8010396:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801039a:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 801039e:	2901      	cmp	r1, #1
 80103a0:	f240 80c3 	bls.w	801052a <uxr_write_framed_msg+0x222>
 80103a4:	2a29      	cmp	r2, #41	; 0x29
 80103a6:	f200 809f 	bhi.w	80104e8 <uxr_write_framed_msg+0x1e0>
 80103aa:	18a1      	adds	r1, r4, r2
 80103ac:	3201      	adds	r2, #1
 80103ae:	b2d2      	uxtb	r2, r2
 80103b0:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 80103b4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80103b8:	ea89 0303 	eor.w	r3, r9, r3
 80103bc:	498c      	ldr	r1, [pc, #560]	; (80105f0 <uxr_write_framed_msg+0x2e8>)
 80103be:	b2db      	uxtb	r3, r3
 80103c0:	f108 0801 	add.w	r8, r8, #1
 80103c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80103c8:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 80103cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80103ce:	4543      	cmp	r3, r8
 80103d0:	d8e1      	bhi.n	8010396 <uxr_write_framed_msg+0x8e>
 80103d2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80103d6:	fa5f f889 	uxtb.w	r8, r9
 80103da:	9301      	str	r3, [sp, #4]
 80103dc:	f04f 0900 	mov.w	r9, #0
 80103e0:	f1a8 0a7d 	sub.w	sl, r8, #125	; 0x7d
 80103e4:	fa5f f18a 	uxtb.w	r1, sl
 80103e8:	2901      	cmp	r1, #1
 80103ea:	d921      	bls.n	8010430 <uxr_write_framed_msg+0x128>
 80103ec:	2a29      	cmp	r2, #41	; 0x29
 80103ee:	f240 80af 	bls.w	8010550 <uxr_write_framed_msg+0x248>
 80103f2:	2500      	movs	r5, #0
 80103f4:	e000      	b.n	80103f8 <uxr_write_framed_msg+0xf0>
 80103f6:	b160      	cbz	r0, 8010412 <uxr_write_framed_msg+0x10a>
 80103f8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80103fc:	1b52      	subs	r2, r2, r5
 80103fe:	465b      	mov	r3, fp
 8010400:	4421      	add	r1, r4
 8010402:	4638      	mov	r0, r7
 8010404:	47b0      	blx	r6
 8010406:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801040a:	4405      	add	r5, r0
 801040c:	4295      	cmp	r5, r2
 801040e:	d3f2      	bcc.n	80103f6 <uxr_write_framed_msg+0xee>
 8010410:	d003      	beq.n	801041a <uxr_write_framed_msg+0x112>
 8010412:	2000      	movs	r0, #0
 8010414:	b003      	add	sp, #12
 8010416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801041a:	fa5f f18a 	uxtb.w	r1, sl
 801041e:	f04f 0300 	mov.w	r3, #0
 8010422:	2901      	cmp	r1, #1
 8010424:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8010428:	f04f 0200 	mov.w	r2, #0
 801042c:	f200 8090 	bhi.w	8010550 <uxr_write_framed_msg+0x248>
 8010430:	1c51      	adds	r1, r2, #1
 8010432:	b2c9      	uxtb	r1, r1
 8010434:	2929      	cmp	r1, #41	; 0x29
 8010436:	d8dc      	bhi.n	80103f2 <uxr_write_framed_msg+0xea>
 8010438:	18a5      	adds	r5, r4, r2
 801043a:	4421      	add	r1, r4
 801043c:	3202      	adds	r2, #2
 801043e:	f088 0820 	eor.w	r8, r8, #32
 8010442:	4648      	mov	r0, r9
 8010444:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8010448:	b2d2      	uxtb	r2, r2
 801044a:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 801044e:	f04f 0901 	mov.w	r9, #1
 8010452:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 8010456:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801045a:	2800      	cmp	r0, #0
 801045c:	f040 8085 	bne.w	801056a <uxr_write_framed_msg+0x262>
 8010460:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010464:	e7bc      	b.n	80103e0 <uxr_write_framed_msg+0xd8>
 8010466:	4611      	mov	r1, r2
 8010468:	f04f 0c03 	mov.w	ip, #3
 801046c:	2204      	movs	r2, #4
 801046e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010470:	4421      	add	r1, r4
 8010472:	b2dd      	uxtb	r5, r3
 8010474:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 8010478:	f881 e038 	strb.w	lr, [r1, #56]	; 0x38
 801047c:	44a4      	add	ip, r4
 801047e:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8010482:	f080 0020 	eor.w	r0, r0, #32
 8010486:	2901      	cmp	r1, #1
 8010488:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 801048c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010490:	f63f af66 	bhi.w	8010360 <uxr_write_framed_msg+0x58>
 8010494:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010496:	18a0      	adds	r0, r4, r2
 8010498:	f085 0520 	eor.w	r5, r5, #32
 801049c:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 80104a0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80104a4:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 80104a8:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 80104ac:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 80104b0:	3202      	adds	r2, #2
 80104b2:	2801      	cmp	r0, #1
 80104b4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80104b8:	f63f af60 	bhi.w	801037c <uxr_write_framed_msg+0x74>
 80104bc:	1c50      	adds	r0, r2, #1
 80104be:	18a5      	adds	r5, r4, r2
 80104c0:	fa54 f080 	uxtab	r0, r4, r0
 80104c4:	3202      	adds	r2, #2
 80104c6:	f081 0120 	eor.w	r1, r1, #32
 80104ca:	b2d2      	uxtb	r2, r2
 80104cc:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 80104d0:	f885 c038 	strb.w	ip, [r5, #56]	; 0x38
 80104d4:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80104d8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80104dc:	2b00      	cmp	r3, #0
 80104de:	f47f af57 	bne.w	8010390 <uxr_write_framed_msg+0x88>
 80104e2:	9301      	str	r3, [sp, #4]
 80104e4:	4698      	mov	r8, r3
 80104e6:	e779      	b.n	80103dc <uxr_write_framed_msg+0xd4>
 80104e8:	2500      	movs	r5, #0
 80104ea:	e001      	b.n	80104f0 <uxr_write_framed_msg+0x1e8>
 80104ec:	2800      	cmp	r0, #0
 80104ee:	d090      	beq.n	8010412 <uxr_write_framed_msg+0x10a>
 80104f0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80104f4:	1b52      	subs	r2, r2, r5
 80104f6:	465b      	mov	r3, fp
 80104f8:	4421      	add	r1, r4
 80104fa:	4638      	mov	r0, r7
 80104fc:	47b0      	blx	r6
 80104fe:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8010502:	4405      	add	r5, r0
 8010504:	4295      	cmp	r5, r2
 8010506:	d3f1      	bcc.n	80104ec <uxr_write_framed_msg+0x1e4>
 8010508:	d183      	bne.n	8010412 <uxr_write_framed_msg+0x10a>
 801050a:	f04f 0300 	mov.w	r3, #0
 801050e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8010512:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010514:	4543      	cmp	r3, r8
 8010516:	d964      	bls.n	80105e2 <uxr_write_framed_msg+0x2da>
 8010518:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801051c:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8010520:	2901      	cmp	r1, #1
 8010522:	f04f 0200 	mov.w	r2, #0
 8010526:	f63f af3d 	bhi.w	80103a4 <uxr_write_framed_msg+0x9c>
 801052a:	1c51      	adds	r1, r2, #1
 801052c:	b2c9      	uxtb	r1, r1
 801052e:	2929      	cmp	r1, #41	; 0x29
 8010530:	d8da      	bhi.n	80104e8 <uxr_write_framed_msg+0x1e0>
 8010532:	18a0      	adds	r0, r4, r2
 8010534:	4421      	add	r1, r4
 8010536:	f04f 057d 	mov.w	r5, #125	; 0x7d
 801053a:	3202      	adds	r2, #2
 801053c:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8010540:	b2d2      	uxtb	r2, r2
 8010542:	f083 0020 	eor.w	r0, r3, #32
 8010546:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 801054a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801054e:	e733      	b.n	80103b8 <uxr_write_framed_msg+0xb0>
 8010550:	18a1      	adds	r1, r4, r2
 8010552:	3201      	adds	r2, #1
 8010554:	4648      	mov	r0, r9
 8010556:	b2d2      	uxtb	r2, r2
 8010558:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 801055c:	f04f 0901 	mov.w	r9, #1
 8010560:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010564:	2800      	cmp	r0, #0
 8010566:	f43f af7b 	beq.w	8010460 <uxr_write_framed_msg+0x158>
 801056a:	2500      	movs	r5, #0
 801056c:	e002      	b.n	8010574 <uxr_write_framed_msg+0x26c>
 801056e:	2800      	cmp	r0, #0
 8010570:	f43f af4f 	beq.w	8010412 <uxr_write_framed_msg+0x10a>
 8010574:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8010578:	1b52      	subs	r2, r2, r5
 801057a:	465b      	mov	r3, fp
 801057c:	4421      	add	r1, r4
 801057e:	4638      	mov	r0, r7
 8010580:	47b0      	blx	r6
 8010582:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8010586:	4405      	add	r5, r0
 8010588:	4295      	cmp	r5, r2
 801058a:	d3f0      	bcc.n	801056e <uxr_write_framed_msg+0x266>
 801058c:	f47f af41 	bne.w	8010412 <uxr_write_framed_msg+0x10a>
 8010590:	2300      	movs	r3, #0
 8010592:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8010596:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010598:	b298      	uxth	r0, r3
 801059a:	b003      	add	sp, #12
 801059c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105a0:	217d      	movs	r1, #125	; 0x7d
 80105a2:	f082 0220 	eor.w	r2, r2, #32
 80105a6:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 80105aa:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 80105ae:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 80105b2:	2901      	cmp	r1, #1
 80105b4:	f04f 0203 	mov.w	r2, #3
 80105b8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80105bc:	d804      	bhi.n	80105c8 <uxr_write_framed_msg+0x2c0>
 80105be:	4611      	mov	r1, r2
 80105c0:	f04f 0c04 	mov.w	ip, #4
 80105c4:	2205      	movs	r2, #5
 80105c6:	e752      	b.n	801046e <uxr_write_framed_msg+0x166>
 80105c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80105ca:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 80105ce:	b2dd      	uxtb	r5, r3
 80105d0:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 80105d4:	2204      	movs	r2, #4
 80105d6:	2901      	cmp	r1, #1
 80105d8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80105dc:	f63f aec0 	bhi.w	8010360 <uxr_write_framed_msg+0x58>
 80105e0:	e758      	b.n	8010494 <uxr_write_framed_msg+0x18c>
 80105e2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80105e6:	fa5f f889 	uxtb.w	r8, r9
 80105ea:	9301      	str	r3, [sp, #4]
 80105ec:	2200      	movs	r2, #0
 80105ee:	e6f5      	b.n	80103dc <uxr_write_framed_msg+0xd4>
 80105f0:	08013480 	.word	0x08013480

080105f4 <uxr_framing_read_transport>:
 80105f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105f8:	4604      	mov	r4, r0
 80105fa:	b083      	sub	sp, #12
 80105fc:	461f      	mov	r7, r3
 80105fe:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8010602:	4689      	mov	r9, r1
 8010604:	4692      	mov	sl, r2
 8010606:	f7fb fbff 	bl	800be08 <uxr_millis>
 801060a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801060e:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8010612:	42b3      	cmp	r3, r6
 8010614:	4680      	mov	r8, r0
 8010616:	d061      	beq.n	80106dc <uxr_framing_read_transport+0xe8>
 8010618:	d81c      	bhi.n	8010654 <uxr_framing_read_transport+0x60>
 801061a:	1e75      	subs	r5, r6, #1
 801061c:	1aed      	subs	r5, r5, r3
 801061e:	b2ed      	uxtb	r5, r5
 8010620:	2600      	movs	r6, #0
 8010622:	455d      	cmp	r5, fp
 8010624:	d81f      	bhi.n	8010666 <uxr_framing_read_transport+0x72>
 8010626:	19ab      	adds	r3, r5, r6
 8010628:	455b      	cmp	r3, fp
 801062a:	bf84      	itt	hi
 801062c:	ebab 0605 	subhi.w	r6, fp, r5
 8010630:	b2f6      	uxtbhi	r6, r6
 8010632:	b9ed      	cbnz	r5, 8010670 <uxr_framing_read_transport+0x7c>
 8010634:	f04f 0b00 	mov.w	fp, #0
 8010638:	f7fb fbe6 	bl	800be08 <uxr_millis>
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	eba0 0808 	sub.w	r8, r0, r8
 8010642:	eba3 0308 	sub.w	r3, r3, r8
 8010646:	4658      	mov	r0, fp
 8010648:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801064c:	603b      	str	r3, [r7, #0]
 801064e:	b003      	add	sp, #12
 8010650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010654:	2e00      	cmp	r6, #0
 8010656:	d049      	beq.n	80106ec <uxr_framing_read_transport+0xf8>
 8010658:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 801065c:	b2ed      	uxtb	r5, r5
 801065e:	3e01      	subs	r6, #1
 8010660:	455d      	cmp	r5, fp
 8010662:	b2f6      	uxtb	r6, r6
 8010664:	d9df      	bls.n	8010626 <uxr_framing_read_transport+0x32>
 8010666:	fa5f f58b 	uxtb.w	r5, fp
 801066a:	2600      	movs	r6, #0
 801066c:	2d00      	cmp	r5, #0
 801066e:	d0e1      	beq.n	8010634 <uxr_framing_read_transport+0x40>
 8010670:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8010674:	3102      	adds	r1, #2
 8010676:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010678:	9300      	str	r3, [sp, #0]
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	4421      	add	r1, r4
 801067e:	462a      	mov	r2, r5
 8010680:	4650      	mov	r0, sl
 8010682:	47c8      	blx	r9
 8010684:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8010688:	4a1a      	ldr	r2, [pc, #104]	; (80106f4 <uxr_framing_read_transport+0x100>)
 801068a:	4403      	add	r3, r0
 801068c:	0859      	lsrs	r1, r3, #1
 801068e:	fba2 2101 	umull	r2, r1, r2, r1
 8010692:	0889      	lsrs	r1, r1, #2
 8010694:	222a      	movs	r2, #42	; 0x2a
 8010696:	fb02 3111 	mls	r1, r2, r1, r3
 801069a:	4683      	mov	fp, r0
 801069c:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 80106a0:	2800      	cmp	r0, #0
 80106a2:	d0c7      	beq.n	8010634 <uxr_framing_read_transport+0x40>
 80106a4:	42a8      	cmp	r0, r5
 80106a6:	d1c7      	bne.n	8010638 <uxr_framing_read_transport+0x44>
 80106a8:	2e00      	cmp	r6, #0
 80106aa:	d0c5      	beq.n	8010638 <uxr_framing_read_transport+0x44>
 80106ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80106ae:	9300      	str	r3, [sp, #0]
 80106b0:	3102      	adds	r1, #2
 80106b2:	4632      	mov	r2, r6
 80106b4:	4421      	add	r1, r4
 80106b6:	2300      	movs	r3, #0
 80106b8:	4650      	mov	r0, sl
 80106ba:	47c8      	blx	r9
 80106bc:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80106c0:	4a0c      	ldr	r2, [pc, #48]	; (80106f4 <uxr_framing_read_transport+0x100>)
 80106c2:	180b      	adds	r3, r1, r0
 80106c4:	0859      	lsrs	r1, r3, #1
 80106c6:	fba2 1201 	umull	r1, r2, r2, r1
 80106ca:	0892      	lsrs	r2, r2, #2
 80106cc:	212a      	movs	r1, #42	; 0x2a
 80106ce:	fb01 3312 	mls	r3, r1, r2, r3
 80106d2:	eb00 0b05 	add.w	fp, r0, r5
 80106d6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80106da:	e7ad      	b.n	8010638 <uxr_framing_read_transport+0x44>
 80106dc:	2600      	movs	r6, #0
 80106de:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 80106e2:	85a6      	strh	r6, [r4, #44]	; 0x2c
 80106e4:	d9bf      	bls.n	8010666 <uxr_framing_read_transport+0x72>
 80106e6:	2102      	movs	r1, #2
 80106e8:	2529      	movs	r5, #41	; 0x29
 80106ea:	e7c4      	b.n	8010676 <uxr_framing_read_transport+0x82>
 80106ec:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 80106f0:	b2ed      	uxtb	r5, r5
 80106f2:	e796      	b.n	8010622 <uxr_framing_read_transport+0x2e>
 80106f4:	30c30c31 	.word	0x30c30c31

080106f8 <uxr_read_framed_msg>:
 80106f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106fc:	461e      	mov	r6, r3
 80106fe:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8010702:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8010706:	429d      	cmp	r5, r3
 8010708:	b083      	sub	sp, #12
 801070a:	4604      	mov	r4, r0
 801070c:	4688      	mov	r8, r1
 801070e:	4691      	mov	r9, r2
 8010710:	f000 8188 	beq.w	8010a24 <uxr_read_framed_msg+0x32c>
 8010714:	7823      	ldrb	r3, [r4, #0]
 8010716:	4dc1      	ldr	r5, [pc, #772]	; (8010a1c <uxr_read_framed_msg+0x324>)
 8010718:	4fc1      	ldr	r7, [pc, #772]	; (8010a20 <uxr_read_framed_msg+0x328>)
 801071a:	2b07      	cmp	r3, #7
 801071c:	d8fd      	bhi.n	801071a <uxr_read_framed_msg+0x22>
 801071e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010722:	0115      	.short	0x0115
 8010724:	00d600f6 	.word	0x00d600f6
 8010728:	009000b9 	.word	0x009000b9
 801072c:	0030004d 	.word	0x0030004d
 8010730:	0008      	.short	0x0008
 8010732:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8010736:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801073a:	4299      	cmp	r1, r3
 801073c:	f000 814a 	beq.w	80109d4 <uxr_read_framed_msg+0x2dc>
 8010740:	18e2      	adds	r2, r4, r3
 8010742:	7892      	ldrb	r2, [r2, #2]
 8010744:	2a7d      	cmp	r2, #125	; 0x7d
 8010746:	f000 8199 	beq.w	8010a7c <uxr_read_framed_msg+0x384>
 801074a:	3301      	adds	r3, #1
 801074c:	0858      	lsrs	r0, r3, #1
 801074e:	fba5 1000 	umull	r1, r0, r5, r0
 8010752:	0880      	lsrs	r0, r0, #2
 8010754:	212a      	movs	r1, #42	; 0x2a
 8010756:	fb01 3310 	mls	r3, r1, r0, r3
 801075a:	2a7e      	cmp	r2, #126	; 0x7e
 801075c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010760:	f000 8252 	beq.w	8010c08 <uxr_read_framed_msg+0x510>
 8010764:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8010766:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8010768:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801076c:	b29b      	uxth	r3, r3
 801076e:	2200      	movs	r2, #0
 8010770:	4299      	cmp	r1, r3
 8010772:	86a3      	strh	r3, [r4, #52]	; 0x34
 8010774:	7022      	strb	r2, [r4, #0]
 8010776:	f000 8179 	beq.w	8010a6c <uxr_read_framed_msg+0x374>
 801077a:	2000      	movs	r0, #0
 801077c:	b003      	add	sp, #12
 801077e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010782:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8010786:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801078a:	4299      	cmp	r1, r3
 801078c:	f000 8131 	beq.w	80109f2 <uxr_read_framed_msg+0x2fa>
 8010790:	18e2      	adds	r2, r4, r3
 8010792:	7890      	ldrb	r0, [r2, #2]
 8010794:	287d      	cmp	r0, #125	; 0x7d
 8010796:	f000 8190 	beq.w	8010aba <uxr_read_framed_msg+0x3c2>
 801079a:	3301      	adds	r3, #1
 801079c:	085a      	lsrs	r2, r3, #1
 801079e:	fba5 1202 	umull	r1, r2, r5, r2
 80107a2:	0892      	lsrs	r2, r2, #2
 80107a4:	212a      	movs	r1, #42	; 0x2a
 80107a6:	fb01 3312 	mls	r3, r1, r2, r3
 80107aa:	287e      	cmp	r0, #126	; 0x7e
 80107ac:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80107b0:	f000 821a 	beq.w	8010be8 <uxr_read_framed_msg+0x4f0>
 80107b4:	2307      	movs	r3, #7
 80107b6:	86a0      	strh	r0, [r4, #52]	; 0x34
 80107b8:	7023      	strb	r3, [r4, #0]
 80107ba:	e7ae      	b.n	801071a <uxr_read_framed_msg+0x22>
 80107bc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80107be:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 80107c2:	459e      	cmp	lr, r3
 80107c4:	d938      	bls.n	8010838 <uxr_read_framed_msg+0x140>
 80107c6:	ee07 8a90 	vmov	s15, r8
 80107ca:	212a      	movs	r1, #42	; 0x2a
 80107cc:	e020      	b.n	8010810 <uxr_read_framed_msg+0x118>
 80107ce:	f89b c002 	ldrb.w	ip, [fp, #2]
 80107d2:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 80107d6:	f000 80d4 	beq.w	8010982 <uxr_read_framed_msg+0x28a>
 80107da:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 80107de:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80107e2:	f000 8219 	beq.w	8010c18 <uxr_read_framed_msg+0x520>
 80107e6:	f806 c003 	strb.w	ip, [r6, r3]
 80107ea:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 80107ee:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80107f0:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 80107f4:	ea8a 000c 	eor.w	r0, sl, ip
 80107f8:	b2c0      	uxtb	r0, r0
 80107fa:	3301      	adds	r3, #1
 80107fc:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8010800:	b29b      	uxth	r3, r3
 8010802:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8010806:	4573      	cmp	r3, lr
 8010808:	8663      	strh	r3, [r4, #50]	; 0x32
 801080a:	86e2      	strh	r2, [r4, #54]	; 0x36
 801080c:	f080 8120 	bcs.w	8010a50 <uxr_read_framed_msg+0x358>
 8010810:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8010814:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8010818:	f100 0c01 	add.w	ip, r0, #1
 801081c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010820:	fba5 8202 	umull	r8, r2, r5, r2
 8010824:	0892      	lsrs	r2, r2, #2
 8010826:	4582      	cmp	sl, r0
 8010828:	eb04 0b00 	add.w	fp, r4, r0
 801082c:	fb01 c212 	mls	r2, r1, r2, ip
 8010830:	d1cd      	bne.n	80107ce <uxr_read_framed_msg+0xd6>
 8010832:	ee17 8a90 	vmov	r8, s15
 8010836:	459e      	cmp	lr, r3
 8010838:	f040 8111 	bne.w	8010a5e <uxr_read_framed_msg+0x366>
 801083c:	2306      	movs	r3, #6
 801083e:	7023      	strb	r3, [r4, #0]
 8010840:	e76b      	b.n	801071a <uxr_read_framed_msg+0x22>
 8010842:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8010846:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801084a:	4298      	cmp	r0, r3
 801084c:	f000 80c2 	beq.w	80109d4 <uxr_read_framed_msg+0x2dc>
 8010850:	18e2      	adds	r2, r4, r3
 8010852:	7891      	ldrb	r1, [r2, #2]
 8010854:	297d      	cmp	r1, #125	; 0x7d
 8010856:	f000 814c 	beq.w	8010af2 <uxr_read_framed_msg+0x3fa>
 801085a:	3301      	adds	r3, #1
 801085c:	085a      	lsrs	r2, r3, #1
 801085e:	fba5 0202 	umull	r0, r2, r5, r2
 8010862:	0892      	lsrs	r2, r2, #2
 8010864:	202a      	movs	r0, #42	; 0x2a
 8010866:	fb00 3312 	mls	r3, r0, r2, r3
 801086a:	297e      	cmp	r1, #126	; 0x7e
 801086c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010870:	f000 81ca 	beq.w	8010c08 <uxr_read_framed_msg+0x510>
 8010874:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8010876:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801087a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801087c:	b29b      	uxth	r3, r3
 801087e:	2000      	movs	r0, #0
 8010880:	428b      	cmp	r3, r1
 8010882:	8623      	strh	r3, [r4, #48]	; 0x30
 8010884:	8660      	strh	r0, [r4, #50]	; 0x32
 8010886:	86e0      	strh	r0, [r4, #54]	; 0x36
 8010888:	f240 80df 	bls.w	8010a4a <uxr_read_framed_msg+0x352>
 801088c:	7020      	strb	r0, [r4, #0]
 801088e:	b003      	add	sp, #12
 8010890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010894:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8010898:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801089c:	4299      	cmp	r1, r3
 801089e:	f000 80a8 	beq.w	80109f2 <uxr_read_framed_msg+0x2fa>
 80108a2:	18e2      	adds	r2, r4, r3
 80108a4:	7890      	ldrb	r0, [r2, #2]
 80108a6:	287d      	cmp	r0, #125	; 0x7d
 80108a8:	f000 8164 	beq.w	8010b74 <uxr_read_framed_msg+0x47c>
 80108ac:	3301      	adds	r3, #1
 80108ae:	085a      	lsrs	r2, r3, #1
 80108b0:	fba5 1202 	umull	r1, r2, r5, r2
 80108b4:	0892      	lsrs	r2, r2, #2
 80108b6:	212a      	movs	r1, #42	; 0x2a
 80108b8:	fb01 3312 	mls	r3, r1, r2, r3
 80108bc:	287e      	cmp	r0, #126	; 0x7e
 80108be:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80108c2:	f000 8191 	beq.w	8010be8 <uxr_read_framed_msg+0x4f0>
 80108c6:	2304      	movs	r3, #4
 80108c8:	8620      	strh	r0, [r4, #48]	; 0x30
 80108ca:	7023      	strb	r3, [r4, #0]
 80108cc:	e725      	b.n	801071a <uxr_read_framed_msg+0x22>
 80108ce:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80108d2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80108d6:	4290      	cmp	r0, r2
 80108d8:	f000 80b3 	beq.w	8010a42 <uxr_read_framed_msg+0x34a>
 80108dc:	18a3      	adds	r3, r4, r2
 80108de:	7899      	ldrb	r1, [r3, #2]
 80108e0:	297d      	cmp	r1, #125	; 0x7d
 80108e2:	f000 8164 	beq.w	8010bae <uxr_read_framed_msg+0x4b6>
 80108e6:	3201      	adds	r2, #1
 80108e8:	0850      	lsrs	r0, r2, #1
 80108ea:	fba5 3000 	umull	r3, r0, r5, r0
 80108ee:	0880      	lsrs	r0, r0, #2
 80108f0:	232a      	movs	r3, #42	; 0x2a
 80108f2:	fb03 2210 	mls	r2, r3, r0, r2
 80108f6:	297e      	cmp	r1, #126	; 0x7e
 80108f8:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80108fc:	f000 8188 	beq.w	8010c10 <uxr_read_framed_msg+0x518>
 8010900:	7863      	ldrb	r3, [r4, #1]
 8010902:	428b      	cmp	r3, r1
 8010904:	bf0c      	ite	eq
 8010906:	2303      	moveq	r3, #3
 8010908:	2300      	movne	r3, #0
 801090a:	7023      	strb	r3, [r4, #0]
 801090c:	e705      	b.n	801071a <uxr_read_framed_msg+0x22>
 801090e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8010912:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8010916:	2200      	movs	r2, #0
 8010918:	4299      	cmp	r1, r3
 801091a:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 801091e:	d06c      	beq.n	80109fa <uxr_read_framed_msg+0x302>
 8010920:	18e2      	adds	r2, r4, r3
 8010922:	7890      	ldrb	r0, [r2, #2]
 8010924:	287d      	cmp	r0, #125	; 0x7d
 8010926:	f000 8101 	beq.w	8010b2c <uxr_read_framed_msg+0x434>
 801092a:	3301      	adds	r3, #1
 801092c:	085a      	lsrs	r2, r3, #1
 801092e:	fba5 1202 	umull	r1, r2, r5, r2
 8010932:	0892      	lsrs	r2, r2, #2
 8010934:	212a      	movs	r1, #42	; 0x2a
 8010936:	fb01 3312 	mls	r3, r1, r2, r3
 801093a:	287e      	cmp	r0, #126	; 0x7e
 801093c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8010940:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010944:	d059      	beq.n	80109fa <uxr_read_framed_msg+0x302>
 8010946:	2302      	movs	r3, #2
 8010948:	7023      	strb	r3, [r4, #0]
 801094a:	e6e6      	b.n	801071a <uxr_read_framed_msg+0x22>
 801094c:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8010950:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8010954:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8010958:	1c51      	adds	r1, r2, #1
 801095a:	084b      	lsrs	r3, r1, #1
 801095c:	fba5 c303 	umull	ip, r3, r5, r3
 8010960:	089b      	lsrs	r3, r3, #2
 8010962:	fb0e 1313 	mls	r3, lr, r3, r1
 8010966:	4592      	cmp	sl, r2
 8010968:	eb04 0002 	add.w	r0, r4, r2
 801096c:	b2da      	uxtb	r2, r3
 801096e:	f43f af04 	beq.w	801077a <uxr_read_framed_msg+0x82>
 8010972:	7883      	ldrb	r3, [r0, #2]
 8010974:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8010978:	2b7e      	cmp	r3, #126	; 0x7e
 801097a:	d1ed      	bne.n	8010958 <uxr_read_framed_msg+0x260>
 801097c:	2301      	movs	r3, #1
 801097e:	7023      	strb	r3, [r4, #0]
 8010980:	e6cb      	b.n	801071a <uxr_read_framed_msg+0x22>
 8010982:	f100 0c01 	add.w	ip, r0, #1
 8010986:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801098a:	fba5 8202 	umull	r8, r2, r5, r2
 801098e:	0892      	lsrs	r2, r2, #2
 8010990:	fb01 c212 	mls	r2, r1, r2, ip
 8010994:	eb04 0c02 	add.w	ip, r4, r2
 8010998:	b2d2      	uxtb	r2, r2
 801099a:	4592      	cmp	sl, r2
 801099c:	f100 0002 	add.w	r0, r0, #2
 80109a0:	f43f af47 	beq.w	8010832 <uxr_read_framed_msg+0x13a>
 80109a4:	0842      	lsrs	r2, r0, #1
 80109a6:	f89c a002 	ldrb.w	sl, [ip, #2]
 80109aa:	fba5 8202 	umull	r8, r2, r5, r2
 80109ae:	0892      	lsrs	r2, r2, #2
 80109b0:	fb01 0012 	mls	r0, r1, r2, r0
 80109b4:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 80109b8:	f08a 0c20 	eor.w	ip, sl, #32
 80109bc:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 80109c0:	f47f af11 	bne.w	80107e6 <uxr_read_framed_msg+0xee>
 80109c4:	459e      	cmp	lr, r3
 80109c6:	ee17 8a90 	vmov	r8, s15
 80109ca:	f43f af37 	beq.w	801083c <uxr_read_framed_msg+0x144>
 80109ce:	2301      	movs	r3, #1
 80109d0:	7023      	strb	r3, [r4, #0]
 80109d2:	e6a2      	b.n	801071a <uxr_read_framed_msg+0x22>
 80109d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80109d6:	9300      	str	r3, [sp, #0]
 80109d8:	2301      	movs	r3, #1
 80109da:	9301      	str	r3, [sp, #4]
 80109dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80109de:	464a      	mov	r2, r9
 80109e0:	4641      	mov	r1, r8
 80109e2:	4620      	mov	r0, r4
 80109e4:	f7ff fe06 	bl	80105f4 <uxr_framing_read_transport>
 80109e8:	2800      	cmp	r0, #0
 80109ea:	f43f aec6 	beq.w	801077a <uxr_read_framed_msg+0x82>
 80109ee:	7823      	ldrb	r3, [r4, #0]
 80109f0:	e693      	b.n	801071a <uxr_read_framed_msg+0x22>
 80109f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80109f4:	9300      	str	r3, [sp, #0]
 80109f6:	2302      	movs	r3, #2
 80109f8:	e7ef      	b.n	80109da <uxr_read_framed_msg+0x2e2>
 80109fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80109fc:	9300      	str	r3, [sp, #0]
 80109fe:	2304      	movs	r3, #4
 8010a00:	9301      	str	r3, [sp, #4]
 8010a02:	464a      	mov	r2, r9
 8010a04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010a06:	4641      	mov	r1, r8
 8010a08:	4620      	mov	r0, r4
 8010a0a:	f7ff fdf3 	bl	80105f4 <uxr_framing_read_transport>
 8010a0e:	2800      	cmp	r0, #0
 8010a10:	d1ed      	bne.n	80109ee <uxr_read_framed_msg+0x2f6>
 8010a12:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8010a16:	2b7e      	cmp	r3, #126	; 0x7e
 8010a18:	d0e9      	beq.n	80109ee <uxr_read_framed_msg+0x2f6>
 8010a1a:	e6ae      	b.n	801077a <uxr_read_framed_msg+0x82>
 8010a1c:	30c30c31 	.word	0x30c30c31
 8010a20:	08013480 	.word	0x08013480
 8010a24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010a26:	9300      	str	r3, [sp, #0]
 8010a28:	2305      	movs	r3, #5
 8010a2a:	9301      	str	r3, [sp, #4]
 8010a2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010a2e:	f7ff fde1 	bl	80105f4 <uxr_framing_read_transport>
 8010a32:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8010a36:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	f43f ae9d 	beq.w	801077a <uxr_read_framed_msg+0x82>
 8010a40:	e668      	b.n	8010714 <uxr_read_framed_msg+0x1c>
 8010a42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010a44:	9300      	str	r3, [sp, #0]
 8010a46:	2303      	movs	r3, #3
 8010a48:	e7c7      	b.n	80109da <uxr_read_framed_msg+0x2e2>
 8010a4a:	2305      	movs	r3, #5
 8010a4c:	7023      	strb	r3, [r4, #0]
 8010a4e:	e664      	b.n	801071a <uxr_read_framed_msg+0x22>
 8010a50:	ee17 8a90 	vmov	r8, s15
 8010a54:	f43f aef2 	beq.w	801083c <uxr_read_framed_msg+0x144>
 8010a58:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8010a5c:	d08e      	beq.n	801097c <uxr_read_framed_msg+0x284>
 8010a5e:	ebae 0303 	sub.w	r3, lr, r3
 8010a62:	3302      	adds	r3, #2
 8010a64:	9301      	str	r3, [sp, #4]
 8010a66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010a68:	9300      	str	r3, [sp, #0]
 8010a6a:	e7b7      	b.n	80109dc <uxr_read_framed_msg+0x2e4>
 8010a6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010a6e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8010a72:	7013      	strb	r3, [r2, #0]
 8010a74:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8010a76:	b003      	add	sp, #12
 8010a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a7c:	f103 0c01 	add.w	ip, r3, #1
 8010a80:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010a84:	fba5 0202 	umull	r0, r2, r5, r2
 8010a88:	0892      	lsrs	r2, r2, #2
 8010a8a:	202a      	movs	r0, #42	; 0x2a
 8010a8c:	fb00 c212 	mls	r2, r0, r2, ip
 8010a90:	fa5f fc82 	uxtb.w	ip, r2
 8010a94:	4561      	cmp	r1, ip
 8010a96:	d09d      	beq.n	80109d4 <uxr_read_framed_msg+0x2dc>
 8010a98:	3302      	adds	r3, #2
 8010a9a:	4422      	add	r2, r4
 8010a9c:	0859      	lsrs	r1, r3, #1
 8010a9e:	7892      	ldrb	r2, [r2, #2]
 8010aa0:	fba5 c101 	umull	ip, r1, r5, r1
 8010aa4:	0889      	lsrs	r1, r1, #2
 8010aa6:	fb00 3311 	mls	r3, r0, r1, r3
 8010aaa:	2a7e      	cmp	r2, #126	; 0x7e
 8010aac:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010ab0:	f000 80aa 	beq.w	8010c08 <uxr_read_framed_msg+0x510>
 8010ab4:	f082 0220 	eor.w	r2, r2, #32
 8010ab8:	e654      	b.n	8010764 <uxr_read_framed_msg+0x6c>
 8010aba:	1c58      	adds	r0, r3, #1
 8010abc:	0842      	lsrs	r2, r0, #1
 8010abe:	fba5 c202 	umull	ip, r2, r5, r2
 8010ac2:	0892      	lsrs	r2, r2, #2
 8010ac4:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8010ac8:	fb0c 0212 	mls	r2, ip, r2, r0
 8010acc:	b2d0      	uxtb	r0, r2
 8010ace:	4281      	cmp	r1, r0
 8010ad0:	d08f      	beq.n	80109f2 <uxr_read_framed_msg+0x2fa>
 8010ad2:	4422      	add	r2, r4
 8010ad4:	3302      	adds	r3, #2
 8010ad6:	7890      	ldrb	r0, [r2, #2]
 8010ad8:	085a      	lsrs	r2, r3, #1
 8010ada:	fba5 1202 	umull	r1, r2, r5, r2
 8010ade:	0892      	lsrs	r2, r2, #2
 8010ae0:	fb0c 3312 	mls	r3, ip, r2, r3
 8010ae4:	287e      	cmp	r0, #126	; 0x7e
 8010ae6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010aea:	d07d      	beq.n	8010be8 <uxr_read_framed_msg+0x4f0>
 8010aec:	f080 0020 	eor.w	r0, r0, #32
 8010af0:	e660      	b.n	80107b4 <uxr_read_framed_msg+0xbc>
 8010af2:	1c59      	adds	r1, r3, #1
 8010af4:	084a      	lsrs	r2, r1, #1
 8010af6:	fba5 c202 	umull	ip, r2, r5, r2
 8010afa:	0892      	lsrs	r2, r2, #2
 8010afc:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8010b00:	fb0c 1212 	mls	r2, ip, r2, r1
 8010b04:	b2d1      	uxtb	r1, r2
 8010b06:	4288      	cmp	r0, r1
 8010b08:	f43f af64 	beq.w	80109d4 <uxr_read_framed_msg+0x2dc>
 8010b0c:	4422      	add	r2, r4
 8010b0e:	3302      	adds	r3, #2
 8010b10:	7891      	ldrb	r1, [r2, #2]
 8010b12:	085a      	lsrs	r2, r3, #1
 8010b14:	fba5 0202 	umull	r0, r2, r5, r2
 8010b18:	0892      	lsrs	r2, r2, #2
 8010b1a:	fb0c 3312 	mls	r3, ip, r2, r3
 8010b1e:	297e      	cmp	r1, #126	; 0x7e
 8010b20:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010b24:	d070      	beq.n	8010c08 <uxr_read_framed_msg+0x510>
 8010b26:	f081 0120 	eor.w	r1, r1, #32
 8010b2a:	e6a3      	b.n	8010874 <uxr_read_framed_msg+0x17c>
 8010b2c:	f103 0c01 	add.w	ip, r3, #1
 8010b30:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010b34:	fba5 0202 	umull	r0, r2, r5, r2
 8010b38:	0892      	lsrs	r2, r2, #2
 8010b3a:	202a      	movs	r0, #42	; 0x2a
 8010b3c:	fb00 c212 	mls	r2, r0, r2, ip
 8010b40:	fa5f fc82 	uxtb.w	ip, r2
 8010b44:	4561      	cmp	r1, ip
 8010b46:	f43f af58 	beq.w	80109fa <uxr_read_framed_msg+0x302>
 8010b4a:	4422      	add	r2, r4
 8010b4c:	3302      	adds	r3, #2
 8010b4e:	7891      	ldrb	r1, [r2, #2]
 8010b50:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8010b54:	085a      	lsrs	r2, r3, #1
 8010b56:	fba5 c202 	umull	ip, r2, r5, r2
 8010b5a:	0892      	lsrs	r2, r2, #2
 8010b5c:	fb00 3312 	mls	r3, r0, r2, r3
 8010b60:	297e      	cmp	r1, #126	; 0x7e
 8010b62:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010b66:	f43f af48 	beq.w	80109fa <uxr_read_framed_msg+0x302>
 8010b6a:	f081 0120 	eor.w	r1, r1, #32
 8010b6e:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8010b72:	e6e8      	b.n	8010946 <uxr_read_framed_msg+0x24e>
 8010b74:	1c58      	adds	r0, r3, #1
 8010b76:	0842      	lsrs	r2, r0, #1
 8010b78:	fba5 c202 	umull	ip, r2, r5, r2
 8010b7c:	0892      	lsrs	r2, r2, #2
 8010b7e:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8010b82:	fb0c 0212 	mls	r2, ip, r2, r0
 8010b86:	b2d0      	uxtb	r0, r2
 8010b88:	4281      	cmp	r1, r0
 8010b8a:	f43f af32 	beq.w	80109f2 <uxr_read_framed_msg+0x2fa>
 8010b8e:	4422      	add	r2, r4
 8010b90:	3302      	adds	r3, #2
 8010b92:	7890      	ldrb	r0, [r2, #2]
 8010b94:	085a      	lsrs	r2, r3, #1
 8010b96:	fba5 1202 	umull	r1, r2, r5, r2
 8010b9a:	0892      	lsrs	r2, r2, #2
 8010b9c:	fb0c 3312 	mls	r3, ip, r2, r3
 8010ba0:	287e      	cmp	r0, #126	; 0x7e
 8010ba2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010ba6:	d01f      	beq.n	8010be8 <uxr_read_framed_msg+0x4f0>
 8010ba8:	f080 0020 	eor.w	r0, r0, #32
 8010bac:	e68b      	b.n	80108c6 <uxr_read_framed_msg+0x1ce>
 8010bae:	1c51      	adds	r1, r2, #1
 8010bb0:	084b      	lsrs	r3, r1, #1
 8010bb2:	fba5 c303 	umull	ip, r3, r5, r3
 8010bb6:	089b      	lsrs	r3, r3, #2
 8010bb8:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8010bbc:	fb0c 1313 	mls	r3, ip, r3, r1
 8010bc0:	b2d9      	uxtb	r1, r3
 8010bc2:	4288      	cmp	r0, r1
 8010bc4:	f43f af3d 	beq.w	8010a42 <uxr_read_framed_msg+0x34a>
 8010bc8:	3202      	adds	r2, #2
 8010bca:	4423      	add	r3, r4
 8010bcc:	0850      	lsrs	r0, r2, #1
 8010bce:	789b      	ldrb	r3, [r3, #2]
 8010bd0:	fba5 1000 	umull	r1, r0, r5, r0
 8010bd4:	0880      	lsrs	r0, r0, #2
 8010bd6:	fb0c 2210 	mls	r2, ip, r0, r2
 8010bda:	2b7e      	cmp	r3, #126	; 0x7e
 8010bdc:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8010be0:	d016      	beq.n	8010c10 <uxr_read_framed_msg+0x518>
 8010be2:	f083 0120 	eor.w	r1, r3, #32
 8010be6:	e68b      	b.n	8010900 <uxr_read_framed_msg+0x208>
 8010be8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010bea:	9300      	str	r3, [sp, #0]
 8010bec:	2302      	movs	r3, #2
 8010bee:	9301      	str	r3, [sp, #4]
 8010bf0:	464a      	mov	r2, r9
 8010bf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010bf4:	4641      	mov	r1, r8
 8010bf6:	4620      	mov	r0, r4
 8010bf8:	f7ff fcfc 	bl	80105f4 <uxr_framing_read_transport>
 8010bfc:	2800      	cmp	r0, #0
 8010bfe:	f47f aef6 	bne.w	80109ee <uxr_read_framed_msg+0x2f6>
 8010c02:	2301      	movs	r3, #1
 8010c04:	7023      	strb	r3, [r4, #0]
 8010c06:	e588      	b.n	801071a <uxr_read_framed_msg+0x22>
 8010c08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010c0a:	9300      	str	r3, [sp, #0]
 8010c0c:	2301      	movs	r3, #1
 8010c0e:	e7ee      	b.n	8010bee <uxr_read_framed_msg+0x4f6>
 8010c10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010c12:	9300      	str	r3, [sp, #0]
 8010c14:	2303      	movs	r3, #3
 8010c16:	e7ea      	b.n	8010bee <uxr_read_framed_msg+0x4f6>
 8010c18:	ee17 8a90 	vmov	r8, s15
 8010c1c:	e6ae      	b.n	801097c <uxr_read_framed_msg+0x284>
 8010c1e:	bf00      	nop

08010c20 <rcl_get_default_domain_id>:
 8010c20:	b530      	push	{r4, r5, lr}
 8010c22:	b083      	sub	sp, #12
 8010c24:	2300      	movs	r3, #0
 8010c26:	9300      	str	r3, [sp, #0]
 8010c28:	b1d0      	cbz	r0, 8010c60 <rcl_get_default_domain_id+0x40>
 8010c2a:	4604      	mov	r4, r0
 8010c2c:	4669      	mov	r1, sp
 8010c2e:	4815      	ldr	r0, [pc, #84]	; (8010c84 <rcl_get_default_domain_id+0x64>)
 8010c30:	f7fd f93a 	bl	800dea8 <rcutils_get_env>
 8010c34:	4602      	mov	r2, r0
 8010c36:	b110      	cbz	r0, 8010c3e <rcl_get_default_domain_id+0x1e>
 8010c38:	2001      	movs	r0, #1
 8010c3a:	b003      	add	sp, #12
 8010c3c:	bd30      	pop	{r4, r5, pc}
 8010c3e:	9b00      	ldr	r3, [sp, #0]
 8010c40:	b18b      	cbz	r3, 8010c66 <rcl_get_default_domain_id+0x46>
 8010c42:	7818      	ldrb	r0, [r3, #0]
 8010c44:	2800      	cmp	r0, #0
 8010c46:	d0f8      	beq.n	8010c3a <rcl_get_default_domain_id+0x1a>
 8010c48:	a901      	add	r1, sp, #4
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	9201      	str	r2, [sp, #4]
 8010c4e:	f000 fe89 	bl	8011964 <strtoul>
 8010c52:	4605      	mov	r5, r0
 8010c54:	b150      	cbz	r0, 8010c6c <rcl_get_default_domain_id+0x4c>
 8010c56:	1c43      	adds	r3, r0, #1
 8010c58:	d00d      	beq.n	8010c76 <rcl_get_default_domain_id+0x56>
 8010c5a:	6025      	str	r5, [r4, #0]
 8010c5c:	2000      	movs	r0, #0
 8010c5e:	e7ec      	b.n	8010c3a <rcl_get_default_domain_id+0x1a>
 8010c60:	200b      	movs	r0, #11
 8010c62:	b003      	add	sp, #12
 8010c64:	bd30      	pop	{r4, r5, pc}
 8010c66:	4618      	mov	r0, r3
 8010c68:	b003      	add	sp, #12
 8010c6a:	bd30      	pop	{r4, r5, pc}
 8010c6c:	9b01      	ldr	r3, [sp, #4]
 8010c6e:	781b      	ldrb	r3, [r3, #0]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d0f2      	beq.n	8010c5a <rcl_get_default_domain_id+0x3a>
 8010c74:	e7e0      	b.n	8010c38 <rcl_get_default_domain_id+0x18>
 8010c76:	f001 f8ed 	bl	8011e54 <__errno>
 8010c7a:	6803      	ldr	r3, [r0, #0]
 8010c7c:	2b22      	cmp	r3, #34	; 0x22
 8010c7e:	d1ec      	bne.n	8010c5a <rcl_get_default_domain_id+0x3a>
 8010c80:	e7da      	b.n	8010c38 <rcl_get_default_domain_id+0x18>
 8010c82:	bf00      	nop
 8010c84:	08013680 	.word	0x08013680

08010c88 <rcl_expand_topic_name>:
 8010c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c8c:	b08b      	sub	sp, #44	; 0x2c
 8010c8e:	9306      	str	r3, [sp, #24]
 8010c90:	2800      	cmp	r0, #0
 8010c92:	f000 80ad 	beq.w	8010df0 <rcl_expand_topic_name+0x168>
 8010c96:	460e      	mov	r6, r1
 8010c98:	2900      	cmp	r1, #0
 8010c9a:	f000 80a9 	beq.w	8010df0 <rcl_expand_topic_name+0x168>
 8010c9e:	4617      	mov	r7, r2
 8010ca0:	2a00      	cmp	r2, #0
 8010ca2:	f000 80a5 	beq.w	8010df0 <rcl_expand_topic_name+0x168>
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	f000 80a2 	beq.w	8010df0 <rcl_expand_topic_name+0x168>
 8010cac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	f000 809e 	beq.w	8010df0 <rcl_expand_topic_name+0x168>
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	a909      	add	r1, sp, #36	; 0x24
 8010cb8:	4680      	mov	r8, r0
 8010cba:	f000 f9f5 	bl	80110a8 <rcl_validate_topic_name>
 8010cbe:	4604      	mov	r4, r0
 8010cc0:	2800      	cmp	r0, #0
 8010cc2:	f040 8096 	bne.w	8010df2 <rcl_expand_topic_name+0x16a>
 8010cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	f040 809a 	bne.w	8010e02 <rcl_expand_topic_name+0x17a>
 8010cce:	4602      	mov	r2, r0
 8010cd0:	a909      	add	r1, sp, #36	; 0x24
 8010cd2:	4630      	mov	r0, r6
 8010cd4:	f7fd fcea 	bl	800e6ac <rmw_validate_node_name>
 8010cd8:	2800      	cmp	r0, #0
 8010cda:	f040 808e 	bne.w	8010dfa <rcl_expand_topic_name+0x172>
 8010cde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ce0:	2a00      	cmp	r2, #0
 8010ce2:	f040 8093 	bne.w	8010e0c <rcl_expand_topic_name+0x184>
 8010ce6:	a909      	add	r1, sp, #36	; 0x24
 8010ce8:	4638      	mov	r0, r7
 8010cea:	f7fd fcc1 	bl	800e670 <rmw_validate_namespace>
 8010cee:	2800      	cmp	r0, #0
 8010cf0:	f040 8083 	bne.w	8010dfa <rcl_expand_topic_name+0x172>
 8010cf4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010cf6:	2c00      	cmp	r4, #0
 8010cf8:	f040 80ed 	bne.w	8010ed6 <rcl_expand_topic_name+0x24e>
 8010cfc:	217b      	movs	r1, #123	; 0x7b
 8010cfe:	4640      	mov	r0, r8
 8010d00:	f000 ffc6 	bl	8011c90 <strchr>
 8010d04:	f898 3000 	ldrb.w	r3, [r8]
 8010d08:	2b2f      	cmp	r3, #47	; 0x2f
 8010d0a:	4605      	mov	r5, r0
 8010d0c:	f000 809e 	beq.w	8010e4c <rcl_expand_topic_name+0x1c4>
 8010d10:	2b7e      	cmp	r3, #126	; 0x7e
 8010d12:	f040 80a2 	bne.w	8010e5a <rcl_expand_topic_name+0x1d2>
 8010d16:	4638      	mov	r0, r7
 8010d18:	f7ef fa84 	bl	8000224 <strlen>
 8010d1c:	4a82      	ldr	r2, [pc, #520]	; (8010f28 <rcl_expand_topic_name+0x2a0>)
 8010d1e:	4b83      	ldr	r3, [pc, #524]	; (8010f2c <rcl_expand_topic_name+0x2a4>)
 8010d20:	2801      	cmp	r0, #1
 8010d22:	bf18      	it	ne
 8010d24:	4613      	movne	r3, r2
 8010d26:	9302      	str	r3, [sp, #8]
 8010d28:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010d2a:	9300      	str	r3, [sp, #0]
 8010d2c:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8010d30:	f108 0301 	add.w	r3, r8, #1
 8010d34:	9305      	str	r3, [sp, #20]
 8010d36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010d3a:	9301      	str	r3, [sp, #4]
 8010d3c:	ab14      	add	r3, sp, #80	; 0x50
 8010d3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010d40:	f7fd f8da 	bl	800def8 <rcutils_format_string_limit>
 8010d44:	4682      	mov	sl, r0
 8010d46:	2800      	cmp	r0, #0
 8010d48:	f000 80c7 	beq.w	8010eda <rcl_expand_topic_name+0x252>
 8010d4c:	2d00      	cmp	r5, #0
 8010d4e:	f000 80a2 	beq.w	8010e96 <rcl_expand_topic_name+0x20e>
 8010d52:	217b      	movs	r1, #123	; 0x7b
 8010d54:	f000 ff9c 	bl	8011c90 <strchr>
 8010d58:	46d1      	mov	r9, sl
 8010d5a:	4605      	mov	r5, r0
 8010d5c:	9407      	str	r4, [sp, #28]
 8010d5e:	46d3      	mov	fp, sl
 8010d60:	464c      	mov	r4, r9
 8010d62:	2d00      	cmp	r5, #0
 8010d64:	f000 80be 	beq.w	8010ee4 <rcl_expand_topic_name+0x25c>
 8010d68:	217d      	movs	r1, #125	; 0x7d
 8010d6a:	4620      	mov	r0, r4
 8010d6c:	f000 ff90 	bl	8011c90 <strchr>
 8010d70:	eba0 0905 	sub.w	r9, r0, r5
 8010d74:	f109 0a01 	add.w	sl, r9, #1
 8010d78:	486d      	ldr	r0, [pc, #436]	; (8010f30 <rcl_expand_topic_name+0x2a8>)
 8010d7a:	4652      	mov	r2, sl
 8010d7c:	4629      	mov	r1, r5
 8010d7e:	f000 ff94 	bl	8011caa <strncmp>
 8010d82:	2800      	cmp	r0, #0
 8010d84:	d067      	beq.n	8010e56 <rcl_expand_topic_name+0x1ce>
 8010d86:	486b      	ldr	r0, [pc, #428]	; (8010f34 <rcl_expand_topic_name+0x2ac>)
 8010d88:	4652      	mov	r2, sl
 8010d8a:	4629      	mov	r1, r5
 8010d8c:	f000 ff8d 	bl	8011caa <strncmp>
 8010d90:	b130      	cbz	r0, 8010da0 <rcl_expand_topic_name+0x118>
 8010d92:	4869      	ldr	r0, [pc, #420]	; (8010f38 <rcl_expand_topic_name+0x2b0>)
 8010d94:	4652      	mov	r2, sl
 8010d96:	4629      	mov	r1, r5
 8010d98:	f000 ff87 	bl	8011caa <strncmp>
 8010d9c:	2800      	cmp	r0, #0
 8010d9e:	d137      	bne.n	8010e10 <rcl_expand_topic_name+0x188>
 8010da0:	46b9      	mov	r9, r7
 8010da2:	ab16      	add	r3, sp, #88	; 0x58
 8010da4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010da8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010dac:	ab14      	add	r3, sp, #80	; 0x50
 8010dae:	4628      	mov	r0, r5
 8010db0:	cb0c      	ldmia	r3, {r2, r3}
 8010db2:	4651      	mov	r1, sl
 8010db4:	f7fd f9dc 	bl	800e170 <rcutils_strndup>
 8010db8:	4605      	mov	r5, r0
 8010dba:	2800      	cmp	r0, #0
 8010dbc:	f000 809c 	beq.w	8010ef8 <rcl_expand_topic_name+0x270>
 8010dc0:	464a      	mov	r2, r9
 8010dc2:	4620      	mov	r0, r4
 8010dc4:	ab14      	add	r3, sp, #80	; 0x50
 8010dc6:	4629      	mov	r1, r5
 8010dc8:	f7fd f8d0 	bl	800df6c <rcutils_repl_str>
 8010dcc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010dce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010dd0:	4604      	mov	r4, r0
 8010dd2:	4628      	mov	r0, r5
 8010dd4:	4798      	blx	r3
 8010dd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010dd8:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010dda:	4658      	mov	r0, fp
 8010ddc:	4798      	blx	r3
 8010dde:	2c00      	cmp	r4, #0
 8010de0:	d07b      	beq.n	8010eda <rcl_expand_topic_name+0x252>
 8010de2:	217b      	movs	r1, #123	; 0x7b
 8010de4:	4620      	mov	r0, r4
 8010de6:	f000 ff53 	bl	8011c90 <strchr>
 8010dea:	46a3      	mov	fp, r4
 8010dec:	4605      	mov	r5, r0
 8010dee:	e7b8      	b.n	8010d62 <rcl_expand_topic_name+0xda>
 8010df0:	240b      	movs	r4, #11
 8010df2:	4620      	mov	r0, r4
 8010df4:	b00b      	add	sp, #44	; 0x2c
 8010df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dfa:	f7fc f935 	bl	800d068 <rcl_convert_rmw_ret_to_rcl_ret>
 8010dfe:	4604      	mov	r4, r0
 8010e00:	e7f7      	b.n	8010df2 <rcl_expand_topic_name+0x16a>
 8010e02:	2467      	movs	r4, #103	; 0x67
 8010e04:	4620      	mov	r0, r4
 8010e06:	b00b      	add	sp, #44	; 0x2c
 8010e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e0c:	24c9      	movs	r4, #201	; 0xc9
 8010e0e:	e7f0      	b.n	8010df2 <rcl_expand_topic_name+0x16a>
 8010e10:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8010e14:	9806      	ldr	r0, [sp, #24]
 8010e16:	1c69      	adds	r1, r5, #1
 8010e18:	f7fd fac4 	bl	800e3a4 <rcutils_string_map_getn>
 8010e1c:	4681      	mov	r9, r0
 8010e1e:	2800      	cmp	r0, #0
 8010e20:	d1bf      	bne.n	8010da2 <rcl_expand_topic_name+0x11a>
 8010e22:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010e24:	aa16      	add	r2, sp, #88	; 0x58
 8010e26:	6018      	str	r0, [r3, #0]
 8010e28:	ca07      	ldmia	r2, {r0, r1, r2}
 8010e2a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010e2e:	ab14      	add	r3, sp, #80	; 0x50
 8010e30:	cb0c      	ldmia	r3, {r2, r3}
 8010e32:	4651      	mov	r1, sl
 8010e34:	4628      	mov	r0, r5
 8010e36:	f7fd f99b 	bl	800e170 <rcutils_strndup>
 8010e3a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010e3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e3e:	4798      	blx	r3
 8010e40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e42:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010e44:	4658      	mov	r0, fp
 8010e46:	2469      	movs	r4, #105	; 0x69
 8010e48:	4798      	blx	r3
 8010e4a:	e7d2      	b.n	8010df2 <rcl_expand_topic_name+0x16a>
 8010e4c:	2800      	cmp	r0, #0
 8010e4e:	d05b      	beq.n	8010f08 <rcl_expand_topic_name+0x280>
 8010e50:	46c1      	mov	r9, r8
 8010e52:	46a2      	mov	sl, r4
 8010e54:	e782      	b.n	8010d5c <rcl_expand_topic_name+0xd4>
 8010e56:	46b1      	mov	r9, r6
 8010e58:	e7a3      	b.n	8010da2 <rcl_expand_topic_name+0x11a>
 8010e5a:	2800      	cmp	r0, #0
 8010e5c:	d1f8      	bne.n	8010e50 <rcl_expand_topic_name+0x1c8>
 8010e5e:	4638      	mov	r0, r7
 8010e60:	f7ef f9e0 	bl	8000224 <strlen>
 8010e64:	4a35      	ldr	r2, [pc, #212]	; (8010f3c <rcl_expand_topic_name+0x2b4>)
 8010e66:	4b36      	ldr	r3, [pc, #216]	; (8010f40 <rcl_expand_topic_name+0x2b8>)
 8010e68:	f8cd 8010 	str.w	r8, [sp, #16]
 8010e6c:	2801      	cmp	r0, #1
 8010e6e:	bf18      	it	ne
 8010e70:	4613      	movne	r3, r2
 8010e72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010e76:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8010e7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010e7c:	9703      	str	r7, [sp, #12]
 8010e7e:	9200      	str	r2, [sp, #0]
 8010e80:	ab14      	add	r3, sp, #80	; 0x50
 8010e82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010e84:	f7fd f838 	bl	800def8 <rcutils_format_string_limit>
 8010e88:	4682      	mov	sl, r0
 8010e8a:	4653      	mov	r3, sl
 8010e8c:	b32b      	cbz	r3, 8010eda <rcl_expand_topic_name+0x252>
 8010e8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010e90:	f8c3 a000 	str.w	sl, [r3]
 8010e94:	e7ad      	b.n	8010df2 <rcl_expand_topic_name+0x16a>
 8010e96:	f89a 3000 	ldrb.w	r3, [sl]
 8010e9a:	2b2f      	cmp	r3, #47	; 0x2f
 8010e9c:	d0f7      	beq.n	8010e8e <rcl_expand_topic_name+0x206>
 8010e9e:	4638      	mov	r0, r7
 8010ea0:	f7ef f9c0 	bl	8000224 <strlen>
 8010ea4:	4a25      	ldr	r2, [pc, #148]	; (8010f3c <rcl_expand_topic_name+0x2b4>)
 8010ea6:	4b26      	ldr	r3, [pc, #152]	; (8010f40 <rcl_expand_topic_name+0x2b8>)
 8010ea8:	f8cd a010 	str.w	sl, [sp, #16]
 8010eac:	2801      	cmp	r0, #1
 8010eae:	bf18      	it	ne
 8010eb0:	4613      	movne	r3, r2
 8010eb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010eb6:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8010eba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010ebc:	9703      	str	r7, [sp, #12]
 8010ebe:	9200      	str	r2, [sp, #0]
 8010ec0:	ab14      	add	r3, sp, #80	; 0x50
 8010ec2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010ec4:	f7fd f818 	bl	800def8 <rcutils_format_string_limit>
 8010ec8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010eca:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010ecc:	4605      	mov	r5, r0
 8010ece:	4650      	mov	r0, sl
 8010ed0:	4798      	blx	r3
 8010ed2:	46aa      	mov	sl, r5
 8010ed4:	e7d9      	b.n	8010e8a <rcl_expand_topic_name+0x202>
 8010ed6:	24ca      	movs	r4, #202	; 0xca
 8010ed8:	e78b      	b.n	8010df2 <rcl_expand_topic_name+0x16a>
 8010eda:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010edc:	2300      	movs	r3, #0
 8010ede:	6013      	str	r3, [r2, #0]
 8010ee0:	240a      	movs	r4, #10
 8010ee2:	e786      	b.n	8010df2 <rcl_expand_topic_name+0x16a>
 8010ee4:	465b      	mov	r3, fp
 8010ee6:	9c07      	ldr	r4, [sp, #28]
 8010ee8:	46da      	mov	sl, fp
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d1d3      	bne.n	8010e96 <rcl_expand_topic_name+0x20e>
 8010eee:	f898 3000 	ldrb.w	r3, [r8]
 8010ef2:	2b2f      	cmp	r3, #47	; 0x2f
 8010ef4:	d0cb      	beq.n	8010e8e <rcl_expand_topic_name+0x206>
 8010ef6:	e7b2      	b.n	8010e5e <rcl_expand_topic_name+0x1d6>
 8010ef8:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 8010efc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010efe:	6015      	str	r5, [r2, #0]
 8010f00:	4658      	mov	r0, fp
 8010f02:	4798      	blx	r3
 8010f04:	240a      	movs	r4, #10
 8010f06:	e774      	b.n	8010df2 <rcl_expand_topic_name+0x16a>
 8010f08:	ab17      	add	r3, sp, #92	; 0x5c
 8010f0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010f0e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010f12:	ab14      	add	r3, sp, #80	; 0x50
 8010f14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010f16:	4640      	mov	r0, r8
 8010f18:	f7fd f908 	bl	800e12c <rcutils_strdup>
 8010f1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010f1e:	2800      	cmp	r0, #0
 8010f20:	6018      	str	r0, [r3, #0]
 8010f22:	bf08      	it	eq
 8010f24:	240a      	moveq	r4, #10
 8010f26:	e764      	b.n	8010df2 <rcl_expand_topic_name+0x16a>
 8010f28:	08013690 	.word	0x08013690
 8010f2c:	08012e78 	.word	0x08012e78
 8010f30:	08013698 	.word	0x08013698
 8010f34:	080136a0 	.word	0x080136a0
 8010f38:	080136a8 	.word	0x080136a8
 8010f3c:	0801300c 	.word	0x0801300c
 8010f40:	08012e88 	.word	0x08012e88

08010f44 <rcl_get_default_topic_name_substitutions>:
 8010f44:	2800      	cmp	r0, #0
 8010f46:	bf0c      	ite	eq
 8010f48:	200b      	moveq	r0, #11
 8010f4a:	2000      	movne	r0, #0
 8010f4c:	4770      	bx	lr
 8010f4e:	bf00      	nop

08010f50 <rcl_get_zero_initialized_guard_condition>:
 8010f50:	4a03      	ldr	r2, [pc, #12]	; (8010f60 <rcl_get_zero_initialized_guard_condition+0x10>)
 8010f52:	4603      	mov	r3, r0
 8010f54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f58:	e883 0003 	stmia.w	r3, {r0, r1}
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	4770      	bx	lr
 8010f60:	080136b4 	.word	0x080136b4

08010f64 <rcl_guard_condition_init_from_rmw>:
 8010f64:	b082      	sub	sp, #8
 8010f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f6a:	b086      	sub	sp, #24
 8010f6c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8010f70:	4604      	mov	r4, r0
 8010f72:	f84c 3f04 	str.w	r3, [ip, #4]!
 8010f76:	460e      	mov	r6, r1
 8010f78:	4617      	mov	r7, r2
 8010f7a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010f7e:	f10d 0e04 	add.w	lr, sp, #4
 8010f82:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010f86:	f8dc 3000 	ldr.w	r3, [ip]
 8010f8a:	f8ce 3000 	str.w	r3, [lr]
 8010f8e:	a801      	add	r0, sp, #4
 8010f90:	f7f7 fe6e 	bl	8008c70 <rcutils_allocator_is_valid>
 8010f94:	b350      	cbz	r0, 8010fec <rcl_guard_condition_init_from_rmw+0x88>
 8010f96:	b34c      	cbz	r4, 8010fec <rcl_guard_condition_init_from_rmw+0x88>
 8010f98:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8010f9c:	f1b8 0f00 	cmp.w	r8, #0
 8010fa0:	d11e      	bne.n	8010fe0 <rcl_guard_condition_init_from_rmw+0x7c>
 8010fa2:	b31f      	cbz	r7, 8010fec <rcl_guard_condition_init_from_rmw+0x88>
 8010fa4:	4638      	mov	r0, r7
 8010fa6:	f7fc f87d 	bl	800d0a4 <rcl_context_is_valid>
 8010faa:	b328      	cbz	r0, 8010ff8 <rcl_guard_condition_init_from_rmw+0x94>
 8010fac:	9b01      	ldr	r3, [sp, #4]
 8010fae:	9905      	ldr	r1, [sp, #20]
 8010fb0:	201c      	movs	r0, #28
 8010fb2:	4798      	blx	r3
 8010fb4:	4605      	mov	r5, r0
 8010fb6:	6060      	str	r0, [r4, #4]
 8010fb8:	b358      	cbz	r0, 8011012 <rcl_guard_condition_init_from_rmw+0xae>
 8010fba:	b1fe      	cbz	r6, 8010ffc <rcl_guard_condition_init_from_rmw+0x98>
 8010fbc:	6006      	str	r6, [r0, #0]
 8010fbe:	f880 8004 	strb.w	r8, [r0, #4]
 8010fc2:	ac01      	add	r4, sp, #4
 8010fc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010fc6:	f105 0c08 	add.w	ip, r5, #8
 8010fca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010fce:	6823      	ldr	r3, [r4, #0]
 8010fd0:	f8cc 3000 	str.w	r3, [ip]
 8010fd4:	2000      	movs	r0, #0
 8010fd6:	b006      	add	sp, #24
 8010fd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010fdc:	b002      	add	sp, #8
 8010fde:	4770      	bx	lr
 8010fe0:	2064      	movs	r0, #100	; 0x64
 8010fe2:	b006      	add	sp, #24
 8010fe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010fe8:	b002      	add	sp, #8
 8010fea:	4770      	bx	lr
 8010fec:	200b      	movs	r0, #11
 8010fee:	b006      	add	sp, #24
 8010ff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ff4:	b002      	add	sp, #8
 8010ff6:	4770      	bx	lr
 8010ff8:	2065      	movs	r0, #101	; 0x65
 8010ffa:	e7f2      	b.n	8010fe2 <rcl_guard_condition_init_from_rmw+0x7e>
 8010ffc:	6838      	ldr	r0, [r7, #0]
 8010ffe:	3028      	adds	r0, #40	; 0x28
 8011000:	f000 fa50 	bl	80114a4 <rmw_create_guard_condition>
 8011004:	6028      	str	r0, [r5, #0]
 8011006:	6865      	ldr	r5, [r4, #4]
 8011008:	682e      	ldr	r6, [r5, #0]
 801100a:	b126      	cbz	r6, 8011016 <rcl_guard_condition_init_from_rmw+0xb2>
 801100c:	2301      	movs	r3, #1
 801100e:	712b      	strb	r3, [r5, #4]
 8011010:	e7d7      	b.n	8010fc2 <rcl_guard_condition_init_from_rmw+0x5e>
 8011012:	200a      	movs	r0, #10
 8011014:	e7e5      	b.n	8010fe2 <rcl_guard_condition_init_from_rmw+0x7e>
 8011016:	4628      	mov	r0, r5
 8011018:	9b02      	ldr	r3, [sp, #8]
 801101a:	9905      	ldr	r1, [sp, #20]
 801101c:	4798      	blx	r3
 801101e:	6066      	str	r6, [r4, #4]
 8011020:	2001      	movs	r0, #1
 8011022:	e7de      	b.n	8010fe2 <rcl_guard_condition_init_from_rmw+0x7e>

08011024 <rcl_guard_condition_fini>:
 8011024:	b570      	push	{r4, r5, r6, lr}
 8011026:	b082      	sub	sp, #8
 8011028:	b1f0      	cbz	r0, 8011068 <rcl_guard_condition_fini+0x44>
 801102a:	6843      	ldr	r3, [r0, #4]
 801102c:	4604      	mov	r4, r0
 801102e:	b163      	cbz	r3, 801104a <rcl_guard_condition_fini+0x26>
 8011030:	6818      	ldr	r0, [r3, #0]
 8011032:	68de      	ldr	r6, [r3, #12]
 8011034:	6999      	ldr	r1, [r3, #24]
 8011036:	b160      	cbz	r0, 8011052 <rcl_guard_condition_fini+0x2e>
 8011038:	791d      	ldrb	r5, [r3, #4]
 801103a:	b965      	cbnz	r5, 8011056 <rcl_guard_condition_fini+0x32>
 801103c:	4618      	mov	r0, r3
 801103e:	47b0      	blx	r6
 8011040:	2300      	movs	r3, #0
 8011042:	4628      	mov	r0, r5
 8011044:	6063      	str	r3, [r4, #4]
 8011046:	b002      	add	sp, #8
 8011048:	bd70      	pop	{r4, r5, r6, pc}
 801104a:	461d      	mov	r5, r3
 801104c:	4628      	mov	r0, r5
 801104e:	b002      	add	sp, #8
 8011050:	bd70      	pop	{r4, r5, r6, pc}
 8011052:	4605      	mov	r5, r0
 8011054:	e7f2      	b.n	801103c <rcl_guard_condition_fini+0x18>
 8011056:	9101      	str	r1, [sp, #4]
 8011058:	f000 fa38 	bl	80114cc <rmw_destroy_guard_condition>
 801105c:	1e05      	subs	r5, r0, #0
 801105e:	6863      	ldr	r3, [r4, #4]
 8011060:	9901      	ldr	r1, [sp, #4]
 8011062:	bf18      	it	ne
 8011064:	2501      	movne	r5, #1
 8011066:	e7e9      	b.n	801103c <rcl_guard_condition_fini+0x18>
 8011068:	250b      	movs	r5, #11
 801106a:	4628      	mov	r0, r5
 801106c:	b002      	add	sp, #8
 801106e:	bd70      	pop	{r4, r5, r6, pc}

08011070 <rcl_guard_condition_get_default_options>:
 8011070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011072:	b087      	sub	sp, #28
 8011074:	4606      	mov	r6, r0
 8011076:	4668      	mov	r0, sp
 8011078:	f7f7 fdec 	bl	8008c54 <rcutils_get_default_allocator>
 801107c:	4b09      	ldr	r3, [pc, #36]	; (80110a4 <rcl_guard_condition_get_default_options+0x34>)
 801107e:	46ee      	mov	lr, sp
 8011080:	469c      	mov	ip, r3
 8011082:	461d      	mov	r5, r3
 8011084:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011088:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801108c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801108e:	4634      	mov	r4, r6
 8011090:	f8de 7000 	ldr.w	r7, [lr]
 8011094:	f8cc 7000 	str.w	r7, [ip]
 8011098:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801109a:	4630      	mov	r0, r6
 801109c:	6027      	str	r7, [r4, #0]
 801109e:	b007      	add	sp, #28
 80110a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110a2:	bf00      	nop
 80110a4:	2000e074 	.word	0x2000e074

080110a8 <rcl_validate_topic_name>:
 80110a8:	2800      	cmp	r0, #0
 80110aa:	d07a      	beq.n	80111a2 <rcl_validate_topic_name+0xfa>
 80110ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110b0:	460e      	mov	r6, r1
 80110b2:	2900      	cmp	r1, #0
 80110b4:	d07c      	beq.n	80111b0 <rcl_validate_topic_name+0x108>
 80110b6:	4617      	mov	r7, r2
 80110b8:	4605      	mov	r5, r0
 80110ba:	f7ef f8b3 	bl	8000224 <strlen>
 80110be:	b1b0      	cbz	r0, 80110ee <rcl_validate_topic_name+0x46>
 80110c0:	f895 9000 	ldrb.w	r9, [r5]
 80110c4:	f8df c180 	ldr.w	ip, [pc, #384]	; 8011248 <rcl_validate_topic_name+0x1a0>
 80110c8:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80110cc:	f013 0304 	ands.w	r3, r3, #4
 80110d0:	d169      	bne.n	80111a6 <rcl_validate_topic_name+0xfe>
 80110d2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80110d6:	f815 2008 	ldrb.w	r2, [r5, r8]
 80110da:	2a2f      	cmp	r2, #47	; 0x2f
 80110dc:	d10e      	bne.n	80110fc <rcl_validate_topic_name+0x54>
 80110de:	2202      	movs	r2, #2
 80110e0:	6032      	str	r2, [r6, #0]
 80110e2:	b36f      	cbz	r7, 8011140 <rcl_validate_topic_name+0x98>
 80110e4:	f8c7 8000 	str.w	r8, [r7]
 80110e8:	4618      	mov	r0, r3
 80110ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110ee:	2301      	movs	r3, #1
 80110f0:	6033      	str	r3, [r6, #0]
 80110f2:	b32f      	cbz	r7, 8011140 <rcl_validate_topic_name+0x98>
 80110f4:	2000      	movs	r0, #0
 80110f6:	6038      	str	r0, [r7, #0]
 80110f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110fc:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8011100:	461c      	mov	r4, r3
 8011102:	4619      	mov	r1, r3
 8011104:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8011108:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801110c:	f1be 0f09 	cmp.w	lr, #9
 8011110:	d919      	bls.n	8011146 <rcl_validate_topic_name+0x9e>
 8011112:	f022 0e20 	bic.w	lr, r2, #32
 8011116:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 801111a:	f1be 0f19 	cmp.w	lr, #25
 801111e:	d912      	bls.n	8011146 <rcl_validate_topic_name+0x9e>
 8011120:	2a5f      	cmp	r2, #95	; 0x5f
 8011122:	d019      	beq.n	8011158 <rcl_validate_topic_name+0xb0>
 8011124:	2a2f      	cmp	r2, #47	; 0x2f
 8011126:	d051      	beq.n	80111cc <rcl_validate_topic_name+0x124>
 8011128:	2a7e      	cmp	r2, #126	; 0x7e
 801112a:	d048      	beq.n	80111be <rcl_validate_topic_name+0x116>
 801112c:	2a7b      	cmp	r2, #123	; 0x7b
 801112e:	d054      	beq.n	80111da <rcl_validate_topic_name+0x132>
 8011130:	2a7d      	cmp	r2, #125	; 0x7d
 8011132:	d161      	bne.n	80111f8 <rcl_validate_topic_name+0x150>
 8011134:	2c00      	cmp	r4, #0
 8011136:	d155      	bne.n	80111e4 <rcl_validate_topic_name+0x13c>
 8011138:	2305      	movs	r3, #5
 801113a:	6033      	str	r3, [r6, #0]
 801113c:	b107      	cbz	r7, 8011140 <rcl_validate_topic_name+0x98>
 801113e:	6039      	str	r1, [r7, #0]
 8011140:	2000      	movs	r0, #0
 8011142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011146:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801114a:	0752      	lsls	r2, r2, #29
 801114c:	d504      	bpl.n	8011158 <rcl_validate_topic_name+0xb0>
 801114e:	b11c      	cbz	r4, 8011158 <rcl_validate_topic_name+0xb0>
 8011150:	b111      	cbz	r1, 8011158 <rcl_validate_topic_name+0xb0>
 8011152:	1e4a      	subs	r2, r1, #1
 8011154:	429a      	cmp	r2, r3
 8011156:	d02d      	beq.n	80111b4 <rcl_validate_topic_name+0x10c>
 8011158:	3101      	adds	r1, #1
 801115a:	4288      	cmp	r0, r1
 801115c:	d1d2      	bne.n	8011104 <rcl_validate_topic_name+0x5c>
 801115e:	2c00      	cmp	r4, #0
 8011160:	d145      	bne.n	80111ee <rcl_validate_topic_name+0x146>
 8011162:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8011166:	d04f      	beq.n	8011208 <rcl_validate_topic_name+0x160>
 8011168:	4620      	mov	r0, r4
 801116a:	2301      	movs	r3, #1
 801116c:	e006      	b.n	801117c <rcl_validate_topic_name+0xd4>
 801116e:	428b      	cmp	r3, r1
 8011170:	f105 0501 	add.w	r5, r5, #1
 8011174:	f103 0201 	add.w	r2, r3, #1
 8011178:	d236      	bcs.n	80111e8 <rcl_validate_topic_name+0x140>
 801117a:	4613      	mov	r3, r2
 801117c:	4580      	cmp	r8, r0
 801117e:	f100 0001 	add.w	r0, r0, #1
 8011182:	d0f4      	beq.n	801116e <rcl_validate_topic_name+0xc6>
 8011184:	782a      	ldrb	r2, [r5, #0]
 8011186:	2a2f      	cmp	r2, #47	; 0x2f
 8011188:	d1f1      	bne.n	801116e <rcl_validate_topic_name+0xc6>
 801118a:	786a      	ldrb	r2, [r5, #1]
 801118c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8011190:	0754      	lsls	r4, r2, #29
 8011192:	d5ec      	bpl.n	801116e <rcl_validate_topic_name+0xc6>
 8011194:	2204      	movs	r2, #4
 8011196:	6032      	str	r2, [r6, #0]
 8011198:	2f00      	cmp	r7, #0
 801119a:	d0d1      	beq.n	8011140 <rcl_validate_topic_name+0x98>
 801119c:	603b      	str	r3, [r7, #0]
 801119e:	2000      	movs	r0, #0
 80111a0:	e7aa      	b.n	80110f8 <rcl_validate_topic_name+0x50>
 80111a2:	200b      	movs	r0, #11
 80111a4:	4770      	bx	lr
 80111a6:	2304      	movs	r3, #4
 80111a8:	6033      	str	r3, [r6, #0]
 80111aa:	2f00      	cmp	r7, #0
 80111ac:	d1a2      	bne.n	80110f4 <rcl_validate_topic_name+0x4c>
 80111ae:	e7c7      	b.n	8011140 <rcl_validate_topic_name+0x98>
 80111b0:	200b      	movs	r0, #11
 80111b2:	e7a1      	b.n	80110f8 <rcl_validate_topic_name+0x50>
 80111b4:	2309      	movs	r3, #9
 80111b6:	6033      	str	r3, [r6, #0]
 80111b8:	2f00      	cmp	r7, #0
 80111ba:	d1c0      	bne.n	801113e <rcl_validate_topic_name+0x96>
 80111bc:	e7c0      	b.n	8011140 <rcl_validate_topic_name+0x98>
 80111be:	2900      	cmp	r1, #0
 80111c0:	d0ca      	beq.n	8011158 <rcl_validate_topic_name+0xb0>
 80111c2:	2306      	movs	r3, #6
 80111c4:	6033      	str	r3, [r6, #0]
 80111c6:	2f00      	cmp	r7, #0
 80111c8:	d1b9      	bne.n	801113e <rcl_validate_topic_name+0x96>
 80111ca:	e7b9      	b.n	8011140 <rcl_validate_topic_name+0x98>
 80111cc:	2c00      	cmp	r4, #0
 80111ce:	d0c3      	beq.n	8011158 <rcl_validate_topic_name+0xb0>
 80111d0:	2308      	movs	r3, #8
 80111d2:	6033      	str	r3, [r6, #0]
 80111d4:	2f00      	cmp	r7, #0
 80111d6:	d1b2      	bne.n	801113e <rcl_validate_topic_name+0x96>
 80111d8:	e7b2      	b.n	8011140 <rcl_validate_topic_name+0x98>
 80111da:	2c00      	cmp	r4, #0
 80111dc:	d1f8      	bne.n	80111d0 <rcl_validate_topic_name+0x128>
 80111de:	460b      	mov	r3, r1
 80111e0:	2401      	movs	r4, #1
 80111e2:	e7b9      	b.n	8011158 <rcl_validate_topic_name+0xb0>
 80111e4:	2400      	movs	r4, #0
 80111e6:	e7b7      	b.n	8011158 <rcl_validate_topic_name+0xb0>
 80111e8:	2000      	movs	r0, #0
 80111ea:	6030      	str	r0, [r6, #0]
 80111ec:	e784      	b.n	80110f8 <rcl_validate_topic_name+0x50>
 80111ee:	2205      	movs	r2, #5
 80111f0:	6032      	str	r2, [r6, #0]
 80111f2:	2f00      	cmp	r7, #0
 80111f4:	d1d2      	bne.n	801119c <rcl_validate_topic_name+0xf4>
 80111f6:	e7a3      	b.n	8011140 <rcl_validate_topic_name+0x98>
 80111f8:	2c00      	cmp	r4, #0
 80111fa:	bf14      	ite	ne
 80111fc:	2308      	movne	r3, #8
 80111fe:	2303      	moveq	r3, #3
 8011200:	6033      	str	r3, [r6, #0]
 8011202:	2f00      	cmp	r7, #0
 8011204:	d19b      	bne.n	801113e <rcl_validate_topic_name+0x96>
 8011206:	e79b      	b.n	8011140 <rcl_validate_topic_name+0x98>
 8011208:	2301      	movs	r3, #1
 801120a:	e00a      	b.n	8011222 <rcl_validate_topic_name+0x17a>
 801120c:	2c01      	cmp	r4, #1
 801120e:	d013      	beq.n	8011238 <rcl_validate_topic_name+0x190>
 8011210:	4299      	cmp	r1, r3
 8011212:	f104 0401 	add.w	r4, r4, #1
 8011216:	f105 0501 	add.w	r5, r5, #1
 801121a:	f103 0201 	add.w	r2, r3, #1
 801121e:	d9e3      	bls.n	80111e8 <rcl_validate_topic_name+0x140>
 8011220:	4613      	mov	r3, r2
 8011222:	45a0      	cmp	r8, r4
 8011224:	d0f4      	beq.n	8011210 <rcl_validate_topic_name+0x168>
 8011226:	782a      	ldrb	r2, [r5, #0]
 8011228:	2a2f      	cmp	r2, #47	; 0x2f
 801122a:	d1ef      	bne.n	801120c <rcl_validate_topic_name+0x164>
 801122c:	786a      	ldrb	r2, [r5, #1]
 801122e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8011232:	0752      	lsls	r2, r2, #29
 8011234:	d5ec      	bpl.n	8011210 <rcl_validate_topic_name+0x168>
 8011236:	e7ad      	b.n	8011194 <rcl_validate_topic_name+0xec>
 8011238:	2307      	movs	r3, #7
 801123a:	6033      	str	r3, [r6, #0]
 801123c:	2f00      	cmp	r7, #0
 801123e:	f43f af7f 	beq.w	8011140 <rcl_validate_topic_name+0x98>
 8011242:	603c      	str	r4, [r7, #0]
 8011244:	2000      	movs	r0, #0
 8011246:	e757      	b.n	80110f8 <rcl_validate_topic_name+0x50>
 8011248:	0801372c 	.word	0x0801372c

0801124c <on_status>:
 801124c:	b082      	sub	sp, #8
 801124e:	b002      	add	sp, #8
 8011250:	4770      	bx	lr
 8011252:	bf00      	nop

08011254 <on_topic>:
 8011254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011258:	4a22      	ldr	r2, [pc, #136]	; (80112e4 <on_topic+0x90>)
 801125a:	b094      	sub	sp, #80	; 0x50
 801125c:	6812      	ldr	r2, [r2, #0]
 801125e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8011260:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8011264:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
 8011268:	b3c2      	cbz	r2, 80112dc <on_topic+0x88>
 801126a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801126e:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8011272:	e001      	b.n	8011278 <on_topic+0x24>
 8011274:	6852      	ldr	r2, [r2, #4]
 8011276:	b38a      	cbz	r2, 80112dc <on_topic+0x88>
 8011278:	6894      	ldr	r4, [r2, #8]
 801127a:	8aa3      	ldrh	r3, [r4, #20]
 801127c:	428b      	cmp	r3, r1
 801127e:	d1f9      	bne.n	8011274 <on_topic+0x20>
 8011280:	7da3      	ldrb	r3, [r4, #22]
 8011282:	4283      	cmp	r3, r0
 8011284:	d1f6      	bne.n	8011274 <on_topic+0x20>
 8011286:	2248      	movs	r2, #72	; 0x48
 8011288:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801128c:	4668      	mov	r0, sp
 801128e:	f000 fe16 	bl	8011ebe <memcpy>
 8011292:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8011296:	cb0c      	ldmia	r3, {r2, r3}
 8011298:	4620      	mov	r0, r4
 801129a:	f7f8 f8c9 	bl	8009430 <rmw_uxrce_get_static_input_buffer_for_entity>
 801129e:	4607      	mov	r7, r0
 80112a0:	b1e0      	cbz	r0, 80112dc <on_topic+0x88>
 80112a2:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80112a6:	4632      	mov	r2, r6
 80112a8:	4628      	mov	r0, r5
 80112aa:	f108 0110 	add.w	r1, r8, #16
 80112ae:	f7fe f831 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 80112b2:	b930      	cbnz	r0, 80112c2 <on_topic+0x6e>
 80112b4:	480c      	ldr	r0, [pc, #48]	; (80112e8 <on_topic+0x94>)
 80112b6:	4639      	mov	r1, r7
 80112b8:	b014      	add	sp, #80	; 0x50
 80112ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112be:	f7fd ba63 	b.w	800e788 <put_memory>
 80112c2:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 80112c6:	f8c8 6810 	str.w	r6, [r8, #2064]	; 0x810
 80112ca:	f7fd ff19 	bl	800f100 <rmw_uros_epoch_nanos>
 80112ce:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 80112d2:	2305      	movs	r3, #5
 80112d4:	e942 0102 	strd	r0, r1, [r2, #-8]
 80112d8:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 80112dc:	b014      	add	sp, #80	; 0x50
 80112de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112e2:	bf00      	nop
 80112e4:	2000df44 	.word	0x2000df44
 80112e8:	2000df34 	.word	0x2000df34

080112ec <on_request>:
 80112ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112f0:	4823      	ldr	r0, [pc, #140]	; (8011380 <on_request+0x94>)
 80112f2:	b094      	sub	sp, #80	; 0x50
 80112f4:	6800      	ldr	r0, [r0, #0]
 80112f6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80112f8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 80112fc:	9113      	str	r1, [sp, #76]	; 0x4c
 80112fe:	2800      	cmp	r0, #0
 8011300:	d03b      	beq.n	801137a <on_request+0x8e>
 8011302:	461d      	mov	r5, r3
 8011304:	e001      	b.n	801130a <on_request+0x1e>
 8011306:	6840      	ldr	r0, [r0, #4]
 8011308:	b3b8      	cbz	r0, 801137a <on_request+0x8e>
 801130a:	6884      	ldr	r4, [r0, #8]
 801130c:	8b21      	ldrh	r1, [r4, #24]
 801130e:	4291      	cmp	r1, r2
 8011310:	d1f9      	bne.n	8011306 <on_request+0x1a>
 8011312:	2248      	movs	r2, #72	; 0x48
 8011314:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8011318:	4668      	mov	r0, sp
 801131a:	f000 fdd0 	bl	8011ebe <memcpy>
 801131e:	f104 0320 	add.w	r3, r4, #32
 8011322:	cb0c      	ldmia	r3, {r2, r3}
 8011324:	4620      	mov	r0, r4
 8011326:	f7f8 f883 	bl	8009430 <rmw_uxrce_get_static_input_buffer_for_entity>
 801132a:	4680      	mov	r8, r0
 801132c:	b328      	cbz	r0, 801137a <on_request+0x8e>
 801132e:	4638      	mov	r0, r7
 8011330:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8011334:	4632      	mov	r2, r6
 8011336:	f107 0110 	add.w	r1, r7, #16
 801133a:	f7fd ffeb 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 801133e:	b930      	cbnz	r0, 801134e <on_request+0x62>
 8011340:	4810      	ldr	r0, [pc, #64]	; (8011384 <on_request+0x98>)
 8011342:	4641      	mov	r1, r8
 8011344:	b014      	add	sp, #80	; 0x50
 8011346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801134a:	f7fd ba1d 	b.w	800e788 <put_memory>
 801134e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011350:	f607 0c28 	addw	ip, r7, #2088	; 0x828
 8011354:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 8011358:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 801135c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011360:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011364:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011368:	f7fd feca 	bl	800f100 <rmw_uros_epoch_nanos>
 801136c:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8011370:	2303      	movs	r3, #3
 8011372:	e942 0102 	strd	r0, r1, [r2, #-8]
 8011376:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 801137a:	b014      	add	sp, #80	; 0x50
 801137c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011380:	2000df14 	.word	0x2000df14
 8011384:	2000df34 	.word	0x2000df34

08011388 <on_reply>:
 8011388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801138c:	4821      	ldr	r0, [pc, #132]	; (8011414 <on_reply+0x8c>)
 801138e:	b094      	sub	sp, #80	; 0x50
 8011390:	6800      	ldr	r0, [r0, #0]
 8011392:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8011394:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8011398:	9113      	str	r1, [sp, #76]	; 0x4c
 801139a:	b3b8      	cbz	r0, 801140c <on_reply+0x84>
 801139c:	461d      	mov	r5, r3
 801139e:	e001      	b.n	80113a4 <on_reply+0x1c>
 80113a0:	6840      	ldr	r0, [r0, #4]
 80113a2:	b398      	cbz	r0, 801140c <on_reply+0x84>
 80113a4:	6884      	ldr	r4, [r0, #8]
 80113a6:	8b21      	ldrh	r1, [r4, #24]
 80113a8:	4291      	cmp	r1, r2
 80113aa:	d1f9      	bne.n	80113a0 <on_reply+0x18>
 80113ac:	2248      	movs	r2, #72	; 0x48
 80113ae:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80113b2:	4668      	mov	r0, sp
 80113b4:	f000 fd83 	bl	8011ebe <memcpy>
 80113b8:	f104 0320 	add.w	r3, r4, #32
 80113bc:	cb0c      	ldmia	r3, {r2, r3}
 80113be:	4620      	mov	r0, r4
 80113c0:	f7f8 f836 	bl	8009430 <rmw_uxrce_get_static_input_buffer_for_entity>
 80113c4:	4680      	mov	r8, r0
 80113c6:	b308      	cbz	r0, 801140c <on_reply+0x84>
 80113c8:	4638      	mov	r0, r7
 80113ca:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80113ce:	4632      	mov	r2, r6
 80113d0:	f107 0110 	add.w	r1, r7, #16
 80113d4:	f7fd ff9e 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 80113d8:	b930      	cbnz	r0, 80113e8 <on_reply+0x60>
 80113da:	480f      	ldr	r0, [pc, #60]	; (8011418 <on_reply+0x90>)
 80113dc:	4641      	mov	r1, r8
 80113de:	b014      	add	sp, #80	; 0x50
 80113e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80113e4:	f7fd b9d0 	b.w	800e788 <put_memory>
 80113e8:	2200      	movs	r2, #0
 80113ea:	f8c7 282c 	str.w	r2, [r7, #2092]	; 0x82c
 80113ee:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 80113f2:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 80113f6:	f8c7 5828 	str.w	r5, [r7, #2088]	; 0x828
 80113fa:	f7fd fe81 	bl	800f100 <rmw_uros_epoch_nanos>
 80113fe:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8011402:	2304      	movs	r3, #4
 8011404:	e942 0102 	strd	r0, r1, [r2, #-8]
 8011408:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 801140c:	b014      	add	sp, #80	; 0x50
 801140e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011412:	bf00      	nop
 8011414:	20009628 	.word	0x20009628
 8011418:	2000df34 	.word	0x2000df34

0801141c <rmw_destroy_client>:
 801141c:	b570      	push	{r4, r5, r6, lr}
 801141e:	b128      	cbz	r0, 801142c <rmw_destroy_client+0x10>
 8011420:	4604      	mov	r4, r0
 8011422:	6800      	ldr	r0, [r0, #0]
 8011424:	460d      	mov	r5, r1
 8011426:	f7f8 f8d3 	bl	80095d0 <is_uxrce_rmw_identifier_valid>
 801142a:	b910      	cbnz	r0, 8011432 <rmw_destroy_client+0x16>
 801142c:	2401      	movs	r4, #1
 801142e:	4620      	mov	r0, r4
 8011430:	bd70      	pop	{r4, r5, r6, pc}
 8011432:	6863      	ldr	r3, [r4, #4]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d0f9      	beq.n	801142c <rmw_destroy_client+0x10>
 8011438:	2d00      	cmp	r5, #0
 801143a:	d0f7      	beq.n	801142c <rmw_destroy_client+0x10>
 801143c:	6828      	ldr	r0, [r5, #0]
 801143e:	f7f8 f8c7 	bl	80095d0 <is_uxrce_rmw_identifier_valid>
 8011442:	2800      	cmp	r0, #0
 8011444:	d0f2      	beq.n	801142c <rmw_destroy_client+0x10>
 8011446:	686e      	ldr	r6, [r5, #4]
 8011448:	2e00      	cmp	r6, #0
 801144a:	d0ef      	beq.n	801142c <rmw_destroy_client+0x10>
 801144c:	6864      	ldr	r4, [r4, #4]
 801144e:	6932      	ldr	r2, [r6, #16]
 8011450:	6920      	ldr	r0, [r4, #16]
 8011452:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8011456:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801145a:	6819      	ldr	r1, [r3, #0]
 801145c:	f7fe fe38 	bl	80100d0 <uxr_buffer_cancel_data>
 8011460:	4602      	mov	r2, r0
 8011462:	6920      	ldr	r0, [r4, #16]
 8011464:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8011468:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801146c:	f7f8 f830 	bl	80094d0 <run_xrce_session>
 8011470:	6920      	ldr	r0, [r4, #16]
 8011472:	6932      	ldr	r2, [r6, #16]
 8011474:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8011478:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801147c:	6819      	ldr	r1, [r3, #0]
 801147e:	f7f9 f963 	bl	800a748 <uxr_buffer_delete_entity>
 8011482:	4602      	mov	r2, r0
 8011484:	6920      	ldr	r0, [r4, #16]
 8011486:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801148a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801148e:	f7f8 f81f 	bl	80094d0 <run_xrce_session>
 8011492:	2800      	cmp	r0, #0
 8011494:	4628      	mov	r0, r5
 8011496:	bf14      	ite	ne
 8011498:	2400      	movne	r4, #0
 801149a:	2402      	moveq	r4, #2
 801149c:	f7f7 ffa6 	bl	80093ec <rmw_uxrce_fini_client_memory>
 80114a0:	e7c5      	b.n	801142e <rmw_destroy_client+0x12>
 80114a2:	bf00      	nop

080114a4 <rmw_create_guard_condition>:
 80114a4:	b538      	push	{r3, r4, r5, lr}
 80114a6:	4605      	mov	r5, r0
 80114a8:	4807      	ldr	r0, [pc, #28]	; (80114c8 <rmw_create_guard_condition+0x24>)
 80114aa:	f7fd f95d 	bl	800e768 <get_memory>
 80114ae:	b148      	cbz	r0, 80114c4 <rmw_create_guard_condition+0x20>
 80114b0:	6884      	ldr	r4, [r0, #8]
 80114b2:	2300      	movs	r3, #0
 80114b4:	7423      	strb	r3, [r4, #16]
 80114b6:	61e5      	str	r5, [r4, #28]
 80114b8:	f7fd f97a 	bl	800e7b0 <rmw_get_implementation_identifier>
 80114bc:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80114c0:	f104 0014 	add.w	r0, r4, #20
 80114c4:	bd38      	pop	{r3, r4, r5, pc}
 80114c6:	bf00      	nop
 80114c8:	2000ded4 	.word	0x2000ded4

080114cc <rmw_destroy_guard_condition>:
 80114cc:	b508      	push	{r3, lr}
 80114ce:	4b08      	ldr	r3, [pc, #32]	; (80114f0 <rmw_destroy_guard_condition+0x24>)
 80114d0:	6819      	ldr	r1, [r3, #0]
 80114d2:	b911      	cbnz	r1, 80114da <rmw_destroy_guard_condition+0xe>
 80114d4:	e00a      	b.n	80114ec <rmw_destroy_guard_condition+0x20>
 80114d6:	6849      	ldr	r1, [r1, #4]
 80114d8:	b141      	cbz	r1, 80114ec <rmw_destroy_guard_condition+0x20>
 80114da:	688b      	ldr	r3, [r1, #8]
 80114dc:	3314      	adds	r3, #20
 80114de:	4298      	cmp	r0, r3
 80114e0:	d1f9      	bne.n	80114d6 <rmw_destroy_guard_condition+0xa>
 80114e2:	4803      	ldr	r0, [pc, #12]	; (80114f0 <rmw_destroy_guard_condition+0x24>)
 80114e4:	f7fd f950 	bl	800e788 <put_memory>
 80114e8:	2000      	movs	r0, #0
 80114ea:	bd08      	pop	{r3, pc}
 80114ec:	2001      	movs	r0, #1
 80114ee:	bd08      	pop	{r3, pc}
 80114f0:	2000ded4 	.word	0x2000ded4

080114f4 <calloc>:
 80114f4:	4b02      	ldr	r3, [pc, #8]	; (8011500 <calloc+0xc>)
 80114f6:	460a      	mov	r2, r1
 80114f8:	4601      	mov	r1, r0
 80114fa:	6818      	ldr	r0, [r3, #0]
 80114fc:	f000 b802 	b.w	8011504 <_calloc_r>
 8011500:	2000010c 	.word	0x2000010c

08011504 <_calloc_r>:
 8011504:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011506:	fba1 2402 	umull	r2, r4, r1, r2
 801150a:	b94c      	cbnz	r4, 8011520 <_calloc_r+0x1c>
 801150c:	4611      	mov	r1, r2
 801150e:	9201      	str	r2, [sp, #4]
 8011510:	f000 f886 	bl	8011620 <_malloc_r>
 8011514:	9a01      	ldr	r2, [sp, #4]
 8011516:	4605      	mov	r5, r0
 8011518:	b930      	cbnz	r0, 8011528 <_calloc_r+0x24>
 801151a:	4628      	mov	r0, r5
 801151c:	b003      	add	sp, #12
 801151e:	bd30      	pop	{r4, r5, pc}
 8011520:	220c      	movs	r2, #12
 8011522:	6002      	str	r2, [r0, #0]
 8011524:	2500      	movs	r5, #0
 8011526:	e7f8      	b.n	801151a <_calloc_r+0x16>
 8011528:	4621      	mov	r1, r4
 801152a:	f000 fba9 	bl	8011c80 <memset>
 801152e:	e7f4      	b.n	801151a <_calloc_r+0x16>

08011530 <getenv>:
 8011530:	b507      	push	{r0, r1, r2, lr}
 8011532:	4b04      	ldr	r3, [pc, #16]	; (8011544 <getenv+0x14>)
 8011534:	4601      	mov	r1, r0
 8011536:	aa01      	add	r2, sp, #4
 8011538:	6818      	ldr	r0, [r3, #0]
 801153a:	f000 f805 	bl	8011548 <_findenv_r>
 801153e:	b003      	add	sp, #12
 8011540:	f85d fb04 	ldr.w	pc, [sp], #4
 8011544:	2000010c 	.word	0x2000010c

08011548 <_findenv_r>:
 8011548:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801154c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80115bc <_findenv_r+0x74>
 8011550:	4607      	mov	r7, r0
 8011552:	4689      	mov	r9, r1
 8011554:	4616      	mov	r6, r2
 8011556:	f000 fcdf 	bl	8011f18 <__env_lock>
 801155a:	f8da 4000 	ldr.w	r4, [sl]
 801155e:	b134      	cbz	r4, 801156e <_findenv_r+0x26>
 8011560:	464b      	mov	r3, r9
 8011562:	4698      	mov	r8, r3
 8011564:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011568:	b13a      	cbz	r2, 801157a <_findenv_r+0x32>
 801156a:	2a3d      	cmp	r2, #61	; 0x3d
 801156c:	d1f9      	bne.n	8011562 <_findenv_r+0x1a>
 801156e:	4638      	mov	r0, r7
 8011570:	f000 fcd8 	bl	8011f24 <__env_unlock>
 8011574:	2000      	movs	r0, #0
 8011576:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801157a:	eba8 0809 	sub.w	r8, r8, r9
 801157e:	46a3      	mov	fp, r4
 8011580:	f854 0b04 	ldr.w	r0, [r4], #4
 8011584:	2800      	cmp	r0, #0
 8011586:	d0f2      	beq.n	801156e <_findenv_r+0x26>
 8011588:	4642      	mov	r2, r8
 801158a:	4649      	mov	r1, r9
 801158c:	f000 fb8d 	bl	8011caa <strncmp>
 8011590:	2800      	cmp	r0, #0
 8011592:	d1f4      	bne.n	801157e <_findenv_r+0x36>
 8011594:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011598:	eb03 0508 	add.w	r5, r3, r8
 801159c:	f813 3008 	ldrb.w	r3, [r3, r8]
 80115a0:	2b3d      	cmp	r3, #61	; 0x3d
 80115a2:	d1ec      	bne.n	801157e <_findenv_r+0x36>
 80115a4:	f8da 3000 	ldr.w	r3, [sl]
 80115a8:	ebab 0303 	sub.w	r3, fp, r3
 80115ac:	109b      	asrs	r3, r3, #2
 80115ae:	4638      	mov	r0, r7
 80115b0:	6033      	str	r3, [r6, #0]
 80115b2:	f000 fcb7 	bl	8011f24 <__env_unlock>
 80115b6:	1c68      	adds	r0, r5, #1
 80115b8:	e7dd      	b.n	8011576 <_findenv_r+0x2e>
 80115ba:	bf00      	nop
 80115bc:	20000000 	.word	0x20000000

080115c0 <malloc>:
 80115c0:	4b02      	ldr	r3, [pc, #8]	; (80115cc <malloc+0xc>)
 80115c2:	4601      	mov	r1, r0
 80115c4:	6818      	ldr	r0, [r3, #0]
 80115c6:	f000 b82b 	b.w	8011620 <_malloc_r>
 80115ca:	bf00      	nop
 80115cc:	2000010c 	.word	0x2000010c

080115d0 <free>:
 80115d0:	4b02      	ldr	r3, [pc, #8]	; (80115dc <free+0xc>)
 80115d2:	4601      	mov	r1, r0
 80115d4:	6818      	ldr	r0, [r3, #0]
 80115d6:	f000 bcab 	b.w	8011f30 <_free_r>
 80115da:	bf00      	nop
 80115dc:	2000010c 	.word	0x2000010c

080115e0 <sbrk_aligned>:
 80115e0:	b570      	push	{r4, r5, r6, lr}
 80115e2:	4e0e      	ldr	r6, [pc, #56]	; (801161c <sbrk_aligned+0x3c>)
 80115e4:	460c      	mov	r4, r1
 80115e6:	6831      	ldr	r1, [r6, #0]
 80115e8:	4605      	mov	r5, r0
 80115ea:	b911      	cbnz	r1, 80115f2 <sbrk_aligned+0x12>
 80115ec:	f000 fc10 	bl	8011e10 <_sbrk_r>
 80115f0:	6030      	str	r0, [r6, #0]
 80115f2:	4621      	mov	r1, r4
 80115f4:	4628      	mov	r0, r5
 80115f6:	f000 fc0b 	bl	8011e10 <_sbrk_r>
 80115fa:	1c43      	adds	r3, r0, #1
 80115fc:	d00a      	beq.n	8011614 <sbrk_aligned+0x34>
 80115fe:	1cc4      	adds	r4, r0, #3
 8011600:	f024 0403 	bic.w	r4, r4, #3
 8011604:	42a0      	cmp	r0, r4
 8011606:	d007      	beq.n	8011618 <sbrk_aligned+0x38>
 8011608:	1a21      	subs	r1, r4, r0
 801160a:	4628      	mov	r0, r5
 801160c:	f000 fc00 	bl	8011e10 <_sbrk_r>
 8011610:	3001      	adds	r0, #1
 8011612:	d101      	bne.n	8011618 <sbrk_aligned+0x38>
 8011614:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011618:	4620      	mov	r0, r4
 801161a:	bd70      	pop	{r4, r5, r6, pc}
 801161c:	2000e08c 	.word	0x2000e08c

08011620 <_malloc_r>:
 8011620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011624:	1ccd      	adds	r5, r1, #3
 8011626:	f025 0503 	bic.w	r5, r5, #3
 801162a:	3508      	adds	r5, #8
 801162c:	2d0c      	cmp	r5, #12
 801162e:	bf38      	it	cc
 8011630:	250c      	movcc	r5, #12
 8011632:	2d00      	cmp	r5, #0
 8011634:	4607      	mov	r7, r0
 8011636:	db01      	blt.n	801163c <_malloc_r+0x1c>
 8011638:	42a9      	cmp	r1, r5
 801163a:	d905      	bls.n	8011648 <_malloc_r+0x28>
 801163c:	230c      	movs	r3, #12
 801163e:	603b      	str	r3, [r7, #0]
 8011640:	2600      	movs	r6, #0
 8011642:	4630      	mov	r0, r6
 8011644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011648:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801171c <_malloc_r+0xfc>
 801164c:	f000 f868 	bl	8011720 <__malloc_lock>
 8011650:	f8d8 3000 	ldr.w	r3, [r8]
 8011654:	461c      	mov	r4, r3
 8011656:	bb5c      	cbnz	r4, 80116b0 <_malloc_r+0x90>
 8011658:	4629      	mov	r1, r5
 801165a:	4638      	mov	r0, r7
 801165c:	f7ff ffc0 	bl	80115e0 <sbrk_aligned>
 8011660:	1c43      	adds	r3, r0, #1
 8011662:	4604      	mov	r4, r0
 8011664:	d155      	bne.n	8011712 <_malloc_r+0xf2>
 8011666:	f8d8 4000 	ldr.w	r4, [r8]
 801166a:	4626      	mov	r6, r4
 801166c:	2e00      	cmp	r6, #0
 801166e:	d145      	bne.n	80116fc <_malloc_r+0xdc>
 8011670:	2c00      	cmp	r4, #0
 8011672:	d048      	beq.n	8011706 <_malloc_r+0xe6>
 8011674:	6823      	ldr	r3, [r4, #0]
 8011676:	4631      	mov	r1, r6
 8011678:	4638      	mov	r0, r7
 801167a:	eb04 0903 	add.w	r9, r4, r3
 801167e:	f000 fbc7 	bl	8011e10 <_sbrk_r>
 8011682:	4581      	cmp	r9, r0
 8011684:	d13f      	bne.n	8011706 <_malloc_r+0xe6>
 8011686:	6821      	ldr	r1, [r4, #0]
 8011688:	1a6d      	subs	r5, r5, r1
 801168a:	4629      	mov	r1, r5
 801168c:	4638      	mov	r0, r7
 801168e:	f7ff ffa7 	bl	80115e0 <sbrk_aligned>
 8011692:	3001      	adds	r0, #1
 8011694:	d037      	beq.n	8011706 <_malloc_r+0xe6>
 8011696:	6823      	ldr	r3, [r4, #0]
 8011698:	442b      	add	r3, r5
 801169a:	6023      	str	r3, [r4, #0]
 801169c:	f8d8 3000 	ldr.w	r3, [r8]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d038      	beq.n	8011716 <_malloc_r+0xf6>
 80116a4:	685a      	ldr	r2, [r3, #4]
 80116a6:	42a2      	cmp	r2, r4
 80116a8:	d12b      	bne.n	8011702 <_malloc_r+0xe2>
 80116aa:	2200      	movs	r2, #0
 80116ac:	605a      	str	r2, [r3, #4]
 80116ae:	e00f      	b.n	80116d0 <_malloc_r+0xb0>
 80116b0:	6822      	ldr	r2, [r4, #0]
 80116b2:	1b52      	subs	r2, r2, r5
 80116b4:	d41f      	bmi.n	80116f6 <_malloc_r+0xd6>
 80116b6:	2a0b      	cmp	r2, #11
 80116b8:	d917      	bls.n	80116ea <_malloc_r+0xca>
 80116ba:	1961      	adds	r1, r4, r5
 80116bc:	42a3      	cmp	r3, r4
 80116be:	6025      	str	r5, [r4, #0]
 80116c0:	bf18      	it	ne
 80116c2:	6059      	strne	r1, [r3, #4]
 80116c4:	6863      	ldr	r3, [r4, #4]
 80116c6:	bf08      	it	eq
 80116c8:	f8c8 1000 	streq.w	r1, [r8]
 80116cc:	5162      	str	r2, [r4, r5]
 80116ce:	604b      	str	r3, [r1, #4]
 80116d0:	4638      	mov	r0, r7
 80116d2:	f104 060b 	add.w	r6, r4, #11
 80116d6:	f000 f829 	bl	801172c <__malloc_unlock>
 80116da:	f026 0607 	bic.w	r6, r6, #7
 80116de:	1d23      	adds	r3, r4, #4
 80116e0:	1af2      	subs	r2, r6, r3
 80116e2:	d0ae      	beq.n	8011642 <_malloc_r+0x22>
 80116e4:	1b9b      	subs	r3, r3, r6
 80116e6:	50a3      	str	r3, [r4, r2]
 80116e8:	e7ab      	b.n	8011642 <_malloc_r+0x22>
 80116ea:	42a3      	cmp	r3, r4
 80116ec:	6862      	ldr	r2, [r4, #4]
 80116ee:	d1dd      	bne.n	80116ac <_malloc_r+0x8c>
 80116f0:	f8c8 2000 	str.w	r2, [r8]
 80116f4:	e7ec      	b.n	80116d0 <_malloc_r+0xb0>
 80116f6:	4623      	mov	r3, r4
 80116f8:	6864      	ldr	r4, [r4, #4]
 80116fa:	e7ac      	b.n	8011656 <_malloc_r+0x36>
 80116fc:	4634      	mov	r4, r6
 80116fe:	6876      	ldr	r6, [r6, #4]
 8011700:	e7b4      	b.n	801166c <_malloc_r+0x4c>
 8011702:	4613      	mov	r3, r2
 8011704:	e7cc      	b.n	80116a0 <_malloc_r+0x80>
 8011706:	230c      	movs	r3, #12
 8011708:	603b      	str	r3, [r7, #0]
 801170a:	4638      	mov	r0, r7
 801170c:	f000 f80e 	bl	801172c <__malloc_unlock>
 8011710:	e797      	b.n	8011642 <_malloc_r+0x22>
 8011712:	6025      	str	r5, [r4, #0]
 8011714:	e7dc      	b.n	80116d0 <_malloc_r+0xb0>
 8011716:	605b      	str	r3, [r3, #4]
 8011718:	deff      	udf	#255	; 0xff
 801171a:	bf00      	nop
 801171c:	2000e088 	.word	0x2000e088

08011720 <__malloc_lock>:
 8011720:	4801      	ldr	r0, [pc, #4]	; (8011728 <__malloc_lock+0x8>)
 8011722:	f000 bbc2 	b.w	8011eaa <__retarget_lock_acquire_recursive>
 8011726:	bf00      	nop
 8011728:	2000e1d1 	.word	0x2000e1d1

0801172c <__malloc_unlock>:
 801172c:	4801      	ldr	r0, [pc, #4]	; (8011734 <__malloc_unlock+0x8>)
 801172e:	f000 bbbd 	b.w	8011eac <__retarget_lock_release_recursive>
 8011732:	bf00      	nop
 8011734:	2000e1d1 	.word	0x2000e1d1

08011738 <srand>:
 8011738:	b538      	push	{r3, r4, r5, lr}
 801173a:	4b10      	ldr	r3, [pc, #64]	; (801177c <srand+0x44>)
 801173c:	681d      	ldr	r5, [r3, #0]
 801173e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011740:	4604      	mov	r4, r0
 8011742:	b9b3      	cbnz	r3, 8011772 <srand+0x3a>
 8011744:	2018      	movs	r0, #24
 8011746:	f7ff ff3b 	bl	80115c0 <malloc>
 801174a:	4602      	mov	r2, r0
 801174c:	6328      	str	r0, [r5, #48]	; 0x30
 801174e:	b920      	cbnz	r0, 801175a <srand+0x22>
 8011750:	4b0b      	ldr	r3, [pc, #44]	; (8011780 <srand+0x48>)
 8011752:	480c      	ldr	r0, [pc, #48]	; (8011784 <srand+0x4c>)
 8011754:	2146      	movs	r1, #70	; 0x46
 8011756:	f000 fbc1 	bl	8011edc <__assert_func>
 801175a:	490b      	ldr	r1, [pc, #44]	; (8011788 <srand+0x50>)
 801175c:	4b0b      	ldr	r3, [pc, #44]	; (801178c <srand+0x54>)
 801175e:	e9c0 1300 	strd	r1, r3, [r0]
 8011762:	4b0b      	ldr	r3, [pc, #44]	; (8011790 <srand+0x58>)
 8011764:	6083      	str	r3, [r0, #8]
 8011766:	230b      	movs	r3, #11
 8011768:	8183      	strh	r3, [r0, #12]
 801176a:	2100      	movs	r1, #0
 801176c:	2001      	movs	r0, #1
 801176e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011772:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011774:	2200      	movs	r2, #0
 8011776:	611c      	str	r4, [r3, #16]
 8011778:	615a      	str	r2, [r3, #20]
 801177a:	bd38      	pop	{r3, r4, r5, pc}
 801177c:	2000010c 	.word	0x2000010c
 8011780:	080136bc 	.word	0x080136bc
 8011784:	080136d3 	.word	0x080136d3
 8011788:	abcd330e 	.word	0xabcd330e
 801178c:	e66d1234 	.word	0xe66d1234
 8011790:	0005deec 	.word	0x0005deec

08011794 <rand>:
 8011794:	4b16      	ldr	r3, [pc, #88]	; (80117f0 <rand+0x5c>)
 8011796:	b510      	push	{r4, lr}
 8011798:	681c      	ldr	r4, [r3, #0]
 801179a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801179c:	b9b3      	cbnz	r3, 80117cc <rand+0x38>
 801179e:	2018      	movs	r0, #24
 80117a0:	f7ff ff0e 	bl	80115c0 <malloc>
 80117a4:	4602      	mov	r2, r0
 80117a6:	6320      	str	r0, [r4, #48]	; 0x30
 80117a8:	b920      	cbnz	r0, 80117b4 <rand+0x20>
 80117aa:	4b12      	ldr	r3, [pc, #72]	; (80117f4 <rand+0x60>)
 80117ac:	4812      	ldr	r0, [pc, #72]	; (80117f8 <rand+0x64>)
 80117ae:	2152      	movs	r1, #82	; 0x52
 80117b0:	f000 fb94 	bl	8011edc <__assert_func>
 80117b4:	4911      	ldr	r1, [pc, #68]	; (80117fc <rand+0x68>)
 80117b6:	4b12      	ldr	r3, [pc, #72]	; (8011800 <rand+0x6c>)
 80117b8:	e9c0 1300 	strd	r1, r3, [r0]
 80117bc:	4b11      	ldr	r3, [pc, #68]	; (8011804 <rand+0x70>)
 80117be:	6083      	str	r3, [r0, #8]
 80117c0:	230b      	movs	r3, #11
 80117c2:	8183      	strh	r3, [r0, #12]
 80117c4:	2100      	movs	r1, #0
 80117c6:	2001      	movs	r0, #1
 80117c8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80117cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80117ce:	480e      	ldr	r0, [pc, #56]	; (8011808 <rand+0x74>)
 80117d0:	690b      	ldr	r3, [r1, #16]
 80117d2:	694c      	ldr	r4, [r1, #20]
 80117d4:	4a0d      	ldr	r2, [pc, #52]	; (801180c <rand+0x78>)
 80117d6:	4358      	muls	r0, r3
 80117d8:	fb02 0004 	mla	r0, r2, r4, r0
 80117dc:	fba3 3202 	umull	r3, r2, r3, r2
 80117e0:	3301      	adds	r3, #1
 80117e2:	eb40 0002 	adc.w	r0, r0, r2
 80117e6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80117ea:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80117ee:	bd10      	pop	{r4, pc}
 80117f0:	2000010c 	.word	0x2000010c
 80117f4:	080136bc 	.word	0x080136bc
 80117f8:	080136d3 	.word	0x080136d3
 80117fc:	abcd330e 	.word	0xabcd330e
 8011800:	e66d1234 	.word	0xe66d1234
 8011804:	0005deec 	.word	0x0005deec
 8011808:	5851f42d 	.word	0x5851f42d
 801180c:	4c957f2d 	.word	0x4c957f2d

08011810 <realloc>:
 8011810:	4b02      	ldr	r3, [pc, #8]	; (801181c <realloc+0xc>)
 8011812:	460a      	mov	r2, r1
 8011814:	4601      	mov	r1, r0
 8011816:	6818      	ldr	r0, [r3, #0]
 8011818:	f000 b802 	b.w	8011820 <_realloc_r>
 801181c:	2000010c 	.word	0x2000010c

08011820 <_realloc_r>:
 8011820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011824:	4680      	mov	r8, r0
 8011826:	4614      	mov	r4, r2
 8011828:	460e      	mov	r6, r1
 801182a:	b921      	cbnz	r1, 8011836 <_realloc_r+0x16>
 801182c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011830:	4611      	mov	r1, r2
 8011832:	f7ff bef5 	b.w	8011620 <_malloc_r>
 8011836:	b92a      	cbnz	r2, 8011844 <_realloc_r+0x24>
 8011838:	f000 fb7a 	bl	8011f30 <_free_r>
 801183c:	4625      	mov	r5, r4
 801183e:	4628      	mov	r0, r5
 8011840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011844:	f000 fbc0 	bl	8011fc8 <_malloc_usable_size_r>
 8011848:	4284      	cmp	r4, r0
 801184a:	4607      	mov	r7, r0
 801184c:	d802      	bhi.n	8011854 <_realloc_r+0x34>
 801184e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011852:	d812      	bhi.n	801187a <_realloc_r+0x5a>
 8011854:	4621      	mov	r1, r4
 8011856:	4640      	mov	r0, r8
 8011858:	f7ff fee2 	bl	8011620 <_malloc_r>
 801185c:	4605      	mov	r5, r0
 801185e:	2800      	cmp	r0, #0
 8011860:	d0ed      	beq.n	801183e <_realloc_r+0x1e>
 8011862:	42bc      	cmp	r4, r7
 8011864:	4622      	mov	r2, r4
 8011866:	4631      	mov	r1, r6
 8011868:	bf28      	it	cs
 801186a:	463a      	movcs	r2, r7
 801186c:	f000 fb27 	bl	8011ebe <memcpy>
 8011870:	4631      	mov	r1, r6
 8011872:	4640      	mov	r0, r8
 8011874:	f000 fb5c 	bl	8011f30 <_free_r>
 8011878:	e7e1      	b.n	801183e <_realloc_r+0x1e>
 801187a:	4635      	mov	r5, r6
 801187c:	e7df      	b.n	801183e <_realloc_r+0x1e>
	...

08011880 <_strtoul_l.constprop.0>:
 8011880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011884:	4f36      	ldr	r7, [pc, #216]	; (8011960 <_strtoul_l.constprop.0+0xe0>)
 8011886:	4686      	mov	lr, r0
 8011888:	460d      	mov	r5, r1
 801188a:	4628      	mov	r0, r5
 801188c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011890:	5d3e      	ldrb	r6, [r7, r4]
 8011892:	f016 0608 	ands.w	r6, r6, #8
 8011896:	d1f8      	bne.n	801188a <_strtoul_l.constprop.0+0xa>
 8011898:	2c2d      	cmp	r4, #45	; 0x2d
 801189a:	d130      	bne.n	80118fe <_strtoul_l.constprop.0+0x7e>
 801189c:	782c      	ldrb	r4, [r5, #0]
 801189e:	2601      	movs	r6, #1
 80118a0:	1c85      	adds	r5, r0, #2
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d057      	beq.n	8011956 <_strtoul_l.constprop.0+0xd6>
 80118a6:	2b10      	cmp	r3, #16
 80118a8:	d109      	bne.n	80118be <_strtoul_l.constprop.0+0x3e>
 80118aa:	2c30      	cmp	r4, #48	; 0x30
 80118ac:	d107      	bne.n	80118be <_strtoul_l.constprop.0+0x3e>
 80118ae:	7828      	ldrb	r0, [r5, #0]
 80118b0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80118b4:	2858      	cmp	r0, #88	; 0x58
 80118b6:	d149      	bne.n	801194c <_strtoul_l.constprop.0+0xcc>
 80118b8:	786c      	ldrb	r4, [r5, #1]
 80118ba:	2310      	movs	r3, #16
 80118bc:	3502      	adds	r5, #2
 80118be:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80118c2:	2700      	movs	r7, #0
 80118c4:	fbb8 f8f3 	udiv	r8, r8, r3
 80118c8:	fb03 f908 	mul.w	r9, r3, r8
 80118cc:	ea6f 0909 	mvn.w	r9, r9
 80118d0:	4638      	mov	r0, r7
 80118d2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80118d6:	f1bc 0f09 	cmp.w	ip, #9
 80118da:	d815      	bhi.n	8011908 <_strtoul_l.constprop.0+0x88>
 80118dc:	4664      	mov	r4, ip
 80118de:	42a3      	cmp	r3, r4
 80118e0:	dd23      	ble.n	801192a <_strtoul_l.constprop.0+0xaa>
 80118e2:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80118e6:	d007      	beq.n	80118f8 <_strtoul_l.constprop.0+0x78>
 80118e8:	4580      	cmp	r8, r0
 80118ea:	d31b      	bcc.n	8011924 <_strtoul_l.constprop.0+0xa4>
 80118ec:	d101      	bne.n	80118f2 <_strtoul_l.constprop.0+0x72>
 80118ee:	45a1      	cmp	r9, r4
 80118f0:	db18      	blt.n	8011924 <_strtoul_l.constprop.0+0xa4>
 80118f2:	fb00 4003 	mla	r0, r0, r3, r4
 80118f6:	2701      	movs	r7, #1
 80118f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80118fc:	e7e9      	b.n	80118d2 <_strtoul_l.constprop.0+0x52>
 80118fe:	2c2b      	cmp	r4, #43	; 0x2b
 8011900:	bf04      	itt	eq
 8011902:	782c      	ldrbeq	r4, [r5, #0]
 8011904:	1c85      	addeq	r5, r0, #2
 8011906:	e7cc      	b.n	80118a2 <_strtoul_l.constprop.0+0x22>
 8011908:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801190c:	f1bc 0f19 	cmp.w	ip, #25
 8011910:	d801      	bhi.n	8011916 <_strtoul_l.constprop.0+0x96>
 8011912:	3c37      	subs	r4, #55	; 0x37
 8011914:	e7e3      	b.n	80118de <_strtoul_l.constprop.0+0x5e>
 8011916:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801191a:	f1bc 0f19 	cmp.w	ip, #25
 801191e:	d804      	bhi.n	801192a <_strtoul_l.constprop.0+0xaa>
 8011920:	3c57      	subs	r4, #87	; 0x57
 8011922:	e7dc      	b.n	80118de <_strtoul_l.constprop.0+0x5e>
 8011924:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011928:	e7e6      	b.n	80118f8 <_strtoul_l.constprop.0+0x78>
 801192a:	1c7b      	adds	r3, r7, #1
 801192c:	d106      	bne.n	801193c <_strtoul_l.constprop.0+0xbc>
 801192e:	2322      	movs	r3, #34	; 0x22
 8011930:	f8ce 3000 	str.w	r3, [lr]
 8011934:	4638      	mov	r0, r7
 8011936:	b932      	cbnz	r2, 8011946 <_strtoul_l.constprop.0+0xc6>
 8011938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801193c:	b106      	cbz	r6, 8011940 <_strtoul_l.constprop.0+0xc0>
 801193e:	4240      	negs	r0, r0
 8011940:	2a00      	cmp	r2, #0
 8011942:	d0f9      	beq.n	8011938 <_strtoul_l.constprop.0+0xb8>
 8011944:	b107      	cbz	r7, 8011948 <_strtoul_l.constprop.0+0xc8>
 8011946:	1e69      	subs	r1, r5, #1
 8011948:	6011      	str	r1, [r2, #0]
 801194a:	e7f5      	b.n	8011938 <_strtoul_l.constprop.0+0xb8>
 801194c:	2430      	movs	r4, #48	; 0x30
 801194e:	2b00      	cmp	r3, #0
 8011950:	d1b5      	bne.n	80118be <_strtoul_l.constprop.0+0x3e>
 8011952:	2308      	movs	r3, #8
 8011954:	e7b3      	b.n	80118be <_strtoul_l.constprop.0+0x3e>
 8011956:	2c30      	cmp	r4, #48	; 0x30
 8011958:	d0a9      	beq.n	80118ae <_strtoul_l.constprop.0+0x2e>
 801195a:	230a      	movs	r3, #10
 801195c:	e7af      	b.n	80118be <_strtoul_l.constprop.0+0x3e>
 801195e:	bf00      	nop
 8011960:	0801372c 	.word	0x0801372c

08011964 <strtoul>:
 8011964:	4613      	mov	r3, r2
 8011966:	460a      	mov	r2, r1
 8011968:	4601      	mov	r1, r0
 801196a:	4802      	ldr	r0, [pc, #8]	; (8011974 <strtoul+0x10>)
 801196c:	6800      	ldr	r0, [r0, #0]
 801196e:	f7ff bf87 	b.w	8011880 <_strtoul_l.constprop.0>
 8011972:	bf00      	nop
 8011974:	2000010c 	.word	0x2000010c

08011978 <std>:
 8011978:	2300      	movs	r3, #0
 801197a:	b510      	push	{r4, lr}
 801197c:	4604      	mov	r4, r0
 801197e:	e9c0 3300 	strd	r3, r3, [r0]
 8011982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011986:	6083      	str	r3, [r0, #8]
 8011988:	8181      	strh	r1, [r0, #12]
 801198a:	6643      	str	r3, [r0, #100]	; 0x64
 801198c:	81c2      	strh	r2, [r0, #14]
 801198e:	6183      	str	r3, [r0, #24]
 8011990:	4619      	mov	r1, r3
 8011992:	2208      	movs	r2, #8
 8011994:	305c      	adds	r0, #92	; 0x5c
 8011996:	f000 f973 	bl	8011c80 <memset>
 801199a:	4b0d      	ldr	r3, [pc, #52]	; (80119d0 <std+0x58>)
 801199c:	6263      	str	r3, [r4, #36]	; 0x24
 801199e:	4b0d      	ldr	r3, [pc, #52]	; (80119d4 <std+0x5c>)
 80119a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80119a2:	4b0d      	ldr	r3, [pc, #52]	; (80119d8 <std+0x60>)
 80119a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80119a6:	4b0d      	ldr	r3, [pc, #52]	; (80119dc <std+0x64>)
 80119a8:	6323      	str	r3, [r4, #48]	; 0x30
 80119aa:	4b0d      	ldr	r3, [pc, #52]	; (80119e0 <std+0x68>)
 80119ac:	6224      	str	r4, [r4, #32]
 80119ae:	429c      	cmp	r4, r3
 80119b0:	d006      	beq.n	80119c0 <std+0x48>
 80119b2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80119b6:	4294      	cmp	r4, r2
 80119b8:	d002      	beq.n	80119c0 <std+0x48>
 80119ba:	33d0      	adds	r3, #208	; 0xd0
 80119bc:	429c      	cmp	r4, r3
 80119be:	d105      	bne.n	80119cc <std+0x54>
 80119c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80119c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119c8:	f000 ba6e 	b.w	8011ea8 <__retarget_lock_init_recursive>
 80119cc:	bd10      	pop	{r4, pc}
 80119ce:	bf00      	nop
 80119d0:	08011b89 	.word	0x08011b89
 80119d4:	08011bab 	.word	0x08011bab
 80119d8:	08011be3 	.word	0x08011be3
 80119dc:	08011c07 	.word	0x08011c07
 80119e0:	2000e090 	.word	0x2000e090

080119e4 <stdio_exit_handler>:
 80119e4:	4a02      	ldr	r2, [pc, #8]	; (80119f0 <stdio_exit_handler+0xc>)
 80119e6:	4903      	ldr	r1, [pc, #12]	; (80119f4 <stdio_exit_handler+0x10>)
 80119e8:	4803      	ldr	r0, [pc, #12]	; (80119f8 <stdio_exit_handler+0x14>)
 80119ea:	f000 b869 	b.w	8011ac0 <_fwalk_sglue>
 80119ee:	bf00      	nop
 80119f0:	200000b4 	.word	0x200000b4
 80119f4:	0801293d 	.word	0x0801293d
 80119f8:	200000c0 	.word	0x200000c0

080119fc <cleanup_stdio>:
 80119fc:	6841      	ldr	r1, [r0, #4]
 80119fe:	4b0c      	ldr	r3, [pc, #48]	; (8011a30 <cleanup_stdio+0x34>)
 8011a00:	4299      	cmp	r1, r3
 8011a02:	b510      	push	{r4, lr}
 8011a04:	4604      	mov	r4, r0
 8011a06:	d001      	beq.n	8011a0c <cleanup_stdio+0x10>
 8011a08:	f000 ff98 	bl	801293c <_fflush_r>
 8011a0c:	68a1      	ldr	r1, [r4, #8]
 8011a0e:	4b09      	ldr	r3, [pc, #36]	; (8011a34 <cleanup_stdio+0x38>)
 8011a10:	4299      	cmp	r1, r3
 8011a12:	d002      	beq.n	8011a1a <cleanup_stdio+0x1e>
 8011a14:	4620      	mov	r0, r4
 8011a16:	f000 ff91 	bl	801293c <_fflush_r>
 8011a1a:	68e1      	ldr	r1, [r4, #12]
 8011a1c:	4b06      	ldr	r3, [pc, #24]	; (8011a38 <cleanup_stdio+0x3c>)
 8011a1e:	4299      	cmp	r1, r3
 8011a20:	d004      	beq.n	8011a2c <cleanup_stdio+0x30>
 8011a22:	4620      	mov	r0, r4
 8011a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a28:	f000 bf88 	b.w	801293c <_fflush_r>
 8011a2c:	bd10      	pop	{r4, pc}
 8011a2e:	bf00      	nop
 8011a30:	2000e090 	.word	0x2000e090
 8011a34:	2000e0f8 	.word	0x2000e0f8
 8011a38:	2000e160 	.word	0x2000e160

08011a3c <global_stdio_init.part.0>:
 8011a3c:	b510      	push	{r4, lr}
 8011a3e:	4b0b      	ldr	r3, [pc, #44]	; (8011a6c <global_stdio_init.part.0+0x30>)
 8011a40:	4c0b      	ldr	r4, [pc, #44]	; (8011a70 <global_stdio_init.part.0+0x34>)
 8011a42:	4a0c      	ldr	r2, [pc, #48]	; (8011a74 <global_stdio_init.part.0+0x38>)
 8011a44:	601a      	str	r2, [r3, #0]
 8011a46:	4620      	mov	r0, r4
 8011a48:	2200      	movs	r2, #0
 8011a4a:	2104      	movs	r1, #4
 8011a4c:	f7ff ff94 	bl	8011978 <std>
 8011a50:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011a54:	2201      	movs	r2, #1
 8011a56:	2109      	movs	r1, #9
 8011a58:	f7ff ff8e 	bl	8011978 <std>
 8011a5c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011a60:	2202      	movs	r2, #2
 8011a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a66:	2112      	movs	r1, #18
 8011a68:	f7ff bf86 	b.w	8011978 <std>
 8011a6c:	2000e1c8 	.word	0x2000e1c8
 8011a70:	2000e090 	.word	0x2000e090
 8011a74:	080119e5 	.word	0x080119e5

08011a78 <__sfp_lock_acquire>:
 8011a78:	4801      	ldr	r0, [pc, #4]	; (8011a80 <__sfp_lock_acquire+0x8>)
 8011a7a:	f000 ba16 	b.w	8011eaa <__retarget_lock_acquire_recursive>
 8011a7e:	bf00      	nop
 8011a80:	2000e1d2 	.word	0x2000e1d2

08011a84 <__sfp_lock_release>:
 8011a84:	4801      	ldr	r0, [pc, #4]	; (8011a8c <__sfp_lock_release+0x8>)
 8011a86:	f000 ba11 	b.w	8011eac <__retarget_lock_release_recursive>
 8011a8a:	bf00      	nop
 8011a8c:	2000e1d2 	.word	0x2000e1d2

08011a90 <__sinit>:
 8011a90:	b510      	push	{r4, lr}
 8011a92:	4604      	mov	r4, r0
 8011a94:	f7ff fff0 	bl	8011a78 <__sfp_lock_acquire>
 8011a98:	6a23      	ldr	r3, [r4, #32]
 8011a9a:	b11b      	cbz	r3, 8011aa4 <__sinit+0x14>
 8011a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011aa0:	f7ff bff0 	b.w	8011a84 <__sfp_lock_release>
 8011aa4:	4b04      	ldr	r3, [pc, #16]	; (8011ab8 <__sinit+0x28>)
 8011aa6:	6223      	str	r3, [r4, #32]
 8011aa8:	4b04      	ldr	r3, [pc, #16]	; (8011abc <__sinit+0x2c>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d1f5      	bne.n	8011a9c <__sinit+0xc>
 8011ab0:	f7ff ffc4 	bl	8011a3c <global_stdio_init.part.0>
 8011ab4:	e7f2      	b.n	8011a9c <__sinit+0xc>
 8011ab6:	bf00      	nop
 8011ab8:	080119fd 	.word	0x080119fd
 8011abc:	2000e1c8 	.word	0x2000e1c8

08011ac0 <_fwalk_sglue>:
 8011ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ac4:	4607      	mov	r7, r0
 8011ac6:	4688      	mov	r8, r1
 8011ac8:	4614      	mov	r4, r2
 8011aca:	2600      	movs	r6, #0
 8011acc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011ad0:	f1b9 0901 	subs.w	r9, r9, #1
 8011ad4:	d505      	bpl.n	8011ae2 <_fwalk_sglue+0x22>
 8011ad6:	6824      	ldr	r4, [r4, #0]
 8011ad8:	2c00      	cmp	r4, #0
 8011ada:	d1f7      	bne.n	8011acc <_fwalk_sglue+0xc>
 8011adc:	4630      	mov	r0, r6
 8011ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ae2:	89ab      	ldrh	r3, [r5, #12]
 8011ae4:	2b01      	cmp	r3, #1
 8011ae6:	d907      	bls.n	8011af8 <_fwalk_sglue+0x38>
 8011ae8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011aec:	3301      	adds	r3, #1
 8011aee:	d003      	beq.n	8011af8 <_fwalk_sglue+0x38>
 8011af0:	4629      	mov	r1, r5
 8011af2:	4638      	mov	r0, r7
 8011af4:	47c0      	blx	r8
 8011af6:	4306      	orrs	r6, r0
 8011af8:	3568      	adds	r5, #104	; 0x68
 8011afa:	e7e9      	b.n	8011ad0 <_fwalk_sglue+0x10>

08011afc <iprintf>:
 8011afc:	b40f      	push	{r0, r1, r2, r3}
 8011afe:	b507      	push	{r0, r1, r2, lr}
 8011b00:	4906      	ldr	r1, [pc, #24]	; (8011b1c <iprintf+0x20>)
 8011b02:	ab04      	add	r3, sp, #16
 8011b04:	6808      	ldr	r0, [r1, #0]
 8011b06:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b0a:	6881      	ldr	r1, [r0, #8]
 8011b0c:	9301      	str	r3, [sp, #4]
 8011b0e:	f000 fbe5 	bl	80122dc <_vfiprintf_r>
 8011b12:	b003      	add	sp, #12
 8011b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b18:	b004      	add	sp, #16
 8011b1a:	4770      	bx	lr
 8011b1c:	2000010c 	.word	0x2000010c

08011b20 <sniprintf>:
 8011b20:	b40c      	push	{r2, r3}
 8011b22:	b530      	push	{r4, r5, lr}
 8011b24:	4b17      	ldr	r3, [pc, #92]	; (8011b84 <sniprintf+0x64>)
 8011b26:	1e0c      	subs	r4, r1, #0
 8011b28:	681d      	ldr	r5, [r3, #0]
 8011b2a:	b09d      	sub	sp, #116	; 0x74
 8011b2c:	da08      	bge.n	8011b40 <sniprintf+0x20>
 8011b2e:	238b      	movs	r3, #139	; 0x8b
 8011b30:	602b      	str	r3, [r5, #0]
 8011b32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b36:	b01d      	add	sp, #116	; 0x74
 8011b38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011b3c:	b002      	add	sp, #8
 8011b3e:	4770      	bx	lr
 8011b40:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011b44:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011b48:	bf14      	ite	ne
 8011b4a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8011b4e:	4623      	moveq	r3, r4
 8011b50:	9304      	str	r3, [sp, #16]
 8011b52:	9307      	str	r3, [sp, #28]
 8011b54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011b58:	9002      	str	r0, [sp, #8]
 8011b5a:	9006      	str	r0, [sp, #24]
 8011b5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011b60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011b62:	ab21      	add	r3, sp, #132	; 0x84
 8011b64:	a902      	add	r1, sp, #8
 8011b66:	4628      	mov	r0, r5
 8011b68:	9301      	str	r3, [sp, #4]
 8011b6a:	f000 fa8f 	bl	801208c <_svfiprintf_r>
 8011b6e:	1c43      	adds	r3, r0, #1
 8011b70:	bfbc      	itt	lt
 8011b72:	238b      	movlt	r3, #139	; 0x8b
 8011b74:	602b      	strlt	r3, [r5, #0]
 8011b76:	2c00      	cmp	r4, #0
 8011b78:	d0dd      	beq.n	8011b36 <sniprintf+0x16>
 8011b7a:	9b02      	ldr	r3, [sp, #8]
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	701a      	strb	r2, [r3, #0]
 8011b80:	e7d9      	b.n	8011b36 <sniprintf+0x16>
 8011b82:	bf00      	nop
 8011b84:	2000010c 	.word	0x2000010c

08011b88 <__sread>:
 8011b88:	b510      	push	{r4, lr}
 8011b8a:	460c      	mov	r4, r1
 8011b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b90:	f000 f92c 	bl	8011dec <_read_r>
 8011b94:	2800      	cmp	r0, #0
 8011b96:	bfab      	itete	ge
 8011b98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011b9a:	89a3      	ldrhlt	r3, [r4, #12]
 8011b9c:	181b      	addge	r3, r3, r0
 8011b9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011ba2:	bfac      	ite	ge
 8011ba4:	6563      	strge	r3, [r4, #84]	; 0x54
 8011ba6:	81a3      	strhlt	r3, [r4, #12]
 8011ba8:	bd10      	pop	{r4, pc}

08011baa <__swrite>:
 8011baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bae:	461f      	mov	r7, r3
 8011bb0:	898b      	ldrh	r3, [r1, #12]
 8011bb2:	05db      	lsls	r3, r3, #23
 8011bb4:	4605      	mov	r5, r0
 8011bb6:	460c      	mov	r4, r1
 8011bb8:	4616      	mov	r6, r2
 8011bba:	d505      	bpl.n	8011bc8 <__swrite+0x1e>
 8011bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bc0:	2302      	movs	r3, #2
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	f000 f900 	bl	8011dc8 <_lseek_r>
 8011bc8:	89a3      	ldrh	r3, [r4, #12]
 8011bca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011bce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011bd2:	81a3      	strh	r3, [r4, #12]
 8011bd4:	4632      	mov	r2, r6
 8011bd6:	463b      	mov	r3, r7
 8011bd8:	4628      	mov	r0, r5
 8011bda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011bde:	f000 b927 	b.w	8011e30 <_write_r>

08011be2 <__sseek>:
 8011be2:	b510      	push	{r4, lr}
 8011be4:	460c      	mov	r4, r1
 8011be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bea:	f000 f8ed 	bl	8011dc8 <_lseek_r>
 8011bee:	1c43      	adds	r3, r0, #1
 8011bf0:	89a3      	ldrh	r3, [r4, #12]
 8011bf2:	bf15      	itete	ne
 8011bf4:	6560      	strne	r0, [r4, #84]	; 0x54
 8011bf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011bfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011bfe:	81a3      	strheq	r3, [r4, #12]
 8011c00:	bf18      	it	ne
 8011c02:	81a3      	strhne	r3, [r4, #12]
 8011c04:	bd10      	pop	{r4, pc}

08011c06 <__sclose>:
 8011c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c0a:	f000 b877 	b.w	8011cfc <_close_r>

08011c0e <_vsniprintf_r>:
 8011c0e:	b530      	push	{r4, r5, lr}
 8011c10:	4614      	mov	r4, r2
 8011c12:	2c00      	cmp	r4, #0
 8011c14:	b09b      	sub	sp, #108	; 0x6c
 8011c16:	4605      	mov	r5, r0
 8011c18:	461a      	mov	r2, r3
 8011c1a:	da05      	bge.n	8011c28 <_vsniprintf_r+0x1a>
 8011c1c:	238b      	movs	r3, #139	; 0x8b
 8011c1e:	6003      	str	r3, [r0, #0]
 8011c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011c24:	b01b      	add	sp, #108	; 0x6c
 8011c26:	bd30      	pop	{r4, r5, pc}
 8011c28:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011c2c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011c30:	bf14      	ite	ne
 8011c32:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8011c36:	4623      	moveq	r3, r4
 8011c38:	9302      	str	r3, [sp, #8]
 8011c3a:	9305      	str	r3, [sp, #20]
 8011c3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011c40:	9100      	str	r1, [sp, #0]
 8011c42:	9104      	str	r1, [sp, #16]
 8011c44:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011c48:	4669      	mov	r1, sp
 8011c4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011c4c:	f000 fa1e 	bl	801208c <_svfiprintf_r>
 8011c50:	1c43      	adds	r3, r0, #1
 8011c52:	bfbc      	itt	lt
 8011c54:	238b      	movlt	r3, #139	; 0x8b
 8011c56:	602b      	strlt	r3, [r5, #0]
 8011c58:	2c00      	cmp	r4, #0
 8011c5a:	d0e3      	beq.n	8011c24 <_vsniprintf_r+0x16>
 8011c5c:	9b00      	ldr	r3, [sp, #0]
 8011c5e:	2200      	movs	r2, #0
 8011c60:	701a      	strb	r2, [r3, #0]
 8011c62:	e7df      	b.n	8011c24 <_vsniprintf_r+0x16>

08011c64 <vsniprintf>:
 8011c64:	b507      	push	{r0, r1, r2, lr}
 8011c66:	9300      	str	r3, [sp, #0]
 8011c68:	4613      	mov	r3, r2
 8011c6a:	460a      	mov	r2, r1
 8011c6c:	4601      	mov	r1, r0
 8011c6e:	4803      	ldr	r0, [pc, #12]	; (8011c7c <vsniprintf+0x18>)
 8011c70:	6800      	ldr	r0, [r0, #0]
 8011c72:	f7ff ffcc 	bl	8011c0e <_vsniprintf_r>
 8011c76:	b003      	add	sp, #12
 8011c78:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c7c:	2000010c 	.word	0x2000010c

08011c80 <memset>:
 8011c80:	4402      	add	r2, r0
 8011c82:	4603      	mov	r3, r0
 8011c84:	4293      	cmp	r3, r2
 8011c86:	d100      	bne.n	8011c8a <memset+0xa>
 8011c88:	4770      	bx	lr
 8011c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8011c8e:	e7f9      	b.n	8011c84 <memset+0x4>

08011c90 <strchr>:
 8011c90:	b2c9      	uxtb	r1, r1
 8011c92:	4603      	mov	r3, r0
 8011c94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c98:	b11a      	cbz	r2, 8011ca2 <strchr+0x12>
 8011c9a:	428a      	cmp	r2, r1
 8011c9c:	d1f9      	bne.n	8011c92 <strchr+0x2>
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	4770      	bx	lr
 8011ca2:	2900      	cmp	r1, #0
 8011ca4:	bf18      	it	ne
 8011ca6:	2300      	movne	r3, #0
 8011ca8:	e7f9      	b.n	8011c9e <strchr+0xe>

08011caa <strncmp>:
 8011caa:	b510      	push	{r4, lr}
 8011cac:	b16a      	cbz	r2, 8011cca <strncmp+0x20>
 8011cae:	3901      	subs	r1, #1
 8011cb0:	1884      	adds	r4, r0, r2
 8011cb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011cb6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d103      	bne.n	8011cc6 <strncmp+0x1c>
 8011cbe:	42a0      	cmp	r0, r4
 8011cc0:	d001      	beq.n	8011cc6 <strncmp+0x1c>
 8011cc2:	2a00      	cmp	r2, #0
 8011cc4:	d1f5      	bne.n	8011cb2 <strncmp+0x8>
 8011cc6:	1ad0      	subs	r0, r2, r3
 8011cc8:	bd10      	pop	{r4, pc}
 8011cca:	4610      	mov	r0, r2
 8011ccc:	e7fc      	b.n	8011cc8 <strncmp+0x1e>

08011cce <strstr>:
 8011cce:	780a      	ldrb	r2, [r1, #0]
 8011cd0:	b570      	push	{r4, r5, r6, lr}
 8011cd2:	b96a      	cbnz	r2, 8011cf0 <strstr+0x22>
 8011cd4:	bd70      	pop	{r4, r5, r6, pc}
 8011cd6:	429a      	cmp	r2, r3
 8011cd8:	d109      	bne.n	8011cee <strstr+0x20>
 8011cda:	460c      	mov	r4, r1
 8011cdc:	4605      	mov	r5, r0
 8011cde:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d0f6      	beq.n	8011cd4 <strstr+0x6>
 8011ce6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8011cea:	429e      	cmp	r6, r3
 8011cec:	d0f7      	beq.n	8011cde <strstr+0x10>
 8011cee:	3001      	adds	r0, #1
 8011cf0:	7803      	ldrb	r3, [r0, #0]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d1ef      	bne.n	8011cd6 <strstr+0x8>
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	e7ec      	b.n	8011cd4 <strstr+0x6>
	...

08011cfc <_close_r>:
 8011cfc:	b538      	push	{r3, r4, r5, lr}
 8011cfe:	4d06      	ldr	r5, [pc, #24]	; (8011d18 <_close_r+0x1c>)
 8011d00:	2300      	movs	r3, #0
 8011d02:	4604      	mov	r4, r0
 8011d04:	4608      	mov	r0, r1
 8011d06:	602b      	str	r3, [r5, #0]
 8011d08:	f7ef fdcb 	bl	80018a2 <_close>
 8011d0c:	1c43      	adds	r3, r0, #1
 8011d0e:	d102      	bne.n	8011d16 <_close_r+0x1a>
 8011d10:	682b      	ldr	r3, [r5, #0]
 8011d12:	b103      	cbz	r3, 8011d16 <_close_r+0x1a>
 8011d14:	6023      	str	r3, [r4, #0]
 8011d16:	bd38      	pop	{r3, r4, r5, pc}
 8011d18:	2000e1cc 	.word	0x2000e1cc

08011d1c <_reclaim_reent>:
 8011d1c:	4b29      	ldr	r3, [pc, #164]	; (8011dc4 <_reclaim_reent+0xa8>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	4283      	cmp	r3, r0
 8011d22:	b570      	push	{r4, r5, r6, lr}
 8011d24:	4604      	mov	r4, r0
 8011d26:	d04b      	beq.n	8011dc0 <_reclaim_reent+0xa4>
 8011d28:	69c3      	ldr	r3, [r0, #28]
 8011d2a:	b143      	cbz	r3, 8011d3e <_reclaim_reent+0x22>
 8011d2c:	68db      	ldr	r3, [r3, #12]
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d144      	bne.n	8011dbc <_reclaim_reent+0xa0>
 8011d32:	69e3      	ldr	r3, [r4, #28]
 8011d34:	6819      	ldr	r1, [r3, #0]
 8011d36:	b111      	cbz	r1, 8011d3e <_reclaim_reent+0x22>
 8011d38:	4620      	mov	r0, r4
 8011d3a:	f000 f8f9 	bl	8011f30 <_free_r>
 8011d3e:	6961      	ldr	r1, [r4, #20]
 8011d40:	b111      	cbz	r1, 8011d48 <_reclaim_reent+0x2c>
 8011d42:	4620      	mov	r0, r4
 8011d44:	f000 f8f4 	bl	8011f30 <_free_r>
 8011d48:	69e1      	ldr	r1, [r4, #28]
 8011d4a:	b111      	cbz	r1, 8011d52 <_reclaim_reent+0x36>
 8011d4c:	4620      	mov	r0, r4
 8011d4e:	f000 f8ef 	bl	8011f30 <_free_r>
 8011d52:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011d54:	b111      	cbz	r1, 8011d5c <_reclaim_reent+0x40>
 8011d56:	4620      	mov	r0, r4
 8011d58:	f000 f8ea 	bl	8011f30 <_free_r>
 8011d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d5e:	b111      	cbz	r1, 8011d66 <_reclaim_reent+0x4a>
 8011d60:	4620      	mov	r0, r4
 8011d62:	f000 f8e5 	bl	8011f30 <_free_r>
 8011d66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011d68:	b111      	cbz	r1, 8011d70 <_reclaim_reent+0x54>
 8011d6a:	4620      	mov	r0, r4
 8011d6c:	f000 f8e0 	bl	8011f30 <_free_r>
 8011d70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011d72:	b111      	cbz	r1, 8011d7a <_reclaim_reent+0x5e>
 8011d74:	4620      	mov	r0, r4
 8011d76:	f000 f8db 	bl	8011f30 <_free_r>
 8011d7a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8011d7c:	b111      	cbz	r1, 8011d84 <_reclaim_reent+0x68>
 8011d7e:	4620      	mov	r0, r4
 8011d80:	f000 f8d6 	bl	8011f30 <_free_r>
 8011d84:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011d86:	b111      	cbz	r1, 8011d8e <_reclaim_reent+0x72>
 8011d88:	4620      	mov	r0, r4
 8011d8a:	f000 f8d1 	bl	8011f30 <_free_r>
 8011d8e:	6a23      	ldr	r3, [r4, #32]
 8011d90:	b1b3      	cbz	r3, 8011dc0 <_reclaim_reent+0xa4>
 8011d92:	4620      	mov	r0, r4
 8011d94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d98:	4718      	bx	r3
 8011d9a:	5949      	ldr	r1, [r1, r5]
 8011d9c:	b941      	cbnz	r1, 8011db0 <_reclaim_reent+0x94>
 8011d9e:	3504      	adds	r5, #4
 8011da0:	69e3      	ldr	r3, [r4, #28]
 8011da2:	2d80      	cmp	r5, #128	; 0x80
 8011da4:	68d9      	ldr	r1, [r3, #12]
 8011da6:	d1f8      	bne.n	8011d9a <_reclaim_reent+0x7e>
 8011da8:	4620      	mov	r0, r4
 8011daa:	f000 f8c1 	bl	8011f30 <_free_r>
 8011dae:	e7c0      	b.n	8011d32 <_reclaim_reent+0x16>
 8011db0:	680e      	ldr	r6, [r1, #0]
 8011db2:	4620      	mov	r0, r4
 8011db4:	f000 f8bc 	bl	8011f30 <_free_r>
 8011db8:	4631      	mov	r1, r6
 8011dba:	e7ef      	b.n	8011d9c <_reclaim_reent+0x80>
 8011dbc:	2500      	movs	r5, #0
 8011dbe:	e7ef      	b.n	8011da0 <_reclaim_reent+0x84>
 8011dc0:	bd70      	pop	{r4, r5, r6, pc}
 8011dc2:	bf00      	nop
 8011dc4:	2000010c 	.word	0x2000010c

08011dc8 <_lseek_r>:
 8011dc8:	b538      	push	{r3, r4, r5, lr}
 8011dca:	4d07      	ldr	r5, [pc, #28]	; (8011de8 <_lseek_r+0x20>)
 8011dcc:	4604      	mov	r4, r0
 8011dce:	4608      	mov	r0, r1
 8011dd0:	4611      	mov	r1, r2
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	602a      	str	r2, [r5, #0]
 8011dd6:	461a      	mov	r2, r3
 8011dd8:	f7ef fd8a 	bl	80018f0 <_lseek>
 8011ddc:	1c43      	adds	r3, r0, #1
 8011dde:	d102      	bne.n	8011de6 <_lseek_r+0x1e>
 8011de0:	682b      	ldr	r3, [r5, #0]
 8011de2:	b103      	cbz	r3, 8011de6 <_lseek_r+0x1e>
 8011de4:	6023      	str	r3, [r4, #0]
 8011de6:	bd38      	pop	{r3, r4, r5, pc}
 8011de8:	2000e1cc 	.word	0x2000e1cc

08011dec <_read_r>:
 8011dec:	b538      	push	{r3, r4, r5, lr}
 8011dee:	4d07      	ldr	r5, [pc, #28]	; (8011e0c <_read_r+0x20>)
 8011df0:	4604      	mov	r4, r0
 8011df2:	4608      	mov	r0, r1
 8011df4:	4611      	mov	r1, r2
 8011df6:	2200      	movs	r2, #0
 8011df8:	602a      	str	r2, [r5, #0]
 8011dfa:	461a      	mov	r2, r3
 8011dfc:	f7ef fd18 	bl	8001830 <_read>
 8011e00:	1c43      	adds	r3, r0, #1
 8011e02:	d102      	bne.n	8011e0a <_read_r+0x1e>
 8011e04:	682b      	ldr	r3, [r5, #0]
 8011e06:	b103      	cbz	r3, 8011e0a <_read_r+0x1e>
 8011e08:	6023      	str	r3, [r4, #0]
 8011e0a:	bd38      	pop	{r3, r4, r5, pc}
 8011e0c:	2000e1cc 	.word	0x2000e1cc

08011e10 <_sbrk_r>:
 8011e10:	b538      	push	{r3, r4, r5, lr}
 8011e12:	4d06      	ldr	r5, [pc, #24]	; (8011e2c <_sbrk_r+0x1c>)
 8011e14:	2300      	movs	r3, #0
 8011e16:	4604      	mov	r4, r0
 8011e18:	4608      	mov	r0, r1
 8011e1a:	602b      	str	r3, [r5, #0]
 8011e1c:	f7ef fd76 	bl	800190c <_sbrk>
 8011e20:	1c43      	adds	r3, r0, #1
 8011e22:	d102      	bne.n	8011e2a <_sbrk_r+0x1a>
 8011e24:	682b      	ldr	r3, [r5, #0]
 8011e26:	b103      	cbz	r3, 8011e2a <_sbrk_r+0x1a>
 8011e28:	6023      	str	r3, [r4, #0]
 8011e2a:	bd38      	pop	{r3, r4, r5, pc}
 8011e2c:	2000e1cc 	.word	0x2000e1cc

08011e30 <_write_r>:
 8011e30:	b538      	push	{r3, r4, r5, lr}
 8011e32:	4d07      	ldr	r5, [pc, #28]	; (8011e50 <_write_r+0x20>)
 8011e34:	4604      	mov	r4, r0
 8011e36:	4608      	mov	r0, r1
 8011e38:	4611      	mov	r1, r2
 8011e3a:	2200      	movs	r2, #0
 8011e3c:	602a      	str	r2, [r5, #0]
 8011e3e:	461a      	mov	r2, r3
 8011e40:	f7ef fd13 	bl	800186a <_write>
 8011e44:	1c43      	adds	r3, r0, #1
 8011e46:	d102      	bne.n	8011e4e <_write_r+0x1e>
 8011e48:	682b      	ldr	r3, [r5, #0]
 8011e4a:	b103      	cbz	r3, 8011e4e <_write_r+0x1e>
 8011e4c:	6023      	str	r3, [r4, #0]
 8011e4e:	bd38      	pop	{r3, r4, r5, pc}
 8011e50:	2000e1cc 	.word	0x2000e1cc

08011e54 <__errno>:
 8011e54:	4b01      	ldr	r3, [pc, #4]	; (8011e5c <__errno+0x8>)
 8011e56:	6818      	ldr	r0, [r3, #0]
 8011e58:	4770      	bx	lr
 8011e5a:	bf00      	nop
 8011e5c:	2000010c 	.word	0x2000010c

08011e60 <__libc_init_array>:
 8011e60:	b570      	push	{r4, r5, r6, lr}
 8011e62:	4d0d      	ldr	r5, [pc, #52]	; (8011e98 <__libc_init_array+0x38>)
 8011e64:	4c0d      	ldr	r4, [pc, #52]	; (8011e9c <__libc_init_array+0x3c>)
 8011e66:	1b64      	subs	r4, r4, r5
 8011e68:	10a4      	asrs	r4, r4, #2
 8011e6a:	2600      	movs	r6, #0
 8011e6c:	42a6      	cmp	r6, r4
 8011e6e:	d109      	bne.n	8011e84 <__libc_init_array+0x24>
 8011e70:	4d0b      	ldr	r5, [pc, #44]	; (8011ea0 <__libc_init_array+0x40>)
 8011e72:	4c0c      	ldr	r4, [pc, #48]	; (8011ea4 <__libc_init_array+0x44>)
 8011e74:	f000 ff1c 	bl	8012cb0 <_init>
 8011e78:	1b64      	subs	r4, r4, r5
 8011e7a:	10a4      	asrs	r4, r4, #2
 8011e7c:	2600      	movs	r6, #0
 8011e7e:	42a6      	cmp	r6, r4
 8011e80:	d105      	bne.n	8011e8e <__libc_init_array+0x2e>
 8011e82:	bd70      	pop	{r4, r5, r6, pc}
 8011e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e88:	4798      	blx	r3
 8011e8a:	3601      	adds	r6, #1
 8011e8c:	e7ee      	b.n	8011e6c <__libc_init_array+0xc>
 8011e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e92:	4798      	blx	r3
 8011e94:	3601      	adds	r6, #1
 8011e96:	e7f2      	b.n	8011e7e <__libc_init_array+0x1e>
 8011e98:	080138a4 	.word	0x080138a4
 8011e9c:	080138a4 	.word	0x080138a4
 8011ea0:	080138a4 	.word	0x080138a4
 8011ea4:	080138ac 	.word	0x080138ac

08011ea8 <__retarget_lock_init_recursive>:
 8011ea8:	4770      	bx	lr

08011eaa <__retarget_lock_acquire_recursive>:
 8011eaa:	4770      	bx	lr

08011eac <__retarget_lock_release_recursive>:
 8011eac:	4770      	bx	lr

08011eae <strcpy>:
 8011eae:	4603      	mov	r3, r0
 8011eb0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011eb4:	f803 2b01 	strb.w	r2, [r3], #1
 8011eb8:	2a00      	cmp	r2, #0
 8011eba:	d1f9      	bne.n	8011eb0 <strcpy+0x2>
 8011ebc:	4770      	bx	lr

08011ebe <memcpy>:
 8011ebe:	440a      	add	r2, r1
 8011ec0:	4291      	cmp	r1, r2
 8011ec2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011ec6:	d100      	bne.n	8011eca <memcpy+0xc>
 8011ec8:	4770      	bx	lr
 8011eca:	b510      	push	{r4, lr}
 8011ecc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ed0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011ed4:	4291      	cmp	r1, r2
 8011ed6:	d1f9      	bne.n	8011ecc <memcpy+0xe>
 8011ed8:	bd10      	pop	{r4, pc}
	...

08011edc <__assert_func>:
 8011edc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011ede:	4614      	mov	r4, r2
 8011ee0:	461a      	mov	r2, r3
 8011ee2:	4b09      	ldr	r3, [pc, #36]	; (8011f08 <__assert_func+0x2c>)
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	4605      	mov	r5, r0
 8011ee8:	68d8      	ldr	r0, [r3, #12]
 8011eea:	b14c      	cbz	r4, 8011f00 <__assert_func+0x24>
 8011eec:	4b07      	ldr	r3, [pc, #28]	; (8011f0c <__assert_func+0x30>)
 8011eee:	9100      	str	r1, [sp, #0]
 8011ef0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011ef4:	4906      	ldr	r1, [pc, #24]	; (8011f10 <__assert_func+0x34>)
 8011ef6:	462b      	mov	r3, r5
 8011ef8:	f000 fd48 	bl	801298c <fiprintf>
 8011efc:	f000 fe08 	bl	8012b10 <abort>
 8011f00:	4b04      	ldr	r3, [pc, #16]	; (8011f14 <__assert_func+0x38>)
 8011f02:	461c      	mov	r4, r3
 8011f04:	e7f3      	b.n	8011eee <__assert_func+0x12>
 8011f06:	bf00      	nop
 8011f08:	2000010c 	.word	0x2000010c
 8011f0c:	0801382c 	.word	0x0801382c
 8011f10:	08013839 	.word	0x08013839
 8011f14:	08013867 	.word	0x08013867

08011f18 <__env_lock>:
 8011f18:	4801      	ldr	r0, [pc, #4]	; (8011f20 <__env_lock+0x8>)
 8011f1a:	f7ff bfc6 	b.w	8011eaa <__retarget_lock_acquire_recursive>
 8011f1e:	bf00      	nop
 8011f20:	2000e1d0 	.word	0x2000e1d0

08011f24 <__env_unlock>:
 8011f24:	4801      	ldr	r0, [pc, #4]	; (8011f2c <__env_unlock+0x8>)
 8011f26:	f7ff bfc1 	b.w	8011eac <__retarget_lock_release_recursive>
 8011f2a:	bf00      	nop
 8011f2c:	2000e1d0 	.word	0x2000e1d0

08011f30 <_free_r>:
 8011f30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011f32:	2900      	cmp	r1, #0
 8011f34:	d044      	beq.n	8011fc0 <_free_r+0x90>
 8011f36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f3a:	9001      	str	r0, [sp, #4]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	f1a1 0404 	sub.w	r4, r1, #4
 8011f42:	bfb8      	it	lt
 8011f44:	18e4      	addlt	r4, r4, r3
 8011f46:	f7ff fbeb 	bl	8011720 <__malloc_lock>
 8011f4a:	4a1e      	ldr	r2, [pc, #120]	; (8011fc4 <_free_r+0x94>)
 8011f4c:	9801      	ldr	r0, [sp, #4]
 8011f4e:	6813      	ldr	r3, [r2, #0]
 8011f50:	b933      	cbnz	r3, 8011f60 <_free_r+0x30>
 8011f52:	6063      	str	r3, [r4, #4]
 8011f54:	6014      	str	r4, [r2, #0]
 8011f56:	b003      	add	sp, #12
 8011f58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011f5c:	f7ff bbe6 	b.w	801172c <__malloc_unlock>
 8011f60:	42a3      	cmp	r3, r4
 8011f62:	d908      	bls.n	8011f76 <_free_r+0x46>
 8011f64:	6825      	ldr	r5, [r4, #0]
 8011f66:	1961      	adds	r1, r4, r5
 8011f68:	428b      	cmp	r3, r1
 8011f6a:	bf01      	itttt	eq
 8011f6c:	6819      	ldreq	r1, [r3, #0]
 8011f6e:	685b      	ldreq	r3, [r3, #4]
 8011f70:	1949      	addeq	r1, r1, r5
 8011f72:	6021      	streq	r1, [r4, #0]
 8011f74:	e7ed      	b.n	8011f52 <_free_r+0x22>
 8011f76:	461a      	mov	r2, r3
 8011f78:	685b      	ldr	r3, [r3, #4]
 8011f7a:	b10b      	cbz	r3, 8011f80 <_free_r+0x50>
 8011f7c:	42a3      	cmp	r3, r4
 8011f7e:	d9fa      	bls.n	8011f76 <_free_r+0x46>
 8011f80:	6811      	ldr	r1, [r2, #0]
 8011f82:	1855      	adds	r5, r2, r1
 8011f84:	42a5      	cmp	r5, r4
 8011f86:	d10b      	bne.n	8011fa0 <_free_r+0x70>
 8011f88:	6824      	ldr	r4, [r4, #0]
 8011f8a:	4421      	add	r1, r4
 8011f8c:	1854      	adds	r4, r2, r1
 8011f8e:	42a3      	cmp	r3, r4
 8011f90:	6011      	str	r1, [r2, #0]
 8011f92:	d1e0      	bne.n	8011f56 <_free_r+0x26>
 8011f94:	681c      	ldr	r4, [r3, #0]
 8011f96:	685b      	ldr	r3, [r3, #4]
 8011f98:	6053      	str	r3, [r2, #4]
 8011f9a:	440c      	add	r4, r1
 8011f9c:	6014      	str	r4, [r2, #0]
 8011f9e:	e7da      	b.n	8011f56 <_free_r+0x26>
 8011fa0:	d902      	bls.n	8011fa8 <_free_r+0x78>
 8011fa2:	230c      	movs	r3, #12
 8011fa4:	6003      	str	r3, [r0, #0]
 8011fa6:	e7d6      	b.n	8011f56 <_free_r+0x26>
 8011fa8:	6825      	ldr	r5, [r4, #0]
 8011faa:	1961      	adds	r1, r4, r5
 8011fac:	428b      	cmp	r3, r1
 8011fae:	bf04      	itt	eq
 8011fb0:	6819      	ldreq	r1, [r3, #0]
 8011fb2:	685b      	ldreq	r3, [r3, #4]
 8011fb4:	6063      	str	r3, [r4, #4]
 8011fb6:	bf04      	itt	eq
 8011fb8:	1949      	addeq	r1, r1, r5
 8011fba:	6021      	streq	r1, [r4, #0]
 8011fbc:	6054      	str	r4, [r2, #4]
 8011fbe:	e7ca      	b.n	8011f56 <_free_r+0x26>
 8011fc0:	b003      	add	sp, #12
 8011fc2:	bd30      	pop	{r4, r5, pc}
 8011fc4:	2000e088 	.word	0x2000e088

08011fc8 <_malloc_usable_size_r>:
 8011fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011fcc:	1f18      	subs	r0, r3, #4
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	bfbc      	itt	lt
 8011fd2:	580b      	ldrlt	r3, [r1, r0]
 8011fd4:	18c0      	addlt	r0, r0, r3
 8011fd6:	4770      	bx	lr

08011fd8 <__ssputs_r>:
 8011fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fdc:	688e      	ldr	r6, [r1, #8]
 8011fde:	461f      	mov	r7, r3
 8011fe0:	42be      	cmp	r6, r7
 8011fe2:	680b      	ldr	r3, [r1, #0]
 8011fe4:	4682      	mov	sl, r0
 8011fe6:	460c      	mov	r4, r1
 8011fe8:	4690      	mov	r8, r2
 8011fea:	d82c      	bhi.n	8012046 <__ssputs_r+0x6e>
 8011fec:	898a      	ldrh	r2, [r1, #12]
 8011fee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011ff2:	d026      	beq.n	8012042 <__ssputs_r+0x6a>
 8011ff4:	6965      	ldr	r5, [r4, #20]
 8011ff6:	6909      	ldr	r1, [r1, #16]
 8011ff8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ffc:	eba3 0901 	sub.w	r9, r3, r1
 8012000:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012004:	1c7b      	adds	r3, r7, #1
 8012006:	444b      	add	r3, r9
 8012008:	106d      	asrs	r5, r5, #1
 801200a:	429d      	cmp	r5, r3
 801200c:	bf38      	it	cc
 801200e:	461d      	movcc	r5, r3
 8012010:	0553      	lsls	r3, r2, #21
 8012012:	d527      	bpl.n	8012064 <__ssputs_r+0x8c>
 8012014:	4629      	mov	r1, r5
 8012016:	f7ff fb03 	bl	8011620 <_malloc_r>
 801201a:	4606      	mov	r6, r0
 801201c:	b360      	cbz	r0, 8012078 <__ssputs_r+0xa0>
 801201e:	6921      	ldr	r1, [r4, #16]
 8012020:	464a      	mov	r2, r9
 8012022:	f7ff ff4c 	bl	8011ebe <memcpy>
 8012026:	89a3      	ldrh	r3, [r4, #12]
 8012028:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801202c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012030:	81a3      	strh	r3, [r4, #12]
 8012032:	6126      	str	r6, [r4, #16]
 8012034:	6165      	str	r5, [r4, #20]
 8012036:	444e      	add	r6, r9
 8012038:	eba5 0509 	sub.w	r5, r5, r9
 801203c:	6026      	str	r6, [r4, #0]
 801203e:	60a5      	str	r5, [r4, #8]
 8012040:	463e      	mov	r6, r7
 8012042:	42be      	cmp	r6, r7
 8012044:	d900      	bls.n	8012048 <__ssputs_r+0x70>
 8012046:	463e      	mov	r6, r7
 8012048:	6820      	ldr	r0, [r4, #0]
 801204a:	4632      	mov	r2, r6
 801204c:	4641      	mov	r1, r8
 801204e:	f000 fd45 	bl	8012adc <memmove>
 8012052:	68a3      	ldr	r3, [r4, #8]
 8012054:	1b9b      	subs	r3, r3, r6
 8012056:	60a3      	str	r3, [r4, #8]
 8012058:	6823      	ldr	r3, [r4, #0]
 801205a:	4433      	add	r3, r6
 801205c:	6023      	str	r3, [r4, #0]
 801205e:	2000      	movs	r0, #0
 8012060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012064:	462a      	mov	r2, r5
 8012066:	f7ff fbdb 	bl	8011820 <_realloc_r>
 801206a:	4606      	mov	r6, r0
 801206c:	2800      	cmp	r0, #0
 801206e:	d1e0      	bne.n	8012032 <__ssputs_r+0x5a>
 8012070:	6921      	ldr	r1, [r4, #16]
 8012072:	4650      	mov	r0, sl
 8012074:	f7ff ff5c 	bl	8011f30 <_free_r>
 8012078:	230c      	movs	r3, #12
 801207a:	f8ca 3000 	str.w	r3, [sl]
 801207e:	89a3      	ldrh	r3, [r4, #12]
 8012080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012084:	81a3      	strh	r3, [r4, #12]
 8012086:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801208a:	e7e9      	b.n	8012060 <__ssputs_r+0x88>

0801208c <_svfiprintf_r>:
 801208c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012090:	4698      	mov	r8, r3
 8012092:	898b      	ldrh	r3, [r1, #12]
 8012094:	061b      	lsls	r3, r3, #24
 8012096:	b09d      	sub	sp, #116	; 0x74
 8012098:	4607      	mov	r7, r0
 801209a:	460d      	mov	r5, r1
 801209c:	4614      	mov	r4, r2
 801209e:	d50e      	bpl.n	80120be <_svfiprintf_r+0x32>
 80120a0:	690b      	ldr	r3, [r1, #16]
 80120a2:	b963      	cbnz	r3, 80120be <_svfiprintf_r+0x32>
 80120a4:	2140      	movs	r1, #64	; 0x40
 80120a6:	f7ff fabb 	bl	8011620 <_malloc_r>
 80120aa:	6028      	str	r0, [r5, #0]
 80120ac:	6128      	str	r0, [r5, #16]
 80120ae:	b920      	cbnz	r0, 80120ba <_svfiprintf_r+0x2e>
 80120b0:	230c      	movs	r3, #12
 80120b2:	603b      	str	r3, [r7, #0]
 80120b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80120b8:	e0d0      	b.n	801225c <_svfiprintf_r+0x1d0>
 80120ba:	2340      	movs	r3, #64	; 0x40
 80120bc:	616b      	str	r3, [r5, #20]
 80120be:	2300      	movs	r3, #0
 80120c0:	9309      	str	r3, [sp, #36]	; 0x24
 80120c2:	2320      	movs	r3, #32
 80120c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80120c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80120cc:	2330      	movs	r3, #48	; 0x30
 80120ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012274 <_svfiprintf_r+0x1e8>
 80120d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80120d6:	f04f 0901 	mov.w	r9, #1
 80120da:	4623      	mov	r3, r4
 80120dc:	469a      	mov	sl, r3
 80120de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120e2:	b10a      	cbz	r2, 80120e8 <_svfiprintf_r+0x5c>
 80120e4:	2a25      	cmp	r2, #37	; 0x25
 80120e6:	d1f9      	bne.n	80120dc <_svfiprintf_r+0x50>
 80120e8:	ebba 0b04 	subs.w	fp, sl, r4
 80120ec:	d00b      	beq.n	8012106 <_svfiprintf_r+0x7a>
 80120ee:	465b      	mov	r3, fp
 80120f0:	4622      	mov	r2, r4
 80120f2:	4629      	mov	r1, r5
 80120f4:	4638      	mov	r0, r7
 80120f6:	f7ff ff6f 	bl	8011fd8 <__ssputs_r>
 80120fa:	3001      	adds	r0, #1
 80120fc:	f000 80a9 	beq.w	8012252 <_svfiprintf_r+0x1c6>
 8012100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012102:	445a      	add	r2, fp
 8012104:	9209      	str	r2, [sp, #36]	; 0x24
 8012106:	f89a 3000 	ldrb.w	r3, [sl]
 801210a:	2b00      	cmp	r3, #0
 801210c:	f000 80a1 	beq.w	8012252 <_svfiprintf_r+0x1c6>
 8012110:	2300      	movs	r3, #0
 8012112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012116:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801211a:	f10a 0a01 	add.w	sl, sl, #1
 801211e:	9304      	str	r3, [sp, #16]
 8012120:	9307      	str	r3, [sp, #28]
 8012122:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012126:	931a      	str	r3, [sp, #104]	; 0x68
 8012128:	4654      	mov	r4, sl
 801212a:	2205      	movs	r2, #5
 801212c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012130:	4850      	ldr	r0, [pc, #320]	; (8012274 <_svfiprintf_r+0x1e8>)
 8012132:	f7ee f885 	bl	8000240 <memchr>
 8012136:	9a04      	ldr	r2, [sp, #16]
 8012138:	b9d8      	cbnz	r0, 8012172 <_svfiprintf_r+0xe6>
 801213a:	06d0      	lsls	r0, r2, #27
 801213c:	bf44      	itt	mi
 801213e:	2320      	movmi	r3, #32
 8012140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012144:	0711      	lsls	r1, r2, #28
 8012146:	bf44      	itt	mi
 8012148:	232b      	movmi	r3, #43	; 0x2b
 801214a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801214e:	f89a 3000 	ldrb.w	r3, [sl]
 8012152:	2b2a      	cmp	r3, #42	; 0x2a
 8012154:	d015      	beq.n	8012182 <_svfiprintf_r+0xf6>
 8012156:	9a07      	ldr	r2, [sp, #28]
 8012158:	4654      	mov	r4, sl
 801215a:	2000      	movs	r0, #0
 801215c:	f04f 0c0a 	mov.w	ip, #10
 8012160:	4621      	mov	r1, r4
 8012162:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012166:	3b30      	subs	r3, #48	; 0x30
 8012168:	2b09      	cmp	r3, #9
 801216a:	d94d      	bls.n	8012208 <_svfiprintf_r+0x17c>
 801216c:	b1b0      	cbz	r0, 801219c <_svfiprintf_r+0x110>
 801216e:	9207      	str	r2, [sp, #28]
 8012170:	e014      	b.n	801219c <_svfiprintf_r+0x110>
 8012172:	eba0 0308 	sub.w	r3, r0, r8
 8012176:	fa09 f303 	lsl.w	r3, r9, r3
 801217a:	4313      	orrs	r3, r2
 801217c:	9304      	str	r3, [sp, #16]
 801217e:	46a2      	mov	sl, r4
 8012180:	e7d2      	b.n	8012128 <_svfiprintf_r+0x9c>
 8012182:	9b03      	ldr	r3, [sp, #12]
 8012184:	1d19      	adds	r1, r3, #4
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	9103      	str	r1, [sp, #12]
 801218a:	2b00      	cmp	r3, #0
 801218c:	bfbb      	ittet	lt
 801218e:	425b      	neglt	r3, r3
 8012190:	f042 0202 	orrlt.w	r2, r2, #2
 8012194:	9307      	strge	r3, [sp, #28]
 8012196:	9307      	strlt	r3, [sp, #28]
 8012198:	bfb8      	it	lt
 801219a:	9204      	strlt	r2, [sp, #16]
 801219c:	7823      	ldrb	r3, [r4, #0]
 801219e:	2b2e      	cmp	r3, #46	; 0x2e
 80121a0:	d10c      	bne.n	80121bc <_svfiprintf_r+0x130>
 80121a2:	7863      	ldrb	r3, [r4, #1]
 80121a4:	2b2a      	cmp	r3, #42	; 0x2a
 80121a6:	d134      	bne.n	8012212 <_svfiprintf_r+0x186>
 80121a8:	9b03      	ldr	r3, [sp, #12]
 80121aa:	1d1a      	adds	r2, r3, #4
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	9203      	str	r2, [sp, #12]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	bfb8      	it	lt
 80121b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80121b8:	3402      	adds	r4, #2
 80121ba:	9305      	str	r3, [sp, #20]
 80121bc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012284 <_svfiprintf_r+0x1f8>
 80121c0:	7821      	ldrb	r1, [r4, #0]
 80121c2:	2203      	movs	r2, #3
 80121c4:	4650      	mov	r0, sl
 80121c6:	f7ee f83b 	bl	8000240 <memchr>
 80121ca:	b138      	cbz	r0, 80121dc <_svfiprintf_r+0x150>
 80121cc:	9b04      	ldr	r3, [sp, #16]
 80121ce:	eba0 000a 	sub.w	r0, r0, sl
 80121d2:	2240      	movs	r2, #64	; 0x40
 80121d4:	4082      	lsls	r2, r0
 80121d6:	4313      	orrs	r3, r2
 80121d8:	3401      	adds	r4, #1
 80121da:	9304      	str	r3, [sp, #16]
 80121dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121e0:	4825      	ldr	r0, [pc, #148]	; (8012278 <_svfiprintf_r+0x1ec>)
 80121e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80121e6:	2206      	movs	r2, #6
 80121e8:	f7ee f82a 	bl	8000240 <memchr>
 80121ec:	2800      	cmp	r0, #0
 80121ee:	d038      	beq.n	8012262 <_svfiprintf_r+0x1d6>
 80121f0:	4b22      	ldr	r3, [pc, #136]	; (801227c <_svfiprintf_r+0x1f0>)
 80121f2:	bb1b      	cbnz	r3, 801223c <_svfiprintf_r+0x1b0>
 80121f4:	9b03      	ldr	r3, [sp, #12]
 80121f6:	3307      	adds	r3, #7
 80121f8:	f023 0307 	bic.w	r3, r3, #7
 80121fc:	3308      	adds	r3, #8
 80121fe:	9303      	str	r3, [sp, #12]
 8012200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012202:	4433      	add	r3, r6
 8012204:	9309      	str	r3, [sp, #36]	; 0x24
 8012206:	e768      	b.n	80120da <_svfiprintf_r+0x4e>
 8012208:	fb0c 3202 	mla	r2, ip, r2, r3
 801220c:	460c      	mov	r4, r1
 801220e:	2001      	movs	r0, #1
 8012210:	e7a6      	b.n	8012160 <_svfiprintf_r+0xd4>
 8012212:	2300      	movs	r3, #0
 8012214:	3401      	adds	r4, #1
 8012216:	9305      	str	r3, [sp, #20]
 8012218:	4619      	mov	r1, r3
 801221a:	f04f 0c0a 	mov.w	ip, #10
 801221e:	4620      	mov	r0, r4
 8012220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012224:	3a30      	subs	r2, #48	; 0x30
 8012226:	2a09      	cmp	r2, #9
 8012228:	d903      	bls.n	8012232 <_svfiprintf_r+0x1a6>
 801222a:	2b00      	cmp	r3, #0
 801222c:	d0c6      	beq.n	80121bc <_svfiprintf_r+0x130>
 801222e:	9105      	str	r1, [sp, #20]
 8012230:	e7c4      	b.n	80121bc <_svfiprintf_r+0x130>
 8012232:	fb0c 2101 	mla	r1, ip, r1, r2
 8012236:	4604      	mov	r4, r0
 8012238:	2301      	movs	r3, #1
 801223a:	e7f0      	b.n	801221e <_svfiprintf_r+0x192>
 801223c:	ab03      	add	r3, sp, #12
 801223e:	9300      	str	r3, [sp, #0]
 8012240:	462a      	mov	r2, r5
 8012242:	4b0f      	ldr	r3, [pc, #60]	; (8012280 <_svfiprintf_r+0x1f4>)
 8012244:	a904      	add	r1, sp, #16
 8012246:	4638      	mov	r0, r7
 8012248:	f3af 8000 	nop.w
 801224c:	1c42      	adds	r2, r0, #1
 801224e:	4606      	mov	r6, r0
 8012250:	d1d6      	bne.n	8012200 <_svfiprintf_r+0x174>
 8012252:	89ab      	ldrh	r3, [r5, #12]
 8012254:	065b      	lsls	r3, r3, #25
 8012256:	f53f af2d 	bmi.w	80120b4 <_svfiprintf_r+0x28>
 801225a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801225c:	b01d      	add	sp, #116	; 0x74
 801225e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012262:	ab03      	add	r3, sp, #12
 8012264:	9300      	str	r3, [sp, #0]
 8012266:	462a      	mov	r2, r5
 8012268:	4b05      	ldr	r3, [pc, #20]	; (8012280 <_svfiprintf_r+0x1f4>)
 801226a:	a904      	add	r1, sp, #16
 801226c:	4638      	mov	r0, r7
 801226e:	f000 f9bd 	bl	80125ec <_printf_i>
 8012272:	e7eb      	b.n	801224c <_svfiprintf_r+0x1c0>
 8012274:	08013868 	.word	0x08013868
 8012278:	08013872 	.word	0x08013872
 801227c:	00000000 	.word	0x00000000
 8012280:	08011fd9 	.word	0x08011fd9
 8012284:	0801386e 	.word	0x0801386e

08012288 <__sfputc_r>:
 8012288:	6893      	ldr	r3, [r2, #8]
 801228a:	3b01      	subs	r3, #1
 801228c:	2b00      	cmp	r3, #0
 801228e:	b410      	push	{r4}
 8012290:	6093      	str	r3, [r2, #8]
 8012292:	da08      	bge.n	80122a6 <__sfputc_r+0x1e>
 8012294:	6994      	ldr	r4, [r2, #24]
 8012296:	42a3      	cmp	r3, r4
 8012298:	db01      	blt.n	801229e <__sfputc_r+0x16>
 801229a:	290a      	cmp	r1, #10
 801229c:	d103      	bne.n	80122a6 <__sfputc_r+0x1e>
 801229e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122a2:	f000 bb85 	b.w	80129b0 <__swbuf_r>
 80122a6:	6813      	ldr	r3, [r2, #0]
 80122a8:	1c58      	adds	r0, r3, #1
 80122aa:	6010      	str	r0, [r2, #0]
 80122ac:	7019      	strb	r1, [r3, #0]
 80122ae:	4608      	mov	r0, r1
 80122b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122b4:	4770      	bx	lr

080122b6 <__sfputs_r>:
 80122b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122b8:	4606      	mov	r6, r0
 80122ba:	460f      	mov	r7, r1
 80122bc:	4614      	mov	r4, r2
 80122be:	18d5      	adds	r5, r2, r3
 80122c0:	42ac      	cmp	r4, r5
 80122c2:	d101      	bne.n	80122c8 <__sfputs_r+0x12>
 80122c4:	2000      	movs	r0, #0
 80122c6:	e007      	b.n	80122d8 <__sfputs_r+0x22>
 80122c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122cc:	463a      	mov	r2, r7
 80122ce:	4630      	mov	r0, r6
 80122d0:	f7ff ffda 	bl	8012288 <__sfputc_r>
 80122d4:	1c43      	adds	r3, r0, #1
 80122d6:	d1f3      	bne.n	80122c0 <__sfputs_r+0xa>
 80122d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080122dc <_vfiprintf_r>:
 80122dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122e0:	460d      	mov	r5, r1
 80122e2:	b09d      	sub	sp, #116	; 0x74
 80122e4:	4614      	mov	r4, r2
 80122e6:	4698      	mov	r8, r3
 80122e8:	4606      	mov	r6, r0
 80122ea:	b118      	cbz	r0, 80122f4 <_vfiprintf_r+0x18>
 80122ec:	6a03      	ldr	r3, [r0, #32]
 80122ee:	b90b      	cbnz	r3, 80122f4 <_vfiprintf_r+0x18>
 80122f0:	f7ff fbce 	bl	8011a90 <__sinit>
 80122f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80122f6:	07d9      	lsls	r1, r3, #31
 80122f8:	d405      	bmi.n	8012306 <_vfiprintf_r+0x2a>
 80122fa:	89ab      	ldrh	r3, [r5, #12]
 80122fc:	059a      	lsls	r2, r3, #22
 80122fe:	d402      	bmi.n	8012306 <_vfiprintf_r+0x2a>
 8012300:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012302:	f7ff fdd2 	bl	8011eaa <__retarget_lock_acquire_recursive>
 8012306:	89ab      	ldrh	r3, [r5, #12]
 8012308:	071b      	lsls	r3, r3, #28
 801230a:	d501      	bpl.n	8012310 <_vfiprintf_r+0x34>
 801230c:	692b      	ldr	r3, [r5, #16]
 801230e:	b99b      	cbnz	r3, 8012338 <_vfiprintf_r+0x5c>
 8012310:	4629      	mov	r1, r5
 8012312:	4630      	mov	r0, r6
 8012314:	f000 fb8a 	bl	8012a2c <__swsetup_r>
 8012318:	b170      	cbz	r0, 8012338 <_vfiprintf_r+0x5c>
 801231a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801231c:	07dc      	lsls	r4, r3, #31
 801231e:	d504      	bpl.n	801232a <_vfiprintf_r+0x4e>
 8012320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012324:	b01d      	add	sp, #116	; 0x74
 8012326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801232a:	89ab      	ldrh	r3, [r5, #12]
 801232c:	0598      	lsls	r0, r3, #22
 801232e:	d4f7      	bmi.n	8012320 <_vfiprintf_r+0x44>
 8012330:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012332:	f7ff fdbb 	bl	8011eac <__retarget_lock_release_recursive>
 8012336:	e7f3      	b.n	8012320 <_vfiprintf_r+0x44>
 8012338:	2300      	movs	r3, #0
 801233a:	9309      	str	r3, [sp, #36]	; 0x24
 801233c:	2320      	movs	r3, #32
 801233e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012342:	f8cd 800c 	str.w	r8, [sp, #12]
 8012346:	2330      	movs	r3, #48	; 0x30
 8012348:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80124fc <_vfiprintf_r+0x220>
 801234c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012350:	f04f 0901 	mov.w	r9, #1
 8012354:	4623      	mov	r3, r4
 8012356:	469a      	mov	sl, r3
 8012358:	f813 2b01 	ldrb.w	r2, [r3], #1
 801235c:	b10a      	cbz	r2, 8012362 <_vfiprintf_r+0x86>
 801235e:	2a25      	cmp	r2, #37	; 0x25
 8012360:	d1f9      	bne.n	8012356 <_vfiprintf_r+0x7a>
 8012362:	ebba 0b04 	subs.w	fp, sl, r4
 8012366:	d00b      	beq.n	8012380 <_vfiprintf_r+0xa4>
 8012368:	465b      	mov	r3, fp
 801236a:	4622      	mov	r2, r4
 801236c:	4629      	mov	r1, r5
 801236e:	4630      	mov	r0, r6
 8012370:	f7ff ffa1 	bl	80122b6 <__sfputs_r>
 8012374:	3001      	adds	r0, #1
 8012376:	f000 80a9 	beq.w	80124cc <_vfiprintf_r+0x1f0>
 801237a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801237c:	445a      	add	r2, fp
 801237e:	9209      	str	r2, [sp, #36]	; 0x24
 8012380:	f89a 3000 	ldrb.w	r3, [sl]
 8012384:	2b00      	cmp	r3, #0
 8012386:	f000 80a1 	beq.w	80124cc <_vfiprintf_r+0x1f0>
 801238a:	2300      	movs	r3, #0
 801238c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012390:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012394:	f10a 0a01 	add.w	sl, sl, #1
 8012398:	9304      	str	r3, [sp, #16]
 801239a:	9307      	str	r3, [sp, #28]
 801239c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80123a0:	931a      	str	r3, [sp, #104]	; 0x68
 80123a2:	4654      	mov	r4, sl
 80123a4:	2205      	movs	r2, #5
 80123a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123aa:	4854      	ldr	r0, [pc, #336]	; (80124fc <_vfiprintf_r+0x220>)
 80123ac:	f7ed ff48 	bl	8000240 <memchr>
 80123b0:	9a04      	ldr	r2, [sp, #16]
 80123b2:	b9d8      	cbnz	r0, 80123ec <_vfiprintf_r+0x110>
 80123b4:	06d1      	lsls	r1, r2, #27
 80123b6:	bf44      	itt	mi
 80123b8:	2320      	movmi	r3, #32
 80123ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80123be:	0713      	lsls	r3, r2, #28
 80123c0:	bf44      	itt	mi
 80123c2:	232b      	movmi	r3, #43	; 0x2b
 80123c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80123c8:	f89a 3000 	ldrb.w	r3, [sl]
 80123cc:	2b2a      	cmp	r3, #42	; 0x2a
 80123ce:	d015      	beq.n	80123fc <_vfiprintf_r+0x120>
 80123d0:	9a07      	ldr	r2, [sp, #28]
 80123d2:	4654      	mov	r4, sl
 80123d4:	2000      	movs	r0, #0
 80123d6:	f04f 0c0a 	mov.w	ip, #10
 80123da:	4621      	mov	r1, r4
 80123dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80123e0:	3b30      	subs	r3, #48	; 0x30
 80123e2:	2b09      	cmp	r3, #9
 80123e4:	d94d      	bls.n	8012482 <_vfiprintf_r+0x1a6>
 80123e6:	b1b0      	cbz	r0, 8012416 <_vfiprintf_r+0x13a>
 80123e8:	9207      	str	r2, [sp, #28]
 80123ea:	e014      	b.n	8012416 <_vfiprintf_r+0x13a>
 80123ec:	eba0 0308 	sub.w	r3, r0, r8
 80123f0:	fa09 f303 	lsl.w	r3, r9, r3
 80123f4:	4313      	orrs	r3, r2
 80123f6:	9304      	str	r3, [sp, #16]
 80123f8:	46a2      	mov	sl, r4
 80123fa:	e7d2      	b.n	80123a2 <_vfiprintf_r+0xc6>
 80123fc:	9b03      	ldr	r3, [sp, #12]
 80123fe:	1d19      	adds	r1, r3, #4
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	9103      	str	r1, [sp, #12]
 8012404:	2b00      	cmp	r3, #0
 8012406:	bfbb      	ittet	lt
 8012408:	425b      	neglt	r3, r3
 801240a:	f042 0202 	orrlt.w	r2, r2, #2
 801240e:	9307      	strge	r3, [sp, #28]
 8012410:	9307      	strlt	r3, [sp, #28]
 8012412:	bfb8      	it	lt
 8012414:	9204      	strlt	r2, [sp, #16]
 8012416:	7823      	ldrb	r3, [r4, #0]
 8012418:	2b2e      	cmp	r3, #46	; 0x2e
 801241a:	d10c      	bne.n	8012436 <_vfiprintf_r+0x15a>
 801241c:	7863      	ldrb	r3, [r4, #1]
 801241e:	2b2a      	cmp	r3, #42	; 0x2a
 8012420:	d134      	bne.n	801248c <_vfiprintf_r+0x1b0>
 8012422:	9b03      	ldr	r3, [sp, #12]
 8012424:	1d1a      	adds	r2, r3, #4
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	9203      	str	r2, [sp, #12]
 801242a:	2b00      	cmp	r3, #0
 801242c:	bfb8      	it	lt
 801242e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012432:	3402      	adds	r4, #2
 8012434:	9305      	str	r3, [sp, #20]
 8012436:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801250c <_vfiprintf_r+0x230>
 801243a:	7821      	ldrb	r1, [r4, #0]
 801243c:	2203      	movs	r2, #3
 801243e:	4650      	mov	r0, sl
 8012440:	f7ed fefe 	bl	8000240 <memchr>
 8012444:	b138      	cbz	r0, 8012456 <_vfiprintf_r+0x17a>
 8012446:	9b04      	ldr	r3, [sp, #16]
 8012448:	eba0 000a 	sub.w	r0, r0, sl
 801244c:	2240      	movs	r2, #64	; 0x40
 801244e:	4082      	lsls	r2, r0
 8012450:	4313      	orrs	r3, r2
 8012452:	3401      	adds	r4, #1
 8012454:	9304      	str	r3, [sp, #16]
 8012456:	f814 1b01 	ldrb.w	r1, [r4], #1
 801245a:	4829      	ldr	r0, [pc, #164]	; (8012500 <_vfiprintf_r+0x224>)
 801245c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012460:	2206      	movs	r2, #6
 8012462:	f7ed feed 	bl	8000240 <memchr>
 8012466:	2800      	cmp	r0, #0
 8012468:	d03f      	beq.n	80124ea <_vfiprintf_r+0x20e>
 801246a:	4b26      	ldr	r3, [pc, #152]	; (8012504 <_vfiprintf_r+0x228>)
 801246c:	bb1b      	cbnz	r3, 80124b6 <_vfiprintf_r+0x1da>
 801246e:	9b03      	ldr	r3, [sp, #12]
 8012470:	3307      	adds	r3, #7
 8012472:	f023 0307 	bic.w	r3, r3, #7
 8012476:	3308      	adds	r3, #8
 8012478:	9303      	str	r3, [sp, #12]
 801247a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801247c:	443b      	add	r3, r7
 801247e:	9309      	str	r3, [sp, #36]	; 0x24
 8012480:	e768      	b.n	8012354 <_vfiprintf_r+0x78>
 8012482:	fb0c 3202 	mla	r2, ip, r2, r3
 8012486:	460c      	mov	r4, r1
 8012488:	2001      	movs	r0, #1
 801248a:	e7a6      	b.n	80123da <_vfiprintf_r+0xfe>
 801248c:	2300      	movs	r3, #0
 801248e:	3401      	adds	r4, #1
 8012490:	9305      	str	r3, [sp, #20]
 8012492:	4619      	mov	r1, r3
 8012494:	f04f 0c0a 	mov.w	ip, #10
 8012498:	4620      	mov	r0, r4
 801249a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801249e:	3a30      	subs	r2, #48	; 0x30
 80124a0:	2a09      	cmp	r2, #9
 80124a2:	d903      	bls.n	80124ac <_vfiprintf_r+0x1d0>
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d0c6      	beq.n	8012436 <_vfiprintf_r+0x15a>
 80124a8:	9105      	str	r1, [sp, #20]
 80124aa:	e7c4      	b.n	8012436 <_vfiprintf_r+0x15a>
 80124ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80124b0:	4604      	mov	r4, r0
 80124b2:	2301      	movs	r3, #1
 80124b4:	e7f0      	b.n	8012498 <_vfiprintf_r+0x1bc>
 80124b6:	ab03      	add	r3, sp, #12
 80124b8:	9300      	str	r3, [sp, #0]
 80124ba:	462a      	mov	r2, r5
 80124bc:	4b12      	ldr	r3, [pc, #72]	; (8012508 <_vfiprintf_r+0x22c>)
 80124be:	a904      	add	r1, sp, #16
 80124c0:	4630      	mov	r0, r6
 80124c2:	f3af 8000 	nop.w
 80124c6:	4607      	mov	r7, r0
 80124c8:	1c78      	adds	r0, r7, #1
 80124ca:	d1d6      	bne.n	801247a <_vfiprintf_r+0x19e>
 80124cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80124ce:	07d9      	lsls	r1, r3, #31
 80124d0:	d405      	bmi.n	80124de <_vfiprintf_r+0x202>
 80124d2:	89ab      	ldrh	r3, [r5, #12]
 80124d4:	059a      	lsls	r2, r3, #22
 80124d6:	d402      	bmi.n	80124de <_vfiprintf_r+0x202>
 80124d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80124da:	f7ff fce7 	bl	8011eac <__retarget_lock_release_recursive>
 80124de:	89ab      	ldrh	r3, [r5, #12]
 80124e0:	065b      	lsls	r3, r3, #25
 80124e2:	f53f af1d 	bmi.w	8012320 <_vfiprintf_r+0x44>
 80124e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80124e8:	e71c      	b.n	8012324 <_vfiprintf_r+0x48>
 80124ea:	ab03      	add	r3, sp, #12
 80124ec:	9300      	str	r3, [sp, #0]
 80124ee:	462a      	mov	r2, r5
 80124f0:	4b05      	ldr	r3, [pc, #20]	; (8012508 <_vfiprintf_r+0x22c>)
 80124f2:	a904      	add	r1, sp, #16
 80124f4:	4630      	mov	r0, r6
 80124f6:	f000 f879 	bl	80125ec <_printf_i>
 80124fa:	e7e4      	b.n	80124c6 <_vfiprintf_r+0x1ea>
 80124fc:	08013868 	.word	0x08013868
 8012500:	08013872 	.word	0x08013872
 8012504:	00000000 	.word	0x00000000
 8012508:	080122b7 	.word	0x080122b7
 801250c:	0801386e 	.word	0x0801386e

08012510 <_printf_common>:
 8012510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012514:	4616      	mov	r6, r2
 8012516:	4699      	mov	r9, r3
 8012518:	688a      	ldr	r2, [r1, #8]
 801251a:	690b      	ldr	r3, [r1, #16]
 801251c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012520:	4293      	cmp	r3, r2
 8012522:	bfb8      	it	lt
 8012524:	4613      	movlt	r3, r2
 8012526:	6033      	str	r3, [r6, #0]
 8012528:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801252c:	4607      	mov	r7, r0
 801252e:	460c      	mov	r4, r1
 8012530:	b10a      	cbz	r2, 8012536 <_printf_common+0x26>
 8012532:	3301      	adds	r3, #1
 8012534:	6033      	str	r3, [r6, #0]
 8012536:	6823      	ldr	r3, [r4, #0]
 8012538:	0699      	lsls	r1, r3, #26
 801253a:	bf42      	ittt	mi
 801253c:	6833      	ldrmi	r3, [r6, #0]
 801253e:	3302      	addmi	r3, #2
 8012540:	6033      	strmi	r3, [r6, #0]
 8012542:	6825      	ldr	r5, [r4, #0]
 8012544:	f015 0506 	ands.w	r5, r5, #6
 8012548:	d106      	bne.n	8012558 <_printf_common+0x48>
 801254a:	f104 0a19 	add.w	sl, r4, #25
 801254e:	68e3      	ldr	r3, [r4, #12]
 8012550:	6832      	ldr	r2, [r6, #0]
 8012552:	1a9b      	subs	r3, r3, r2
 8012554:	42ab      	cmp	r3, r5
 8012556:	dc26      	bgt.n	80125a6 <_printf_common+0x96>
 8012558:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801255c:	1e13      	subs	r3, r2, #0
 801255e:	6822      	ldr	r2, [r4, #0]
 8012560:	bf18      	it	ne
 8012562:	2301      	movne	r3, #1
 8012564:	0692      	lsls	r2, r2, #26
 8012566:	d42b      	bmi.n	80125c0 <_printf_common+0xb0>
 8012568:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801256c:	4649      	mov	r1, r9
 801256e:	4638      	mov	r0, r7
 8012570:	47c0      	blx	r8
 8012572:	3001      	adds	r0, #1
 8012574:	d01e      	beq.n	80125b4 <_printf_common+0xa4>
 8012576:	6823      	ldr	r3, [r4, #0]
 8012578:	6922      	ldr	r2, [r4, #16]
 801257a:	f003 0306 	and.w	r3, r3, #6
 801257e:	2b04      	cmp	r3, #4
 8012580:	bf02      	ittt	eq
 8012582:	68e5      	ldreq	r5, [r4, #12]
 8012584:	6833      	ldreq	r3, [r6, #0]
 8012586:	1aed      	subeq	r5, r5, r3
 8012588:	68a3      	ldr	r3, [r4, #8]
 801258a:	bf0c      	ite	eq
 801258c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012590:	2500      	movne	r5, #0
 8012592:	4293      	cmp	r3, r2
 8012594:	bfc4      	itt	gt
 8012596:	1a9b      	subgt	r3, r3, r2
 8012598:	18ed      	addgt	r5, r5, r3
 801259a:	2600      	movs	r6, #0
 801259c:	341a      	adds	r4, #26
 801259e:	42b5      	cmp	r5, r6
 80125a0:	d11a      	bne.n	80125d8 <_printf_common+0xc8>
 80125a2:	2000      	movs	r0, #0
 80125a4:	e008      	b.n	80125b8 <_printf_common+0xa8>
 80125a6:	2301      	movs	r3, #1
 80125a8:	4652      	mov	r2, sl
 80125aa:	4649      	mov	r1, r9
 80125ac:	4638      	mov	r0, r7
 80125ae:	47c0      	blx	r8
 80125b0:	3001      	adds	r0, #1
 80125b2:	d103      	bne.n	80125bc <_printf_common+0xac>
 80125b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80125b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125bc:	3501      	adds	r5, #1
 80125be:	e7c6      	b.n	801254e <_printf_common+0x3e>
 80125c0:	18e1      	adds	r1, r4, r3
 80125c2:	1c5a      	adds	r2, r3, #1
 80125c4:	2030      	movs	r0, #48	; 0x30
 80125c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80125ca:	4422      	add	r2, r4
 80125cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80125d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80125d4:	3302      	adds	r3, #2
 80125d6:	e7c7      	b.n	8012568 <_printf_common+0x58>
 80125d8:	2301      	movs	r3, #1
 80125da:	4622      	mov	r2, r4
 80125dc:	4649      	mov	r1, r9
 80125de:	4638      	mov	r0, r7
 80125e0:	47c0      	blx	r8
 80125e2:	3001      	adds	r0, #1
 80125e4:	d0e6      	beq.n	80125b4 <_printf_common+0xa4>
 80125e6:	3601      	adds	r6, #1
 80125e8:	e7d9      	b.n	801259e <_printf_common+0x8e>
	...

080125ec <_printf_i>:
 80125ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80125f0:	7e0f      	ldrb	r7, [r1, #24]
 80125f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80125f4:	2f78      	cmp	r7, #120	; 0x78
 80125f6:	4691      	mov	r9, r2
 80125f8:	4680      	mov	r8, r0
 80125fa:	460c      	mov	r4, r1
 80125fc:	469a      	mov	sl, r3
 80125fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012602:	d807      	bhi.n	8012614 <_printf_i+0x28>
 8012604:	2f62      	cmp	r7, #98	; 0x62
 8012606:	d80a      	bhi.n	801261e <_printf_i+0x32>
 8012608:	2f00      	cmp	r7, #0
 801260a:	f000 80d4 	beq.w	80127b6 <_printf_i+0x1ca>
 801260e:	2f58      	cmp	r7, #88	; 0x58
 8012610:	f000 80c0 	beq.w	8012794 <_printf_i+0x1a8>
 8012614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012618:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801261c:	e03a      	b.n	8012694 <_printf_i+0xa8>
 801261e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012622:	2b15      	cmp	r3, #21
 8012624:	d8f6      	bhi.n	8012614 <_printf_i+0x28>
 8012626:	a101      	add	r1, pc, #4	; (adr r1, 801262c <_printf_i+0x40>)
 8012628:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801262c:	08012685 	.word	0x08012685
 8012630:	08012699 	.word	0x08012699
 8012634:	08012615 	.word	0x08012615
 8012638:	08012615 	.word	0x08012615
 801263c:	08012615 	.word	0x08012615
 8012640:	08012615 	.word	0x08012615
 8012644:	08012699 	.word	0x08012699
 8012648:	08012615 	.word	0x08012615
 801264c:	08012615 	.word	0x08012615
 8012650:	08012615 	.word	0x08012615
 8012654:	08012615 	.word	0x08012615
 8012658:	0801279d 	.word	0x0801279d
 801265c:	080126c5 	.word	0x080126c5
 8012660:	08012757 	.word	0x08012757
 8012664:	08012615 	.word	0x08012615
 8012668:	08012615 	.word	0x08012615
 801266c:	080127bf 	.word	0x080127bf
 8012670:	08012615 	.word	0x08012615
 8012674:	080126c5 	.word	0x080126c5
 8012678:	08012615 	.word	0x08012615
 801267c:	08012615 	.word	0x08012615
 8012680:	0801275f 	.word	0x0801275f
 8012684:	682b      	ldr	r3, [r5, #0]
 8012686:	1d1a      	adds	r2, r3, #4
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	602a      	str	r2, [r5, #0]
 801268c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012690:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012694:	2301      	movs	r3, #1
 8012696:	e09f      	b.n	80127d8 <_printf_i+0x1ec>
 8012698:	6820      	ldr	r0, [r4, #0]
 801269a:	682b      	ldr	r3, [r5, #0]
 801269c:	0607      	lsls	r7, r0, #24
 801269e:	f103 0104 	add.w	r1, r3, #4
 80126a2:	6029      	str	r1, [r5, #0]
 80126a4:	d501      	bpl.n	80126aa <_printf_i+0xbe>
 80126a6:	681e      	ldr	r6, [r3, #0]
 80126a8:	e003      	b.n	80126b2 <_printf_i+0xc6>
 80126aa:	0646      	lsls	r6, r0, #25
 80126ac:	d5fb      	bpl.n	80126a6 <_printf_i+0xba>
 80126ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80126b2:	2e00      	cmp	r6, #0
 80126b4:	da03      	bge.n	80126be <_printf_i+0xd2>
 80126b6:	232d      	movs	r3, #45	; 0x2d
 80126b8:	4276      	negs	r6, r6
 80126ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80126be:	485a      	ldr	r0, [pc, #360]	; (8012828 <_printf_i+0x23c>)
 80126c0:	230a      	movs	r3, #10
 80126c2:	e012      	b.n	80126ea <_printf_i+0xfe>
 80126c4:	682b      	ldr	r3, [r5, #0]
 80126c6:	6820      	ldr	r0, [r4, #0]
 80126c8:	1d19      	adds	r1, r3, #4
 80126ca:	6029      	str	r1, [r5, #0]
 80126cc:	0605      	lsls	r5, r0, #24
 80126ce:	d501      	bpl.n	80126d4 <_printf_i+0xe8>
 80126d0:	681e      	ldr	r6, [r3, #0]
 80126d2:	e002      	b.n	80126da <_printf_i+0xee>
 80126d4:	0641      	lsls	r1, r0, #25
 80126d6:	d5fb      	bpl.n	80126d0 <_printf_i+0xe4>
 80126d8:	881e      	ldrh	r6, [r3, #0]
 80126da:	4853      	ldr	r0, [pc, #332]	; (8012828 <_printf_i+0x23c>)
 80126dc:	2f6f      	cmp	r7, #111	; 0x6f
 80126de:	bf0c      	ite	eq
 80126e0:	2308      	moveq	r3, #8
 80126e2:	230a      	movne	r3, #10
 80126e4:	2100      	movs	r1, #0
 80126e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80126ea:	6865      	ldr	r5, [r4, #4]
 80126ec:	60a5      	str	r5, [r4, #8]
 80126ee:	2d00      	cmp	r5, #0
 80126f0:	bfa2      	ittt	ge
 80126f2:	6821      	ldrge	r1, [r4, #0]
 80126f4:	f021 0104 	bicge.w	r1, r1, #4
 80126f8:	6021      	strge	r1, [r4, #0]
 80126fa:	b90e      	cbnz	r6, 8012700 <_printf_i+0x114>
 80126fc:	2d00      	cmp	r5, #0
 80126fe:	d04b      	beq.n	8012798 <_printf_i+0x1ac>
 8012700:	4615      	mov	r5, r2
 8012702:	fbb6 f1f3 	udiv	r1, r6, r3
 8012706:	fb03 6711 	mls	r7, r3, r1, r6
 801270a:	5dc7      	ldrb	r7, [r0, r7]
 801270c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012710:	4637      	mov	r7, r6
 8012712:	42bb      	cmp	r3, r7
 8012714:	460e      	mov	r6, r1
 8012716:	d9f4      	bls.n	8012702 <_printf_i+0x116>
 8012718:	2b08      	cmp	r3, #8
 801271a:	d10b      	bne.n	8012734 <_printf_i+0x148>
 801271c:	6823      	ldr	r3, [r4, #0]
 801271e:	07de      	lsls	r6, r3, #31
 8012720:	d508      	bpl.n	8012734 <_printf_i+0x148>
 8012722:	6923      	ldr	r3, [r4, #16]
 8012724:	6861      	ldr	r1, [r4, #4]
 8012726:	4299      	cmp	r1, r3
 8012728:	bfde      	ittt	le
 801272a:	2330      	movle	r3, #48	; 0x30
 801272c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012730:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012734:	1b52      	subs	r2, r2, r5
 8012736:	6122      	str	r2, [r4, #16]
 8012738:	f8cd a000 	str.w	sl, [sp]
 801273c:	464b      	mov	r3, r9
 801273e:	aa03      	add	r2, sp, #12
 8012740:	4621      	mov	r1, r4
 8012742:	4640      	mov	r0, r8
 8012744:	f7ff fee4 	bl	8012510 <_printf_common>
 8012748:	3001      	adds	r0, #1
 801274a:	d14a      	bne.n	80127e2 <_printf_i+0x1f6>
 801274c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012750:	b004      	add	sp, #16
 8012752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012756:	6823      	ldr	r3, [r4, #0]
 8012758:	f043 0320 	orr.w	r3, r3, #32
 801275c:	6023      	str	r3, [r4, #0]
 801275e:	4833      	ldr	r0, [pc, #204]	; (801282c <_printf_i+0x240>)
 8012760:	2778      	movs	r7, #120	; 0x78
 8012762:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012766:	6823      	ldr	r3, [r4, #0]
 8012768:	6829      	ldr	r1, [r5, #0]
 801276a:	061f      	lsls	r7, r3, #24
 801276c:	f851 6b04 	ldr.w	r6, [r1], #4
 8012770:	d402      	bmi.n	8012778 <_printf_i+0x18c>
 8012772:	065f      	lsls	r7, r3, #25
 8012774:	bf48      	it	mi
 8012776:	b2b6      	uxthmi	r6, r6
 8012778:	07df      	lsls	r7, r3, #31
 801277a:	bf48      	it	mi
 801277c:	f043 0320 	orrmi.w	r3, r3, #32
 8012780:	6029      	str	r1, [r5, #0]
 8012782:	bf48      	it	mi
 8012784:	6023      	strmi	r3, [r4, #0]
 8012786:	b91e      	cbnz	r6, 8012790 <_printf_i+0x1a4>
 8012788:	6823      	ldr	r3, [r4, #0]
 801278a:	f023 0320 	bic.w	r3, r3, #32
 801278e:	6023      	str	r3, [r4, #0]
 8012790:	2310      	movs	r3, #16
 8012792:	e7a7      	b.n	80126e4 <_printf_i+0xf8>
 8012794:	4824      	ldr	r0, [pc, #144]	; (8012828 <_printf_i+0x23c>)
 8012796:	e7e4      	b.n	8012762 <_printf_i+0x176>
 8012798:	4615      	mov	r5, r2
 801279a:	e7bd      	b.n	8012718 <_printf_i+0x12c>
 801279c:	682b      	ldr	r3, [r5, #0]
 801279e:	6826      	ldr	r6, [r4, #0]
 80127a0:	6961      	ldr	r1, [r4, #20]
 80127a2:	1d18      	adds	r0, r3, #4
 80127a4:	6028      	str	r0, [r5, #0]
 80127a6:	0635      	lsls	r5, r6, #24
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	d501      	bpl.n	80127b0 <_printf_i+0x1c4>
 80127ac:	6019      	str	r1, [r3, #0]
 80127ae:	e002      	b.n	80127b6 <_printf_i+0x1ca>
 80127b0:	0670      	lsls	r0, r6, #25
 80127b2:	d5fb      	bpl.n	80127ac <_printf_i+0x1c0>
 80127b4:	8019      	strh	r1, [r3, #0]
 80127b6:	2300      	movs	r3, #0
 80127b8:	6123      	str	r3, [r4, #16]
 80127ba:	4615      	mov	r5, r2
 80127bc:	e7bc      	b.n	8012738 <_printf_i+0x14c>
 80127be:	682b      	ldr	r3, [r5, #0]
 80127c0:	1d1a      	adds	r2, r3, #4
 80127c2:	602a      	str	r2, [r5, #0]
 80127c4:	681d      	ldr	r5, [r3, #0]
 80127c6:	6862      	ldr	r2, [r4, #4]
 80127c8:	2100      	movs	r1, #0
 80127ca:	4628      	mov	r0, r5
 80127cc:	f7ed fd38 	bl	8000240 <memchr>
 80127d0:	b108      	cbz	r0, 80127d6 <_printf_i+0x1ea>
 80127d2:	1b40      	subs	r0, r0, r5
 80127d4:	6060      	str	r0, [r4, #4]
 80127d6:	6863      	ldr	r3, [r4, #4]
 80127d8:	6123      	str	r3, [r4, #16]
 80127da:	2300      	movs	r3, #0
 80127dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80127e0:	e7aa      	b.n	8012738 <_printf_i+0x14c>
 80127e2:	6923      	ldr	r3, [r4, #16]
 80127e4:	462a      	mov	r2, r5
 80127e6:	4649      	mov	r1, r9
 80127e8:	4640      	mov	r0, r8
 80127ea:	47d0      	blx	sl
 80127ec:	3001      	adds	r0, #1
 80127ee:	d0ad      	beq.n	801274c <_printf_i+0x160>
 80127f0:	6823      	ldr	r3, [r4, #0]
 80127f2:	079b      	lsls	r3, r3, #30
 80127f4:	d413      	bmi.n	801281e <_printf_i+0x232>
 80127f6:	68e0      	ldr	r0, [r4, #12]
 80127f8:	9b03      	ldr	r3, [sp, #12]
 80127fa:	4298      	cmp	r0, r3
 80127fc:	bfb8      	it	lt
 80127fe:	4618      	movlt	r0, r3
 8012800:	e7a6      	b.n	8012750 <_printf_i+0x164>
 8012802:	2301      	movs	r3, #1
 8012804:	4632      	mov	r2, r6
 8012806:	4649      	mov	r1, r9
 8012808:	4640      	mov	r0, r8
 801280a:	47d0      	blx	sl
 801280c:	3001      	adds	r0, #1
 801280e:	d09d      	beq.n	801274c <_printf_i+0x160>
 8012810:	3501      	adds	r5, #1
 8012812:	68e3      	ldr	r3, [r4, #12]
 8012814:	9903      	ldr	r1, [sp, #12]
 8012816:	1a5b      	subs	r3, r3, r1
 8012818:	42ab      	cmp	r3, r5
 801281a:	dcf2      	bgt.n	8012802 <_printf_i+0x216>
 801281c:	e7eb      	b.n	80127f6 <_printf_i+0x20a>
 801281e:	2500      	movs	r5, #0
 8012820:	f104 0619 	add.w	r6, r4, #25
 8012824:	e7f5      	b.n	8012812 <_printf_i+0x226>
 8012826:	bf00      	nop
 8012828:	08013879 	.word	0x08013879
 801282c:	0801388a 	.word	0x0801388a

08012830 <__sflush_r>:
 8012830:	898a      	ldrh	r2, [r1, #12]
 8012832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012836:	4605      	mov	r5, r0
 8012838:	0710      	lsls	r0, r2, #28
 801283a:	460c      	mov	r4, r1
 801283c:	d458      	bmi.n	80128f0 <__sflush_r+0xc0>
 801283e:	684b      	ldr	r3, [r1, #4]
 8012840:	2b00      	cmp	r3, #0
 8012842:	dc05      	bgt.n	8012850 <__sflush_r+0x20>
 8012844:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012846:	2b00      	cmp	r3, #0
 8012848:	dc02      	bgt.n	8012850 <__sflush_r+0x20>
 801284a:	2000      	movs	r0, #0
 801284c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012850:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012852:	2e00      	cmp	r6, #0
 8012854:	d0f9      	beq.n	801284a <__sflush_r+0x1a>
 8012856:	2300      	movs	r3, #0
 8012858:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801285c:	682f      	ldr	r7, [r5, #0]
 801285e:	6a21      	ldr	r1, [r4, #32]
 8012860:	602b      	str	r3, [r5, #0]
 8012862:	d032      	beq.n	80128ca <__sflush_r+0x9a>
 8012864:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012866:	89a3      	ldrh	r3, [r4, #12]
 8012868:	075a      	lsls	r2, r3, #29
 801286a:	d505      	bpl.n	8012878 <__sflush_r+0x48>
 801286c:	6863      	ldr	r3, [r4, #4]
 801286e:	1ac0      	subs	r0, r0, r3
 8012870:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012872:	b10b      	cbz	r3, 8012878 <__sflush_r+0x48>
 8012874:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012876:	1ac0      	subs	r0, r0, r3
 8012878:	2300      	movs	r3, #0
 801287a:	4602      	mov	r2, r0
 801287c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801287e:	6a21      	ldr	r1, [r4, #32]
 8012880:	4628      	mov	r0, r5
 8012882:	47b0      	blx	r6
 8012884:	1c43      	adds	r3, r0, #1
 8012886:	89a3      	ldrh	r3, [r4, #12]
 8012888:	d106      	bne.n	8012898 <__sflush_r+0x68>
 801288a:	6829      	ldr	r1, [r5, #0]
 801288c:	291d      	cmp	r1, #29
 801288e:	d82b      	bhi.n	80128e8 <__sflush_r+0xb8>
 8012890:	4a29      	ldr	r2, [pc, #164]	; (8012938 <__sflush_r+0x108>)
 8012892:	410a      	asrs	r2, r1
 8012894:	07d6      	lsls	r6, r2, #31
 8012896:	d427      	bmi.n	80128e8 <__sflush_r+0xb8>
 8012898:	2200      	movs	r2, #0
 801289a:	6062      	str	r2, [r4, #4]
 801289c:	04d9      	lsls	r1, r3, #19
 801289e:	6922      	ldr	r2, [r4, #16]
 80128a0:	6022      	str	r2, [r4, #0]
 80128a2:	d504      	bpl.n	80128ae <__sflush_r+0x7e>
 80128a4:	1c42      	adds	r2, r0, #1
 80128a6:	d101      	bne.n	80128ac <__sflush_r+0x7c>
 80128a8:	682b      	ldr	r3, [r5, #0]
 80128aa:	b903      	cbnz	r3, 80128ae <__sflush_r+0x7e>
 80128ac:	6560      	str	r0, [r4, #84]	; 0x54
 80128ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80128b0:	602f      	str	r7, [r5, #0]
 80128b2:	2900      	cmp	r1, #0
 80128b4:	d0c9      	beq.n	801284a <__sflush_r+0x1a>
 80128b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80128ba:	4299      	cmp	r1, r3
 80128bc:	d002      	beq.n	80128c4 <__sflush_r+0x94>
 80128be:	4628      	mov	r0, r5
 80128c0:	f7ff fb36 	bl	8011f30 <_free_r>
 80128c4:	2000      	movs	r0, #0
 80128c6:	6360      	str	r0, [r4, #52]	; 0x34
 80128c8:	e7c0      	b.n	801284c <__sflush_r+0x1c>
 80128ca:	2301      	movs	r3, #1
 80128cc:	4628      	mov	r0, r5
 80128ce:	47b0      	blx	r6
 80128d0:	1c41      	adds	r1, r0, #1
 80128d2:	d1c8      	bne.n	8012866 <__sflush_r+0x36>
 80128d4:	682b      	ldr	r3, [r5, #0]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d0c5      	beq.n	8012866 <__sflush_r+0x36>
 80128da:	2b1d      	cmp	r3, #29
 80128dc:	d001      	beq.n	80128e2 <__sflush_r+0xb2>
 80128de:	2b16      	cmp	r3, #22
 80128e0:	d101      	bne.n	80128e6 <__sflush_r+0xb6>
 80128e2:	602f      	str	r7, [r5, #0]
 80128e4:	e7b1      	b.n	801284a <__sflush_r+0x1a>
 80128e6:	89a3      	ldrh	r3, [r4, #12]
 80128e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128ec:	81a3      	strh	r3, [r4, #12]
 80128ee:	e7ad      	b.n	801284c <__sflush_r+0x1c>
 80128f0:	690f      	ldr	r7, [r1, #16]
 80128f2:	2f00      	cmp	r7, #0
 80128f4:	d0a9      	beq.n	801284a <__sflush_r+0x1a>
 80128f6:	0793      	lsls	r3, r2, #30
 80128f8:	680e      	ldr	r6, [r1, #0]
 80128fa:	bf08      	it	eq
 80128fc:	694b      	ldreq	r3, [r1, #20]
 80128fe:	600f      	str	r7, [r1, #0]
 8012900:	bf18      	it	ne
 8012902:	2300      	movne	r3, #0
 8012904:	eba6 0807 	sub.w	r8, r6, r7
 8012908:	608b      	str	r3, [r1, #8]
 801290a:	f1b8 0f00 	cmp.w	r8, #0
 801290e:	dd9c      	ble.n	801284a <__sflush_r+0x1a>
 8012910:	6a21      	ldr	r1, [r4, #32]
 8012912:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012914:	4643      	mov	r3, r8
 8012916:	463a      	mov	r2, r7
 8012918:	4628      	mov	r0, r5
 801291a:	47b0      	blx	r6
 801291c:	2800      	cmp	r0, #0
 801291e:	dc06      	bgt.n	801292e <__sflush_r+0xfe>
 8012920:	89a3      	ldrh	r3, [r4, #12]
 8012922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012926:	81a3      	strh	r3, [r4, #12]
 8012928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801292c:	e78e      	b.n	801284c <__sflush_r+0x1c>
 801292e:	4407      	add	r7, r0
 8012930:	eba8 0800 	sub.w	r8, r8, r0
 8012934:	e7e9      	b.n	801290a <__sflush_r+0xda>
 8012936:	bf00      	nop
 8012938:	dfbffffe 	.word	0xdfbffffe

0801293c <_fflush_r>:
 801293c:	b538      	push	{r3, r4, r5, lr}
 801293e:	690b      	ldr	r3, [r1, #16]
 8012940:	4605      	mov	r5, r0
 8012942:	460c      	mov	r4, r1
 8012944:	b913      	cbnz	r3, 801294c <_fflush_r+0x10>
 8012946:	2500      	movs	r5, #0
 8012948:	4628      	mov	r0, r5
 801294a:	bd38      	pop	{r3, r4, r5, pc}
 801294c:	b118      	cbz	r0, 8012956 <_fflush_r+0x1a>
 801294e:	6a03      	ldr	r3, [r0, #32]
 8012950:	b90b      	cbnz	r3, 8012956 <_fflush_r+0x1a>
 8012952:	f7ff f89d 	bl	8011a90 <__sinit>
 8012956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d0f3      	beq.n	8012946 <_fflush_r+0xa>
 801295e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012960:	07d0      	lsls	r0, r2, #31
 8012962:	d404      	bmi.n	801296e <_fflush_r+0x32>
 8012964:	0599      	lsls	r1, r3, #22
 8012966:	d402      	bmi.n	801296e <_fflush_r+0x32>
 8012968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801296a:	f7ff fa9e 	bl	8011eaa <__retarget_lock_acquire_recursive>
 801296e:	4628      	mov	r0, r5
 8012970:	4621      	mov	r1, r4
 8012972:	f7ff ff5d 	bl	8012830 <__sflush_r>
 8012976:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012978:	07da      	lsls	r2, r3, #31
 801297a:	4605      	mov	r5, r0
 801297c:	d4e4      	bmi.n	8012948 <_fflush_r+0xc>
 801297e:	89a3      	ldrh	r3, [r4, #12]
 8012980:	059b      	lsls	r3, r3, #22
 8012982:	d4e1      	bmi.n	8012948 <_fflush_r+0xc>
 8012984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012986:	f7ff fa91 	bl	8011eac <__retarget_lock_release_recursive>
 801298a:	e7dd      	b.n	8012948 <_fflush_r+0xc>

0801298c <fiprintf>:
 801298c:	b40e      	push	{r1, r2, r3}
 801298e:	b503      	push	{r0, r1, lr}
 8012990:	4601      	mov	r1, r0
 8012992:	ab03      	add	r3, sp, #12
 8012994:	4805      	ldr	r0, [pc, #20]	; (80129ac <fiprintf+0x20>)
 8012996:	f853 2b04 	ldr.w	r2, [r3], #4
 801299a:	6800      	ldr	r0, [r0, #0]
 801299c:	9301      	str	r3, [sp, #4]
 801299e:	f7ff fc9d 	bl	80122dc <_vfiprintf_r>
 80129a2:	b002      	add	sp, #8
 80129a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80129a8:	b003      	add	sp, #12
 80129aa:	4770      	bx	lr
 80129ac:	2000010c 	.word	0x2000010c

080129b0 <__swbuf_r>:
 80129b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129b2:	460e      	mov	r6, r1
 80129b4:	4614      	mov	r4, r2
 80129b6:	4605      	mov	r5, r0
 80129b8:	b118      	cbz	r0, 80129c2 <__swbuf_r+0x12>
 80129ba:	6a03      	ldr	r3, [r0, #32]
 80129bc:	b90b      	cbnz	r3, 80129c2 <__swbuf_r+0x12>
 80129be:	f7ff f867 	bl	8011a90 <__sinit>
 80129c2:	69a3      	ldr	r3, [r4, #24]
 80129c4:	60a3      	str	r3, [r4, #8]
 80129c6:	89a3      	ldrh	r3, [r4, #12]
 80129c8:	071a      	lsls	r2, r3, #28
 80129ca:	d525      	bpl.n	8012a18 <__swbuf_r+0x68>
 80129cc:	6923      	ldr	r3, [r4, #16]
 80129ce:	b31b      	cbz	r3, 8012a18 <__swbuf_r+0x68>
 80129d0:	6823      	ldr	r3, [r4, #0]
 80129d2:	6922      	ldr	r2, [r4, #16]
 80129d4:	1a98      	subs	r0, r3, r2
 80129d6:	6963      	ldr	r3, [r4, #20]
 80129d8:	b2f6      	uxtb	r6, r6
 80129da:	4283      	cmp	r3, r0
 80129dc:	4637      	mov	r7, r6
 80129de:	dc04      	bgt.n	80129ea <__swbuf_r+0x3a>
 80129e0:	4621      	mov	r1, r4
 80129e2:	4628      	mov	r0, r5
 80129e4:	f7ff ffaa 	bl	801293c <_fflush_r>
 80129e8:	b9e0      	cbnz	r0, 8012a24 <__swbuf_r+0x74>
 80129ea:	68a3      	ldr	r3, [r4, #8]
 80129ec:	3b01      	subs	r3, #1
 80129ee:	60a3      	str	r3, [r4, #8]
 80129f0:	6823      	ldr	r3, [r4, #0]
 80129f2:	1c5a      	adds	r2, r3, #1
 80129f4:	6022      	str	r2, [r4, #0]
 80129f6:	701e      	strb	r6, [r3, #0]
 80129f8:	6962      	ldr	r2, [r4, #20]
 80129fa:	1c43      	adds	r3, r0, #1
 80129fc:	429a      	cmp	r2, r3
 80129fe:	d004      	beq.n	8012a0a <__swbuf_r+0x5a>
 8012a00:	89a3      	ldrh	r3, [r4, #12]
 8012a02:	07db      	lsls	r3, r3, #31
 8012a04:	d506      	bpl.n	8012a14 <__swbuf_r+0x64>
 8012a06:	2e0a      	cmp	r6, #10
 8012a08:	d104      	bne.n	8012a14 <__swbuf_r+0x64>
 8012a0a:	4621      	mov	r1, r4
 8012a0c:	4628      	mov	r0, r5
 8012a0e:	f7ff ff95 	bl	801293c <_fflush_r>
 8012a12:	b938      	cbnz	r0, 8012a24 <__swbuf_r+0x74>
 8012a14:	4638      	mov	r0, r7
 8012a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a18:	4621      	mov	r1, r4
 8012a1a:	4628      	mov	r0, r5
 8012a1c:	f000 f806 	bl	8012a2c <__swsetup_r>
 8012a20:	2800      	cmp	r0, #0
 8012a22:	d0d5      	beq.n	80129d0 <__swbuf_r+0x20>
 8012a24:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012a28:	e7f4      	b.n	8012a14 <__swbuf_r+0x64>
	...

08012a2c <__swsetup_r>:
 8012a2c:	b538      	push	{r3, r4, r5, lr}
 8012a2e:	4b2a      	ldr	r3, [pc, #168]	; (8012ad8 <__swsetup_r+0xac>)
 8012a30:	4605      	mov	r5, r0
 8012a32:	6818      	ldr	r0, [r3, #0]
 8012a34:	460c      	mov	r4, r1
 8012a36:	b118      	cbz	r0, 8012a40 <__swsetup_r+0x14>
 8012a38:	6a03      	ldr	r3, [r0, #32]
 8012a3a:	b90b      	cbnz	r3, 8012a40 <__swsetup_r+0x14>
 8012a3c:	f7ff f828 	bl	8011a90 <__sinit>
 8012a40:	89a3      	ldrh	r3, [r4, #12]
 8012a42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012a46:	0718      	lsls	r0, r3, #28
 8012a48:	d422      	bmi.n	8012a90 <__swsetup_r+0x64>
 8012a4a:	06d9      	lsls	r1, r3, #27
 8012a4c:	d407      	bmi.n	8012a5e <__swsetup_r+0x32>
 8012a4e:	2309      	movs	r3, #9
 8012a50:	602b      	str	r3, [r5, #0]
 8012a52:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012a56:	81a3      	strh	r3, [r4, #12]
 8012a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012a5c:	e034      	b.n	8012ac8 <__swsetup_r+0x9c>
 8012a5e:	0758      	lsls	r0, r3, #29
 8012a60:	d512      	bpl.n	8012a88 <__swsetup_r+0x5c>
 8012a62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012a64:	b141      	cbz	r1, 8012a78 <__swsetup_r+0x4c>
 8012a66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012a6a:	4299      	cmp	r1, r3
 8012a6c:	d002      	beq.n	8012a74 <__swsetup_r+0x48>
 8012a6e:	4628      	mov	r0, r5
 8012a70:	f7ff fa5e 	bl	8011f30 <_free_r>
 8012a74:	2300      	movs	r3, #0
 8012a76:	6363      	str	r3, [r4, #52]	; 0x34
 8012a78:	89a3      	ldrh	r3, [r4, #12]
 8012a7a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012a7e:	81a3      	strh	r3, [r4, #12]
 8012a80:	2300      	movs	r3, #0
 8012a82:	6063      	str	r3, [r4, #4]
 8012a84:	6923      	ldr	r3, [r4, #16]
 8012a86:	6023      	str	r3, [r4, #0]
 8012a88:	89a3      	ldrh	r3, [r4, #12]
 8012a8a:	f043 0308 	orr.w	r3, r3, #8
 8012a8e:	81a3      	strh	r3, [r4, #12]
 8012a90:	6923      	ldr	r3, [r4, #16]
 8012a92:	b94b      	cbnz	r3, 8012aa8 <__swsetup_r+0x7c>
 8012a94:	89a3      	ldrh	r3, [r4, #12]
 8012a96:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012a9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012a9e:	d003      	beq.n	8012aa8 <__swsetup_r+0x7c>
 8012aa0:	4621      	mov	r1, r4
 8012aa2:	4628      	mov	r0, r5
 8012aa4:	f000 f861 	bl	8012b6a <__smakebuf_r>
 8012aa8:	89a0      	ldrh	r0, [r4, #12]
 8012aaa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012aae:	f010 0301 	ands.w	r3, r0, #1
 8012ab2:	d00a      	beq.n	8012aca <__swsetup_r+0x9e>
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	60a3      	str	r3, [r4, #8]
 8012ab8:	6963      	ldr	r3, [r4, #20]
 8012aba:	425b      	negs	r3, r3
 8012abc:	61a3      	str	r3, [r4, #24]
 8012abe:	6923      	ldr	r3, [r4, #16]
 8012ac0:	b943      	cbnz	r3, 8012ad4 <__swsetup_r+0xa8>
 8012ac2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012ac6:	d1c4      	bne.n	8012a52 <__swsetup_r+0x26>
 8012ac8:	bd38      	pop	{r3, r4, r5, pc}
 8012aca:	0781      	lsls	r1, r0, #30
 8012acc:	bf58      	it	pl
 8012ace:	6963      	ldrpl	r3, [r4, #20]
 8012ad0:	60a3      	str	r3, [r4, #8]
 8012ad2:	e7f4      	b.n	8012abe <__swsetup_r+0x92>
 8012ad4:	2000      	movs	r0, #0
 8012ad6:	e7f7      	b.n	8012ac8 <__swsetup_r+0x9c>
 8012ad8:	2000010c 	.word	0x2000010c

08012adc <memmove>:
 8012adc:	4288      	cmp	r0, r1
 8012ade:	b510      	push	{r4, lr}
 8012ae0:	eb01 0402 	add.w	r4, r1, r2
 8012ae4:	d902      	bls.n	8012aec <memmove+0x10>
 8012ae6:	4284      	cmp	r4, r0
 8012ae8:	4623      	mov	r3, r4
 8012aea:	d807      	bhi.n	8012afc <memmove+0x20>
 8012aec:	1e43      	subs	r3, r0, #1
 8012aee:	42a1      	cmp	r1, r4
 8012af0:	d008      	beq.n	8012b04 <memmove+0x28>
 8012af2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012af6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012afa:	e7f8      	b.n	8012aee <memmove+0x12>
 8012afc:	4402      	add	r2, r0
 8012afe:	4601      	mov	r1, r0
 8012b00:	428a      	cmp	r2, r1
 8012b02:	d100      	bne.n	8012b06 <memmove+0x2a>
 8012b04:	bd10      	pop	{r4, pc}
 8012b06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012b0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012b0e:	e7f7      	b.n	8012b00 <memmove+0x24>

08012b10 <abort>:
 8012b10:	b508      	push	{r3, lr}
 8012b12:	2006      	movs	r0, #6
 8012b14:	f000 f88e 	bl	8012c34 <raise>
 8012b18:	2001      	movs	r0, #1
 8012b1a:	f7ee fe7f 	bl	800181c <_exit>

08012b1e <__swhatbuf_r>:
 8012b1e:	b570      	push	{r4, r5, r6, lr}
 8012b20:	460c      	mov	r4, r1
 8012b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b26:	2900      	cmp	r1, #0
 8012b28:	b096      	sub	sp, #88	; 0x58
 8012b2a:	4615      	mov	r5, r2
 8012b2c:	461e      	mov	r6, r3
 8012b2e:	da0d      	bge.n	8012b4c <__swhatbuf_r+0x2e>
 8012b30:	89a3      	ldrh	r3, [r4, #12]
 8012b32:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012b36:	f04f 0100 	mov.w	r1, #0
 8012b3a:	bf0c      	ite	eq
 8012b3c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012b40:	2340      	movne	r3, #64	; 0x40
 8012b42:	2000      	movs	r0, #0
 8012b44:	6031      	str	r1, [r6, #0]
 8012b46:	602b      	str	r3, [r5, #0]
 8012b48:	b016      	add	sp, #88	; 0x58
 8012b4a:	bd70      	pop	{r4, r5, r6, pc}
 8012b4c:	466a      	mov	r2, sp
 8012b4e:	f000 f879 	bl	8012c44 <_fstat_r>
 8012b52:	2800      	cmp	r0, #0
 8012b54:	dbec      	blt.n	8012b30 <__swhatbuf_r+0x12>
 8012b56:	9901      	ldr	r1, [sp, #4]
 8012b58:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012b5c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012b60:	4259      	negs	r1, r3
 8012b62:	4159      	adcs	r1, r3
 8012b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012b68:	e7eb      	b.n	8012b42 <__swhatbuf_r+0x24>

08012b6a <__smakebuf_r>:
 8012b6a:	898b      	ldrh	r3, [r1, #12]
 8012b6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012b6e:	079d      	lsls	r5, r3, #30
 8012b70:	4606      	mov	r6, r0
 8012b72:	460c      	mov	r4, r1
 8012b74:	d507      	bpl.n	8012b86 <__smakebuf_r+0x1c>
 8012b76:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012b7a:	6023      	str	r3, [r4, #0]
 8012b7c:	6123      	str	r3, [r4, #16]
 8012b7e:	2301      	movs	r3, #1
 8012b80:	6163      	str	r3, [r4, #20]
 8012b82:	b002      	add	sp, #8
 8012b84:	bd70      	pop	{r4, r5, r6, pc}
 8012b86:	ab01      	add	r3, sp, #4
 8012b88:	466a      	mov	r2, sp
 8012b8a:	f7ff ffc8 	bl	8012b1e <__swhatbuf_r>
 8012b8e:	9900      	ldr	r1, [sp, #0]
 8012b90:	4605      	mov	r5, r0
 8012b92:	4630      	mov	r0, r6
 8012b94:	f7fe fd44 	bl	8011620 <_malloc_r>
 8012b98:	b948      	cbnz	r0, 8012bae <__smakebuf_r+0x44>
 8012b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b9e:	059a      	lsls	r2, r3, #22
 8012ba0:	d4ef      	bmi.n	8012b82 <__smakebuf_r+0x18>
 8012ba2:	f023 0303 	bic.w	r3, r3, #3
 8012ba6:	f043 0302 	orr.w	r3, r3, #2
 8012baa:	81a3      	strh	r3, [r4, #12]
 8012bac:	e7e3      	b.n	8012b76 <__smakebuf_r+0xc>
 8012bae:	89a3      	ldrh	r3, [r4, #12]
 8012bb0:	6020      	str	r0, [r4, #0]
 8012bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012bb6:	81a3      	strh	r3, [r4, #12]
 8012bb8:	9b00      	ldr	r3, [sp, #0]
 8012bba:	6163      	str	r3, [r4, #20]
 8012bbc:	9b01      	ldr	r3, [sp, #4]
 8012bbe:	6120      	str	r0, [r4, #16]
 8012bc0:	b15b      	cbz	r3, 8012bda <__smakebuf_r+0x70>
 8012bc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012bc6:	4630      	mov	r0, r6
 8012bc8:	f000 f84e 	bl	8012c68 <_isatty_r>
 8012bcc:	b128      	cbz	r0, 8012bda <__smakebuf_r+0x70>
 8012bce:	89a3      	ldrh	r3, [r4, #12]
 8012bd0:	f023 0303 	bic.w	r3, r3, #3
 8012bd4:	f043 0301 	orr.w	r3, r3, #1
 8012bd8:	81a3      	strh	r3, [r4, #12]
 8012bda:	89a3      	ldrh	r3, [r4, #12]
 8012bdc:	431d      	orrs	r5, r3
 8012bde:	81a5      	strh	r5, [r4, #12]
 8012be0:	e7cf      	b.n	8012b82 <__smakebuf_r+0x18>

08012be2 <_raise_r>:
 8012be2:	291f      	cmp	r1, #31
 8012be4:	b538      	push	{r3, r4, r5, lr}
 8012be6:	4604      	mov	r4, r0
 8012be8:	460d      	mov	r5, r1
 8012bea:	d904      	bls.n	8012bf6 <_raise_r+0x14>
 8012bec:	2316      	movs	r3, #22
 8012bee:	6003      	str	r3, [r0, #0]
 8012bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012bf4:	bd38      	pop	{r3, r4, r5, pc}
 8012bf6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012bf8:	b112      	cbz	r2, 8012c00 <_raise_r+0x1e>
 8012bfa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012bfe:	b94b      	cbnz	r3, 8012c14 <_raise_r+0x32>
 8012c00:	4620      	mov	r0, r4
 8012c02:	f000 f853 	bl	8012cac <_getpid_r>
 8012c06:	462a      	mov	r2, r5
 8012c08:	4601      	mov	r1, r0
 8012c0a:	4620      	mov	r0, r4
 8012c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c10:	f000 b83a 	b.w	8012c88 <_kill_r>
 8012c14:	2b01      	cmp	r3, #1
 8012c16:	d00a      	beq.n	8012c2e <_raise_r+0x4c>
 8012c18:	1c59      	adds	r1, r3, #1
 8012c1a:	d103      	bne.n	8012c24 <_raise_r+0x42>
 8012c1c:	2316      	movs	r3, #22
 8012c1e:	6003      	str	r3, [r0, #0]
 8012c20:	2001      	movs	r0, #1
 8012c22:	e7e7      	b.n	8012bf4 <_raise_r+0x12>
 8012c24:	2400      	movs	r4, #0
 8012c26:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012c2a:	4628      	mov	r0, r5
 8012c2c:	4798      	blx	r3
 8012c2e:	2000      	movs	r0, #0
 8012c30:	e7e0      	b.n	8012bf4 <_raise_r+0x12>
	...

08012c34 <raise>:
 8012c34:	4b02      	ldr	r3, [pc, #8]	; (8012c40 <raise+0xc>)
 8012c36:	4601      	mov	r1, r0
 8012c38:	6818      	ldr	r0, [r3, #0]
 8012c3a:	f7ff bfd2 	b.w	8012be2 <_raise_r>
 8012c3e:	bf00      	nop
 8012c40:	2000010c 	.word	0x2000010c

08012c44 <_fstat_r>:
 8012c44:	b538      	push	{r3, r4, r5, lr}
 8012c46:	4d07      	ldr	r5, [pc, #28]	; (8012c64 <_fstat_r+0x20>)
 8012c48:	2300      	movs	r3, #0
 8012c4a:	4604      	mov	r4, r0
 8012c4c:	4608      	mov	r0, r1
 8012c4e:	4611      	mov	r1, r2
 8012c50:	602b      	str	r3, [r5, #0]
 8012c52:	f7ee fe32 	bl	80018ba <_fstat>
 8012c56:	1c43      	adds	r3, r0, #1
 8012c58:	d102      	bne.n	8012c60 <_fstat_r+0x1c>
 8012c5a:	682b      	ldr	r3, [r5, #0]
 8012c5c:	b103      	cbz	r3, 8012c60 <_fstat_r+0x1c>
 8012c5e:	6023      	str	r3, [r4, #0]
 8012c60:	bd38      	pop	{r3, r4, r5, pc}
 8012c62:	bf00      	nop
 8012c64:	2000e1cc 	.word	0x2000e1cc

08012c68 <_isatty_r>:
 8012c68:	b538      	push	{r3, r4, r5, lr}
 8012c6a:	4d06      	ldr	r5, [pc, #24]	; (8012c84 <_isatty_r+0x1c>)
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	4604      	mov	r4, r0
 8012c70:	4608      	mov	r0, r1
 8012c72:	602b      	str	r3, [r5, #0]
 8012c74:	f7ee fe31 	bl	80018da <_isatty>
 8012c78:	1c43      	adds	r3, r0, #1
 8012c7a:	d102      	bne.n	8012c82 <_isatty_r+0x1a>
 8012c7c:	682b      	ldr	r3, [r5, #0]
 8012c7e:	b103      	cbz	r3, 8012c82 <_isatty_r+0x1a>
 8012c80:	6023      	str	r3, [r4, #0]
 8012c82:	bd38      	pop	{r3, r4, r5, pc}
 8012c84:	2000e1cc 	.word	0x2000e1cc

08012c88 <_kill_r>:
 8012c88:	b538      	push	{r3, r4, r5, lr}
 8012c8a:	4d07      	ldr	r5, [pc, #28]	; (8012ca8 <_kill_r+0x20>)
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	4604      	mov	r4, r0
 8012c90:	4608      	mov	r0, r1
 8012c92:	4611      	mov	r1, r2
 8012c94:	602b      	str	r3, [r5, #0]
 8012c96:	f7ee fdb1 	bl	80017fc <_kill>
 8012c9a:	1c43      	adds	r3, r0, #1
 8012c9c:	d102      	bne.n	8012ca4 <_kill_r+0x1c>
 8012c9e:	682b      	ldr	r3, [r5, #0]
 8012ca0:	b103      	cbz	r3, 8012ca4 <_kill_r+0x1c>
 8012ca2:	6023      	str	r3, [r4, #0]
 8012ca4:	bd38      	pop	{r3, r4, r5, pc}
 8012ca6:	bf00      	nop
 8012ca8:	2000e1cc 	.word	0x2000e1cc

08012cac <_getpid_r>:
 8012cac:	f7ee bd9e 	b.w	80017ec <_getpid>

08012cb0 <_init>:
 8012cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cb2:	bf00      	nop
 8012cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cb6:	bc08      	pop	{r3}
 8012cb8:	469e      	mov	lr, r3
 8012cba:	4770      	bx	lr

08012cbc <_fini>:
 8012cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cbe:	bf00      	nop
 8012cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cc2:	bc08      	pop	{r3}
 8012cc4:	469e      	mov	lr, r3
 8012cc6:	4770      	bx	lr
